






Started logging.

>>>
Content-Length: 2097

{"method":"initialize","params":{"processId":14189,"rootPath":"/tmp/arduino-language-server115944645/sketch","rootUri":"file:///tmp/arduino-language-server115944645/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 9353

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\n//#include \u003cArduino.h\u003e\n// For IMU\n#include \u003cAdafruit_LSM6DS33.h\u003e\n#include \u003cAdafruit_Sensor.h\u003e\n\n//For WiFi and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\n//  Create sensor object\nAdafruit_LSM6DS33 imu;\n\n//  Create sensor object\nsensors_event_t a,g,temp;\nfloat accX, accY, accZ,\n      accRoll,      accPitch,     accYaw;            // units degrees (roll and pitch noisy, yaw not possible)\n\n\n// LDR sensor pin\nconst int ldrPin=34;\n// Flashed pins\nconst int rightPin=13;\nconst int leftPin=14;\nconst int lightPin=12;\nint lightInit; // initial value\n//Receiver MAC Address\n//C4:4F:33:6B:0F:E1\nuint8_t broadcastAddress[] = {0xC4, 0x4F, 0x33, 0x6B, 0x0F, 0xE1};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct masterMessage {\n  float roll;\n  float pitch;\n  int lightSensor;\n} masterMessage;\n\ntypedef struct receivedMessage{\n  bool imuUsage;\n  //String rec_message;\n}receivedMessage;\n\n// Define the masterMessage\nmasterMessage msgToSlave;\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nreceivedMessage messageFromSlave;\n\n// String receivedString; \n// Variable to store if sending data was successful\nString success;\n// Should be global ... ( TODO -\u003e Check why ???)\nesp_now_peer_info_t peerInfo;\n\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW();\n#line 83 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initIMU();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initLDRSensor();\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPrint();\n#line 124 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPlotter();\n#line 139 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 150 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 160 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getAccReadings();\n#line 169 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getLDRReadings();\n#line 175 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid doCalculations();\n#line 183 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid blinking(int pin);\n#line 198 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid checkAlarms();\n#line 217 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task1(void * parameters);\n#line 242 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task2(void * parameters);\n#line 249 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid setup();\n#line 281 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid loop();\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  //esp_now_peer_info_t peerInfo;\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\nvoid initIMU(){\n  while (!Serial)\n    delay(10); // will pause Zero, Leonardo, etc until serial console opens\n\n  Serial.println(\"Adafruit LSM6DS33 test!\");\n\n  if (!imu.begin_I2C()) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS)) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS, LSM_SCK, LSM_MISO, LSM_MOSI)) {\n    Serial.println(\"Failed to find LSM6DS33 chip\");\n    while (1) {\n      delay(10);\n    }\n  }  \n  Serial.println(\"Adafruit LSM6DS33 FOUND!\");\n}\n\nvoid initLDRSensor(){\n  //we will take a single reading from the light sensor and store it in the lightCal        \n  //variable. This will give us a prelinary value to compare against in the loop\n  pinMode(ldrPin, INPUT);\n  // lightInit=analogRead(ldrPin);\n}\n\nvoid serialPrint(){\n  Serial.print(\"X: \");\n  Serial.print(accX);\n  Serial.print(\"  Y: \");\n  Serial.print(accY);\n  Serial.print(\"  Z: \");\n  Serial.print(accZ);\n  Serial.print(\"  Roll: \");\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"  Pitch: \");\n  Serial.print(msgToSlave.pitch);\n  Serial.print(\"  Light: \");\n  Serial.print(msgToSlave.lightSensor);\n  Serial.println();\n\n}\n\nvoid serialPlotter(){\n  // Serial.print(accX);\n  // Serial.print(accY);\n  // Serial.print(accZ);\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"\\t\");\n  Serial.println(msgToSlave.pitch);\n  \n  // Serial.print(\"  Light: \");\n  // Serial.print(msgToSlave.lightSensor);\n  // Serial.println();\n\n}\n\n// Callback Function that sents message\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  //Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  //Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    success = \"Delivery Success :)\";\n  }\n  else{\n    success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026messageFromSlave,incomingData, sizeof(messageFromSlave));\n  //Just for debug\n  //Serial.print(\"Bytes received: \");\n  //Serial.println(len);\n\n  // Write the data that have been sent\n  // receivedString = messageFromSlave.rec_message;\n  \n}\nvoid getAccReadings(){\n  imu.getEvent(\u0026a, \u0026g, \u0026temp);\n  // Get current acceleration values\n  accX = a.acceleration.x;\n  accY = a.acceleration.y;\n  accZ = a.acceleration.z;\n}\n\n\nvoid getLDRReadings(){\n  // Read the current light Levels\n  // lightInit=\n  msgToSlave.lightSensor=analogRead(ldrPin);\n}\n\nvoid doCalculations() {\n  /*\n  Calculate Roll and pitch and save them into the structure message\n  */\n  msgToSlave.roll = atan2(accY, accZ) * 180/M_PI;\n  msgToSlave.pitch = atan2(-accX, sqrt(accY*accY + accZ*accZ)) * 180/M_PI;\n}\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (msgToSlave.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n  if (msgToSlave.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (msgToSlave.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  \n}\n\n\nvoid task1(void * parameters){\n  for(;;){\n    Serial.print(\"Task 1\");\n    //Get accelation readings\n    getAccReadings();\n    getLDRReadings();\n    doCalculations();\n    \n    // Send message via ESP-NOW\n    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) \u0026msgToSlave, sizeof(msgToSlave));\n    \n    if (result == ESP_OK) {\n      // Serial.println(\"Sent with success\");\n    }\n    else {\n      // Serial.println(\"Error sending the data\");\n    }\n    // Delay should be reduced ? \n    // serialPrint();\n    serialPlotter();\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n}\n\nvoid task2(void * parameters){\n  for(;;){\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n}\n\nvoid setup(){\n  Serial.begin(115200);\n  initIMU();\n  initLDRSensor();\n  initESPNOW();\n\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n\n  xTaskCreate(\n    task1, // function name\n    \"Task1\", // task name\n    2000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n  delay(500);\n  xTaskCreate(\n    task2, // function name\n    \"Task2\", // task name\n    1000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n}\n\n\n\nvoid loop(){\n\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 170

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":2},"end":{"line":151,"character":27}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/62","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/62","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/62","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/62","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/62","percentage":1.6129032258064515}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/62","percentage":1.6129032258064515}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/62","percentage":3.225806451612903}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/62","percentage":3.225806451612903}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/62","percentage":4.838709677419355}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/62","percentage":4.838709677419355}}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":1}}Content-Length: 11742

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":156},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":170},"start":{"character":0,"line":158}},"selectionRange":{"end":{"character":18,"line":158},"start":{"character":5,"line":158}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":182},"start":{"character":0,"line":173}},"selectionRange":{"end":{"character":15,"line":173},"start":{"character":5,"line":173}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":193},"start":{"character":0,"line":184}},"selectionRange":{"end":{"character":15,"line":184},"start":{"character":5,"line":184}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":200},"start":{"character":0,"line":194}},"selectionRange":{"end":{"character":19,"line":194},"start":{"character":5,"line":194}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":207},"start":{"character":0,"line":203}},"selectionRange":{"end":{"character":19,"line":203},"start":{"character":5,"line":203}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":215},"start":{"character":0,"line":209}},"selectionRange":{"end":{"character":19,"line":209},"start":{"character":5,"line":209}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":230},"start":{"character":0,"line":217}},"selectionRange":{"end":{"character":13,"line":217},"start":{"character":5,"line":217}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":248},"start":{"character":0,"line":232}},"selectionRange":{"end":{"character":16,"line":232},"start":{"character":5,"line":232}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":251}},"selectionRange":{"end":{"character":10,"line":251},"start":{"character":5,"line":251}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":281},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":311},"start":{"character":0,"line":283}},"selectionRange":{"end":{"character":10,"line":283},"start":{"character":5,"line":283}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":317},"start":{"character":0,"line":315}},"selectionRange":{"end":{"character":9,"line":315},"start":{"character":5,"line":315}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/62","percentage":6.4516129032258061}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/62","percentage":6.4516129032258061}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/62","percentage":8.064516129032258}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/62","percentage":8.064516129032258}}}Content-Length: 157

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/62","percentage":9.67741935483871}}}Content-Length: 157

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/62","percentage":9.67741935483871}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/62","percentage":11.290322580645162}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/62","percentage":11.290322580645162}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/62","percentage":12.903225806451612}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/62","percentage":12.903225806451612}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/62","percentage":14.516129032258064}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/62","percentage":14.516129032258064}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/62","percentage":16.129032258064516}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/62","percentage":16.129032258064516}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/62","percentage":17.741935483870968}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/62","percentage":17.741935483870968}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/62","percentage":19.35483870967742}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/62","percentage":19.35483870967742}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/62","percentage":20.967741935483872}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/62","percentage":20.967741935483872}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/62","percentage":22.580645161290324}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/62","percentage":22.580645161290324}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/62","percentage":24.193548387096776}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/62","percentage":24.193548387096776}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/62","percentage":25.806451612903224}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/62","percentage":25.806451612903224}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/62","percentage":27.419354838709676}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/62","percentage":27.419354838709676}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/62","percentage":29.032258064516128}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/62","percentage":29.032258064516128}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/62","percentage":30.64516129032258}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/62","percentage":30.64516129032258}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/62","percentage":32.258064516129032}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/62","percentage":32.258064516129032}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/62","percentage":33.87096774193548}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/62","percentage":33.87096774193548}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/62","percentage":35.483870967741936}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/62","percentage":35.483870967741936}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/62","percentage":37.096774193548384}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/62","percentage":37.096774193548384}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/62","percentage":38.70967741935484}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/62","percentage":38.70967741935484}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/62","percentage":40.322580645161288}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/62","percentage":40.322580645161288}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/62","percentage":41.935483870967744}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/62","percentage":41.935483870967744}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/62","percentage":43.548387096774192}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/62","percentage":43.548387096774192}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/62","percentage":45.161290322580648}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/62","percentage":45.161290322580648}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"29/62","percentage":46.774193548387096}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"29/62","percentage":46.774193548387096}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"30/62","percentage":48.387096774193552}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"30/62","percentage":48.387096774193552}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"31/62","percentage":50}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"31/62","percentage":50}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"32/62","percentage":51.612903225806448}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"32/62","percentage":51.612903225806448}}}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":2},"contentChanges":[{"range":{"start":{"line":148,"character":2},"end":{"line":151,"character":27}},"rangeLength":115,"text":"v"}]},"jsonrpc":"2.0"}Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":3},"contentChanges":[{"range":{"start":{"line":148,"character":3},"end":{"line":148,"character":3}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":4},"end":{"line":148,"character":4}},"context":{"diagnostics":[]}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":3,"jsonrpc":"2.0","result":[]}Content-Length: 1412

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":3}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":4},"end":{"line":148,"character":4}},"context":{"diagnostics":[]}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":4,"jsonrpc":"2.0","result":[]}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"33/62","percentage":53.225806451612904}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"33/62","percentage":53.225806451612904}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"34/62","percentage":54.838709677419352}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"34/62","percentage":54.838709677419352}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"35/62","percentage":56.451612903225808}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"35/62","percentage":56.451612903225808}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"36/62","percentage":58.064516129032256}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"36/62","percentage":58.064516129032256}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"37/62","percentage":59.677419354838712}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"37/62","percentage":59.677419354838712}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"38/62","percentage":61.29032258064516}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"38/62","percentage":61.29032258064516}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"39/62","percentage":62.903225806451616}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"39/62","percentage":62.903225806451616}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"40/62","percentage":64.516129032258064}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"40/62","percentage":64.516129032258064}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"41/62","percentage":66.129032258064512}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"41/62","percentage":66.129032258064512}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"42/62","percentage":67.741935483870961}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"42/62","percentage":67.741935483870961}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"43/62","percentage":69.354838709677423}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"43/62","percentage":69.354838709677423}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"44/62","percentage":70.967741935483872}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"44/62","percentage":70.967741935483872}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"45/62","percentage":72.58064516129032}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"45/62","percentage":72.58064516129032}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"46/62","percentage":74.193548387096769}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"46/62","percentage":74.193548387096769}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"47/62","percentage":75.806451612903231}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"47/62","percentage":75.806451612903231}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"48/62","percentage":77.41935483870968}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"48/62","percentage":77.41935483870968}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"49/62","percentage":79.032258064516128}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"49/62","percentage":79.032258064516128}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"50/62","percentage":80.645161290322577}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"50/62","percentage":80.645161290322577}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"51/62","percentage":82.258064516129039}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"51/62","percentage":82.258064516129039}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"52/62","percentage":83.870967741935488}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"52/62","percentage":83.870967741935488}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"53/62","percentage":85.483870967741936}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"53/62","percentage":85.483870967741936}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"54/62","percentage":87.096774193548384}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"54/62","percentage":87.096774193548384}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"55/62","percentage":88.709677419354833}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"55/62","percentage":88.709677419354833}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"56/62","percentage":90.322580645161295}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"56/62","percentage":90.322580645161295}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"57/62","percentage":91.935483870967744}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"57/62","percentage":91.935483870967744}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"58/62","percentage":93.548387096774192}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"58/62","percentage":93.548387096774192}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"59/62","percentage":95.161290322580641}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"60/62","percentage":96.774193548387103}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"61/62","percentage":98.387096774193552}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 9237

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":4},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\n//#include \u003cArduino.h\u003e\n// For IMU\n#include \u003cAdafruit_LSM6DS33.h\u003e\n#include \u003cAdafruit_Sensor.h\u003e\n\n//For WiFi and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\n//  Create sensor object\nAdafruit_LSM6DS33 imu;\n\n//  Create sensor object\nsensors_event_t a,g,temp;\nfloat accX, accY, accZ,\n      accRoll,      accPitch,     accYaw;            // units degrees (roll and pitch noisy, yaw not possible)\n\n\n// LDR sensor pin\nconst int ldrPin=34;\n// Flashed pins\nconst int rightPin=13;\nconst int leftPin=14;\nconst int lightPin=12;\nint lightInit; // initial value\n//Receiver MAC Address\n//C4:4F:33:6B:0F:E1\nuint8_t broadcastAddress[] = {0xC4, 0x4F, 0x33, 0x6B, 0x0F, 0xE1};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct masterMessage {\n  float roll;\n  float pitch;\n  int lightSensor;\n} masterMessage;\n\ntypedef struct receivedMessage{\n  bool imuUsage;\n  //String rec_message;\n}receivedMessage;\n\n// Define the masterMessage\nmasterMessage msgToSlave;\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nreceivedMessage messageFromSlave;\n\n// String receivedString; \n// Variable to store if sending data was successful\nString success;\n// Should be global ... ( TODO -\u003e Check why ???)\nesp_now_peer_info_t peerInfo;\n\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW();\n#line 83 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initIMU();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initLDRSensor();\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPrint();\n#line 121 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPlotter();\n#line 136 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 147 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 157 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getAccReadings();\n#line 166 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getLDRReadings();\n#line 172 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid doCalculations();\n#line 180 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid blinking(int pin);\n#line 195 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid checkAlarms();\n#line 214 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task1(void * parameters);\n#line 239 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task2(void * parameters);\n#line 246 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid setup();\n#line 278 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid loop();\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  //esp_now_peer_info_t peerInfo;\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\nvoid initIMU(){\n  while (!Serial)\n    delay(10); // will pause Zero, Leonardo, etc until serial console opens\n\n  Serial.println(\"Adafruit LSM6DS33 test!\");\n\n  if (!imu.begin_I2C()) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS)) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS, LSM_SCK, LSM_MISO, LSM_MOSI)) {\n    Serial.println(\"Failed to find LSM6DS33 chip\");\n    while (1) {\n      delay(10);\n    }\n  }  \n  Serial.println(\"Adafruit LSM6DS33 FOUND!\");\n}\n\nvoid initLDRSensor(){\n  //we will take a single reading from the light sensor and store it in the lightCal        \n  //variable. This will give us a prelinary value to compare against in the loop\n  pinMode(ldrPin, INPUT);\n  // lightInit=analogRead(ldrPin);\n}\n\nvoid serialPrint(){\n  Serial.print(\"X: \");\n  Serial.print(accX);\n  Serial.print(\"  Y: \");\n  Serial.print(accY);\n  Serial.print(\"  Z: \");\n  Serial.print(accZ);\n  v itch);\n  Serial.print(\"  Light: \");\n  Serial.print(msgToSlave.lightSensor);\n  Serial.println();\n\n}\n\nvoid serialPlotter(){\n  // Serial.print(accX);\n  // Serial.print(accY);\n  // Serial.print(accZ);\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"\\t\");\n  Serial.println(msgToSlave.pitch);\n  \n  // Serial.print(\"  Light: \");\n  // Serial.print(msgToSlave.lightSensor);\n  // Serial.println();\n\n}\n\n// Callback Function that sents message\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  //Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  //Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    success = \"Delivery Success :)\";\n  }\n  else{\n    success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026messageFromSlave,incomingData, sizeof(messageFromSlave));\n  //Just for debug\n  //Serial.print(\"Bytes received: \");\n  //Serial.println(len);\n\n  // Write the data that have been sent\n  // receivedString = messageFromSlave.rec_message;\n  \n}\nvoid getAccReadings(){\n  imu.getEvent(\u0026a, \u0026g, \u0026temp);\n  // Get current acceleration values\n  accX = a.acceleration.x;\n  accY = a.acceleration.y;\n  accZ = a.acceleration.z;\n}\n\n\nvoid getLDRReadings(){\n  // Read the current light Levels\n  // lightInit=\n  msgToSlave.lightSensor=analogRead(ldrPin);\n}\n\nvoid doCalculations() {\n  /*\n  Calculate Roll and pitch and save them into the structure message\n  */\n  msgToSlave.roll = atan2(accY, accZ) * 180/M_PI;\n  msgToSlave.pitch = atan2(-accX, sqrt(accY*accY + accZ*accZ)) * 180/M_PI;\n}\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (msgToSlave.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n  if (msgToSlave.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (msgToSlave.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  \n}\n\n\nvoid task1(void * parameters){\n  for(;;){\n    Serial.print(\"Task 1\");\n    //Get accelation readings\n    getAccReadings();\n    getLDRReadings();\n    doCalculations();\n    \n    // Send message via ESP-NOW\n    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) \u0026msgToSlave, sizeof(msgToSlave));\n    \n    if (result == ESP_OK) {\n      // Serial.println(\"Sent with success\");\n    }\n    else {\n      // Serial.println(\"Error sending the data\");\n    }\n    // Delay should be reduced ? \n    // serialPrint();\n    serialPlotter();\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n}\n\nvoid task2(void * parameters){\n  for(;;){\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n}\n\nvoid setup(){\n  Serial.begin(115200);\n  initIMU();\n  initLDRSensor();\n  initESPNOW();\n\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n\n  xTaskCreate(\n    task1, // function name\n    \"Task1\", // task name\n    2000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n  delay(500);\n  xTaskCreate(\n    task2, // function name\n    \"Task2\", // task name\n    1000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n}\n\n\n\nvoid loop(){\n\n}\n\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4046

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'Arduino.h' file not found","range":{"end":{"character":20,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Adafruit_LSM6DS33'","range":{"end":{"character":17,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'sensors_event_t'","range":{"end":{"character":15,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t'","range":{"end":{"character":7,"line":29},"start":{"character":0,"line":29}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'String'","range":{"end":{"character":6,"line":51},"start":{"character":0,"line":51}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'esp_now_peer_info_t'","range":{"end":{"character":19,"line":53},"start":{"character":0,"line":53}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t'","range":{"end":{"character":29,"line":66},"start":{"character":22,"line":66}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'esp_now_send_status_t'","range":{"end":{"character":62,"line":66},"start":{"character":41,"line":66}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t'","range":{"end":{"character":29,"line":68},"start":{"character":22,"line":68}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t'","range":{"end":{"character":50,"line":68},"start":{"character":43,"line":68}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'WiFi'","range":{"end":{"character":6,"line":89},"start":{"character":2,"line":89}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'WIFI_MODE_STA'","range":{"end":{"character":25,"line":89},"start":{"character":12,"line":89}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":8,"line":90},"start":{"character":2,"line":90}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'WiFi'","range":{"end":{"character":21,"line":90},"start":{"character":17,"line":90}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'esp_now_init'","range":{"end":{"character":18,"line":92},"start":{"character":6,"line":92}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ESP_OK'","range":{"end":{"character":30,"line":92},"start":{"character":24,"line":92}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":10,"line":93},"start":{"character":4,"line":93}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ESP_OK'","range":{"end":{"character":43,"line":108},"start":{"character":37,"line":108}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":10,"line":109},"start":{"character":4,"line":109}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":16,"line":118},"start":{"character":10,"line":118}},"severity":1,"source":"clang"},{"code":"fatal_too_many_errors","message":"Too many errors emitted, stopping now","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":4}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":4},"end":{"line":148,"character":4}},"context":{"diagnostics":[]}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":5,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 170

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 11164

{"id":6,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":271},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":278},"start":{"character":0,"line":273}},"selectionRange":{"end":{"character":10,"line":273},"start":{"character":5,"line":273}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":308},"start":{"character":0,"line":280}},"selectionRange":{"end":{"character":10,"line":280},"start":{"character":5,"line":280}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":314},"start":{"character":0,"line":312}},"selectionRange":{"end":{"character":9,"line":312},"start":{"character":5,"line":312}}}]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":174,"character":32}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":7,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":165,"character":22},"end":{"line":165,"character":22}},"context":{"diagnostics":[]}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":8,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":257,"character":18}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 283

{"id":9,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `result`  \n\n---\nType: `int`  \nSend message via ESP-NOW  \n\n---\n```cpp\n// In task1\npublic: int result\n```"},"range":{"end":{"character":20,"line":257},"start":{"character":14,"line":257}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":269,"character":18}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":10,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":269,"character":18},"end":{"line":269,"character":18}},"context":{"diagnostics":[]}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":11,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":3},"end":{"line":270,"character":3}},"context":{"diagnostics":[]}},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":12,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":5},"contentChanges":[{"range":{"start":{"line":270,"character":3},"end":{"line":270,"character":3}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":1,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":1,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":6},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":3},"context":{"triggerKind":1}},"id":13,"jsonrpc":"2.0"}
<<<
Content-Length: 57698

{"id":13,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"short","insertText":"short","insertTextFormat":2,"kind":14,"label":" short","score":8,"sortText":"3f000000short","textEdit":{"newText":"short","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"signed","insertText":"signed","insertTextFormat":2,"kind":14,"label":" signed","score":8,"sortText":"3f000000signed","textEdit":{"newText":"signed","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"size_t","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"kind":15,"label":" sizeof(expression-or-type)","score":8,"sortText":"3f000000sizeof","textEdit":{"newText":"sizeof(${0:expression-or-type})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"size_t","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"kind":15,"label":" sizeof...(parameter-pack)","score":8,"sortText":"3f000000sizeof...","textEdit":{"newText":"sizeof...(${0:parameter-pack})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static","insertText":"static","insertTextFormat":2,"kind":14,"label":" static","score":8,"sortText":"3f000000static","textEdit":{"newText":"static","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static_assert","insertText":"static_assert(${1:expression}, ${0:message});","insertTextFormat":2,"kind":15,"label":" static_assert(expression, message);","score":8,"sortText":"3f000000static_assert","textEdit":{"newText":"static_assert(${1:expression}, ${0:message});","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static_cast","insertText":"static_cast<${1:type}>(${0:expression})","insertTextFormat":2,"kind":15,"label":" static_cast<type>(expression)","score":8,"sortText":"3f000000static_cast","textEdit":{"newText":"static_cast<${1:type}>(${0:expression})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"struct","insertText":"struct","insertTextFormat":2,"kind":14,"label":" struct","score":8,"sortText":"3f000000struct","textEdit":{"newText":"struct","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"switch","insertText":"switch (${1:condition}) {\n${0:cases}\n}","insertTextFormat":2,"kind":15,"label":" switch (condition) {cases}","score":8,"sortText":"3f000000switch","textEdit":{"newText":"switch (${1:condition}) {\n${0:cases}\n}","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"int","documentation":{"kind":"markdown","value":"String receivedString;  \nVariable to store if sending data was successful"},"filterText":"success","insertText":"success","insertTextFormat":2,"kind":6,"label":" success","score":6.6000003814697266,"sortText":"3f2cccccsuccess","textEdit":{"newText":"success","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_DIS","insertText":"STICK_PARITY_DIS","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_DIS","score":1.2171710729598999,"sortText":"406433bdSTICK_PARITY_DIS","textEdit":{"newText":"STICK_PARITY_DIS","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_EN","insertText":"STICK_PARITY_EN","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_EN","score":1.2171710729598999,"sortText":"406433bdSTICK_PARITY_EN","textEdit":{"newText":"STICK_PARITY_EN","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"size_t","insertText":"size_t","insertTextFormat":2,"kind":8,"label":"•size_t","score":1.1973180770874023,"sortText":"4066be48size_t","textEdit":{"newText":"size_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":1.0767349004745483,"sortText":"40762d8dSerial","textEdit":{"newText":"Serial","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nThe string class"},"filterText":"String","insertText":"String","insertTextFormat":2,"kind":7,"label":"•String","score":1.0390032529830933,"sortText":"407b01f1String","textEdit":{"newText":"String","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":"•sensors_event_t","score":0.94521176815032959,"sortText":"408e069asensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Stream.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Stream.h\"`  \ncompatability macros for testing  \n#define getInt() parseInt()  \n#define getInt(skipChar) parseInt(skipchar)  \n#define getFloat() parseFloat()  \n#define getFloat(skipChar) parseFloat(skipChar)  \n#define getString( pre_string, post_string, buffer, length) readBytesBetween( pre_string, terminator, buffer, length)"},"filterText":"Stream","insertText":"Stream","insertTextFormat":2,"kind":7,"label":"•Stream","score":0.94037634134292603,"sortText":"408f437fStream","textEdit":{"newText":"Stream","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•strlen(const char *)","score":0.89631175994873047,"sortText":"409a8b50strlen","textEdit":{"newText":"strlen(${1:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`  \nmembers are in network byte order"},"filterText":"sockaddr_in","insertText":"sockaddr_in","insertTextFormat":2,"kind":22,"label":"•sockaddr_in","score":0.89158093929290771,"sortText":"409bc15asockaddr_in","textEdit":{"newText":"sockaddr_in","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ACCELEROMETER","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_AMBIENT_TEMPERATURE","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_COLOR","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_CURRENT","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_GYROSCOPE","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_LIGHT","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_LINEAR_ACCELERATION","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_MAGNETIC_FIELD","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ORIENTATION","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_PRESSURE","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_PROXIMITY","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_RELATIVE_HUMIDITY","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ROTATION_VECTOR","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_VOLTAGE","score":0.88832324743270874,"sortText":"409c96d9SENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":"•sensor_t","score":0.88832324743270874,"sortText":"409c96d9sensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":"•sensors_color_t","score":0.88832324743270874,"sortText":"409c96d9sensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":"•sensors_type_t","score":0.88832324743270874,"sortText":"409c96d9sensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":"•sensors_vec_t","score":0.88832324743270874,"sortText":"409c96d9sensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sockaddr","insertText":"sockaddr","insertTextFormat":2,"kind":22,"label":"•sockaddr","score":0.82838892936706543,"sortText":"40abeeb4sockaddr","textEdit":{"newText":"sockaddr","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"SDA","insertText":"SDA","insertTextFormat":2,"kind":6,"label":"•SDA","score":0.82743531465530396,"sortText":"40ac2d33SDA","textEdit":{"newText":"SDA","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaAttachPin","insertText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaAttachPin(uint8_t pin, uint8_t channel)","score":0.82743531465530396,"sortText":"40ac2d33sigmaDeltaAttachPin","textEdit":{"newText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaWrite","insertText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaWrite(uint8_t channel, uint8_t duty)","score":0.82743531465530396,"sortText":"40ac2d33sigmaDeltaWrite","textEdit":{"newText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Esp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Esp.h\"`"},"filterText":"sketchSize_t","insertText":"sketchSize_t","insertTextFormat":2,"kind":8,"label":"•sketchSize_t","score":0.82743531465530396,"sortText":"40ac2d33sketchSize_t","textEdit":{"newText":"sketchSize_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nHelper functions to translate frequency to clock divider and back"},"filterText":"spiFrequencyToClockDiv","insertText":"spiFrequencyToClockDiv(${1:uint32_t freq})","insertTextFormat":2,"kind":3,"label":"•spiFrequencyToClockDiv(uint32_t freq)","score":0.82743531465530396,"sortText":"40ac2d33spiFrequencyToClockDiv","textEdit":{"newText":"spiFrequencyToClockDiv(${1:uint32_t freq})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiGetClockDiv","insertText":"spiGetClockDiv(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiGetClockDiv(spi_t *spi)","score":0.82743531465530396,"sortText":"40ac2d33spiGetClockDiv","textEdit":{"newText":"spiGetClockDiv(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nDeactivate enabled SPI_CSx pins"},"filterText":"spiSSClear","insertText":"spiSSClear(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSClear(spi_t *spi)","score":0.82743531465530396,"sortText":"40ac2d33spiSSClear","textEdit":{"newText":"spiSSClear(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nEnable/Disable hardware control of SPI_CSx pins"},"filterText":"spiSSEnable","insertText":"spiSSEnable(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSEnable(spi_t *spi)","score":0.82743531465530396,"sortText":"40ac2d33spiSSEnable","textEdit":{"newText":"spiSSEnable(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"spi_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiStartBus","insertText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","insertTextFormat":2,"kind":3,"label":"•spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder)","score":0.82743531465530396,"sortText":"40ac2d33spiStartBus","textEdit":{"newText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteShortNL","insertText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteShortNL(spi_t *spi, uint16_t data)","score":0.82743531465530396,"sortText":"40ac2d33spiWriteShortNL","textEdit":{"newText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteWord","insertText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteWord(spi_t *spi, uint16_t data)","score":0.82743531465530396,"sortText":"40ac2d33spiWriteWord","textEdit":{"newText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"STA_CONNECTED_BIT","insertText":"STA_CONNECTED_BIT","insertTextFormat":2,"kind":6,"label":"•STA_CONNECTED_BIT","score":0.82101196050643921,"sortText":"40add229STA_CONNECTED_BIT","textEdit":{"newText":"STA_CONNECTED_BIT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_a","insertText":"step_a","insertTextFormat":2,"kind":20,"label":"•step_a","score":0.82101196050643921,"sortText":"40add229step_a","textEdit":{"newText":"step_a","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_b","insertText":"step_b","insertTextFormat":2,"kind":20,"label":"•step_b","score":0.82101196050643921,"sortText":"40add229step_b","textEdit":{"newText":"step_b","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nGetting SSID and password of target AP"},"filterText":"SC_STATUS_GETTING_SSID_PSWD","insertText":"SC_STATUS_GETTING_SSID_PSWD","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_GETTING_SSID_PSWD","score":0.81575304269790649,"sortText":"40af2acfSC_STATUS_GETTING_SSID_PSWD","textEdit":{"newText":"SC_STATUS_GETTING_SSID_PSWD","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nConnected to AP successfully"},"filterText":"SC_STATUS_LINK_OVER","insertText":"SC_STATUS_LINK_OVER","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_LINK_OVER","score":0.81575304269790649,"sortText":"40af2acfSC_STATUS_LINK_OVER","textEdit":{"newText":"SC_STATUS_LINK_OVER","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sntp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sntp_sync_mode_t","documentation":{"kind":"markdown","value":"From `\"sntp.h\"`  \nUpdate system time immediately when receiving a response from the SNTP server."},"filterText":"SNTP_SYNC_MODE_IMMED","insertText":"SNTP_SYNC_MODE_IMMED","insertTextFormat":2,"kind":20,"label":"•SNTP_SYNC_MODE_IMMED","score":0.81575304269790649,"sortText":"40af2acfSNTP_SYNC_MODE_IMMED","textEdit":{"newText":"SNTP_SYNC_MODE_IMMED","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":0.81575304269790649,"sortText":"40af2acfSYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":0.81575304269790649,"sortText":"40af2acfSYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":0.81575304269790649,"sortText":"40af2acfSYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \n@brief The callback of SmartConfig, executed when smart-config status changed.  \n@param status Status of SmartConfig:  \n\\- SC_STATUS_GETTING_SSID_PSWD : pdata is a pointer of smartconfig_type_t, means config type.  \n\\- SC_STATUS_LINK : pdata is a pointer to wifi_config_t.  \n\\- SC_STATUS_LINK_OVER : pdata is a pointer of phone's IP address(4 bytes) if pdata unequal NULL.  \n\\- otherwise : parameter void \\*pdata is NULL.  \n@param pdata According to the different status have different values."},"filterText":"sc_callback_t","insertText":"sc_callback_t","insertTextFormat":2,"kind":8,"label":"•sc_callback_t","score":0.81575304269790649,"sortText":"40af2acfsc_callback_t","textEdit":{"newText":"sc_callback_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"scanf","insertText":"scanf(${1:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•scanf(const char *, ...)","score":0.81575304269790649,"sortText":"40af2acfscanf","textEdit":{"newText":"scanf(${1:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":0.81575304269790649,"sortText":"40af2acfsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":0.81575304269790649,"sortText":"40af2acfsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":0.81575304269790649,"sortText":"40af2acfsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":0.81575304269790649,"sortText":"40af2acfsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinh","insertText":"sinh(${1:double})","insertTextFormat":2,"kind":3,"label":"•sinh(double)","score":0.81575304269790649,"sortText":"40af2acfsinh","textEdit":{"newText":"sinh(${1:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinhf","insertText":"sinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•sinhf(float)","score":0.81575304269790649,"sortText":"40af2acfsinhf","textEdit":{"newText":"sinhf(${1:float})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"siprintf","insertText":"siprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•siprintf(char *, const char *, ...)","score":0.81575304269790649,"sortText":"40af2acfsiprintf","textEdit":{"newText":"siprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"siscanf","insertText":"siscanf(${1:const char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•siscanf(const char *, const char *, ...)","score":0.81575304269790649,"sortText":"40af2acfsiscanf","textEdit":{"newText":"siscanf(${1:const char *}, ${2:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sniprintf","insertText":"sniprintf(${1:char *}, ${2:size_t}, ${3:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sniprintf(char *, size_t, const char *, ...)","score":0.81575304269790649,"sortText":"40af2acfsniprintf","textEdit":{"newText":"sniprintf(${1:char *}, ${2:size_t}, ${3:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"snprintf","insertText":"snprintf(${1:char *}, ${2:size_t}, ${3:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•snprintf(char *, size_t, const char *, ...)","score":0.81575304269790649,"sortText":"40af2acfsnprintf","textEdit":{"newText":"snprintf(${1:char *}, ${2:size_t}, ${3:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sntp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"sntp.h\"`  \n@brief This function updates the system time.  \nThis is a weak-linked function. It is possible to replace all SNTP update functionality by placing a sntp_sync_time() function in the app firmware source.  \nIf the default implementation is used, calling sntp_set_sync_mode() allows the time synchronization mode to be changed to instant or smooth.  \nIf a callback function is registered via sntp_set_time_sync_notification_cb(),  \nit will be called following time synchronization.  \n@param tv Time received from SNTP server."},"filterText":"sntp_sync_time","insertText":"sntp_sync_time(${1:struct timeval *tv})","insertTextFormat":2,"kind":3,"label":"•sntp_sync_time(struct timeval *tv)","score":0.81575304269790649,"sortText":"40af2acfsntp_sync_time","textEdit":{"newText":"sntp_sync_time(${1:struct timeval *tv})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const spi_flash_guard_funcs_t *","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Get the guard functions used for flash access  \n@return The guard functions that were set via spi_flash_guard_set(). These functions can be called if implementing custom low-level SPI flash operations."},"filterText":"spi_flash_guard_get","insertText":"spi_flash_guard_get()","insertTextFormat":2,"kind":3,"label":"•spi_flash_guard_get()","score":0.81575304269790649,"sortText":"40af2acfspi_flash_guard_get","textEdit":{"newText":"spi_flash_guard_get()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief get free pages number which can be mmap  \nThis function will return number of free pages available in mmu table. This could be useful before calling actual spi_flash_mmap (maps flash range to DCache or ICache memory) to check if there is sufficient space available for mapping.  \n@param memory memory type of MMU table free page  \n@return number of free pages which can be mmaped"},"filterText":"spi_flash_mmap_get_free_pages","insertText":"spi_flash_mmap_get_free_pages(${1:spi_flash_mmap_memory_t memory})","insertTextFormat":2,"kind":3,"label":"•spi_flash_mmap_get_free_pages(spi_flash_mmap_memory_t memory)","score":0.81575304269790649,"sortText":"40af2acfspi_flash_mmap_get_free_pages","textEdit":{"newText":"spi_flash_mmap_get_free_pages(${1:spi_flash_mmap_memory_t memory})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Release region previously obtained using spi_flash_mmap  \n@note Calling this function will not necessarily unmap memory region.  \nRegion will only be unmapped when there are no other handles which reference this region. In case of partially overlapping regions it is possible that memory will be unmapped partially.  \n@param handle Handle obtained from spi_flash_mmap"},"filterText":"spi_flash_munmap","insertText":"spi_flash_munmap(${1:spi_flash_mmap_handle_t handle})","insertTextFormat":2,"kind":3,"label":"•spi_flash_munmap(spi_flash_mmap_handle_t handle)","score":0.81575304269790649,"sortText":"40af2acfspi_flash_munmap","textEdit":{"newText":"spi_flash_munmap(${1:spi_flash_mmap_handle_t handle})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sprintf","insertText":"sprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sprintf(char *, const char *, ...)","score":0.81575304269790649,"sortText":"40af2acfsprintf","textEdit":{"newText":"sprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":0.81575304269790649,"sortText":"40af2acfsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sscanf","insertText":"sscanf(${1:const char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sscanf(const char *, const char *, ...)","score":0.81575304269790649,"sortText":"40af2acfsscanf","textEdit":{"newText":"sscanf(${1:const char *}, ${2:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strchr","insertText":"strchr(${1:const char *}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•strchr(const char *, int)","score":0.81575304269790649,"sortText":"40af2acfstrchr","textEdit":{"newText":"strchr(${1:const char *}, ${2:int})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcoll","insertText":"strcoll(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcoll(const char *, const char *)","score":0.81575304269790649,"sortText":"40af2acfstrcoll","textEdit":{"newText":"strcoll(${1:const char *}, ${2:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcspn","insertText":"strcspn(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcspn(const char *, const char *)","score":0.81575304269790649,"sortText":"40af2acfstrcspn","textEdit":{"newText":"strcspn(${1:const char *}, ${2:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strlcat(char *, const char *, size_t)","score":0.81575304269790649,"sortText":"40af2acfstrlcat","textEdit":{"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncasecmp(const char *, const char *, size_t)","score":0.81575304269790649,"sortText":"40af2acfstrncasecmp","textEdit":{"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncpy","insertText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncpy(char *, const char *, size_t)","score":0.81575304269790649,"sortText":"40af2acfstrncpy","textEdit":{"newText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"inttypes.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"intmax_t","documentation":{"kind":"markdown","value":"From `\"inttypes.h\"`"},"filterText":"strtoimax","insertText":"strtoimax(${1:const char *}, ${2:char **}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•strtoimax(const char *, char **, int)","score":0.81575304269790649,"sortText":"40af2acfstrtoimax","textEdit":{"newText":"strtoimax(${1:const char *}, ${2:char **}, ${3:int})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"inttypes.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uintmax_t","documentation":{"kind":"markdown","value":"From `\"inttypes.h\"`"},"filterText":"strtoumax","insertText":"strtoumax(${1:const char *}, ${2:char **}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•strtoumax(const char *, char **, int)","score":0.81575304269790649,"sortText":"40af2acfstrtoumax","textEdit":{"newText":"strtoumax(${1:const char *}, ${2:char **}, ${3:int})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swprintf","insertText":"swprintf(${1:wchar_t *}, ${2:size_t}, ${3:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swprintf(wchar_t *, size_t, const wchar_t *, ...)","score":0.81575304269790649,"sortText":"40af2acfswprintf","textEdit":{"newText":"swprintf(${1:wchar_t *}, ${2:size_t}, ${3:const wchar_t *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swscanf","insertText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swscanf(const wchar_t *, const wchar_t *, ...)","score":0.81575304269790649,"sortText":"40af2acfswscanf","textEdit":{"newText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":0.81575304269790649,"sortText":"40af2acfsystem_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/gpio_sd_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"gpio_sd_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/gpio_sd_struct.h\"`"},"filterText":"SIGMADELTA","insertText":"SIGMADELTA","insertTextFormat":2,"kind":6,"label":"•SIGMADELTA","score":0.8145369291305542,"sortText":"40af7a82SIGMADELTA","textEdit":{"newText":"SIGMADELTA","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.8145369291305542,"sortText":"40af7a82setsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"SLEEP_MODE","insertText":"SLEEP_MODE","insertTextFormat":2,"kind":8,"label":"•SLEEP_MODE","score":0.8114473819732666,"sortText":"40b044fcSLEEP_MODE","textEdit":{"newText":"SLEEP_MODE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_DIRECTORY_ASSISTANCE_SERVER","score":0.8114473819732666,"sortText":"40b044fcSTREETTALK_DIRECTORY_ASSISTANCE_SERVER","textEdit":{"newText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"SUBNET_MASK","insertText":"SUBNET_MASK","insertTextFormat":2,"kind":20,"label":"•SUBNET_MASK","score":0.8114473819732666,"sortText":"40b044fcSUBNET_MASK","textEdit":{"newText":"SUBNET_MASK","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":0.8114473819732666,"sortText":"40b044fcSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":0.8114473819732666,"sortText":"40b044fcSendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"StaticSemaphore_t","insertText":"StaticSemaphore_t","insertTextFormat":2,"kind":8,"label":"•StaticSemaphore_t","score":0.8114473819732666,"sortText":"40b044fcStaticSemaphore_t","textEdit":{"newText":"StaticSemaphore_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"arch/cc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"arch/cc.h\"`"},"filterText":"s8_t","insertText":"s8_t","insertTextFormat":2,"kind":8,"label":"•s8_t","score":0.8114473819732666,"sortText":"40b044fcs8_t","textEdit":{"newText":"s8_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":7},"contentChanges":[{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":3}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":4},"context":{"triggerKind":3}},"id":14,"jsonrpc":"2.0"}
<<<
Content-Length: 65552

{"id":14,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"initLDRSensor","insertText":"initLDRSensor()","insertTextFormat":2,"kind":3,"label":" initLDRSensor()","score":9.0014286041259766,"sortText":"3feffa26initLDRSensor","textEdit":{"newText":"initLDRSensor()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"Callback Function that sents message"},"filterText":"OnDataSent","insertText":"OnDataSent(${1:const int *mac_addr}, ${2:int status})","insertTextFormat":2,"kind":3,"label":" OnDataSent(const int *mac_addr, int status)","score":7.3863968849182129,"sortText":"4013a2a3OnDataSent","textEdit":{"newText":"OnDataSent(${1:const int *mac_addr}, ${2:int status})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":1.0767349004745483,"sortText":"40762d8dSerial","textEdit":{"newText":"Serial","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":"•sensors_event_t","score":0.94521176815032959,"sortText":"408e069asensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":"•sensor_t","score":0.88832324743270874,"sortText":"409c96d9sensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":"•sensors_color_t","score":0.88832324743270874,"sortText":"409c96d9sensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":"•sensors_type_t","score":0.88832324743270874,"sortText":"409c96d9sensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":"•sensors_vec_t","score":0.88832324743270874,"sortText":"409c96d9sensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":0.82743531465530396,"sortText":"40ac2d33Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":0.82743531465530396,"sortText":"40ac2d33Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":0.82743531465530396,"sortText":"40ac2d33Server","textEdit":{"newText":"Server","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":0.82743531465530396,"sortText":"40ac2d33serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`  \nfunction takes the following frequencies as valid values:  \n240, 160, 80 <<< For all XTAL types 40, 20, 10 <<< For 40MHz XTAL 26, 13 <<< For 26MHz XTAL 24, 12 <<< For 24MHz XTAL"},"filterText":"setCpuFrequencyMhz","insertText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","insertTextFormat":2,"kind":3,"label":"•setCpuFrequencyMhz(uint32_t cpu_freq_mhz)","score":0.82743531465530396,"sortText":"40ac2d33setCpuFrequencyMhz","textEdit":{"newText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"seed48","insertText":"seed48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•seed48(unsigned short *)","score":0.81575304269790649,"sortText":"40af2acfseed48","textEdit":{"newText":"seed48(${1:unsigned short *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":0.81575304269790649,"sortText":"40af2acfsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":0.81575304269790649,"sortText":"40af2acfsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"setenv","insertText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•setenv(const char *__string, const char *__value, int __overwrite)","score":0.81575304269790649,"sortText":"40af2acfsetenv","textEdit":{"newText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":0.81575304269790649,"sortText":"40af2acfsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"setlocale","insertText":"setlocale(${1:int category}, ${2:const char *locale})","insertTextFormat":2,"kind":3,"label":"•setlocale(int category, const char *locale)","score":0.81575304269790649,"sortText":"40af2acfsetlocale","textEdit":{"newText":"setlocale(${1:int category}, ${2:const char *locale})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":0.81575304269790649,"sortText":"40af2acfsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.8145369291305542,"sortText":"40af7a82setsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":0.8114473819732666,"sortText":"40b044fcSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":0.8114473819732666,"sortText":"40b044fcSendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"select","insertText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","insertTextFormat":2,"kind":3,"label":"•select(int nfds, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *errorfds, struct timeval *timeout)","score":0.8114473819732666,"sortText":"40b044fcselect","textEdit":{"newText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"send","insertText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•send(int s, const void *dataptr, size_t size, int flags)","score":0.8114473819732666,"sortText":"40b044fcsend","textEdit":{"newText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*p : the pointer to output string.  \n@param int len : the string length.  \n@return None."},"filterText":"send_packet","insertText":"send_packet(${1:uint8_t *p}, ${2:int len})","insertTextFormat":2,"kind":3,"label":"•send_packet(uint8_t *p, int len)","score":0.8114473819732666,"sortText":"40b044fcsend_packet","textEdit":{"newText":"send_packet(${1:uint8_t *p}, ${2:int len})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendmsg","insertText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•sendmsg(int s, const struct msghdr *message, int flags)","score":0.8114473819732666,"sortText":"40b044fcsendmsg","textEdit":{"newText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendto","insertText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•sendto(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.8114473819732666,"sortText":"40b044fcsendto","textEdit":{"newText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":0.8114473819732666,"sortText":"40b044fcset_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":0.8114473819732666,"sortText":"40b044fcsetgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":0.8114473819732666,"sortText":"40b044fcsethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"setitimer","insertText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","insertTextFormat":2,"kind":3,"label":"•setitimer(int __which, const struct itimerval *__value, struct itimerval *__ovalue)","score":0.8114473819732666,"sortText":"40b044fcsetitimer","textEdit":{"newText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":0.8114473819732666,"sortText":"40b044fcsetpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":0.8114473819732666,"sortText":"40b044fcsetpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":0.8114473819732666,"sortText":"40b044fcsetsid","textEdit":{"newText":"setsid()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"settimeofday","insertText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","insertTextFormat":2,"kind":3,"label":"•settimeofday(const struct timeval *, const struct timezone *)","score":0.8114473819732666,"sortText":"40b044fcsettimeofday","textEdit":{"newText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setuid","insertText":"setuid(${1:uid_t __uid})","insertTextFormat":2,"kind":3,"label":"•setuid(uid_t __uid)","score":0.8114473819732666,"sortText":"40b044fcsetuid","textEdit":{"newText":"setuid(${1:uid_t __uid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ACCELEROMETER","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_AMBIENT_TEMPERATURE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_COLOR","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_CURRENT","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GRAVITY","insertText":"SENSOR_TYPE_GRAVITY","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_GRAVITY","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_GRAVITY","textEdit":{"newText":"SENSOR_TYPE_GRAVITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_GYROSCOPE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_LIGHT","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_LINEAR_ACCELERATION","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_MAGNETIC_FIELD","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_OBJECT_TEMPERATURE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_OBJECT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_OBJECT_TEMPERATURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ORIENTATION","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_PRESSURE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_PROXIMITY","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_RELATIVE_HUMIDITY","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ROTATION_VECTOR","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_VOLTAGE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.81144732236862183,"sortText":"40ca3c5dSERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartBitsNum4Char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SEVEN_BITS","insertText":"SEVEN_BITS","insertTextFormat":2,"kind":20,"label":"•SEVEN_BITS","score":0.81144732236862183,"sortText":"40ca3c5dSEVEN_BITS","textEdit":{"newText":"SEVEN_BITS","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"new_handler","documentation":{"kind":"markdown","value":"From `<new>`  \nTakes a replacement handler as the argument, returns the previous handler."},"filterText":"set_new_handler","insertText":"std::set_new_handler(${1:new_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_new_handler(new_handler)","score":0.67979419231414795,"sortText":"40d1f902set_new_handler","textEdit":{"newText":"std::set_new_handler(${1:new_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"terminate_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_terminate","insertText":"std::set_terminate(${1:terminate_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_terminate(terminate_handler)","score":0.67979419231414795,"sortText":"40d1f902set_terminate","textEdit":{"newText":"std::set_terminate(${1:terminate_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"unexpected_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_unexpected","insertText":"std::set_unexpected(${1:unexpected_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_unexpected(unexpected_handler)","score":0.67979419231414795,"sortText":"40d1f902set_unexpected","textEdit":{"newText":"std::set_unexpected(${1:unexpected_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a matching sub-sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@param \\_\\_last2 A forward iterator.  \n@return The first iterator @c i in the range @p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2)) such that @c \\*(i+N) == @p  \n\\*(\\_\\_first2+N) for each @c N in the range @p [0,\\_\\_last2-\\_\\_first2), or @p \\_\\_last1 if no such iterator exists.  \nSearches the range @p [\\_\\_first1,\\_\\_last1) for a sub-sequence that compares equal value-by-value with the sequence given by @p [\\_\\_first2,\\_\\_last2) and returns an iterator to the first element of the sub-sequence, or @p \\_\\_last1 if the sub-sequence is not found.  \nBecause the sub-sequence must lie completely within the range @p [\\_\\_first1,\\_\\_last1) it must start at a position less than @p \\_\\_last1-(\\_\\_last2-\\_\\_first2) where @p \\_\\_last2-\\_\\_first2 is the length of the sub-sequence.  \nThis means that the returned iterator @c i will be in the range  \n@p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2))"},"filterText":"search","insertText":"std::search($0)","insertTextFormat":2,"kind":3,"label":"•std::search(…)","score":0.67620617151260376,"sortText":"40d2e427search","textEdit":{"newText":"std::search($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a number of consecutive values.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first A forward iterator.  \n@param \\_\\_last A forward iterator.  \n@param \\_\\_count The number of consecutive values.  \n@param \\_\\_val The value to find.  \n@return The first iterator @c i in the range @p [\\_\\_first,\\_\\_last-\\_\\_count) such that @c \\*(i+N) == @p \\_\\_val for each @c N in the range @p [0,\\_\\_count), or @p \\_\\_last if no such iterator exists.  \nSearches the range @p [\\_\\_first,\\_\\_last) for @p count consecutive elements equal to @p \\_\\_val."},"filterText":"search_n","insertText":"std::search_n($0)","insertTextFormat":2,"kind":3,"label":"•std::search_n(…)","score":0.67620617151260376,"sortText":"40d2e427search_n","textEdit":{"newText":"std::search_n($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <random>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<random>`  \n@brief The seed_seq class generates sequences of seeds for random number generators."},"filterText":"seed_seq","insertText":"std::seed_seq","insertTextFormat":2,"kind":7,"label":"•std::seed_seq","score":0.67620617151260376,"sortText":"40d2e427seed_seq","textEdit":{"newText":"std::seed_seq","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the difference of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range.  \nIterators increment for each range. When the current element of the first range is less than the second according to @p \\_\\_comp, that element is copied and the iterator advances. If the current element of the second range is less, no element is copied and the iterator advances.  \nIf an element is contained in both ranges according to @p \\_\\_comp, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_difference","insertText":"std::set_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_difference(…)","score":0.67620617151260376,"sortText":"40d2e427set_difference","textEdit":{"newText":"std::set_difference($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.67620617151260376,"sortText":"40d2e427set_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the symmetric difference of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is less than the other, that element is copied and the iterator advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_symmetric_difference","insertText":"std::set_symmetric_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_symmetric_difference(…)","score":0.67620617151260376,"sortText":"40d2e427set_symmetric_difference","textEdit":{"newText":"std::set_symmetric_difference($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the union of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is less than the other,  \nthat element is copied and the iterator advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_union","insertText":"std::set_union($0)","insertTextFormat":2,"kind":3,"label":"•std::set_union(…)","score":0.67620617151260376,"sortText":"40d2e427set_union","textEdit":{"newText":"std::set_union($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiEndTransaction","insertText":"spiEndTransaction(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiEndTransaction(spi_t *spi)","score":0.82743525505065918,"sortText":"40e121e7spiEndTransaction","textEdit":{"newText":"spiEndTransaction(${1:spi_t *spi})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <clocale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<clocale>`"},"filterText":"setlocale","insertText":"std::setlocale","insertTextFormat":2,"kind":18,"label":"•std::setlocale","score":0.61799472570419312,"sortText":"40e1cb19setlocale","textEdit":{"newText":"std::setlocale","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station connected to ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STACONNECTED","insertText":"SYSTEM_EVENT_AP_STACONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STACONNECTED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_AP_STACONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STACONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station disconnected from ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STADISCONNECTED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_AP_STADISCONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STADISCONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP assign an IP to a connected station"},"filterText":"SYSTEM_EVENT_AP_STAIPASSIGNED","insertText":"SYSTEM_EVENT_AP_STAIPASSIGNED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STAIPASSIGNED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_AP_STAIPASSIGNED","textEdit":{"newText":"SYSTEM_EVENT_AP_STAIPASSIGNED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet phy link up"},"filterText":"SYSTEM_EVENT_ETH_CONNECTED","insertText":"SYSTEM_EVENT_ETH_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_CONNECTED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_ETH_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_ETH_CONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet got IP from connected AP"},"filterText":"SYSTEM_EVENT_ETH_GOT_IP","insertText":"SYSTEM_EVENT_ETH_GOT_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_GOT_IP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_ETH_GOT_IP","textEdit":{"newText":"SYSTEM_EVENT_ETH_GOT_IP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet start"},"filterText":"SYSTEM_EVENT_ETH_START","insertText":"SYSTEM_EVENT_ETH_START","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_START","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_ETH_START","textEdit":{"newText":"SYSTEM_EVENT_ETH_START","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet stop"},"filterText":"SYSTEM_EVENT_ETH_STOP","insertText":"SYSTEM_EVENT_ETH_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_STOP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_ETH_STOP","textEdit":{"newText":"SYSTEM_EVENT_ETH_STOP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 finish scanning AP"},"filterText":"SYSTEM_EVENT_SCAN_DONE","insertText":"SYSTEM_EVENT_SCAN_DONE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_SCAN_DONE","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_SCAN_DONE","textEdit":{"newText":"SYSTEM_EVENT_SCAN_DONE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nthe auth mode of AP connected by ESP32 station changed"},"filterText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_AUTHMODE_CHANGE","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_AUTHMODE_CHANGE","textEdit":{"newText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station connected to AP"},"filterText":"SYSTEM_EVENT_STA_CONNECTED","insertText":"SYSTEM_EVENT_STA_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_CONNECTED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_STA_CONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station lost IP and the IP is reset to 0"},"filterText":"SYSTEM_EVENT_STA_LOST_IP","insertText":"SYSTEM_EVENT_STA_LOST_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_LOST_IP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_LOST_IP","textEdit":{"newText":"SYSTEM_EVENT_STA_LOST_IP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station start"},"filterText":"SYSTEM_EVENT_STA_START","insertText":"SYSTEM_EVENT_STA_START","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_START","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_START","textEdit":{"newText":"SYSTEM_EVENT_STA_START","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps overlap in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps succeeds in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_SUCCESS","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_WPS_ER_SUCCESS","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 WiFi ready"},"filterText":"SYSTEM_EVENT_WIFI_READY","insertText":"SYSTEM_EVENT_WIFI_READY","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_WIFI_READY","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_WIFI_READY","textEdit":{"newText":"SYSTEM_EVENT_WIFI_READY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_stadisconnected_t","insertText":"system_event_ap_stadisconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_stadisconnected_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_ap_stadisconnected_t","textEdit":{"newText":"system_event_ap_stadisconnected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staipassigned_t","insertText":"system_event_ap_staipassigned_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staipassigned_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_ap_staipassigned_t","textEdit":{"newText":"system_event_ap_staipassigned_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_got_ip6_t","insertText":"system_event_got_ip6_t","insertTextFormat":2,"kind":8,"label":"•system_event_got_ip6_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_got_ip6_t","textEdit":{"newText":"system_event_got_ip6_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_handler_t","insertText":"system_event_handler_t","insertTextFormat":2,"kind":8,"label":"•system_event_handler_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_handler_t","textEdit":{"newText":"system_event_handler_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_connected_t","insertText":"system_event_sta_connected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_connected_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_sta_connected_t","textEdit":{"newText":"system_event_sta_connected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_fail_reason_t","insertText":"system_event_sta_wps_fail_reason_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_fail_reason_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_sta_wps_fail_reason_t","textEdit":{"newText":"system_event_sta_wps_fail_reason_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`  \nIn line with software engineering best practice, especially when supplying a library that is likely to change in future versions, FreeRTOS implements a strict data hiding policy. This means the event group structure used internally by FreeRTOS is not accessible to application code. However, if the application writer wants to statically allocate the memory required to create an event group then the size of the event group object needs to be know. The StaticEventGroup_t structure below is provided for this purpose.  \nIts sizes and alignment requirements are guaranteed to match those of the genuine structure, no matter which architecture is being used, and no matter how the values in FreeRTOSConfig.h are set. Its contents are somewhat obfuscated in the hope users will recognise that it would be unwise to make direct use of the structure members."},"filterText":"StaticEventGroup_t","insertText":"StaticEventGroup_t","insertTextFormat":2,"kind":8,"label":"•StaticEventGroup_t","score":0.8114473819732666,"sortText":"40e433bdStaticEventGroup_t","textEdit":{"newText":"StaticEventGroup_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"sei","insertText":"sei()","insertTextFormat":2,"kind":1,"label":"•sei()","score":0.37610694766044617,"sortText":"413f6ee9sei","textEdit":{"newText":"sei()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"semBINARY_SEMAPHORE_QUEUE_LENGTH","insertText":"semBINARY_SEMAPHORE_QUEUE_LENGTH","insertTextFormat":2,"kind":1,"label":" semBINARY_SEMAPHORE_QUEUE_LENGTH","score":0.36883971095085144,"sortText":"41432771semBINARY_SEMAPHORE_QUEUE_LENGTH","textEdit":{"newText":"semBINARY_SEMAPHORE_QUEUE_LENGTH","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":8},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":5},"context":{"triggerKind":3}},"id":15,"jsonrpc":"2.0"}
<<<
Content-Length: 65172

{"id":15,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":1.0767349004745483,"sortText":"40762d8dSerial","textEdit":{"newText":"Serial","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":0.82743531465530396,"sortText":"40ac2d33Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":0.82743531465530396,"sortText":"40ac2d33Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":0.82743531465530396,"sortText":"40ac2d33Server","textEdit":{"newText":"Server","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":0.82743531465530396,"sortText":"40ac2d33serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.8114473819732666,"sortText":"40d2e427SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":0.8114473819732666,"sortText":"40d2e427set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase a range of flash sectors  \n@param start_address Address where erase operation has to start.  \nMust be 4kB-aligned  \n@param size Size of erased range, in bytes. Must be divisible by 4kB.  \n@return esp_err_t"},"filterText":"spi_flash_erase_range","insertText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_range(size_t start_address, size_t size)","score":0.81575304269790649,"sortText":"40e3601bspi_flash_erase_range","textEdit":{"newText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase the Flash sector.  \n@param sector Sector number, the count starts at sector 0, 4KB per sector.  \n@return esp_err_t"},"filterText":"spi_flash_erase_sector","insertText":"spi_flash_erase_sector(${1:size_t sector})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_sector(size_t sector)","score":0.81575304269790649,"sortText":"40e3601bspi_flash_erase_sector","textEdit":{"newText":"spi_flash_erase_sector(${1:size_t sector})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":0.82743531465530396,"sortText":"4108df65HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":0.81575310230255127,"sortText":"410c5c9asystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiServer.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WiFiServer.h\"`"},"filterText":"WiFiServer","insertText":"WiFiServer","insertTextFormat":2,"kind":7,"label":"•WiFiServer","score":0.85094308853149414,"sortText":"41262898WiFiServer","textEdit":{"newText":"WiFiServer","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":0.81575304269790649,"sortText":"412f2acfSYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps overlap in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","score":0.81575304269790649,"sortText":"412f2acfSYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":0.81575304269790649,"sortText":"412f2acfSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps succeeds in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_SUCCESS","score":0.81575304269790649,"sortText":"412f2acfSYSTEM_EVENT_STA_WPS_ER_SUCCESS","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":0.81575304269790649,"sortText":"412f2acfSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/dport_access.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"soc/dport_access.h\"`  \n@brief Read value from register, NOT SMP-safe version.  \nThis method uses the pre-reading of the APB register before reading the register of the DPORT.  \nThere is not disable/enable interrupt.  \nThe difference from DPORT_REG_READ() is that the user himself must disable interrupts while DPORT reading.  \nThis implementation is useful for reading DORT registers in loop without stall other CPU. Note the usage example.  \nThe recommended way to read registers sequentially without stall other CPU is to use the method esp_dport_read_buffer(buff_out, address, num_words). It allows you to read registers in the buffer.  \n\\\\code{c} // This example shows how to use it.  \n{ // Use curly brackets to limit the visibility of variables in macros DPORT_INTERRUPT_DISABLE/RESTORE.  \nDPORT_INTERRUPT_DISABLE(); // Disable interrupt only on current CPU.  \nfor (i = 0; i < max; ++i) { array[i] = DPORT_SEQUENCE_REG_READ(Address + i * 4); // reading DPORT registers } DPORT_INTERRUPT_RESTORE(); // restore the previous interrupt level }  \n\\\\endcode  \n@param reg Register address  \n@return Value"},"filterText":"DPORT_SEQUENCE_REG_READ","insertText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":"•DPORT_SEQUENCE_REG_READ(uint32_t reg)","score":1.2171710729598999,"sortText":"413044fbDPORT_SEQUENCE_REG_READ","textEdit":{"newText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/dns.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"lwip/dns.h\"`"},"filterText":"dns_clear_servers","insertText":"dns_clear_servers(${1:bool keep_fallback})","insertTextFormat":2,"kind":3,"label":"•dns_clear_servers(bool keep_fallback)","score":0.8114473819732666,"sortText":"413044fcdns_clear_servers","textEdit":{"newText":"dns_clear_servers(${1:bool keep_fallback})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-rmt.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-rmt.h\"`  \nSetting threshold for Rx completed"},"filterText":"rmtSetRxThreshold","insertText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","insertTextFormat":2,"kind":3,"label":"•rmtSetRxThreshold(rmt_obj_t *rmt, uint32_t value)","score":0.82743543386459351,"sortText":"414f7afermtSetRxThreshold","textEdit":{"newText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":0.82743543386459351,"sortText":"414f7afeuartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_seed48_r","insertText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•_seed48_r(struct _reent *, unsigned short *)","score":0.81575304269790649,"sortText":"4151f901_seed48_r","textEdit":{"newText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_setenv_r","insertText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•_setenv_r(struct _reent *, const char *__string, const char *__value, int __overwrite)","score":0.81575304269790649,"sortText":"4151f901_setenv_r","textEdit":{"newText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"_setlocale_r","insertText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","insertTextFormat":2,"kind":3,"label":"•_setlocale_r(struct _reent *, int category, const char *locale)","score":0.81575304269790649,"sortText":"4151f901_setlocale_r","textEdit":{"newText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"COOKIE_SERVER","insertText":"COOKIE_SERVER","insertTextFormat":2,"kind":20,"label":"•COOKIE_SERVER","score":0.8114473819732666,"sortText":"4152e427COOKIE_SERVER","textEdit":{"newText":"COOKIE_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"IMPRESS_SERVER","insertText":"IMPRESS_SERVER","insertTextFormat":2,"kind":20,"label":"•IMPRESS_SERVER","score":0.8114473819732666,"sortText":"4152e427IMPRESS_SERVER","textEdit":{"newText":"IMPRESS_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LOG_SERVER","insertText":"LOG_SERVER","insertTextFormat":2,"kind":20,"label":"•LOG_SERVER","score":0.8114473819732666,"sortText":"4152e427LOG_SERVER","textEdit":{"newText":"LOG_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LPR_SERVER","insertText":"LPR_SERVER","insertTextFormat":2,"kind":20,"label":"•LPR_SERVER","score":0.8114473819732666,"sortText":"4152e427LPR_SERVER","textEdit":{"newText":"LPR_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"NAME_SERVER","insertText":"NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NAME_SERVER","score":0.8114473819732666,"sortText":"4152e427NAME_SERVER","textEdit":{"newText":"NAME_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NAME_SERVICE_SEARCH","insertText":"NAME_SERVICE_SEARCH","insertTextFormat":2,"kind":20,"label":"•NAME_SERVICE_SEARCH","score":0.8114473819732666,"sortText":"4152e427NAME_SERVICE_SEARCH","textEdit":{"newText":"NAME_SERVICE_SEARCH","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NDS_SERVERS","insertText":"NDS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NDS_SERVERS","score":0.8114473819732666,"sortText":"4152e427NDS_SERVERS","textEdit":{"newText":"NDS_SERVERS","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NNTP_SERVER","insertText":"NNTP_SERVER","insertTextFormat":2,"kind":20,"label":"•NNTP_SERVER","score":0.8114473819732666,"sortText":"4152e427NNTP_SERVER","textEdit":{"newText":"NNTP_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"SMTP_SERVER","insertText":"SMTP_SERVER","insertTextFormat":2,"kind":20,"label":"•SMTP_SERVER","score":0.8114473819732666,"sortText":"4152e427SMTP_SERVER","textEdit":{"newText":"SMTP_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_SERVER","insertText":"STREETTALK_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_SERVER","score":0.8114473819732666,"sortText":"4152e427STREETTALK_SERVER","textEdit":{"newText":"STREETTALK_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"SWAP_SERVER","insertText":"SWAP_SERVER","insertTextFormat":2,"kind":20,"label":"•SWAP_SERVER","score":0.8114473819732666,"sortText":"4152e427SWAP_SERVER","textEdit":{"newText":"SWAP_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"TFTP_SERVER_NAME","insertText":"TFTP_SERVER_NAME","insertTextFormat":2,"kind":20,"label":"•TFTP_SERVER_NAME","score":0.8114473819732666,"sortText":"4152e427TFTP_SERVER_NAME","textEdit":{"newText":"TFTP_SERVER_NAME","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"TIME_SERVER","insertText":"TIME_SERVER","insertTextFormat":2,"kind":20,"label":"•TIME_SERVER","score":0.8114473819732666,"sortText":"4152e427TIME_SERVER","textEdit":{"newText":"TIME_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/errno.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const char *const []","documentation":{"kind":"markdown","value":"From `\"sys/errno.h\"`  \nPlease don't use these variables directly.  \nUse strerror instead."},"filterText":"_sys_errlist","insertText":"_sys_errlist","insertTextFormat":2,"kind":6,"label":"•_sys_errlist","score":0.8114473819732666,"sortText":"4152e427_sys_errlist","textEdit":{"newText":"_sys_errlist","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Install the driver's GPIO ISR handler service, which allows per-pin GPIO interrupt handlers.  \nThis function is incompatible with gpio_isr_register() - if that function is used, a single global ISR is registered for all GPIO interrupts. If this function is used, the ISR service provides a global GPIO ISR and individual pin handlers are registered via the gpio_isr_handler_add() function.  \n@param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred) ESP_INTR_FLAG\\_\\* values. See esp_intr_alloc.h for more info.  \n@return  \n\\- ESP_OK Success  \n\\- ESP_ERR_NO_MEM No memory to install this service  \n\\- ESP_ERR_INVALID_STATE ISR service already installed.  \n\\- ESP_ERR_NOT_FOUND No free interrupt found with the specified flags  \n\\- ESP_ERR_INVALID_ARG GPIO error"},"filterText":"gpio_install_isr_service","insertText":"gpio_install_isr_service(${1:int intr_alloc_flags})","insertTextFormat":2,"kind":3,"label":"•gpio_install_isr_service(int intr_alloc_flags)","score":0.8114473819732666,"sortText":"4152e427gpio_install_isr_service","textEdit":{"newText":"gpio_install_isr_service(${1:int intr_alloc_flags})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Uninstall the driver's GPIO ISR service, freeing related resources."},"filterText":"gpio_uninstall_isr_service","insertText":"gpio_uninstall_isr_service()","insertTextFormat":2,"kind":3,"label":"•gpio_uninstall_isr_service()","score":0.8114473819732666,"sortText":"4152e427gpio_uninstall_isr_service","textEdit":{"newText":"gpio_uninstall_isr_service()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \n@brief Read Hall Sensor  \n@note When the power switch of SARADC1, SARADC2, HALL sensor and AMP sensor is turned on,  \nthe input of GPIO36 and GPIO39 will be pulled down for about 80ns.  \nWhen enabling power for any of these peripherals, ignore input from GPIO36 and GPIO39.  \nPlease refer to section 3.11 of 'ECO_and_Workarounds_for_Bugs_in_ESP32' for the description of this issue.  \n@note The Hall Sensor uses channels 0 and 3 of ADC1. Do not configure these channels for use as ADC channels.  \n@note The ADC1 module must be enabled by calling adc1_config_width() before calling hall_sensor_read(). ADC1 should be configured for 12 bit readings, as the hall sensor readings are low values and do not cover the full range of the ADC.  \n@return The hall sensor reading."},"filterText":"hall_sensor_read","insertText":"hall_sensor_read()","insertTextFormat":2,"kind":3,"label":"•hall_sensor_read()","score":0.8114473819732666,"sortText":"4152e427hall_sensor_read","textEdit":{"newText":"hall_sensor_read()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_send_r","insertText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_send_r(int s, const void *dataptr, size_t size, int flags)","score":0.8114473819732666,"sortText":"4152e427lwip_send_r","textEdit":{"newText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendmsg_r","insertText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_sendmsg_r(int s, const struct msghdr *message, int flags)","score":0.8114473819732666,"sortText":"4152e427lwip_sendmsg_r","textEdit":{"newText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendto_r","insertText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•lwip_sendto_r(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.8114473819732666,"sortText":"4152e427lwip_sendto_r","textEdit":{"newText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_setsockopt_r","insertText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•lwip_setsockopt_r(int s, int level, int optname, const void *optval, socklen_t optlen)","score":0.8114473819732666,"sortText":"4152e427lwip_setsockopt_r","textEdit":{"newText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nset cache attribute (access modes) for a range of memory"},"filterText":"xthal_set_region_attribute","insertText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_attribute(void *addr, unsigned int size, unsigned int cattr, unsigned int flags)","score":0.8114473819732666,"sortText":"4152e427xthal_set_region_attribute","textEdit":{"newText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation","insertText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation(void *vaddr, void *paddr, unsigned int size, unsigned int cache_atr, unsigned int flags)","score":0.8114473819732666,"sortText":"4152e427xthal_set_region_translation","textEdit":{"newText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation_raw","insertText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation_raw(void *vaddr, void *paddr, unsigned int cattr)","score":0.8114473819732666,"sortText":"4152e427xthal_set_region_translation_raw","textEdit":{"newText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":"•SERIAL","score":0.37610697746276855,"sortText":"415f8716SERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.37610697746276855,"sortText":"415f8716SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.37610697746276855,"sortText":"415f8716SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.37610697746276855,"sortText":"415f8716SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.37610697746276855,"sortText":"415f8716SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.37610697746276855,"sortText":"415f8716SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.37610697746276855,"sortText":"415f8716SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.37610697746276855,"sortText":"415f8716SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.37610697746276855,"sortText":"415f8716SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.37610697746276855,"sortText":"415f8716SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.37610697746276855,"sortText":"415f8716SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.37610697746276855,"sortText":"415f8716SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.37610697746276855,"sortText":"415f8716SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.37610697746276855,"sortText":"415f8716SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.37610697746276855,"sortText":"415f8716SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.37610697746276855,"sortText":"415f8716SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.37610697746276855,"sortText":"415f8716SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.37610697746276855,"sortText":"415f8716SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.37610697746276855,"sortText":"415f8716SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.37610697746276855,"sortText":"415f8716SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.37610697746276855,"sortText":"415f8716SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.37610697746276855,"sortText":"415f8716SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.37610697746276855,"sortText":"415f8716SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.37610697746276855,"sortText":"415f8716SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.37610697746276855,"sortText":"415f8716SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"detail":"uint32_t","filterText":"esp_dport_access_sequence_reg_read","insertText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":" esp_dport_access_sequence_reg_read(uint32_t reg)","score":1.2236295938491821,"sortText":"4163601besp_dport_access_sequence_reg_read","textEdit":{"newText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_FINGER_SERVER","insertText":"DEFAULT_FINGER_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_FINGER_SERVER","score":0.81144744157791138,"sortText":"41758352DEFAULT_FINGER_SERVER","textEdit":{"newText":"DEFAULT_FINGER_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_IRC_SERVER","insertText":"DEFAULT_IRC_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_IRC_SERVER","score":0.81144744157791138,"sortText":"41758352DEFAULT_IRC_SERVER","textEdit":{"newText":"DEFAULT_IRC_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_WWW_SERVER","insertText":"DEFAULT_WWW_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_WWW_SERVER","score":0.81144744157791138,"sortText":"41758352DEFAULT_WWW_SERVER","textEdit":{"newText":"DEFAULT_WWW_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"DOMAIN_NAME_SERVER","insertText":"DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•DOMAIN_NAME_SERVER","score":0.81144744157791138,"sortText":"41758352DOMAIN_NAME_SERVER","textEdit":{"newText":"DOMAIN_NAME_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVERS","insertText":"NETWORK_INFORMATION_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVERS","score":0.81144744157791138,"sortText":"41758352NETWORK_INFORMATION_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVERS","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_DOMAIN","score":0.81144744157791138,"sortText":"41758352NETWORK_INFORMATION_SERVICE_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_DOMAIN","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","score":0.81144744157791138,"sortText":"41758352NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","score":0.81144744157791138,"sortText":"41758352NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"POP3_SERVER","insertText":"POP3_SERVER","insertTextFormat":2,"kind":20,"label":"•POP3_SERVER","score":0.81144744157791138,"sortText":"41758352POP3_SERVER","textEdit":{"newText":"POP3_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"RESOURCE_LOCATION_SERVER","insertText":"RESOURCE_LOCATION_SERVER","insertTextFormat":2,"kind":20,"label":"•RESOURCE_LOCATION_SERVER","score":0.81144744157791138,"sortText":"41758352RESOURCE_LOCATION_SERVER","textEdit":{"newText":"RESOURCE_LOCATION_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase some sectors.  \nPlease do not call this function in SDK.  \n@param uint32_t start_addr : Start addr to erase, should be sector aligned.  \n@param uint32_t area_len : Length to erase, should be sector aligned.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_area","insertText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_area(uint32_t start_addr, uint32_t area_len)","score":0.81144744157791138,"sortText":"41758352esp_rom_spiflash_erase_area","textEdit":{"newText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a 64KB block of flash Uses SPI flash command D8H.  \nPlease do not call this function in SDK.  \n@param uint32_t block_num : Which block to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_block","insertText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_block(uint32_t block_num)","score":0.81144744157791138,"sortText":"41758352esp_rom_spiflash_erase_block","textEdit":{"newText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase whole flash chip.  \nPlease do not call this function in SDK.  \n@param None  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_chip","insertText":"esp_rom_spiflash_erase_chip()","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_chip()","score":0.81144744157791138,"sortText":"41758352esp_rom_spiflash_erase_chip","textEdit":{"newText":"esp_rom_spiflash_erase_chip()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a sector of flash.  \nUses SPI flash command 20H.  \nPlease do not call this function in SDK.  \n@param uint32_t sector_num : Which sector to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_sector","insertText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_sector(uint32_t sector_num)","score":0.81144744157791138,"sortText":"41758352esp_rom_spiflash_erase_sector","textEdit":{"newText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nTrampoline support functions:"},"filterText":"xthal_tram_pending_to_service","insertText":"xthal_tram_pending_to_service()","insertTextFormat":2,"kind":3,"label":"•xthal_tram_pending_to_service()","score":0.81144744157791138,"sortText":"41758352xthal_tram_pending_to_service","textEdit":{"newText":"xthal_tram_pending_to_service()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_TIME_PROTOCOL_SERVERS","insertText":"NETWORK_TIME_PROTOCOL_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_TIME_PROTOCOL_SERVERS","score":0.8114473819732666,"sortText":"41b044fcNETWORK_TIME_PROTOCOL_SERVERS","textEdit":{"newText":"NETWORK_TIME_PROTOCOL_SERVERS","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_DIRECTORY_ASSISTANCE_SERVER","score":0.8114473819732666,"sortText":"41b044fcSTREETTALK_DIRECTORY_ASSISTANCE_SERVER","textEdit":{"newText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"tcpip_adapter.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"tcpip_adapter_dhcp_option_id_t","documentation":{"kind":"markdown","value":"From `\"tcpip_adapter.h\"`  \nDomain name server"},"filterText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•TCPIP_ADAPTER_DOMAIN_NAME_SERVER","score":0.81575298309326172,"sortText":"41f4c735TCPIP_ADAPTER_DOMAIN_NAME_SERVER","textEdit":{"newText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`"},"filterText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertTextFormat":2,"kind":20,"label":"•ESP_ROM_SPIFLASH_RESULT_ERR","score":0.81144744157791138,"sortText":"41f58352ESP_ROM_SPIFLASH_RESULT_ERR","textEdit":{"newText":"ESP_ROM_SPIFLASH_RESULT_ERR","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"X_WINDOW_SYSTEM_FONT_SERVER","insertText":"X_WINDOW_SYSTEM_FONT_SERVER","insertTextFormat":2,"kind":20,"label":"•X_WINDOW_SYSTEM_FONT_SERVER","score":0.81144744157791138,"sortText":"41f58352X_WINDOW_SYSTEM_FONT_SERVER","textEdit":{"newText":"X_WINDOW_SYSTEM_FONT_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NETBIOS_OVER_TCP_IP_NAME_SERVER","score":0.81144744157791138,"sortText":"42758352NETBIOS_OVER_TCP_IP_NAME_SERVER","textEdit":{"newText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_system.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"deprecated":true,"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_system.h\"`  \n@brief Read hardware MAC address.  \nFunction has been renamed to esp_efuse_mac_get_default.  \nThis name will be removed in a future release.  \n@param mac hardware MAC address, length: 6 bytes.  \n@return ESP_OK on success"},"filterText":"system_efuse_read_mac","insertText":"system_efuse_read_mac(${1:uint8_t *mac})","insertTextFormat":2,"kind":3,"label":"•system_efuse_read_mac(uint8_t *mac)","score":0.081575304269790649,"sortText":"42a13ebasystem_efuse_read_mac","textEdit":{"newText":"system_efuse_read_mac(${1:uint8_t *mac})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `<list>`"},"filterText":"__throw_system_error","insertText":"std::__throw_system_error(${1:int})","insertTextFormat":2,"kind":3,"label":"•std::__throw_system_error(int)","score":0.067620620131492615,"sortText":"434759c2__throw_system_error","textEdit":{"newText":"std::__throw_system_error(${1:int})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETBIOS_OVER_TCP_IP_DATAGRAM_DISTRIBUTION_SERVER","insertText":"NETBIOS_OVER_TCP_IP_DATAGRAM_DISTRIBUTION_SERVER","insertTextFormat":2,"kind":20,"label":"•NETBIOS_OVER_TCP_IP_DATAGRAM_DISTRIBUTION_SERVER","score":1.1000000238418579,"sortText":"80000000NETBIOS_OVER_TCP_IP_DATAGRAM_DISTRIBUTION_SERVER","textEdit":{"newText":"NETBIOS_OVER_TCP_IP_DATAGRAM_DISTRIBUTION_SERVER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":9},"contentChanges":[{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":5}},"text":"i"}]},"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":10},"contentChanges":[{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":6}},"text":"l"}]},"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":11},"contentChanges":[{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":7}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":8}},"context":{"diagnostics":[]}},"id":16,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":16,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":12},"contentChanges":[{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":13},"contentChanges":[{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":14},"contentChanges":[{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":15},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":4},"context":{"triggerKind":1}},"id":17,"jsonrpc":"2.0"}
<<<
Content-Length: 65552

{"id":17,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"initLDRSensor","insertText":"initLDRSensor()","insertTextFormat":2,"kind":3,"label":" initLDRSensor()","score":9.0014286041259766,"sortText":"3feffa26initLDRSensor","textEdit":{"newText":"initLDRSensor()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"Callback Function that sents message"},"filterText":"OnDataSent","insertText":"OnDataSent(${1:const int *mac_addr}, ${2:int status})","insertTextFormat":2,"kind":3,"label":" OnDataSent(const int *mac_addr, int status)","score":7.3863968849182129,"sortText":"4013a2a3OnDataSent","textEdit":{"newText":"OnDataSent(${1:const int *mac_addr}, ${2:int status})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":1.0767349004745483,"sortText":"40762d8dSerial","textEdit":{"newText":"Serial","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":"•sensors_event_t","score":0.94521176815032959,"sortText":"408e069asensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":"•sensor_t","score":0.88832324743270874,"sortText":"409c96d9sensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":"•sensors_color_t","score":0.88832324743270874,"sortText":"409c96d9sensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":"•sensors_type_t","score":0.88832324743270874,"sortText":"409c96d9sensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":"•sensors_vec_t","score":0.88832324743270874,"sortText":"409c96d9sensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":0.82743531465530396,"sortText":"40ac2d33Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":0.82743531465530396,"sortText":"40ac2d33Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":0.82743531465530396,"sortText":"40ac2d33Server","textEdit":{"newText":"Server","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":0.82743531465530396,"sortText":"40ac2d33serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`  \nfunction takes the following frequencies as valid values:  \n240, 160, 80 <<< For all XTAL types 40, 20, 10 <<< For 40MHz XTAL 26, 13 <<< For 26MHz XTAL 24, 12 <<< For 24MHz XTAL"},"filterText":"setCpuFrequencyMhz","insertText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","insertTextFormat":2,"kind":3,"label":"•setCpuFrequencyMhz(uint32_t cpu_freq_mhz)","score":0.82743531465530396,"sortText":"40ac2d33setCpuFrequencyMhz","textEdit":{"newText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"seed48","insertText":"seed48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•seed48(unsigned short *)","score":0.81575304269790649,"sortText":"40af2acfseed48","textEdit":{"newText":"seed48(${1:unsigned short *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":0.81575304269790649,"sortText":"40af2acfsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":0.81575304269790649,"sortText":"40af2acfsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"setenv","insertText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•setenv(const char *__string, const char *__value, int __overwrite)","score":0.81575304269790649,"sortText":"40af2acfsetenv","textEdit":{"newText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":0.81575304269790649,"sortText":"40af2acfsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"setlocale","insertText":"setlocale(${1:int category}, ${2:const char *locale})","insertTextFormat":2,"kind":3,"label":"•setlocale(int category, const char *locale)","score":0.81575304269790649,"sortText":"40af2acfsetlocale","textEdit":{"newText":"setlocale(${1:int category}, ${2:const char *locale})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":0.81575304269790649,"sortText":"40af2acfsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.8145369291305542,"sortText":"40af7a82setsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":0.8114473819732666,"sortText":"40b044fcSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":0.8114473819732666,"sortText":"40b044fcSendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"select","insertText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","insertTextFormat":2,"kind":3,"label":"•select(int nfds, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *errorfds, struct timeval *timeout)","score":0.8114473819732666,"sortText":"40b044fcselect","textEdit":{"newText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"send","insertText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•send(int s, const void *dataptr, size_t size, int flags)","score":0.8114473819732666,"sortText":"40b044fcsend","textEdit":{"newText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*p : the pointer to output string.  \n@param int len : the string length.  \n@return None."},"filterText":"send_packet","insertText":"send_packet(${1:uint8_t *p}, ${2:int len})","insertTextFormat":2,"kind":3,"label":"•send_packet(uint8_t *p, int len)","score":0.8114473819732666,"sortText":"40b044fcsend_packet","textEdit":{"newText":"send_packet(${1:uint8_t *p}, ${2:int len})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendmsg","insertText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•sendmsg(int s, const struct msghdr *message, int flags)","score":0.8114473819732666,"sortText":"40b044fcsendmsg","textEdit":{"newText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendto","insertText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•sendto(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.8114473819732666,"sortText":"40b044fcsendto","textEdit":{"newText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":0.8114473819732666,"sortText":"40b044fcset_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":0.8114473819732666,"sortText":"40b044fcsetgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":0.8114473819732666,"sortText":"40b044fcsethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"setitimer","insertText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","insertTextFormat":2,"kind":3,"label":"•setitimer(int __which, const struct itimerval *__value, struct itimerval *__ovalue)","score":0.8114473819732666,"sortText":"40b044fcsetitimer","textEdit":{"newText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":0.8114473819732666,"sortText":"40b044fcsetpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":0.8114473819732666,"sortText":"40b044fcsetpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":0.8114473819732666,"sortText":"40b044fcsetsid","textEdit":{"newText":"setsid()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"settimeofday","insertText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","insertTextFormat":2,"kind":3,"label":"•settimeofday(const struct timeval *, const struct timezone *)","score":0.8114473819732666,"sortText":"40b044fcsettimeofday","textEdit":{"newText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setuid","insertText":"setuid(${1:uid_t __uid})","insertTextFormat":2,"kind":3,"label":"•setuid(uid_t __uid)","score":0.8114473819732666,"sortText":"40b044fcsetuid","textEdit":{"newText":"setuid(${1:uid_t __uid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ACCELEROMETER","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_AMBIENT_TEMPERATURE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_COLOR","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_CURRENT","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GRAVITY","insertText":"SENSOR_TYPE_GRAVITY","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_GRAVITY","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_GRAVITY","textEdit":{"newText":"SENSOR_TYPE_GRAVITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_GYROSCOPE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_LIGHT","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_LINEAR_ACCELERATION","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_MAGNETIC_FIELD","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_OBJECT_TEMPERATURE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_OBJECT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_OBJECT_TEMPERATURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ORIENTATION","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_PRESSURE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_PROXIMITY","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_RELATIVE_HUMIDITY","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_ROTATION_VECTOR","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_Sensor.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":"•SENSOR_TYPE_VOLTAGE","score":0.88832324743270874,"sortText":"40b903feSENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.81144732236862183,"sortText":"40ca3c5dSERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartBitsNum4Char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SEVEN_BITS","insertText":"SEVEN_BITS","insertTextFormat":2,"kind":20,"label":"•SEVEN_BITS","score":0.81144732236862183,"sortText":"40ca3c5dSEVEN_BITS","textEdit":{"newText":"SEVEN_BITS","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"new_handler","documentation":{"kind":"markdown","value":"From `<new>`  \nTakes a replacement handler as the argument, returns the previous handler."},"filterText":"set_new_handler","insertText":"std::set_new_handler(${1:new_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_new_handler(new_handler)","score":0.67979419231414795,"sortText":"40d1f902set_new_handler","textEdit":{"newText":"std::set_new_handler(${1:new_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"terminate_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_terminate","insertText":"std::set_terminate(${1:terminate_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_terminate(terminate_handler)","score":0.67979419231414795,"sortText":"40d1f902set_terminate","textEdit":{"newText":"std::set_terminate(${1:terminate_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"unexpected_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_unexpected","insertText":"std::set_unexpected(${1:unexpected_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_unexpected(unexpected_handler)","score":0.67979419231414795,"sortText":"40d1f902set_unexpected","textEdit":{"newText":"std::set_unexpected(${1:unexpected_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a matching sub-sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@param \\_\\_last2 A forward iterator.  \n@return The first iterator @c i in the range @p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2)) such that @c \\*(i+N) == @p  \n\\*(\\_\\_first2+N) for each @c N in the range @p [0,\\_\\_last2-\\_\\_first2), or @p \\_\\_last1 if no such iterator exists.  \nSearches the range @p [\\_\\_first1,\\_\\_last1) for a sub-sequence that compares equal value-by-value with the sequence given by @p [\\_\\_first2,\\_\\_last2) and returns an iterator to the first element of the sub-sequence, or @p \\_\\_last1 if the sub-sequence is not found.  \nBecause the sub-sequence must lie completely within the range @p [\\_\\_first1,\\_\\_last1) it must start at a position less than @p \\_\\_last1-(\\_\\_last2-\\_\\_first2) where @p \\_\\_last2-\\_\\_first2 is the length of the sub-sequence.  \nThis means that the returned iterator @c i will be in the range  \n@p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2))"},"filterText":"search","insertText":"std::search($0)","insertTextFormat":2,"kind":3,"label":"•std::search(…)","score":0.67620617151260376,"sortText":"40d2e427search","textEdit":{"newText":"std::search($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a number of consecutive values.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first A forward iterator.  \n@param \\_\\_last A forward iterator.  \n@param \\_\\_count The number of consecutive values.  \n@param \\_\\_val The value to find.  \n@return The first iterator @c i in the range @p [\\_\\_first,\\_\\_last-\\_\\_count) such that @c \\*(i+N) == @p \\_\\_val for each @c N in the range @p [0,\\_\\_count), or @p \\_\\_last if no such iterator exists.  \nSearches the range @p [\\_\\_first,\\_\\_last) for @p count consecutive elements equal to @p \\_\\_val."},"filterText":"search_n","insertText":"std::search_n($0)","insertTextFormat":2,"kind":3,"label":"•std::search_n(…)","score":0.67620617151260376,"sortText":"40d2e427search_n","textEdit":{"newText":"std::search_n($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <random>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<random>`  \n@brief The seed_seq class generates sequences of seeds for random number generators."},"filterText":"seed_seq","insertText":"std::seed_seq","insertTextFormat":2,"kind":7,"label":"•std::seed_seq","score":0.67620617151260376,"sortText":"40d2e427seed_seq","textEdit":{"newText":"std::seed_seq","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the difference of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range.  \nIterators increment for each range. When the current element of the first range is less than the second according to @p \\_\\_comp, that element is copied and the iterator advances. If the current element of the second range is less, no element is copied and the iterator advances.  \nIf an element is contained in both ranges according to @p \\_\\_comp, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_difference","insertText":"std::set_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_difference(…)","score":0.67620617151260376,"sortText":"40d2e427set_difference","textEdit":{"newText":"std::set_difference($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.67620617151260376,"sortText":"40d2e427set_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the symmetric difference of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is less than the other, that element is copied and the iterator advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_symmetric_difference","insertText":"std::set_symmetric_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_symmetric_difference(…)","score":0.67620617151260376,"sortText":"40d2e427set_symmetric_difference","textEdit":{"newText":"std::set_symmetric_difference($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the union of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is less than the other,  \nthat element is copied and the iterator advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_union","insertText":"std::set_union($0)","insertTextFormat":2,"kind":3,"label":"•std::set_union(…)","score":0.67620617151260376,"sortText":"40d2e427set_union","textEdit":{"newText":"std::set_union($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiEndTransaction","insertText":"spiEndTransaction(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiEndTransaction(spi_t *spi)","score":0.82743525505065918,"sortText":"40e121e7spiEndTransaction","textEdit":{"newText":"spiEndTransaction(${1:spi_t *spi})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <clocale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<clocale>`"},"filterText":"setlocale","insertText":"std::setlocale","insertTextFormat":2,"kind":18,"label":"•std::setlocale","score":0.61799472570419312,"sortText":"40e1cb19setlocale","textEdit":{"newText":"std::setlocale","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station connected to ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STACONNECTED","insertText":"SYSTEM_EVENT_AP_STACONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STACONNECTED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_AP_STACONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STACONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station disconnected from ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STADISCONNECTED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_AP_STADISCONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STADISCONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP assign an IP to a connected station"},"filterText":"SYSTEM_EVENT_AP_STAIPASSIGNED","insertText":"SYSTEM_EVENT_AP_STAIPASSIGNED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STAIPASSIGNED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_AP_STAIPASSIGNED","textEdit":{"newText":"SYSTEM_EVENT_AP_STAIPASSIGNED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet phy link up"},"filterText":"SYSTEM_EVENT_ETH_CONNECTED","insertText":"SYSTEM_EVENT_ETH_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_CONNECTED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_ETH_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_ETH_CONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet got IP from connected AP"},"filterText":"SYSTEM_EVENT_ETH_GOT_IP","insertText":"SYSTEM_EVENT_ETH_GOT_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_GOT_IP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_ETH_GOT_IP","textEdit":{"newText":"SYSTEM_EVENT_ETH_GOT_IP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet start"},"filterText":"SYSTEM_EVENT_ETH_START","insertText":"SYSTEM_EVENT_ETH_START","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_START","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_ETH_START","textEdit":{"newText":"SYSTEM_EVENT_ETH_START","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet stop"},"filterText":"SYSTEM_EVENT_ETH_STOP","insertText":"SYSTEM_EVENT_ETH_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_STOP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_ETH_STOP","textEdit":{"newText":"SYSTEM_EVENT_ETH_STOP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 finish scanning AP"},"filterText":"SYSTEM_EVENT_SCAN_DONE","insertText":"SYSTEM_EVENT_SCAN_DONE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_SCAN_DONE","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_SCAN_DONE","textEdit":{"newText":"SYSTEM_EVENT_SCAN_DONE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nthe auth mode of AP connected by ESP32 station changed"},"filterText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_AUTHMODE_CHANGE","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_AUTHMODE_CHANGE","textEdit":{"newText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station connected to AP"},"filterText":"SYSTEM_EVENT_STA_CONNECTED","insertText":"SYSTEM_EVENT_STA_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_CONNECTED","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_STA_CONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station lost IP and the IP is reset to 0"},"filterText":"SYSTEM_EVENT_STA_LOST_IP","insertText":"SYSTEM_EVENT_STA_LOST_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_LOST_IP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_LOST_IP","textEdit":{"newText":"SYSTEM_EVENT_STA_LOST_IP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station start"},"filterText":"SYSTEM_EVENT_STA_START","insertText":"SYSTEM_EVENT_STA_START","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_START","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_START","textEdit":{"newText":"SYSTEM_EVENT_STA_START","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps overlap in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps succeeds in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_SUCCESS","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_WPS_ER_SUCCESS","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 WiFi ready"},"filterText":"SYSTEM_EVENT_WIFI_READY","insertText":"SYSTEM_EVENT_WIFI_READY","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_WIFI_READY","score":0.81575304269790649,"sortText":"40e3601bSYSTEM_EVENT_WIFI_READY","textEdit":{"newText":"SYSTEM_EVENT_WIFI_READY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_stadisconnected_t","insertText":"system_event_ap_stadisconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_stadisconnected_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_ap_stadisconnected_t","textEdit":{"newText":"system_event_ap_stadisconnected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staipassigned_t","insertText":"system_event_ap_staipassigned_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staipassigned_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_ap_staipassigned_t","textEdit":{"newText":"system_event_ap_staipassigned_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_got_ip6_t","insertText":"system_event_got_ip6_t","insertTextFormat":2,"kind":8,"label":"•system_event_got_ip6_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_got_ip6_t","textEdit":{"newText":"system_event_got_ip6_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_handler_t","insertText":"system_event_handler_t","insertTextFormat":2,"kind":8,"label":"•system_event_handler_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_handler_t","textEdit":{"newText":"system_event_handler_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_connected_t","insertText":"system_event_sta_connected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_connected_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_sta_connected_t","textEdit":{"newText":"system_event_sta_connected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_fail_reason_t","insertText":"system_event_sta_wps_fail_reason_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_fail_reason_t","score":0.81575304269790649,"sortText":"40e3601bsystem_event_sta_wps_fail_reason_t","textEdit":{"newText":"system_event_sta_wps_fail_reason_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`  \nIn line with software engineering best practice, especially when supplying a library that is likely to change in future versions, FreeRTOS implements a strict data hiding policy. This means the event group structure used internally by FreeRTOS is not accessible to application code. However, if the application writer wants to statically allocate the memory required to create an event group then the size of the event group object needs to be know. The StaticEventGroup_t structure below is provided for this purpose.  \nIts sizes and alignment requirements are guaranteed to match those of the genuine structure, no matter which architecture is being used, and no matter how the values in FreeRTOSConfig.h are set. Its contents are somewhat obfuscated in the hope users will recognise that it would be unwise to make direct use of the structure members."},"filterText":"StaticEventGroup_t","insertText":"StaticEventGroup_t","insertTextFormat":2,"kind":8,"label":"•StaticEventGroup_t","score":0.8114473819732666,"sortText":"40e433bdStaticEventGroup_t","textEdit":{"newText":"StaticEventGroup_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"sei","insertText":"sei()","insertTextFormat":2,"kind":1,"label":"•sei()","score":0.37610694766044617,"sortText":"413f6ee9sei","textEdit":{"newText":"sei()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"semBINARY_SEMAPHORE_QUEUE_LENGTH","insertText":"semBINARY_SEMAPHORE_QUEUE_LENGTH","insertTextFormat":2,"kind":1,"label":" semBINARY_SEMAPHORE_QUEUE_LENGTH","score":0.36883971095085144,"sortText":"41432771semBINARY_SEMAPHORE_QUEUE_LENGTH","textEdit":{"newText":"semBINARY_SEMAPHORE_QUEUE_LENGTH","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}}]}}Content-Length: 1412

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":5}}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":16},"contentChanges":[{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":3},"context":{"triggerKind":1}},"id":18,"jsonrpc":"2.0"}
<<<
Content-Length: 1601

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'serila'","range":{"end":{"character":8,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":11}}Content-Length: 53012

{"id":18,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"size_t","insertText":"size_t","insertTextFormat":2,"kind":8,"label":"•size_t","score":10.712376594543457,"sortText":"3ed49a1bsize_t","textEdit":{"newText":"size_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"String","documentation":{"kind":"markdown","value":"String receivedString;  \nVariable to store if sending data was successful"},"filterText":"success","insertText":"success","insertTextFormat":2,"kind":6,"label":" success","score":9.0014286041259766,"sortText":"3eeffa26success","textEdit":{"newText":"success","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"short","insertText":"short","insertTextFormat":2,"kind":14,"label":" short","score":8,"sortText":"3f000000short","textEdit":{"newText":"short","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"signed","insertText":"signed","insertTextFormat":2,"kind":14,"label":" signed","score":8,"sortText":"3f000000signed","textEdit":{"newText":"signed","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"size_t","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"kind":15,"label":" sizeof(expression-or-type)","score":8,"sortText":"3f000000sizeof","textEdit":{"newText":"sizeof(${0:expression-or-type})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"size_t","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"kind":15,"label":" sizeof...(parameter-pack)","score":8,"sortText":"3f000000sizeof...","textEdit":{"newText":"sizeof...(${0:parameter-pack})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static","insertText":"static","insertTextFormat":2,"kind":14,"label":" static","score":8,"sortText":"3f000000static","textEdit":{"newText":"static","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static_assert","insertText":"static_assert(${1:expression}, ${0:message});","insertTextFormat":2,"kind":15,"label":" static_assert(expression, message);","score":8,"sortText":"3f000000static_assert","textEdit":{"newText":"static_assert(${1:expression}, ${0:message});","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static_cast","insertText":"static_cast<${1:type}>(${0:expression})","insertTextFormat":2,"kind":15,"label":" static_cast<type>(expression)","score":8,"sortText":"3f000000static_cast","textEdit":{"newText":"static_cast<${1:type}>(${0:expression})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"struct","insertText":"struct","insertTextFormat":2,"kind":14,"label":" struct","score":8,"sortText":"3f000000struct","textEdit":{"newText":"struct","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"switch","insertText":"switch (${1:condition}) {\n${0:cases}\n}","insertTextFormat":2,"kind":15,"label":" switch (condition) {cases}","score":8,"sortText":"3f000000switch","textEdit":{"newText":"switch (${1:condition}) {\n${0:cases}\n}","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nThe string class"},"filterText":"String","insertText":"String","insertTextFormat":2,"kind":7,"label":"•String","score":6.0775456428527832,"sortText":"3f3d84bfString","textEdit":{"newText":"String","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Stream.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Stream.h\"`  \ncompatability macros for testing  \n#define getInt() parseInt()  \n#define getInt(skipChar) parseInt(skipchar)  \n#define getFloat() parseFloat()  \n#define getFloat(skipChar) parseFloat(skipChar)  \n#define getString( pre_string, post_string, buffer, length) readBytesBetween( pre_string, terminator, buffer, length)"},"filterText":"Stream","insertText":"Stream","insertTextFormat":2,"kind":7,"label":"•Stream","score":5.5006375312805176,"sortText":"3f4ffac7Stream","textEdit":{"newText":"Stream","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nAn inherited class for holding the result of a concatenation. These result objects are assumed to be writable by subsequent concatenations."},"filterText":"StringSumHelper","insertText":"StringSumHelper","insertTextFormat":2,"kind":7,"label":"•StringSumHelper","score":4.8400001525878906,"sortText":"3f651eb8StringSumHelper","textEdit":{"newText":"StringSumHelper","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"double","filterText":"sqrt","insertText":"sqrt(${1:double})","insertTextFormat":2,"kind":3,"label":" sqrt(double)","score":4.8400001525878906,"sortText":"3f651eb8sqrt","textEdit":{"newText":"sqrt(${1:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[2 overloads]","filterText":"Stream","insertText":"Stream($0)","insertTextFormat":2,"kind":4,"label":" Stream(…)","score":4.4000000953674316,"sortText":"3f733333Stream","textEdit":{"newText":"Stream($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[13 overloads]","filterText":"String","insertText":"String($0)","insertTextFormat":2,"kind":4,"label":" String(…)","score":4.4000000953674316,"sortText":"3f733333String","textEdit":{"newText":"String($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[12 overloads]","filterText":"StringSumHelper","insertText":"StringSumHelper($0)","insertTextFormat":2,"kind":4,"label":" StringSumHelper(…)","score":4.4000000953674316,"sortText":"3f733333StringSumHelper","textEdit":{"newText":"StringSumHelper($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"std","insertText":"std","insertTextFormat":2,"kind":9,"label":" std","score":3.5200002193450928,"sortText":"3f9eb851std","textEdit":{"newText":"std","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_DIS","insertText":"STICK_PARITY_DIS","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_DIS","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_DIS","textEdit":{"newText":"STICK_PARITY_DIS","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_EN","insertText":"STICK_PARITY_EN","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_EN","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_EN","textEdit":{"newText":"STICK_PARITY_EN","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•strlen(const char *)","score":1.6522369384765625,"sortText":"402c8380strlen","textEdit":{"newText":"strlen(${1:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"SDA","insertText":"SDA","insertTextFormat":2,"kind":6,"label":"•SDA","score":1.5037370920181274,"sortText":"403f858bSDA","textEdit":{"newText":"SDA","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"STA_CONNECTED_BIT","insertText":"STA_CONNECTED_BIT","insertTextFormat":2,"kind":6,"label":"•STA_CONNECTED_BIT","score":1.5037370920181274,"sortText":"403f858bSTA_CONNECTED_BIT","textEdit":{"newText":"STA_CONNECTED_BIT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"StaticSemaphore_t","insertText":"StaticSemaphore_t","insertTextFormat":2,"kind":8,"label":"•StaticSemaphore_t","score":1.5037370920181274,"sortText":"403f858bStaticSemaphore_t","textEdit":{"newText":"StaticSemaphore_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"scanf","insertText":"scanf(${1:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•scanf(const char *, ...)","score":1.5037370920181274,"sortText":"403f858bscanf","textEdit":{"newText":"scanf(${1:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Esp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Esp.h\"`"},"filterText":"sketchSize_t","insertText":"sketchSize_t","insertTextFormat":2,"kind":8,"label":"•sketchSize_t","score":1.5037370920181274,"sortText":"403f858bsketchSize_t","textEdit":{"newText":"sketchSize_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sprintf","insertText":"sprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sprintf(char *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858bsprintf","textEdit":{"newText":"sprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":1.5037370920181274,"sortText":"403f858bsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strchr","insertText":"strchr(${1:const char *}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•strchr(const char *, int)","score":1.5037370920181274,"sortText":"403f858bstrchr","textEdit":{"newText":"strchr(${1:const char *}, ${2:int})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcoll","insertText":"strcoll(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcoll(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcoll","textEdit":{"newText":"strcoll(${1:const char *}, ${2:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcspn","insertText":"strcspn(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcspn(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcspn","textEdit":{"newText":"strcspn(${1:const char *}, ${2:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strlcat(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrlcat","textEdit":{"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncasecmp(const char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncasecmp","textEdit":{"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncpy","insertText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncpy(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncpy","textEdit":{"newText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nGetting SSID and password of target AP"},"filterText":"SC_STATUS_GETTING_SSID_PSWD","insertText":"SC_STATUS_GETTING_SSID_PSWD","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_GETTING_SSID_PSWD","score":1.3747211694717407,"sortText":"40500923SC_STATUS_GETTING_SSID_PSWD","textEdit":{"newText":"SC_STATUS_GETTING_SSID_PSWD","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nConnected to AP successfully"},"filterText":"SC_STATUS_LINK_OVER","insertText":"SC_STATUS_LINK_OVER","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_LINK_OVER","score":1.3747211694717407,"sortText":"40500923SC_STATUS_LINK_OVER","textEdit":{"newText":"SC_STATUS_LINK_OVER","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \n@brief The callback of SmartConfig, executed when smart-config status changed.  \n@param status Status of SmartConfig:  \n\\- SC_STATUS_GETTING_SSID_PSWD : pdata is a pointer of smartconfig_type_t, means config type.  \n\\- SC_STATUS_LINK : pdata is a pointer to wifi_config_t.  \n\\- SC_STATUS_LINK_OVER : pdata is a pointer of phone's IP address(4 bytes) if pdata unequal NULL.  \n\\- otherwise : parameter void \\*pdata is NULL.  \n@param pdata According to the different status have different values."},"filterText":"sc_callback_t","insertText":"sc_callback_t","insertTextFormat":2,"kind":8,"label":"•sc_callback_t","score":1.3747211694717407,"sortText":"40500923sc_callback_t","textEdit":{"newText":"sc_callback_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaAttachPin","insertText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaAttachPin(uint8_t pin, uint8_t channel)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaAttachPin","textEdit":{"newText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaWrite","insertText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaWrite(uint8_t channel, uint8_t duty)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaWrite","textEdit":{"newText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nHelper functions to translate frequency to clock divider and back"},"filterText":"spiFrequencyToClockDiv","insertText":"spiFrequencyToClockDiv(${1:uint32_t freq})","insertTextFormat":2,"kind":3,"label":"•spiFrequencyToClockDiv(uint32_t freq)","score":1.3747211694717407,"sortText":"40500923spiFrequencyToClockDiv","textEdit":{"newText":"spiFrequencyToClockDiv(${1:uint32_t freq})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiGetClockDiv","insertText":"spiGetClockDiv(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiGetClockDiv(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiGetClockDiv","textEdit":{"newText":"spiGetClockDiv(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nDeactivate enabled SPI_CSx pins"},"filterText":"spiSSClear","insertText":"spiSSClear(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSClear(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSClear","textEdit":{"newText":"spiSSClear(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nEnable/Disable hardware control of SPI_CSx pins"},"filterText":"spiSSEnable","insertText":"spiSSEnable(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSEnable(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSEnable","textEdit":{"newText":"spiSSEnable(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"spi_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiStartBus","insertText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","insertTextFormat":2,"kind":3,"label":"•spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder)","score":1.3747211694717407,"sortText":"40500923spiStartBus","textEdit":{"newText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteShortNL","insertText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteShortNL(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteShortNL","textEdit":{"newText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteWord","insertText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteWord(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteWord","textEdit":{"newText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"40500923system_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"SLEEP_MODE","insertText":"SLEEP_MODE","insertTextFormat":2,"kind":8,"label":"•SLEEP_MODE","score":1.2690916061401367,"sortText":"405d8e68SLEEP_MODE","textEdit":{"newText":"SLEEP_MODE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinh","insertText":"sinh(${1:double})","insertTextFormat":2,"kind":3,"label":"•sinh(double)","score":1.2690916061401367,"sortText":"405d8e68sinh","textEdit":{"newText":"sinh(${1:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinhf","insertText":"sinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•sinhf(float)","score":1.2690916061401367,"sortText":"405d8e68sinhf","textEdit":{"newText":"sinhf(${1:float})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_a","insertText":"step_a","insertTextFormat":2,"kind":20,"label":"•step_a","score":1.2690916061401367,"sortText":"405d8e68step_a","textEdit":{"newText":"step_a","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_b","insertText":"step_b","insertTextFormat":2,"kind":20,"label":"•step_b","score":1.2690916061401367,"sortText":"405d8e68step_b","textEdit":{"newText":"step_b","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"signbit","insertText":"std::signbit($0)","insertTextFormat":2,"kind":3,"label":"•std::signbit(…)","score":1.2531143426895142,"sortText":"405f99f3signbit","textEdit":{"newText":"std::signbit($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sinh","insertText":"std::sinh(${1:float __x})","insertTextFormat":2,"kind":3,"label":"•std::sinh(float __x)","score":1.2531143426895142,"sortText":"405f99f3sinh","textEdit":{"newText":"std::sinh(${1:float __x})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sqrt","insertText":"std::sqrt(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::sqrt(long double __x)","score":1.2531143426895142,"sortText":"405f99f3sqrt","textEdit":{"newText":"std::sqrt(${1:long double __x})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/gpio_sd_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"gpio_sd_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/gpio_sd_struct.h\"`"},"filterText":"SIGMADELTA","insertText":"SIGMADELTA","insertTextFormat":2,"kind":6,"label":"•SIGMADELTA","score":1.1871124505996704,"sortText":"40680cb3SIGMADELTA","textEdit":{"newText":"SIGMADELTA","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn the maximum number of available memory regions which could be returned by soc_get_available_memory_regions(). Used to size the array passed to that function."},"filterText":"soc_get_available_memory_region_max_count","insertText":"soc_get_available_memory_region_max_count()","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_region_max_count()","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_region_max_count","textEdit":{"newText":"soc_get_available_memory_region_max_count()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn available memory regions for this SoC. Each available memory region is a contiguous piece of memory which is not being used by static data, used by ROM code, or reserved by a component using the SOC_RESERVE_MEMORY_REGION() macro.  \nThis result is soc_memory_regions[] minus all regions reserved via the SOC_RESERVE_MEMORY_REGION() macro (which may also split some regions up.)  \nAt startup, all available memory returned by this function is registered as heap space.  \n@note OS-level startup function only, not recommended to call from app code.  \n@param regions Pointer to an array for reading available regions into.  \nSize of the array should be at least the result of soc_get_available_memory_region_max_count(). Entries in the array will be ordered by memory address.  \n@return Number of entries copied to 'regions'. Will be no greater than the result of soc_get_available_memory_region_max_count()."},"filterText":"soc_get_available_memory_regions","insertText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_regions(soc_memory_region_t *regions)","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_regions","textEdit":{"newText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_region_count","insertText":"soc_memory_region_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_region_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_count","textEdit":{"newText":"soc_memory_region_count","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory on a particular SoC."},"filterText":"soc_memory_region_t","insertText":"soc_memory_region_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_t","textEdit":{"newText":"soc_memory_region_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_region_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_regions","insertText":"soc_memory_regions","insertTextFormat":2,"kind":6,"label":"•soc_memory_regions","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_regions","textEdit":{"newText":"soc_memory_regions","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_type_count","insertText":"soc_memory_type_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_type_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_count","textEdit":{"newText":"soc_memory_type_count","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nType descriptor holds a description for a particular type of memory on a particular SoC."},"filterText":"soc_memory_type_desc_t","insertText":"soc_memory_type_desc_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_type_desc_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_desc_t","textEdit":{"newText":"soc_memory_type_desc_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_type_desc_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nConstant table of tag descriptors for all this SoC's tags"},"filterText":"soc_memory_types","insertText":"soc_memory_types","insertTextFormat":2,"kind":6,"label":"•soc_memory_types","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_types","textEdit":{"newText":"soc_memory_types","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory reserved on this SoC for a particular use (ie not available for stack/heap usage.)"},"filterText":"soc_reserved_region_t","insertText":"soc_reserved_region_t","insertTextFormat":2,"kind":8,"label":"•soc_reserved_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_reserved_region_t","textEdit":{"newText":"soc_reserved_region_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swscanf","insertText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swscanf(const wchar_t *, const wchar_t *, ...)","score":1.1826096773147583,"sortText":"4068a03fswscanf","textEdit":{"newText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalbln","insertText":"std::scalbln","insertTextFormat":2,"kind":18,"label":"•std::scalbln","score":1.1391948461532593,"sortText":"406e2eddscalbln","textEdit":{"newText":"std::scalbln","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnf","insertText":"std::scalblnf","insertTextFormat":2,"kind":18,"label":"•std::scalblnf","score":1.1391948461532593,"sortText":"406e2eddscalblnf","textEdit":{"newText":"std::scalblnf","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnl","insertText":"std::scalblnl","insertTextFormat":2,"kind":18,"label":"•std::scalblnl","score":1.1391948461532593,"sortText":"406e2eddscalblnl","textEdit":{"newText":"std::scalblnl","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_LSBFIRST","insertText":"SPI_BITORDER_LSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_LSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_LSBFIRST","textEdit":{"newText":"SPI_BITORDER_LSBFIRST","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_MSBFIRST","insertText":"SPI_BITORDER_MSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_MSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_MSBFIRST","textEdit":{"newText":"SPI_BITORDER_MSBFIRST","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sbrk","insertText":"sbrk(${1:ptrdiff_t __incr})","insertTextFormat":2,"kind":3,"label":"•sbrk(ptrdiff_t __incr)","score":1.1118042469024658,"sortText":"4071b066sbrk","textEdit":{"newText":"sbrk(${1:ptrdiff_t __incr})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":19,"jsonrpc":"2.0"}
<<<
Content-Length: 1596

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 's'","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":16}}Content-Length: 11743

{"id":19,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":17},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":18},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"A"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":3},"context":{"triggerKind":1}},"id":20,"jsonrpc":"2.0"}
<<<
Content-Length: 1413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":17}}Content-Length: 50724

{"id":20,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"detail":"sensors_event_t","documentation":{"kind":"markdown","value":"Create sensor object"},"filterText":"a","insertText":"a","insertTextFormat":2,"kind":6,"label":" a","score":11.029752731323242,"sortText":"3e4f8622a","textEdit":{"newText":"a","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"float","filterText":"accY","insertText":"accY","insertTextFormat":2,"kind":6,"label":" accY","score":11.751424789428711,"sortText":"3ec3fa2aaccY","textEdit":{"newText":"accY","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"float","filterText":"accZ","insertText":"accZ","insertTextFormat":2,"kind":6,"label":" accZ","score":11.751424789428711,"sortText":"3ec3fa2aaccZ","textEdit":{"newText":"accZ","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"float","filterText":"accX","insertText":"accX","insertTextFormat":2,"kind":6,"label":" accX","score":10.144770622253418,"sortText":"3eddaf05accX","textEdit":{"newText":"accX","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"alignas","insertText":"alignas(${0:expression})","insertTextFormat":2,"kind":15,"label":" alignas(expression)","score":8,"sortText":"3f000000alignas","textEdit":{"newText":"alignas(${0:expression})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"size_t","filterText":"alignof","insertText":"alignof(${0:type})","insertTextFormat":2,"kind":15,"label":" alignof(type)","score":8,"sortText":"3f000000alignof","textEdit":{"newText":"alignof(${0:type})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"auto","insertText":"auto","insertTextFormat":2,"kind":14,"label":" auto","score":8,"sortText":"3f000000auto","textEdit":{"newText":"auto","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"float","documentation":{"kind":"markdown","value":"units degrees (roll and pitch noisy, yaw not possible)"},"filterText":"accPitch","insertText":"accPitch","insertTextFormat":2,"kind":6,"label":" accPitch","score":6.6000003814697266,"sortText":"3f2cccccaccPitch","textEdit":{"newText":"accPitch","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"float","documentation":{"kind":"markdown","value":"units degrees (roll and pitch noisy, yaw not possible)"},"filterText":"accRoll","insertText":"accRoll","insertTextFormat":2,"kind":6,"label":" accRoll","score":6.6000003814697266,"sortText":"3f2cccccaccRoll","textEdit":{"newText":"accRoll","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"float","documentation":{"kind":"markdown","value":"units degrees (roll and pitch noisy, yaw not possible)"},"filterText":"accYaw","insertText":"accYaw","insertTextFormat":2,"kind":6,"label":" accYaw","score":6.6000003814697266,"sortText":"3f2cccccaccYaw","textEdit":{"newText":"accYaw","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_LSM6DS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_LSM6DS.h\"`  \n@brief Class that stores state and functions for interacting with the LSM6DS I2C Accel/Gyro"},"filterText":"Adafruit_LSM6DS","insertText":"Adafruit_LSM6DS","insertTextFormat":2,"kind":7,"label":"•Adafruit_LSM6DS","score":5.9413266181945801,"sortText":"3f41e0a7Adafruit_LSM6DS","textEdit":{"newText":"Adafruit_LSM6DS","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"double","filterText":"atan2","insertText":"atan2(${1:double}, ${2:double})","insertTextFormat":2,"kind":3,"label":" atan2(double, double)","score":5.4166908264160156,"sortText":"3f52aa78atan2","textEdit":{"newText":"atan2(${1:double}, ${2:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"! The class which defines how we will talk to this device over SPI *"},"filterText":"Adafruit_SPIDevice","insertText":"Adafruit_SPIDevice","insertTextFormat":2,"kind":7,"label":" Adafruit_SPIDevice","score":5.2655243873596191,"sortText":"3f5780d3Adafruit_SPIDevice","textEdit":{"newText":"Adafruit_SPIDevice","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_LSM6DS33.h\"`  \n@brief Class that stores state and functions for interacting with the LSM6DS33 I2C Digital Potentiometer"},"filterText":"Adafruit_LSM6DS33","insertText":"Adafruit_LSM6DS33","insertTextFormat":2,"kind":7,"label":" Adafruit_LSM6DS33","score":5.1494083404541016,"sortText":"3f5b380cAdafruit_LSM6DS33","textEdit":{"newText":"Adafruit_LSM6DS33","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"Adafruit_I2CDevice","insertText":"Adafruit_I2CDevice","insertTextFormat":2,"kind":7,"label":" Adafruit_I2CDevice","score":4.8400001525878906,"sortText":"3f651eb8Adafruit_I2CDevice","textEdit":{"newText":"Adafruit_I2CDevice","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_LSM6DS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_LSM6DS.h\"`  \nAdafruit Unified Sensor interface for accelerometer component of LSM6DS"},"filterText":"Adafruit_LSM6DS_Accelerometer","insertText":"Adafruit_LSM6DS_Accelerometer","insertTextFormat":2,"kind":7,"label":"•Adafruit_LSM6DS_Accelerometer","score":4.8400001525878906,"sortText":"3f651eb8Adafruit_LSM6DS_Accelerometer","textEdit":{"newText":"Adafruit_LSM6DS_Accelerometer","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_LSM6DS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_LSM6DS.h\"`  \nAdafruit Unified Sensor interface for gyro component of LSM6DS"},"filterText":"Adafruit_LSM6DS_Gyro","insertText":"Adafruit_LSM6DS_Gyro","insertTextFormat":2,"kind":7,"label":"•Adafruit_LSM6DS_Gyro","score":4.8400001525878906,"sortText":"3f651eb8Adafruit_LSM6DS_Gyro","textEdit":{"newText":"Adafruit_LSM6DS_Gyro","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_LSM6DS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_LSM6DS.h\"`  \nAdafruit Unified Sensor interface for temperature component of LSM6DS"},"filterText":"Adafruit_LSM6DS_Temp","insertText":"Adafruit_LSM6DS_Temp","insertTextFormat":2,"kind":7,"label":"•Adafruit_LSM6DS_Temp","score":4.8400001525878906,"sortText":"3f651eb8Adafruit_LSM6DS_Temp","textEdit":{"newText":"Adafruit_LSM6DS_Temp","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint16_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nGet ADC value for pin"},"filterText":"analogRead","insertText":"analogRead(${1:uint8_t pin})","insertTextFormat":2,"kind":3,"label":"•analogRead(uint8_t pin)","score":4.8400001525878906,"sortText":"3f651eb8analogRead","textEdit":{"newText":"analogRead(${1:uint8_t pin})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"Adafruit_I2CDevice","insertText":"Adafruit_I2CDevice(${1:uint8_t addr})","insertTextFormat":2,"kind":4,"label":" Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire = &Wire)","score":4.4000000953674316,"sortText":"3f733333Adafruit_I2CDevice","textEdit":{"newText":"Adafruit_I2CDevice(${1:uint8_t addr})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[2 overloads]","filterText":"Adafruit_LSM6DS","insertText":"Adafruit_LSM6DS($0)","insertTextFormat":2,"kind":4,"label":" Adafruit_LSM6DS(…)","score":4.4000000953674316,"sortText":"3f733333Adafruit_LSM6DS","textEdit":{"newText":"Adafruit_LSM6DS($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[2 overloads]","filterText":"Adafruit_LSM6DS33","insertText":"Adafruit_LSM6DS33($0)","insertTextFormat":2,"kind":4,"label":" Adafruit_LSM6DS33(…)","score":4.4000000953674316,"sortText":"3f733333Adafruit_LSM6DS33","textEdit":{"newText":"Adafruit_LSM6DS33($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[3 overloads]","filterText":"Adafruit_LSM6DS_Accelerometer","insertText":"Adafruit_LSM6DS_Accelerometer($0)","insertTextFormat":2,"kind":4,"label":" Adafruit_LSM6DS_Accelerometer(…)","score":4.4000000953674316,"sortText":"3f733333Adafruit_LSM6DS_Accelerometer","textEdit":{"newText":"Adafruit_LSM6DS_Accelerometer($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[3 overloads]","filterText":"Adafruit_LSM6DS_Gyro","insertText":"Adafruit_LSM6DS_Gyro($0)","insertTextFormat":2,"kind":4,"label":" Adafruit_LSM6DS_Gyro(…)","score":4.4000000953674316,"sortText":"3f733333Adafruit_LSM6DS_Gyro","textEdit":{"newText":"Adafruit_LSM6DS_Gyro($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[3 overloads]","filterText":"Adafruit_LSM6DS_Temp","insertText":"Adafruit_LSM6DS_Temp($0)","insertTextFormat":2,"kind":4,"label":" Adafruit_LSM6DS_Temp(…)","score":4.4000000953674316,"sortText":"3f733333Adafruit_LSM6DS_Temp","textEdit":{"newText":"Adafruit_LSM6DS_Temp($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[2 overloads]","filterText":"Adafruit_SPIDevice","insertText":"Adafruit_SPIDevice($0)","insertTextFormat":2,"kind":4,"label":" Adafruit_SPIDevice(…)","score":4.4000000953674316,"sortText":"3f733333Adafruit_SPIDevice","textEdit":{"newText":"Adafruit_SPIDevice($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \n@brief Common sensor interface to unify various sensors.  \nIntentionally modeled after sensors.h in the Android API:  \nhttps://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h"},"filterText":"Adafruit_Sensor","insertText":"Adafruit_Sensor","insertTextFormat":2,"kind":7,"label":" Adafruit_Sensor","score":1.8537870645523071,"sortText":"4012b71bAdafruit_Sensor","textEdit":{"newText":"Adafruit_Sensor","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"@brief The class which defines a device register (a location to read/write data from)"},"filterText":"Adafruit_BusIO_Register","insertText":"Adafruit_BusIO_Register","insertTextFormat":2,"kind":7,"label":" Adafruit_BusIO_Register","score":1.6793863773345947,"sortText":"402909deAdafruit_BusIO_Register","textEdit":{"newText":"Adafruit_BusIO_Register","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"@brief The class which defines a slice of bits from within a device register (a location to read/write data from)"},"filterText":"Adafruit_BusIO_RegisterBits","insertText":"Adafruit_BusIO_RegisterBits","insertTextFormat":2,"kind":7,"label":" Adafruit_BusIO_RegisterBits","score":1.6638573408126831,"sortText":"402b06b9Adafruit_BusIO_RegisterBits","textEdit":{"newText":"Adafruit_BusIO_RegisterBits","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"_Adafruit_BusIO_SPIRegType","filterText":"ADDRBIT8_HIGH_TOREAD","insertText":"ADDRBIT8_HIGH_TOREAD","insertTextFormat":2,"kind":20,"label":" ADDRBIT8_HIGH_TOREAD","score":1.5230367183685303,"sortText":"403d0d22ADDRBIT8_HIGH_TOREAD","textEdit":{"newText":"ADDRBIT8_HIGH_TOREAD","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A0","insertText":"A0","insertTextFormat":2,"kind":6,"label":"•A0","score":1.5037370920181274,"sortText":"403f858bA0","textEdit":{"newText":"A0","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A10","insertText":"A10","insertTextFormat":2,"kind":6,"label":"•A10","score":1.5037370920181274,"sortText":"403f858bA10","textEdit":{"newText":"A10","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A16","insertText":"A16","insertTextFormat":2,"kind":6,"label":"•A16","score":1.5037370920181274,"sortText":"403f858bA16","textEdit":{"newText":"A16","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A17","insertText":"A17","insertTextFormat":2,"kind":6,"label":"•A17","score":1.5037370920181274,"sortText":"403f858bA17","textEdit":{"newText":"A17","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A18","insertText":"A18","insertTextFormat":2,"kind":6,"label":"•A18","score":1.5037370920181274,"sortText":"403f858bA18","textEdit":{"newText":"A18","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A3","insertText":"A3","insertTextFormat":2,"kind":6,"label":"•A3","score":1.5037370920181274,"sortText":"403f858bA3","textEdit":{"newText":"A3","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A5","insertText":"A5","insertTextFormat":2,"kind":6,"label":"•A5","score":1.5037370920181274,"sortText":"403f858bA5","textEdit":{"newText":"A5","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_LSM6DS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_LSM6DS.h\"`  \nThe accelerometer data range"},"filterText":"accel_range","insertText":"accel_range","insertTextFormat":2,"kind":13,"label":"•accel_range","score":1.5037370920181274,"sortText":"403f858baccel_range","textEdit":{"newText":"accel_range","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"asiprintf","insertText":"asiprintf(${1:char **}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•asiprintf(char **, const char *, ...)","score":1.5037370920181274,"sortText":"403f858basiprintf","textEdit":{"newText":"asiprintf(${1:char **}, ${2:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"asniprintf","insertText":"asniprintf(${1:char *}, ${2:size_t *}, ${3:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•asniprintf(char *, size_t *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858basniprintf","textEdit":{"newText":"asniprintf(${1:char *}, ${2:size_t *}, ${3:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"asnprintf","insertText":"asnprintf(${1:char *}, ${2:size_t *}, ${3:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•asnprintf(char *, size_t *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858basnprintf","textEdit":{"newText":"asnprintf(${1:char *}, ${2:size_t *}, ${3:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"asprintf","insertText":"asprintf(${1:char **}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•asprintf(char **, const char *, ...)","score":1.5037370920181274,"sortText":"403f858basprintf","textEdit":{"newText":"asprintf(${1:char **}, ${2:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"atoi","insertText":"atoi(${1:const char *__nptr})","insertTextFormat":2,"kind":3,"label":"•atoi(const char *__nptr)","score":1.5037370920181274,"sortText":"403f858batoi","textEdit":{"newText":"atoi(${1:const char *__nptr})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_attenuation_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`"},"filterText":"ADC_0db","insertText":"ADC_0db","insertTextFormat":2,"kind":20,"label":"•ADC_0db","score":1.3747211694717407,"sortText":"40500923ADC_0db","textEdit":{"newText":"ADC_0db","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_attenuation_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`"},"filterText":"ADC_11db","insertText":"ADC_11db","insertTextFormat":2,"kind":20,"label":"•ADC_11db","score":1.3747211694717407,"sortText":"40500923ADC_11db","textEdit":{"newText":"ADC_11db","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_attenuation_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`"},"filterText":"ADC_2_5db","insertText":"ADC_2_5db","insertTextFormat":2,"kind":20,"label":"•ADC_2_5db","score":1.3747211694717407,"sortText":"40500923ADC_2_5db","textEdit":{"newText":"ADC_2_5db","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_attenuation_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`"},"filterText":"ADC_6db","insertText":"ADC_6db","insertTextFormat":2,"kind":20,"label":"•ADC_6db","score":1.3747211694717407,"sortText":"40500923ADC_6db","textEdit":{"newText":"ADC_6db","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"apb_change_ev_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"APB_AFTER_CHANGE","insertText":"APB_AFTER_CHANGE","insertTextFormat":2,"kind":20,"label":"•APB_AFTER_CHANGE","score":1.3747211694717407,"sortText":"40500923APB_AFTER_CHANGE","textEdit":{"newText":"APB_AFTER_CHANGE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"apb_change_ev_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"APB_BEFORE_CHANGE","insertText":"APB_BEFORE_CHANGE","insertTextFormat":2,"kind":20,"label":"•APB_BEFORE_CHANGE","score":1.3747211694717407,"sortText":"40500923APB_BEFORE_CHANGE","textEdit":{"newText":"APB_BEFORE_CHANGE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_ISM330DHCX.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_ISM330DHCX.h\"`  \n@brief Class that stores state and functions for interacting with the ISM330DHCX I2C Digital Potentiometer"},"filterText":"Adafruit_ISM330DHCX","insertText":"Adafruit_ISM330DHCX","insertTextFormat":2,"kind":7,"label":"•Adafruit_ISM330DHCX","score":1.3747211694717407,"sortText":"40500923Adafruit_ISM330DHCX","textEdit":{"newText":"Adafruit_ISM330DHCX","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_LSM6DSOX.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_LSM6DSOX.h\"`  \n@brief Class that stores state and functions for interacting with the LSM6DSOX I2C Digital Potentiometer"},"filterText":"Adafruit_LSM6DSOX","insertText":"Adafruit_LSM6DSOX","insertTextFormat":2,"kind":7,"label":"•Adafruit_LSM6DSOX","score":1.3747211694717407,"sortText":"40500923Adafruit_LSM6DSOX","textEdit":{"newText":"Adafruit_LSM6DSOX","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nAttach pin to ADC (will also clear any other analog mode that could be on)"},"filterText":"adcAttachPin","insertText":"adcAttachPin(${1:uint8_t pin})","insertTextFormat":2,"kind":3,"label":"•adcAttachPin(uint8_t pin)","score":1.3747211694717407,"sortText":"40500923adcAttachPin","textEdit":{"newText":"adcAttachPin(${1:uint8_t pin})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`"},"filterText":"adc_attenuation_t","insertText":"adc_attenuation_t","insertTextFormat":2,"kind":8,"label":"•adc_attenuation_t","score":1.3747211694717407,"sortText":"40500923adc_attenuation_t","textEdit":{"newText":"adc_attenuation_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"addApbChangeCallback","insertText":"addApbChangeCallback(${1:void *arg}, ${2:apb_change_cb_t cb})","insertTextFormat":2,"kind":3,"label":"•addApbChangeCallback(void *arg, apb_change_cb_t cb)","score":1.3747211694717407,"sortText":"40500923addApbChangeCallback","textEdit":{"newText":"addApbChangeCallback(${1:void *arg}, ${2:apb_change_cb_t cb})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nGet MilliVolts value for pin"},"filterText":"analogReadMilliVolts","insertText":"analogReadMilliVolts(${1:uint8_t pin})","insertTextFormat":2,"kind":3,"label":"•analogReadMilliVolts(uint8_t pin)","score":1.3747211694717407,"sortText":"40500923analogReadMilliVolts","textEdit":{"newText":"analogReadMilliVolts(${1:uint8_t pin})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nSet the resolution of analogRead return values. Default is 12 bits (range from 0 to 4096).  \nIf between 9 and 12, it will equal the set hardware resolution, else value will be shifted.  \nRange is 1 - 16  \nNote: compatibility with Arduino SAM"},"filterText":"analogReadResolution","insertText":"analogReadResolution(${1:uint8_t bits})","insertTextFormat":2,"kind":3,"label":"•analogReadResolution(uint8_t bits)","score":1.3747211694717407,"sortText":"40500923analogReadResolution","textEdit":{"newText":"analogReadResolution(${1:uint8_t bits})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nSet the attenuation for all channels Default is 11db"},"filterText":"analogSetAttenuation","insertText":"analogSetAttenuation(${1:adc_attenuation_t attenuation})","insertTextFormat":2,"kind":3,"label":"•analogSetAttenuation(adc_attenuation_t attenuation)","score":1.3747211694717407,"sortText":"40500923analogSetAttenuation","textEdit":{"newText":"analogSetAttenuation(${1:adc_attenuation_t attenuation})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nSet the divider for the ADC clock.  \nDefault is 1 Range is 1 - 255"},"filterText":"analogSetClockDiv","insertText":"analogSetClockDiv(${1:uint8_t clockDiv})","insertTextFormat":2,"kind":3,"label":"•analogSetClockDiv(uint8_t clockDiv)","score":1.3747211694717407,"sortText":"40500923analogSetClockDiv","textEdit":{"newText":"analogSetClockDiv(${1:uint8_t clockDiv})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nSet the attenuation for particular pin Default is 11db"},"filterText":"analogSetPinAttenuation","insertText":"analogSetPinAttenuation(${1:uint8_t pin}, ${2:adc_attenuation_t attenuation})","insertTextFormat":2,"kind":3,"label":"•analogSetPinAttenuation(uint8_t pin, adc_attenuation_t attenuation)","score":1.3747211694717407,"sortText":"40500923analogSetPinAttenuation","textEdit":{"newText":"analogSetPinAttenuation(${1:uint8_t pin}, ${2:adc_attenuation_t attenuation})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nSet pin to use for ADC calibration if the esp is not already calibrated (25, 26 or 27)"},"filterText":"analogSetVRefPin","insertText":"analogSetVRefPin(${1:uint8_t pin})","insertTextFormat":2,"kind":3,"label":"•analogSetVRefPin(uint8_t pin)","score":1.3747211694717407,"sortText":"40500923analogSetVRefPin","textEdit":{"newText":"analogSetVRefPin(${1:uint8_t pin})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nSets the sample bits and read resolution Default is 12bit (0 - 4095) Range is 9 - 12"},"filterText":"analogSetWidth","insertText":"analogSetWidth(${1:uint8_t bits})","insertTextFormat":2,"kind":3,"label":"•analogSetWidth(uint8_t bits)","score":1.3747211694717407,"sortText":"40500923analogSetWidth","textEdit":{"newText":"analogSetWidth(${1:uint8_t bits})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"apb_change_cb_t","insertText":"apb_change_cb_t","insertTextFormat":2,"kind":8,"label":"•apb_change_cb_t","score":1.3747211694717407,"sortText":"40500923apb_change_cb_t","textEdit":{"newText":"apb_change_cb_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"apb_change_ev_t","insertText":"apb_change_ev_t","insertTextFormat":2,"kind":8,"label":"•apb_change_ev_t","score":1.3747211694717407,"sortText":"40500923apb_change_ev_t","textEdit":{"newText":"apb_change_ev_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-gpio.h\"`"},"filterText":"attachInterrupt","insertText":"attachInterrupt(${1:uint8_t pin}, ${2:void (*)()}, ${3:int mode})","insertTextFormat":2,"kind":3,"label":"•attachInterrupt(uint8_t pin, void (*)(), int mode)","score":1.3747211694717407,"sortText":"40500923attachInterrupt","textEdit":{"newText":"attachInterrupt(${1:uint8_t pin}, ${2:void (*)()}, ${3:int mode})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-gpio.h\"`"},"filterText":"attachInterruptArg","insertText":"attachInterruptArg(${1:uint8_t pin}, ${2:void (*)(void *)}, ${3:void *arg}, ${4:int mode})","insertTextFormat":2,"kind":3,"label":"•attachInterruptArg(uint8_t pin, void (*)(void *), void *arg, int mode)","score":1.3747211694717407,"sortText":"40500923attachInterruptArg","textEdit":{"newText":"attachInterruptArg(${1:uint8_t pin}, ${2:void (*)(void *)}, ${3:void *arg}, ${4:int mode})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"SLEEP_MODE","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \nCPU ON"},"filterText":"AWAKE","insertText":"AWAKE","insertTextFormat":2,"kind":20,"label":"•AWAKE","score":1.2690916061401367,"sortText":"405d8e68AWAKE","textEdit":{"newText":"AWAKE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"acosh","insertText":"acosh(${1:double})","insertTextFormat":2,"kind":3,"label":"•acosh(double)","score":1.2690916061401367,"sortText":"405d8e68acosh","textEdit":{"newText":"acosh(${1:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"acoshl","insertText":"acoshl(${1:long double})","insertTextFormat":2,"kind":3,"label":"•acoshl(long double)","score":1.2690916061401367,"sortText":"405d8e68acoshl","textEdit":{"newText":"acoshl(${1:long double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"acosl","insertText":"acosl(${1:long double})","insertTextFormat":2,"kind":3,"label":"•acosl(long double)","score":1.2690916061401367,"sortText":"405d8e68acosl","textEdit":{"newText":"acosl(${1:long double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"asin","insertText":"asin(${1:double})","insertTextFormat":2,"kind":3,"label":"•asin(double)","score":1.2690916061401367,"sortText":"405d8e68asin","textEdit":{"newText":"asin(${1:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"asinf","insertText":"asinf(${1:float})","insertTextFormat":2,"kind":3,"label":"•asinf(float)","score":1.2690916061401367,"sortText":"405d8e68asinf","textEdit":{"newText":"asinf(${1:float})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"asinhf","insertText":"asinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•asinhf(float)","score":1.2690916061401367,"sortText":"405d8e68asinhf","textEdit":{"newText":"asinhf(${1:float})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"asinl","insertText":"asinl(${1:long double})","insertTextFormat":2,"kind":3,"label":"•asinl(long double)","score":1.2690916061401367,"sortText":"405d8e68asinl","textEdit":{"newText":"asinl(${1:long double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"atan","insertText":"atan(${1:double})","insertTextFormat":2,"kind":3,"label":"•atan(double)","score":1.2690916061401367,"sortText":"405d8e68atan","textEdit":{"newText":"atan(${1:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"atan2f","insertText":"atan2f(${1:float}, ${2:float})","insertTextFormat":2,"kind":3,"label":"•atan2f(float, float)","score":1.2690916061401367,"sortText":"405d8e68atan2f","textEdit":{"newText":"atan2f(${1:float}, ${2:float})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"atan2l","insertText":"atan2l(${1:long double}, ${2:long double})","insertTextFormat":2,"kind":3,"label":"•atan2l(long double, long double)","score":1.2690916061401367,"sortText":"405d8e68atan2l","textEdit":{"newText":"atan2l(${1:long double}, ${2:long double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`  \nSingle precision versions of ANSI functions."},"filterText":"atanf","insertText":"atanf(${1:float})","insertTextFormat":2,"kind":3,"label":"•atanf(float)","score":1.2690916061401367,"sortText":"405d8e68atanf","textEdit":{"newText":"atanf(${1:float})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"atanhl","insertText":"atanhl(${1:long double})","insertTextFormat":2,"kind":3,"label":"•atanhl(long double)","score":1.2690916061401367,"sortText":"405d8e68atanhl","textEdit":{"newText":"atanhl(${1:long double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"abs","insertText":"std::abs(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::abs(long double __x)","score":1.2531143426895142,"sortText":"405f99f3abs","textEdit":{"newText":"std::abs(${1:long double __x})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"acos","insertText":"std::acos(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::acos(long double __x)","score":1.2531143426895142,"sortText":"405f99f3acos","textEdit":{"newText":"std::acos(${1:long double __x})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"asin","insertText":"std::asin($0)","insertTextFormat":2,"kind":3,"label":"•std::asin(…)","score":1.2531143426895142,"sortText":"405f99f3asin","textEdit":{"newText":"std::asin($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atan2","insertText":"std::atan2($0)","insertTextFormat":2,"kind":3,"label":"•std::atan2(…)","score":1.2531143426895142,"sortText":"405f99f3atan2","textEdit":{"newText":"std::atan2($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atanh","insertText":"std::atanh(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::atanh(long double __x)","score":1.2531143426895142,"sortText":"405f99f3atanh","textEdit":{"newText":"std::atanh(${1:long double __x})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"time.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"time.h\"`"},"filterText":"asctime","insertText":"asctime(${1:const struct tm *_tblock})","insertTextFormat":2,"kind":3,"label":"•asctime(const struct tm *_tblock)","score":1.1826096773147583,"sortText":"4068a03fasctime","textEdit":{"newText":"asctime(${1:const struct tm *_tblock})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"time.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"time.h\"`"},"filterText":"asctime_r","insertText":"asctime_r(${1:const struct tm *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•asctime_r(const struct tm *, char *)","score":1.1826096773147583,"sortText":"4068a03fasctime_r","textEdit":{"newText":"asctime_r(${1:const struct tm *}, ${2:char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"asinh","insertText":"std::asinh","insertTextFormat":2,"kind":18,"label":"•std::asinh","score":1.1391948461532593,"sortText":"406e2eddasinh","textEdit":{"newText":"std::asinh","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atan2","insertText":"std::atan2","insertTextFormat":2,"kind":18,"label":"•std::atan2","score":1.1391948461532593,"sortText":"406e2eddatan2","textEdit":{"newText":"std::atan2","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atanh","insertText":"std::atanh","insertTextFormat":2,"kind":18,"label":"•std::atanh","score":1.1391948461532593,"sortText":"406e2eddatanh","textEdit":{"newText":"std::atanh","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atanhl","insertText":"std::atanhl","insertTextFormat":2,"kind":18,"label":"•std::atanhl","score":1.1391948461532593,"sortText":"406e2eddatanhl","textEdit":{"newText":"std::atanhl","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"access","insertText":"access(${1:const char *__path}, ${2:int __amode})","insertTextFormat":2,"kind":3,"label":"•access(const char *__path, int __amode)","score":1.1118042469024658,"sortText":"4071b066access","textEdit":{"newText":"access(${1:const char *__path}, ${2:int __amode})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"alarm","insertText":"alarm(${1:unsigned int __secs})","insertTextFormat":2,"kind":3,"label":"•alarm(unsigned int __secs)","score":1.1118042469024658,"sortText":"4071b066alarm","textEdit":{"newText":"alarm(${1:unsigned int __secs})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"ARDUINO","insertText":"ARDUINO","insertTextFormat":2,"kind":1,"label":" ARDUINO","score":1,"sortText":"40800000ARDUINO","textEdit":{"newText":"ARDUINO","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"ARDUINO_ARCH_ESP32","insertText":"ARDUINO_ARCH_ESP32","insertTextFormat":2,"kind":1,"label":" ARDUINO_ARCH_ESP32","score":1,"sortText":"40800000ARDUINO_ARCH_ESP32","textEdit":{"newText":"ARDUINO_ARCH_ESP32","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"ARDUINO_BOARD","insertText":"ARDUINO_BOARD","insertTextFormat":2,"kind":1,"label":" ARDUINO_BOARD","score":1,"sortText":"40800000ARDUINO_BOARD","textEdit":{"newText":"ARDUINO_BOARD","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"ARDUINO_LOLIN32","insertText":"ARDUINO_LOLIN32","insertTextFormat":2,"kind":1,"label":" ARDUINO_LOLIN32","score":1,"sortText":"40800000ARDUINO_LOLIN32","textEdit":{"newText":"ARDUINO_LOLIN32","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"ARDUINO_VARIANT","insertText":"ARDUINO_VARIANT","insertTextFormat":2,"kind":1,"label":" ARDUINO_VARIANT","score":1,"sortText":"40800000ARDUINO_VARIANT","textEdit":{"newText":"ARDUINO_VARIANT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cstdlib>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cstdlib>`"},"filterText":"abs","insertText":"std::abs($0)","insertTextFormat":2,"kind":3,"label":"•std::abs(…)","score":0.98550808429718018,"sortText":"4083b5beabs","textEdit":{"newText":"std::abs($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nadd_const"},"filterText":"add_const","insertText":"std::add_const<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::add_const<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5beadd_const","textEdit":{"newText":"std::add_const<${1:typename _Tp}>","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nadd_lvalue_reference"},"filterText":"add_lvalue_reference","insertText":"std::add_lvalue_reference<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::add_lvalue_reference<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5beadd_lvalue_reference","textEdit":{"newText":"std::add_lvalue_reference<${1:typename _Tp}>","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \n@brief Provide aligned storage for types.  \n[meta.trans.other]  \nProvides aligned storage for any of the provided types of at least size \\_Len.  \n@see aligned_storage"},"filterText":"aligned_union","insertText":"std::aligned_union<${1:size_t _Len}, ${2:typename _Types}>","insertTextFormat":2,"kind":22,"label":"•std::aligned_union<size_t _Len, typename _Types>","score":0.98550808429718018,"sortText":"4083b5bealigned_union","textEdit":{"newText":"std::aligned_union<${1:size_t _Len}, ${2:typename _Types}>","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":21,"jsonrpc":"2.0"}
<<<
Content-Length: 1596

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'A'","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":18}}Content-Length: 11743

{"id":21,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 456

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'A'"}]}},"id":22,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":22,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":23,"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":23,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":19},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":19}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":20},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"S"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":3},"context":{"triggerKind":1}},"id":24,"jsonrpc":"2.0"}
<<<
Content-Length: 53012

{"id":24,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"size_t","insertText":"size_t","insertTextFormat":2,"kind":8,"label":"•size_t","score":10.712376594543457,"sortText":"3ed49a1bsize_t","textEdit":{"newText":"size_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"String","documentation":{"kind":"markdown","value":"String receivedString;  \nVariable to store if sending data was successful"},"filterText":"success","insertText":"success","insertTextFormat":2,"kind":6,"label":" success","score":9.0014286041259766,"sortText":"3eeffa26success","textEdit":{"newText":"success","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"short","insertText":"short","insertTextFormat":2,"kind":14,"label":" short","score":8,"sortText":"3f000000short","textEdit":{"newText":"short","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"signed","insertText":"signed","insertTextFormat":2,"kind":14,"label":" signed","score":8,"sortText":"3f000000signed","textEdit":{"newText":"signed","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"size_t","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"kind":15,"label":" sizeof(expression-or-type)","score":8,"sortText":"3f000000sizeof","textEdit":{"newText":"sizeof(${0:expression-or-type})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"size_t","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"kind":15,"label":" sizeof...(parameter-pack)","score":8,"sortText":"3f000000sizeof...","textEdit":{"newText":"sizeof...(${0:parameter-pack})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static","insertText":"static","insertTextFormat":2,"kind":14,"label":" static","score":8,"sortText":"3f000000static","textEdit":{"newText":"static","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static_assert","insertText":"static_assert(${1:expression}, ${0:message});","insertTextFormat":2,"kind":15,"label":" static_assert(expression, message);","score":8,"sortText":"3f000000static_assert","textEdit":{"newText":"static_assert(${1:expression}, ${0:message});","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"static_cast","insertText":"static_cast<${1:type}>(${0:expression})","insertTextFormat":2,"kind":15,"label":" static_cast<type>(expression)","score":8,"sortText":"3f000000static_cast","textEdit":{"newText":"static_cast<${1:type}>(${0:expression})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"struct","insertText":"struct","insertTextFormat":2,"kind":14,"label":" struct","score":8,"sortText":"3f000000struct","textEdit":{"newText":"struct","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"switch","insertText":"switch (${1:condition}) {\n${0:cases}\n}","insertTextFormat":2,"kind":15,"label":" switch (condition) {cases}","score":8,"sortText":"3f000000switch","textEdit":{"newText":"switch (${1:condition}) {\n${0:cases}\n}","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nThe string class"},"filterText":"String","insertText":"String","insertTextFormat":2,"kind":7,"label":"•String","score":6.0775456428527832,"sortText":"3f3d84bfString","textEdit":{"newText":"String","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Stream.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Stream.h\"`  \ncompatability macros for testing  \n#define getInt() parseInt()  \n#define getInt(skipChar) parseInt(skipchar)  \n#define getFloat() parseFloat()  \n#define getFloat(skipChar) parseFloat(skipChar)  \n#define getString( pre_string, post_string, buffer, length) readBytesBetween( pre_string, terminator, buffer, length)"},"filterText":"Stream","insertText":"Stream","insertTextFormat":2,"kind":7,"label":"•Stream","score":5.5006375312805176,"sortText":"3f4ffac7Stream","textEdit":{"newText":"Stream","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nAn inherited class for holding the result of a concatenation. These result objects are assumed to be writable by subsequent concatenations."},"filterText":"StringSumHelper","insertText":"StringSumHelper","insertTextFormat":2,"kind":7,"label":"•StringSumHelper","score":4.8400001525878906,"sortText":"3f651eb8StringSumHelper","textEdit":{"newText":"StringSumHelper","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"double","filterText":"sqrt","insertText":"sqrt(${1:double})","insertTextFormat":2,"kind":3,"label":" sqrt(double)","score":4.8400001525878906,"sortText":"3f651eb8sqrt","textEdit":{"newText":"sqrt(${1:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[2 overloads]","filterText":"Stream","insertText":"Stream($0)","insertTextFormat":2,"kind":4,"label":" Stream(…)","score":4.4000000953674316,"sortText":"3f733333Stream","textEdit":{"newText":"Stream($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[13 overloads]","filterText":"String","insertText":"String($0)","insertTextFormat":2,"kind":4,"label":" String(…)","score":4.4000000953674316,"sortText":"3f733333String","textEdit":{"newText":"String($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[12 overloads]","filterText":"StringSumHelper","insertText":"StringSumHelper($0)","insertTextFormat":2,"kind":4,"label":" StringSumHelper(…)","score":4.4000000953674316,"sortText":"3f733333StringSumHelper","textEdit":{"newText":"StringSumHelper($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"std","insertText":"std","insertTextFormat":2,"kind":9,"label":" std","score":3.5200002193450928,"sortText":"3f9eb851std","textEdit":{"newText":"std","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_DIS","insertText":"STICK_PARITY_DIS","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_DIS","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_DIS","textEdit":{"newText":"STICK_PARITY_DIS","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_EN","insertText":"STICK_PARITY_EN","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_EN","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_EN","textEdit":{"newText":"STICK_PARITY_EN","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•strlen(const char *)","score":1.6522369384765625,"sortText":"402c8380strlen","textEdit":{"newText":"strlen(${1:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"SDA","insertText":"SDA","insertTextFormat":2,"kind":6,"label":"•SDA","score":1.5037370920181274,"sortText":"403f858bSDA","textEdit":{"newText":"SDA","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"STA_CONNECTED_BIT","insertText":"STA_CONNECTED_BIT","insertTextFormat":2,"kind":6,"label":"•STA_CONNECTED_BIT","score":1.5037370920181274,"sortText":"403f858bSTA_CONNECTED_BIT","textEdit":{"newText":"STA_CONNECTED_BIT","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"StaticSemaphore_t","insertText":"StaticSemaphore_t","insertTextFormat":2,"kind":8,"label":"•StaticSemaphore_t","score":1.5037370920181274,"sortText":"403f858bStaticSemaphore_t","textEdit":{"newText":"StaticSemaphore_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"scanf","insertText":"scanf(${1:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•scanf(const char *, ...)","score":1.5037370920181274,"sortText":"403f858bscanf","textEdit":{"newText":"scanf(${1:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Esp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Esp.h\"`"},"filterText":"sketchSize_t","insertText":"sketchSize_t","insertTextFormat":2,"kind":8,"label":"•sketchSize_t","score":1.5037370920181274,"sortText":"403f858bsketchSize_t","textEdit":{"newText":"sketchSize_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sprintf","insertText":"sprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sprintf(char *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858bsprintf","textEdit":{"newText":"sprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":1.5037370920181274,"sortText":"403f858bsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strchr","insertText":"strchr(${1:const char *}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•strchr(const char *, int)","score":1.5037370920181274,"sortText":"403f858bstrchr","textEdit":{"newText":"strchr(${1:const char *}, ${2:int})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcoll","insertText":"strcoll(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcoll(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcoll","textEdit":{"newText":"strcoll(${1:const char *}, ${2:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcspn","insertText":"strcspn(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcspn(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcspn","textEdit":{"newText":"strcspn(${1:const char *}, ${2:const char *})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strlcat(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrlcat","textEdit":{"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncasecmp(const char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncasecmp","textEdit":{"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncpy","insertText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncpy(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncpy","textEdit":{"newText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nGetting SSID and password of target AP"},"filterText":"SC_STATUS_GETTING_SSID_PSWD","insertText":"SC_STATUS_GETTING_SSID_PSWD","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_GETTING_SSID_PSWD","score":1.3747211694717407,"sortText":"40500923SC_STATUS_GETTING_SSID_PSWD","textEdit":{"newText":"SC_STATUS_GETTING_SSID_PSWD","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nConnected to AP successfully"},"filterText":"SC_STATUS_LINK_OVER","insertText":"SC_STATUS_LINK_OVER","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_LINK_OVER","score":1.3747211694717407,"sortText":"40500923SC_STATUS_LINK_OVER","textEdit":{"newText":"SC_STATUS_LINK_OVER","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \n@brief The callback of SmartConfig, executed when smart-config status changed.  \n@param status Status of SmartConfig:  \n\\- SC_STATUS_GETTING_SSID_PSWD : pdata is a pointer of smartconfig_type_t, means config type.  \n\\- SC_STATUS_LINK : pdata is a pointer to wifi_config_t.  \n\\- SC_STATUS_LINK_OVER : pdata is a pointer of phone's IP address(4 bytes) if pdata unequal NULL.  \n\\- otherwise : parameter void \\*pdata is NULL.  \n@param pdata According to the different status have different values."},"filterText":"sc_callback_t","insertText":"sc_callback_t","insertTextFormat":2,"kind":8,"label":"•sc_callback_t","score":1.3747211694717407,"sortText":"40500923sc_callback_t","textEdit":{"newText":"sc_callback_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaAttachPin","insertText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaAttachPin(uint8_t pin, uint8_t channel)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaAttachPin","textEdit":{"newText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaWrite","insertText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaWrite(uint8_t channel, uint8_t duty)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaWrite","textEdit":{"newText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nHelper functions to translate frequency to clock divider and back"},"filterText":"spiFrequencyToClockDiv","insertText":"spiFrequencyToClockDiv(${1:uint32_t freq})","insertTextFormat":2,"kind":3,"label":"•spiFrequencyToClockDiv(uint32_t freq)","score":1.3747211694717407,"sortText":"40500923spiFrequencyToClockDiv","textEdit":{"newText":"spiFrequencyToClockDiv(${1:uint32_t freq})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiGetClockDiv","insertText":"spiGetClockDiv(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiGetClockDiv(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiGetClockDiv","textEdit":{"newText":"spiGetClockDiv(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nDeactivate enabled SPI_CSx pins"},"filterText":"spiSSClear","insertText":"spiSSClear(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSClear(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSClear","textEdit":{"newText":"spiSSClear(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nEnable/Disable hardware control of SPI_CSx pins"},"filterText":"spiSSEnable","insertText":"spiSSEnable(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSEnable(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSEnable","textEdit":{"newText":"spiSSEnable(${1:spi_t *spi})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"spi_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiStartBus","insertText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","insertTextFormat":2,"kind":3,"label":"•spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder)","score":1.3747211694717407,"sortText":"40500923spiStartBus","textEdit":{"newText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteShortNL","insertText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteShortNL(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteShortNL","textEdit":{"newText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteWord","insertText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteWord(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteWord","textEdit":{"newText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"40500923system_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"SLEEP_MODE","insertText":"SLEEP_MODE","insertTextFormat":2,"kind":8,"label":"•SLEEP_MODE","score":1.2690916061401367,"sortText":"405d8e68SLEEP_MODE","textEdit":{"newText":"SLEEP_MODE","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinh","insertText":"sinh(${1:double})","insertTextFormat":2,"kind":3,"label":"•sinh(double)","score":1.2690916061401367,"sortText":"405d8e68sinh","textEdit":{"newText":"sinh(${1:double})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinhf","insertText":"sinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•sinhf(float)","score":1.2690916061401367,"sortText":"405d8e68sinhf","textEdit":{"newText":"sinhf(${1:float})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_a","insertText":"step_a","insertTextFormat":2,"kind":20,"label":"•step_a","score":1.2690916061401367,"sortText":"405d8e68step_a","textEdit":{"newText":"step_a","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_b","insertText":"step_b","insertTextFormat":2,"kind":20,"label":"•step_b","score":1.2690916061401367,"sortText":"405d8e68step_b","textEdit":{"newText":"step_b","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"signbit","insertText":"std::signbit($0)","insertTextFormat":2,"kind":3,"label":"•std::signbit(…)","score":1.2531143426895142,"sortText":"405f99f3signbit","textEdit":{"newText":"std::signbit($0)","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sinh","insertText":"std::sinh(${1:float __x})","insertTextFormat":2,"kind":3,"label":"•std::sinh(float __x)","score":1.2531143426895142,"sortText":"405f99f3sinh","textEdit":{"newText":"std::sinh(${1:float __x})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sqrt","insertText":"std::sqrt(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::sqrt(long double __x)","score":1.2531143426895142,"sortText":"405f99f3sqrt","textEdit":{"newText":"std::sqrt(${1:long double __x})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/gpio_sd_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"gpio_sd_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/gpio_sd_struct.h\"`"},"filterText":"SIGMADELTA","insertText":"SIGMADELTA","insertTextFormat":2,"kind":6,"label":"•SIGMADELTA","score":1.1871124505996704,"sortText":"40680cb3SIGMADELTA","textEdit":{"newText":"SIGMADELTA","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn the maximum number of available memory regions which could be returned by soc_get_available_memory_regions(). Used to size the array passed to that function."},"filterText":"soc_get_available_memory_region_max_count","insertText":"soc_get_available_memory_region_max_count()","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_region_max_count()","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_region_max_count","textEdit":{"newText":"soc_get_available_memory_region_max_count()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn available memory regions for this SoC. Each available memory region is a contiguous piece of memory which is not being used by static data, used by ROM code, or reserved by a component using the SOC_RESERVE_MEMORY_REGION() macro.  \nThis result is soc_memory_regions[] minus all regions reserved via the SOC_RESERVE_MEMORY_REGION() macro (which may also split some regions up.)  \nAt startup, all available memory returned by this function is registered as heap space.  \n@note OS-level startup function only, not recommended to call from app code.  \n@param regions Pointer to an array for reading available regions into.  \nSize of the array should be at least the result of soc_get_available_memory_region_max_count(). Entries in the array will be ordered by memory address.  \n@return Number of entries copied to 'regions'. Will be no greater than the result of soc_get_available_memory_region_max_count()."},"filterText":"soc_get_available_memory_regions","insertText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_regions(soc_memory_region_t *regions)","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_regions","textEdit":{"newText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_region_count","insertText":"soc_memory_region_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_region_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_count","textEdit":{"newText":"soc_memory_region_count","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory on a particular SoC."},"filterText":"soc_memory_region_t","insertText":"soc_memory_region_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_t","textEdit":{"newText":"soc_memory_region_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_region_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_regions","insertText":"soc_memory_regions","insertTextFormat":2,"kind":6,"label":"•soc_memory_regions","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_regions","textEdit":{"newText":"soc_memory_regions","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_type_count","insertText":"soc_memory_type_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_type_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_count","textEdit":{"newText":"soc_memory_type_count","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nType descriptor holds a description for a particular type of memory on a particular SoC."},"filterText":"soc_memory_type_desc_t","insertText":"soc_memory_type_desc_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_type_desc_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_desc_t","textEdit":{"newText":"soc_memory_type_desc_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_type_desc_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nConstant table of tag descriptors for all this SoC's tags"},"filterText":"soc_memory_types","insertText":"soc_memory_types","insertTextFormat":2,"kind":6,"label":"•soc_memory_types","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_types","textEdit":{"newText":"soc_memory_types","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory reserved on this SoC for a particular use (ie not available for stack/heap usage.)"},"filterText":"soc_reserved_region_t","insertText":"soc_reserved_region_t","insertTextFormat":2,"kind":8,"label":"•soc_reserved_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_reserved_region_t","textEdit":{"newText":"soc_reserved_region_t","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swscanf","insertText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swscanf(const wchar_t *, const wchar_t *, ...)","score":1.1826096773147583,"sortText":"4068a03fswscanf","textEdit":{"newText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalbln","insertText":"std::scalbln","insertTextFormat":2,"kind":18,"label":"•std::scalbln","score":1.1391948461532593,"sortText":"406e2eddscalbln","textEdit":{"newText":"std::scalbln","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnf","insertText":"std::scalblnf","insertTextFormat":2,"kind":18,"label":"•std::scalblnf","score":1.1391948461532593,"sortText":"406e2eddscalblnf","textEdit":{"newText":"std::scalblnf","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnl","insertText":"std::scalblnl","insertTextFormat":2,"kind":18,"label":"•std::scalblnl","score":1.1391948461532593,"sortText":"406e2eddscalblnl","textEdit":{"newText":"std::scalblnl","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_LSBFIRST","insertText":"SPI_BITORDER_LSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_LSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_LSBFIRST","textEdit":{"newText":"SPI_BITORDER_LSBFIRST","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_MSBFIRST","insertText":"SPI_BITORDER_MSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_MSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_MSBFIRST","textEdit":{"newText":"SPI_BITORDER_MSBFIRST","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sbrk","insertText":"sbrk(${1:ptrdiff_t __incr})","insertTextFormat":2,"kind":3,"label":"•sbrk(ptrdiff_t __incr)","score":1.1118042469024658,"sortText":"4071b066sbrk","textEdit":{"newText":"sbrk(${1:ptrdiff_t __incr})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}}}}]}}Content-Length: 1596

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S'","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":20}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":21},"contentChanges":[{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":3}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":4},"context":{"triggerKind":3}},"id":25,"jsonrpc":"2.0"}
<<<
Content-Length: 60466

{"id":25,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"Callback Function that sents message"},"filterText":"OnDataSent","insertText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","insertTextFormat":2,"kind":3,"label":" OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)","score":9.0014286041259766,"sortText":"3feffa26OnDataSent","textEdit":{"newText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"initLDRSensor","insertText":"initLDRSensor()","insertTextFormat":2,"kind":3,"label":" initLDRSensor()","score":9.0014286041259766,"sortText":"3feffa26initLDRSensor","textEdit":{"newText":"initLDRSensor()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":" sensors_type_t","score":1.8537870645523071,"sortText":"4012b71bsensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":" HardwareSerial","score":4.8400006294250488,"sortText":"4017ae13HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"esp_now_send_cb_t","insertText":"esp_now_send_cb_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_cb_t","score":7.2600007057189941,"sortText":"4017ae13esp_now_send_cb_t","textEdit":{"newText":"esp_now_send_cb_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"402cccccHardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_COLOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GRAVITY","insertText":"SENSOR_TYPE_GRAVITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GRAVITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GRAVITY","textEdit":{"newText":"SENSOR_TYPE_GRAVITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_MAGNETIC_FIELD","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_OBJECT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_OBJECT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_OBJECT_TEMPERATURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PRESSURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PROXIMITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_VOLTAGE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"seed48","insertText":"seed48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•seed48(unsigned short *)","score":1.5037370920181274,"sortText":"403f858bseed48","textEdit":{"newText":"seed48(${1:unsigned short *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":1.5037370920181274,"sortText":"403f858bsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":1.5037370920181274,"sortText":"403f858bsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"setenv","insertText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•setenv(const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"403f858bsetenv","textEdit":{"newText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":1.5037370920181274,"sortText":"403f858bsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":1.5037370920181274,"sortText":"403f858bsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`  \nfunction takes the following frequencies as valid values:  \n240, 160, 80 <<< For all XTAL types 40, 20, 10 <<< For 40MHz XTAL 26, 13 <<< For 26MHz XTAL 24, 12 <<< For 24MHz XTAL"},"filterText":"setCpuFrequencyMhz","insertText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","insertTextFormat":2,"kind":3,"label":"•setCpuFrequencyMhz(uint32_t cpu_freq_mhz)","score":1.3747211694717407,"sortText":"40500923setCpuFrequencyMhz","textEdit":{"newText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"esp_now_send_status_t","insertText":"esp_now_send_status_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_status_t","score":5.4166908264160156,"sortText":"4052aa78esp_now_send_status_t","textEdit":{"newText":"esp_now_send_status_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*p : the pointer to output string.  \n@param int len : the string length.  \n@return None."},"filterText":"send_packet","insertText":"send_packet(${1:uint8_t *p}, ${2:int len})","insertTextFormat":2,"kind":3,"label":"•send_packet(uint8_t *p, int len)","score":1.2690916061401367,"sortText":"405d8e68send_packet","textEdit":{"newText":"send_packet(${1:uint8_t *p}, ${2:int len})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"405d8e68set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"esp_err_t","filterText":"esp_now_send","insertText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","insertTextFormat":2,"kind":3,"label":" esp_now_send(const uint8_t *peer_addr, const uint8_t *data, size_t len)","score":4.8400001525878906,"sortText":"40651eb8esp_now_send","textEdit":{"newText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"setlocale","insertText":"setlocale(${1:int category}, ${2:const char *locale})","insertTextFormat":2,"kind":3,"label":"•setlocale(int category, const char *locale)","score":1.1826096773147583,"sortText":"4068a03fsetlocale","textEdit":{"newText":"setlocale(${1:int category}, ${2:const char *locale})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"select","insertText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","insertTextFormat":2,"kind":3,"label":"•select(int nfds, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *errorfds, struct timeval *timeout)","score":1.1118042469024658,"sortText":"4071b066select","textEdit":{"newText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"setitimer","insertText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","insertTextFormat":2,"kind":3,"label":"•setitimer(int __which, const struct itimerval *__value, struct itimerval *__ovalue)","score":1.1118042469024658,"sortText":"4071b066setitimer","textEdit":{"newText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"settimeofday","insertText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","insertTextFormat":2,"kind":3,"label":"•settimeofday(const struct timeval *, const struct timezone *)","score":1.1118042469024658,"sortText":"4071b066settimeofday","textEdit":{"newText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setuid","insertText":"setuid(${1:uid_t __uid})","insertTextFormat":2,"kind":3,"label":"•setuid(uid_t __uid)","score":1.1118042469024658,"sortText":"4071b066setuid","textEdit":{"newText":"setuid(${1:uid_t __uid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartBitsNum4Char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SEVEN_BITS","insertText":"SEVEN_BITS","insertTextFormat":2,"kind":20,"label":"•SEVEN_BITS","score":1.2690916061401367,"sortText":"4071dc9bSEVEN_BITS","textEdit":{"newText":"SEVEN_BITS","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_probe_req_rx_t","insertText":"system_event_ap_probe_req_rx_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_probe_req_rx_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_probe_req_rx_t","textEdit":{"newText":"system_event_ap_probe_req_rx_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staconnected_t","insertText":"system_event_ap_staconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staconnected_t","textEdit":{"newText":"system_event_ap_staconnected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_stadisconnected_t","insertText":"system_event_ap_stadisconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_stadisconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_stadisconnected_t","textEdit":{"newText":"system_event_ap_stadisconnected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staipassigned_t","insertText":"system_event_ap_staipassigned_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staipassigned_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staipassigned_t","textEdit":{"newText":"system_event_ap_staipassigned_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_got_ip6_t","insertText":"system_event_got_ip6_t","insertTextFormat":2,"kind":8,"label":"•system_event_got_ip6_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_got_ip6_t","textEdit":{"newText":"system_event_got_ip6_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_handler_t","insertText":"system_event_handler_t","insertTextFormat":2,"kind":8,"label":"•system_event_handler_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_handler_t","textEdit":{"newText":"system_event_handler_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_info_t","insertText":"system_event_info_t","insertTextFormat":2,"kind":8,"label":"•system_event_info_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_info_t","textEdit":{"newText":"system_event_info_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_authmode_change_t","insertText":"system_event_sta_authmode_change_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_authmode_change_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_authmode_change_t","textEdit":{"newText":"system_event_sta_authmode_change_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_connected_t","insertText":"system_event_sta_connected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_connected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_connected_t","textEdit":{"newText":"system_event_sta_connected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_disconnected_t","insertText":"system_event_sta_disconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_disconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_disconnected_t","textEdit":{"newText":"system_event_sta_disconnected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_got_ip_t","insertText":"system_event_sta_got_ip_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_got_ip_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_got_ip_t","textEdit":{"newText":"system_event_sta_got_ip_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_scan_done_t","insertText":"system_event_sta_scan_done_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_scan_done_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_scan_done_t","textEdit":{"newText":"system_event_sta_scan_done_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_fail_reason_t","insertText":"system_event_sta_wps_fail_reason_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_fail_reason_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_fail_reason_t","textEdit":{"newText":"system_event_sta_wps_fail_reason_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_t","insertText":"system_event_t","insertTextFormat":2,"kind":8,"label":"•system_event_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_t","textEdit":{"newText":"system_event_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"new_handler","documentation":{"kind":"markdown","value":"From `<new>`  \nTakes a replacement handler as the argument, returns the previous handler."},"filterText":"set_new_handler","insertText":"std::set_new_handler(${1:new_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_new_handler(new_handler)","score":0.98550808429718018,"sortText":"4083b5beset_new_handler","textEdit":{"newText":"std::set_new_handler(${1:new_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"terminate_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_terminate","insertText":"std::set_terminate(${1:terminate_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_terminate(terminate_handler)","score":0.98550808429718018,"sortText":"4083b5beset_terminate","textEdit":{"newText":"std::set_terminate(${1:terminate_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"unexpected_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_unexpected","insertText":"std::set_unexpected(${1:unexpected_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_unexpected(unexpected_handler)","score":0.98550808429718018,"sortText":"4083b5beset_unexpected","textEdit":{"newText":"std::set_unexpected(${1:unexpected_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a matching sub-sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@param \\_\\_last2 A forward iterator.  \n@return The first iterator @c i in the range @p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2)) such that @c \\*(i+N) == @p  \n\\*(\\_\\_first2+N) for each @c N in the range @p [0,\\_\\_last2-\\_\\_first2), or @p \\_\\_last1 if no such iterator exists.  \nSearches the range @p [\\_\\_first1,\\_\\_last1) for a sub-sequence that compares equal value-by-value with the sequence given by @p [\\_\\_first2,\\_\\_last2) and returns an iterator to the first element of the sub-sequence, or @p \\_\\_last1 if the sub-sequence is not found.  \nBecause the sub-sequence must lie completely within the range @p [\\_\\_first1,\\_\\_last1) it must start at a position less than @p \\_\\_last1-(\\_\\_last2-\\_\\_first2) where @p \\_\\_last2-\\_\\_first2 is the length of the sub-sequence.  \nThis means that the returned iterator @c i will be in the range  \n@p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2))"},"filterText":"search","insertText":"std::search($0)","insertTextFormat":2,"kind":3,"label":"•std::search(…)","score":0.92650353908538818,"sortText":"4092d0aasearch","textEdit":{"newText":"std::search($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a number of consecutive values.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first A forward iterator.  \n@param \\_\\_last A forward iterator.  \n@param \\_\\_count The number of consecutive values.  \n@param \\_\\_val The value to find.  \n@return The first iterator @c i in the range @p [\\_\\_first,\\_\\_last-\\_\\_count) such that @c \\*(i+N) == @p \\_\\_val for each @c N in the range @p [0,\\_\\_count), or @p \\_\\_last if no such iterator exists.  \nSearches the range @p [\\_\\_first,\\_\\_last) for @p count consecutive elements equal to @p \\_\\_val."},"filterText":"search_n","insertText":"std::search_n($0)","insertTextFormat":2,"kind":3,"label":"•std::search_n(…)","score":0.92650353908538818,"sortText":"4092d0aasearch_n","textEdit":{"newText":"std::search_n($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <random>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<random>`  \n@brief The seed_seq class generates sequences of seeds for random number generators."},"filterText":"seed_seq","insertText":"std::seed_seq","insertTextFormat":2,"kind":7,"label":"•std::seed_seq","score":0.92650353908538818,"sortText":"4092d0aaseed_seq","textEdit":{"newText":"std::seed_seq","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the difference of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range.  \nIterators increment for each range. When the current element of the first range is less than the second according to @p \\_\\_comp, that element is copied and the iterator advances. If the current element of the second range is less, no element is copied and the iterator advances.  \nIf an element is contained in both ranges according to @p \\_\\_comp, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_difference","insertText":"std::set_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_difference","textEdit":{"newText":"std::set_difference($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.92650353908538818,"sortText":"4092d0aaset_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the symmetric difference of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is less than the other, that element is copied and the iterator advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_symmetric_difference","insertText":"std::set_symmetric_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_symmetric_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_symmetric_difference","textEdit":{"newText":"std::set_symmetric_difference($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the union of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is less than the other,  \nthat element is copied and the iterator advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_union","insertText":"std::set_union($0)","insertTextFormat":2,"kind":3,"label":"•std::set_union(…)","score":0.92650353908538818,"sortText":"4092d0aaset_union","textEdit":{"newText":"std::set_union($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.91311287879943848,"sortText":"40963e3csetsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"send","insertText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•send(int s, const void *dataptr, size_t size, int flags)","score":0.90964943170547485,"sortText":"40972137send","textEdit":{"newText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendmsg","insertText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•sendmsg(int s, const struct msghdr *message, int flags)","score":0.90964943170547485,"sortText":"40972137sendmsg","textEdit":{"newText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendto","insertText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•sendto(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964943170547485,"sortText":"40972137sendto","textEdit":{"newText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <clocale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<clocale>`"},"filterText":"setlocale","insertText":"std::setlocale","insertTextFormat":2,"kind":18,"label":"•std::setlocale","score":0.8959164023399353,"sortText":"409aa539setlocale","textEdit":{"newText":"std::setlocale","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station connected to ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STACONNECTED","insertText":"SYSTEM_EVENT_AP_STACONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STACONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STACONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STACONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station disconnected from ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STADISCONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STADISCONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STADISCONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet phy link up"},"filterText":"SYSTEM_EVENT_ETH_CONNECTED","insertText":"SYSTEM_EVENT_ETH_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_ETH_CONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet got IP from connected AP"},"filterText":"SYSTEM_EVENT_ETH_GOT_IP","insertText":"SYSTEM_EVENT_ETH_GOT_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_GOT_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_GOT_IP","textEdit":{"newText":"SYSTEM_EVENT_ETH_GOT_IP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet stop"},"filterText":"SYSTEM_EVENT_ETH_STOP","insertText":"SYSTEM_EVENT_ETH_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_STOP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_STOP","textEdit":{"newText":"SYSTEM_EVENT_ETH_STOP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nthe auth mode of AP connected by ESP32 station changed"},"filterText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_AUTHMODE_CHANGE","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_AUTHMODE_CHANGE","textEdit":{"newText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station connected to AP"},"filterText":"SYSTEM_EVENT_STA_CONNECTED","insertText":"SYSTEM_EVENT_STA_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_STA_CONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station lost IP and the IP is reset to 0"},"filterText":"SYSTEM_EVENT_STA_LOST_IP","insertText":"SYSTEM_EVENT_STA_LOST_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_LOST_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_LOST_IP","textEdit":{"newText":"SYSTEM_EVENT_STA_LOST_IP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":26,"jsonrpc":"2.0"}
<<<
Content-Length: 1597

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Se'","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":21}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":22},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"i"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":5},"context":{"triggerKind":3}},"id":27,"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":26,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}Content-Length: 27745

{"id":27,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"sei","insertText":"sei()","insertTextFormat":2,"kind":1,"label":" sei()","score":0.84263044595718384,"sortText":"4028495fsei","textEdit":{"newText":"sei()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":1.3747211694717407,"sortText":"40956184system_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_info_t","insertText":"system_event_info_t","insertTextFormat":2,"kind":8,"label":"•system_event_info_t","score":1.3747211694717407,"sortText":"40956184system_event_info_t","textEdit":{"newText":"system_event_info_t","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.92650341987609863,"sortText":"40ba588fset_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.84486329555511475,"sortText":"40efcf5cSERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/ets_sys.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/ets_sys.h\"`  \n@brief Set the Idle callback, when Tasks are processed, will call the callback before CPU goto sleep.  \n@param ets_idle_cb_t func : The callback function.  \n@param void \\*arg : Argument of the callback.  \n@return None"},"filterText":"ets_set_idle_cb","insertText":"ets_set_idle_cb(${1:ets_idle_cb_t func}, ${2:void *arg})","insertTextFormat":2,"kind":3,"label":"•ets_set_idle_cb(ets_idle_cb_t func, void *arg)","score":1.2690916061401367,"sortText":"40f8a156ets_set_idle_cb","textEdit":{"newText":"ets_set_idle_cb(${1:ets_idle_cb_t func}, ${2:void *arg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_icacheattr","insertText":"xthal_set_icacheattr(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_icacheattr(unsigned int)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_icacheattr","textEdit":{"newText":"xthal_set_icacheattr(${1:unsigned int})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nSet/get virtual priority of an interrupt:"},"filterText":"xthal_set_int_vpri","insertText":"xthal_set_int_vpri(${1:int intnum}, ${2:int vpri})","insertTextFormat":2,"kind":3,"label":"•xthal_set_int_vpri(int intnum, int vpri)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_int_vpri","textEdit":{"newText":"xthal_set_int_vpri(${1:int intnum}, ${2:int vpri})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_intclear","insertText":"xthal_set_intclear(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_intclear(unsigned int)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_intclear","textEdit":{"newText":"xthal_set_intclear(${1:unsigned int})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_intenable","insertText":"xthal_set_intenable(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_intenable(unsigned int)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_intenable","textEdit":{"newText":"xthal_set_intenable(${1:unsigned int})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_intset","insertText":"xthal_set_intset(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_intset(unsigned int)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_intset","textEdit":{"newText":"xthal_set_intset(${1:unsigned int})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_api.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_api.h\"`  \n\\------------------------------------------------------------------------------- Call this function to clear the specified (s/w or edge-triggered) interrupt.  \n\\-------------------------------------------------------------------------------"},"filterText":"xt_set_intclear","insertText":"xt_set_intclear(${1:unsigned int arg})","insertTextFormat":2,"kind":3,"label":"•xt_set_intclear(unsigned int arg)","score":1.1826096773147583,"sortText":"4103b5bdxt_set_intclear","textEdit":{"newText":"xt_set_intclear(${1:unsigned int arg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_api.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"xt_handler","documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_api.h\"`  \n\\------------------------------------------------------------------------------- Call this function to set a handler for the specified interrupt. The handler will be installed on the core that calls this function.  \nn - Interrupt number.  \nf - Handler function address, NULL to uninstall handler.  \narg - Argument to be passed to handler.  \n\\-------------------------------------------------------------------------------"},"filterText":"xt_set_interrupt_handler","insertText":"xt_set_interrupt_handler(${1:int n}, ${2:xt_handler f}, ${3:void *arg})","insertTextFormat":2,"kind":3,"label":"•xt_set_interrupt_handler(int n, xt_handler f, void *arg)","score":1.1826096773147583,"sortText":"4103b5bdxt_set_interrupt_handler","textEdit":{"newText":"xt_set_interrupt_handler(${1:int n}, ${2:xt_handler f}, ${3:void *arg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_api.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_api.h\"`  \n\\------------------------------------------------------------------------------- Call this function to set the specified (s/w) interrupt.  \n\\-------------------------------------------------------------------------------"},"filterText":"xt_set_intset","insertText":"xt_set_intset(${1:unsigned int arg})","insertTextFormat":2,"kind":3,"label":"•xt_set_intset(unsigned int arg)","score":1.1826096773147583,"sortText":"4103b5bdxt_set_intset","textEdit":{"newText":"xt_set_intset(${1:unsigned int arg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief GPIO set interrupt trigger type  \n@param gpio_num GPIO number. If you want to set the trigger type of e.g. of GPIO16, gpio_num should be GPIO_NUM_16 (16);  \n@param intr_type Interrupt type, select from gpio_int_type_t  \n@return  \n\\- ESP_OK Success  \n\\- ESP_ERR_INVALID_ARG Parameter error"},"filterText":"gpio_set_intr_type","insertText":"gpio_set_intr_type(${1:gpio_num_t gpio_num}, ${2:gpio_int_type_t intr_type})","insertTextFormat":2,"kind":3,"label":"•gpio_set_intr_type(gpio_num_t gpio_num, gpio_int_type_t intr_type)","score":1.1118042469024658,"sortText":"4112d0aagpio_set_intr_type","textEdit":{"newText":"gpio_set_intr_type(${1:gpio_num_t gpio_num}, ${2:gpio_int_type_t intr_type})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_intr_alloc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_intr_alloc.h\"`  \n@brief Set the \"in IRAM\" status of the handler.  \n@note Does not work on shared interrupts.  \n@param handle The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus  \n@param is_in_iram Whether the handler associated with this handle resides in IRAM.  \nHandlers residing in IRAM can be called when cache is disabled.  \n@return ESP_ERR_INVALID_ARG if the combination of arguments is invalid.  \nESP_OK otherwise"},"filterText":"esp_intr_set_in_iram","insertText":"esp_intr_set_in_iram(${1:intr_handle_t handle}, ${2:bool is_in_iram})","insertTextFormat":2,"kind":3,"label":"•esp_intr_set_in_iram(intr_handle_t handle, bool is_in_iram)","score":1.3747211694717407,"sortText":"41156184esp_intr_set_in_iram","textEdit":{"newText":"esp_intr_set_in_iram(${1:intr_handle_t handle}, ${2:bool is_in_iram})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_wifi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_wifi.h\"`  \n@brief Set the inactive time of the ESP32 STA or AP  \n@attention 1. For Station, If the station does not receive a beacon frame from the connected SoftAP during the inactive time,  \ndisconnect from SoftAP. Default 6s.  \n@attention 2. For SoftAP, If the softAP doesn't receive any data from the connected STA during inactive time,  \nthe softAP will force deauth the STA. Default is 300s.  \n@attention 3. The inactive time configuration is not stored into flash  \n@param ifx interface to be configured.  \n@param sec Inactive time. Unit seconds.  \n@return  \n\\- ESP_OK: succeed  \n\\- ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init  \n\\- ESP_ERR_WIFI_NOT_STARTED: WiFi is not started by esp_wifi_start  \n\\- ESP_ERR_WIFI_ARG: invalid argument, For Station, if sec is less than 3. For SoftAP, if sec is less than 10."},"filterText":"esp_wifi_set_inactive_time","insertText":"esp_wifi_set_inactive_time(${1:wifi_interface_t ifx}, ${2:uint16_t sec})","insertTextFormat":2,"kind":3,"label":"•esp_wifi_set_inactive_time(wifi_interface_t ifx, uint16_t sec)","score":1.3747211694717407,"sortText":"41156184esp_wifi_set_inactive_time","textEdit":{"newText":"esp_wifi_set_inactive_time(${1:wifi_interface_t ifx}, ${2:uint16_t sec})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/xtruntime.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_xtos_handler","documentation":{"kind":"markdown","value":"From `\"xtensa/xtruntime.h\"`"},"filterText":"_xtos_set_interrupt_handler","insertText":"_xtos_set_interrupt_handler(${1:int n}, ${2:_xtos_handler f})","insertTextFormat":2,"kind":3,"label":"•_xtos_set_interrupt_handler(int n, _xtos_handler f)","score":1.2690917253494263,"sortText":"41276889_xtos_set_interrupt_handler","textEdit":{"newText":"_xtos_set_interrupt_handler(${1:int n}, ${2:_xtos_handler f})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/xtruntime.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_xtos_handler","documentation":{"kind":"markdown","value":"From `\"xtensa/xtruntime.h\"`"},"filterText":"_xtos_set_interrupt_handler_arg","insertText":"_xtos_set_interrupt_handler_arg(${1:int n}, ${2:_xtos_handler f}, ${3:void *arg})","insertTextFormat":2,"kind":3,"label":"•_xtos_set_interrupt_handler_arg(int n, _xtos_handler f, void *arg)","score":1.2690917253494263,"sortText":"41276889_xtos_set_interrupt_handler_arg","textEdit":{"newText":"_xtos_set_interrupt_handler_arg(${1:int n}, ${2:_xtos_handler f}, ${3:void *arg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/xtruntime.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/xtruntime.h\"`"},"filterText":"_xtos_set_intlevel","insertText":"_xtos_set_intlevel(${1:int intlevel})","insertTextFormat":2,"kind":3,"label":"•_xtos_set_intlevel(int intlevel)","score":1.2690917253494263,"sortText":"41276889_xtos_set_intlevel","textEdit":{"newText":"_xtos_set_intlevel(${1:int intlevel})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \n@brief Set I2S data source  \n@param src I2S DMA data source, I2S DMA can get data from digital signals or from ADC.  \n@return  \n\\- ESP_OK success"},"filterText":"adc_set_i2s_data_source","insertText":"adc_set_i2s_data_source(${1:adc_i2s_source_t src})","insertTextFormat":2,"kind":3,"label":"•adc_set_i2s_data_source(adc_i2s_source_t src)","score":0.96751213073730469,"sortText":"413198efadc_set_i2s_data_source","textEdit":{"newText":"adc_set_i2s_data_source(${1:adc_i2s_source_t src})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver.h\"`"},"filterText":"dhcp_search_ip_on_mac","insertText":"dhcp_search_ip_on_mac(${1:u8_t *mac}, ${2:ip4_addr_t *ip})","insertTextFormat":2,"kind":3,"label":"•dhcp_search_ip_on_mac(u8_t *mac, ip4_addr_t *ip)","score":0.88832318782806396,"sortText":"41427db5dhcp_search_ip_on_mac","textEdit":{"newText":"dhcp_search_ip_on_mac(${1:u8_t *mac}, ${2:ip4_addr_t *ip})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_i16","insertText":"nvs_set_i16(${1:nvs_handle handle}, ${2:const char *key}, ${3:int16_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_i16(nvs_handle handle, const char *key, int16_t value)","score":0.81575304269790649,"sortText":"4151f901nvs_set_i16","textEdit":{"newText":"nvs_set_i16(${1:nvs_handle handle}, ${2:const char *key}, ${3:int16_t value})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_i32","insertText":"nvs_set_i32(${1:nvs_handle handle}, ${2:const char *key}, ${3:int32_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_i32(nvs_handle handle, const char *key, int32_t value)","score":0.81575304269790649,"sortText":"4151f901nvs_set_i32","textEdit":{"newText":"nvs_set_i32(${1:nvs_handle handle}, ${2:const char *key}, ${3:int32_t value})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_i64","insertText":"nvs_set_i64(${1:nvs_handle handle}, ${2:const char *key}, ${3:int64_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_i64(nvs_handle handle, const char *key, int64_t value)","score":0.81575304269790649,"sortText":"4151f901nvs_set_i64","textEdit":{"newText":"nvs_set_i64(${1:nvs_handle handle}, ${2:const char *key}, ${3:int64_t value})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@{  \n@brief set value for given key  \nThis family of functions set value for the key, given its name. Note that actual storage will not be updated until nvs_commit function is called.  \n@param[in] handle Handle obtained from nvs_open function.  \nHandles that were opened read only cannot be used.  \n@param[in] key Key name. Maximal length is determined by the underlying implementation, but is guaranteed to be at least 15 characters. Shouldn't be empty.  \n@param[in] value The value to set.  \nFor strings, the maximum length (including null character) is 4000 bytes.  \n@return  \n\\- ESP_OK if value was set successfully  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL  \n\\- ESP_ERR_NVS_READ_ONLY if storage handle was opened as read only  \n\\- ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints  \n\\- ESP_ERR_NVS_NOT_ENOUGH_SPACE if there is not enough space in the underlying storage to save the value  \n\\- ESP_ERR_NVS_REMOVE_FAILED if the value wasn't updated because flash write operation has failed. The value was written however, and update will be finished after re-initialization of nvs, provided that flash operation doesn't fail again.  \n\\- ESP_ERR_NVS_VALUE_TOO_LONG if the string value is too long"},"filterText":"nvs_set_i8","insertText":"nvs_set_i8(${1:nvs_handle handle}, ${2:const char *key}, ${3:int8_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_i8(nvs_handle handle, const char *key, int8_t value)","score":0.81575304269790649,"sortText":"4151f901nvs_set_i8","textEdit":{"newText":"nvs_set_i8(${1:nvs_handle handle}, ${2:const char *key}, ${3:int8_t value})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"tcpip_adapter.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"tcpip_adapter.h\"`  \n@brief Set interface's IP address information  \nThis function is mainly used to set a static IP on an interface.  \nIf the interface is up, the new IP information is set directly in the TCP/IP stack.  \nThe copy of IP information kept in the TCP/IP adapter library is also updated (this copy is returned if the IP is queried while the interface is still down.)  \n@note DHCP client/server must be stopped before setting new IP information.  \n@note Calling this interface for the Wi-Fi STA or Ethernet interfaces may generate a SYSTEM_EVENT_STA_GOT_IP or SYSTEM_EVENT_ETH_GOT_IP event.  \n@param[in] tcpip_if Interface to set IP information  \n@param[in] ip_info IP information to set on the specified interface  \n@return  \n\\- ESP_OK  \n\\- ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS  \n\\- ESP_ERR_TCPIP_ADAPTER_DHCP_NOT_STOPPED If DHCP server or client is still running"},"filterText":"tcpip_adapter_set_ip_info","insertText":"tcpip_adapter_set_ip_info(${1:tcpip_adapter_if_t tcpip_if}, ${2:const tcpip_adapter_ip_info_t *ip_info})","insertTextFormat":2,"kind":3,"label":"•tcpip_adapter_set_ip_info(tcpip_adapter_if_t tcpip_if, const tcpip_adapter_ip_info_t *ip_info)","score":0.93569719791412354,"sortText":"41604ec4tcpip_adapter_set_ip_info","textEdit":{"newText":"tcpip_adapter_set_ip_info(${1:tcpip_adapter_if_t tcpip_if}, ${2:const tcpip_adapter_ip_info_t *ip_info})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"arch/sys_arch.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"sys_sem_t *","documentation":{"kind":"markdown","value":"From `\"arch/sys_arch.h\"`"},"filterText":"sys_thread_sem_init","insertText":"sys_thread_sem_init()","insertTextFormat":2,"kind":3,"label":"•sys_thread_sem_init()","score":0.83528083562850952,"sortText":"41717206sys_thread_sem_init","textEdit":{"newText":"sys_thread_sem_init()","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Initialize the default NVS partition.  \nThis API initialises the default NVS partition. The default NVS partition is the one that is labeled \"nvs\" in the partition table.  \n@param[in] cfg Security configuration (keys) to be used for NVS encryption/decryption.  \nIf cfg is NULL, no encryption is used.  \n@return  \n\\- ESP_OK if storage was successfully initialized.  \n\\- ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated)  \n\\- ESP_ERR_NOT_FOUND if no partition with label \"nvs\" is found in the partition table  \n\\- one of the error codes from the underlying flash storage driver"},"filterText":"nvs_flash_secure_init","insertText":"nvs_flash_secure_init(${1:nvs_sec_cfg_t *cfg})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_secure_init(nvs_sec_cfg_t *cfg)","score":0.81575298309326172,"sortText":"4174c735nvs_flash_secure_init","textEdit":{"newText":"nvs_flash_secure_init(${1:nvs_sec_cfg_t *cfg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Initialize NVS flash storage for the specified partition.  \n@param[in] partition_label Label of the partition. Note that internally a reference to passed value is kept and it should be accessible for future operations  \n@param[in] cfg Security configuration (keys) to be used for NVS encryption/decryption.  \nIf cfg is null, no encryption/decryption is used.  \n@return  \n\\- ESP_OK if storage was successfully initialized.  \n\\- ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated)  \n\\- ESP_ERR_NOT_FOUND if specified partition is not found in the partition table  \n\\- one of the error codes from the underlying flash storage driver"},"filterText":"nvs_flash_secure_init_partition","insertText":"nvs_flash_secure_init_partition(${1:const char *partition_label}, ${2:nvs_sec_cfg_t *cfg})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_secure_init_partition(const char *partition_label, nvs_sec_cfg_t *cfg)","score":0.81575298309326172,"sortText":"4174c735nvs_flash_secure_init_partition","textEdit":{"newText":"nvs_flash_secure_init_partition(${1:const char *partition_label}, ${2:nvs_sec_cfg_t *cfg})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"_OutputIterator","documentation":{"kind":"markdown","value":"From `<algorithm>`"},"filterText":"__set_intersection","insertText":"std::__set_intersection(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})","insertTextFormat":2,"kind":3,"label":"•std::__set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)","score":0.10575764626264572,"sortText":"42cb81c7__set_intersection","textEdit":{"newText":"std::__set_intersection(${1:_InputIterator1 __first1}, ${2:_InputIterator1 __last1}, ${3:_InputIterator2 __first2}, ${4:_InputIterator2 __last2}, ${5:_OutputIterator __result}, ${6:_Compare __comp})","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":28,"jsonrpc":"2.0"}
<<<
Content-Length: 1598

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Sei'","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":22}}Content-Length: 11743

{"id":28,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":23},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":4},"context":{"triggerKind":1}},"id":29,"jsonrpc":"2.0"}
<<<
Content-Length: 60466

{"id":29,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"Callback Function that sents message"},"filterText":"OnDataSent","insertText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","insertTextFormat":2,"kind":3,"label":" OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)","score":9.0014286041259766,"sortText":"3feffa26OnDataSent","textEdit":{"newText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"initLDRSensor","insertText":"initLDRSensor()","insertTextFormat":2,"kind":3,"label":" initLDRSensor()","score":9.0014286041259766,"sortText":"3feffa26initLDRSensor","textEdit":{"newText":"initLDRSensor()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":" sensors_type_t","score":1.8537870645523071,"sortText":"4012b71bsensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":" HardwareSerial","score":4.8400006294250488,"sortText":"4017ae13HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"esp_now_send_cb_t","insertText":"esp_now_send_cb_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_cb_t","score":7.2600007057189941,"sortText":"4017ae13esp_now_send_cb_t","textEdit":{"newText":"esp_now_send_cb_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"402cccccHardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_COLOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GRAVITY","insertText":"SENSOR_TYPE_GRAVITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GRAVITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GRAVITY","textEdit":{"newText":"SENSOR_TYPE_GRAVITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_MAGNETIC_FIELD","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_OBJECT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_OBJECT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_OBJECT_TEMPERATURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PRESSURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PROXIMITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_VOLTAGE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"seed48","insertText":"seed48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•seed48(unsigned short *)","score":1.5037370920181274,"sortText":"403f858bseed48","textEdit":{"newText":"seed48(${1:unsigned short *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":1.5037370920181274,"sortText":"403f858bsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":1.5037370920181274,"sortText":"403f858bsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"setenv","insertText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•setenv(const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"403f858bsetenv","textEdit":{"newText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":1.5037370920181274,"sortText":"403f858bsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":1.5037370920181274,"sortText":"403f858bsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`  \nfunction takes the following frequencies as valid values:  \n240, 160, 80 <<< For all XTAL types 40, 20, 10 <<< For 40MHz XTAL 26, 13 <<< For 26MHz XTAL 24, 12 <<< For 24MHz XTAL"},"filterText":"setCpuFrequencyMhz","insertText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","insertTextFormat":2,"kind":3,"label":"•setCpuFrequencyMhz(uint32_t cpu_freq_mhz)","score":1.3747211694717407,"sortText":"40500923setCpuFrequencyMhz","textEdit":{"newText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"filterText":"esp_now_send_status_t","insertText":"esp_now_send_status_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_status_t","score":5.4166908264160156,"sortText":"4052aa78esp_now_send_status_t","textEdit":{"newText":"esp_now_send_status_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*p : the pointer to output string.  \n@param int len : the string length.  \n@return None."},"filterText":"send_packet","insertText":"send_packet(${1:uint8_t *p}, ${2:int len})","insertTextFormat":2,"kind":3,"label":"•send_packet(uint8_t *p, int len)","score":1.2690916061401367,"sortText":"405d8e68send_packet","textEdit":{"newText":"send_packet(${1:uint8_t *p}, ${2:int len})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"405d8e68set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"detail":"esp_err_t","filterText":"esp_now_send","insertText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","insertTextFormat":2,"kind":3,"label":" esp_now_send(const uint8_t *peer_addr, const uint8_t *data, size_t len)","score":4.8400001525878906,"sortText":"40651eb8esp_now_send","textEdit":{"newText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"setlocale","insertText":"setlocale(${1:int category}, ${2:const char *locale})","insertTextFormat":2,"kind":3,"label":"•setlocale(int category, const char *locale)","score":1.1826096773147583,"sortText":"4068a03fsetlocale","textEdit":{"newText":"setlocale(${1:int category}, ${2:const char *locale})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"select","insertText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","insertTextFormat":2,"kind":3,"label":"•select(int nfds, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *errorfds, struct timeval *timeout)","score":1.1118042469024658,"sortText":"4071b066select","textEdit":{"newText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"setitimer","insertText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","insertTextFormat":2,"kind":3,"label":"•setitimer(int __which, const struct itimerval *__value, struct itimerval *__ovalue)","score":1.1118042469024658,"sortText":"4071b066setitimer","textEdit":{"newText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"settimeofday","insertText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","insertTextFormat":2,"kind":3,"label":"•settimeofday(const struct timeval *, const struct timezone *)","score":1.1118042469024658,"sortText":"4071b066settimeofday","textEdit":{"newText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setuid","insertText":"setuid(${1:uid_t __uid})","insertTextFormat":2,"kind":3,"label":"•setuid(uid_t __uid)","score":1.1118042469024658,"sortText":"4071b066setuid","textEdit":{"newText":"setuid(${1:uid_t __uid})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartBitsNum4Char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SEVEN_BITS","insertText":"SEVEN_BITS","insertTextFormat":2,"kind":20,"label":"•SEVEN_BITS","score":1.2690916061401367,"sortText":"4071dc9bSEVEN_BITS","textEdit":{"newText":"SEVEN_BITS","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_probe_req_rx_t","insertText":"system_event_ap_probe_req_rx_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_probe_req_rx_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_probe_req_rx_t","textEdit":{"newText":"system_event_ap_probe_req_rx_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staconnected_t","insertText":"system_event_ap_staconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staconnected_t","textEdit":{"newText":"system_event_ap_staconnected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_stadisconnected_t","insertText":"system_event_ap_stadisconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_stadisconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_stadisconnected_t","textEdit":{"newText":"system_event_ap_stadisconnected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staipassigned_t","insertText":"system_event_ap_staipassigned_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staipassigned_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staipassigned_t","textEdit":{"newText":"system_event_ap_staipassigned_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_got_ip6_t","insertText":"system_event_got_ip6_t","insertTextFormat":2,"kind":8,"label":"•system_event_got_ip6_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_got_ip6_t","textEdit":{"newText":"system_event_got_ip6_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_handler_t","insertText":"system_event_handler_t","insertTextFormat":2,"kind":8,"label":"•system_event_handler_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_handler_t","textEdit":{"newText":"system_event_handler_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_info_t","insertText":"system_event_info_t","insertTextFormat":2,"kind":8,"label":"•system_event_info_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_info_t","textEdit":{"newText":"system_event_info_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_authmode_change_t","insertText":"system_event_sta_authmode_change_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_authmode_change_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_authmode_change_t","textEdit":{"newText":"system_event_sta_authmode_change_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_connected_t","insertText":"system_event_sta_connected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_connected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_connected_t","textEdit":{"newText":"system_event_sta_connected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_disconnected_t","insertText":"system_event_sta_disconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_disconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_disconnected_t","textEdit":{"newText":"system_event_sta_disconnected_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_got_ip_t","insertText":"system_event_sta_got_ip_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_got_ip_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_got_ip_t","textEdit":{"newText":"system_event_sta_got_ip_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_scan_done_t","insertText":"system_event_sta_scan_done_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_scan_done_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_scan_done_t","textEdit":{"newText":"system_event_sta_scan_done_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_fail_reason_t","insertText":"system_event_sta_wps_fail_reason_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_fail_reason_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_fail_reason_t","textEdit":{"newText":"system_event_sta_wps_fail_reason_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_t","insertText":"system_event_t","insertTextFormat":2,"kind":8,"label":"•system_event_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_t","textEdit":{"newText":"system_event_t","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"new_handler","documentation":{"kind":"markdown","value":"From `<new>`  \nTakes a replacement handler as the argument, returns the previous handler."},"filterText":"set_new_handler","insertText":"std::set_new_handler(${1:new_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_new_handler(new_handler)","score":0.98550808429718018,"sortText":"4083b5beset_new_handler","textEdit":{"newText":"std::set_new_handler(${1:new_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"terminate_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_terminate","insertText":"std::set_terminate(${1:terminate_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_terminate(terminate_handler)","score":0.98550808429718018,"sortText":"4083b5beset_terminate","textEdit":{"newText":"std::set_terminate(${1:terminate_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"unexpected_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_unexpected","insertText":"std::set_unexpected(${1:unexpected_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_unexpected(unexpected_handler)","score":0.98550808429718018,"sortText":"4083b5beset_unexpected","textEdit":{"newText":"std::set_unexpected(${1:unexpected_handler})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a matching sub-sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@param \\_\\_last2 A forward iterator.  \n@return The first iterator @c i in the range @p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2)) such that @c \\*(i+N) == @p  \n\\*(\\_\\_first2+N) for each @c N in the range @p [0,\\_\\_last2-\\_\\_first2), or @p \\_\\_last1 if no such iterator exists.  \nSearches the range @p [\\_\\_first1,\\_\\_last1) for a sub-sequence that compares equal value-by-value with the sequence given by @p [\\_\\_first2,\\_\\_last2) and returns an iterator to the first element of the sub-sequence, or @p \\_\\_last1 if the sub-sequence is not found.  \nBecause the sub-sequence must lie completely within the range @p [\\_\\_first1,\\_\\_last1) it must start at a position less than @p \\_\\_last1-(\\_\\_last2-\\_\\_first2) where @p \\_\\_last2-\\_\\_first2 is the length of the sub-sequence.  \nThis means that the returned iterator @c i will be in the range  \n@p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2))"},"filterText":"search","insertText":"std::search($0)","insertTextFormat":2,"kind":3,"label":"•std::search(…)","score":0.92650353908538818,"sortText":"4092d0aasearch","textEdit":{"newText":"std::search($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a number of consecutive values.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first A forward iterator.  \n@param \\_\\_last A forward iterator.  \n@param \\_\\_count The number of consecutive values.  \n@param \\_\\_val The value to find.  \n@return The first iterator @c i in the range @p [\\_\\_first,\\_\\_last-\\_\\_count) such that @c \\*(i+N) == @p \\_\\_val for each @c N in the range @p [0,\\_\\_count), or @p \\_\\_last if no such iterator exists.  \nSearches the range @p [\\_\\_first,\\_\\_last) for @p count consecutive elements equal to @p \\_\\_val."},"filterText":"search_n","insertText":"std::search_n($0)","insertTextFormat":2,"kind":3,"label":"•std::search_n(…)","score":0.92650353908538818,"sortText":"4092d0aasearch_n","textEdit":{"newText":"std::search_n($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <random>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<random>`  \n@brief The seed_seq class generates sequences of seeds for random number generators."},"filterText":"seed_seq","insertText":"std::seed_seq","insertTextFormat":2,"kind":7,"label":"•std::seed_seq","score":0.92650353908538818,"sortText":"4092d0aaseed_seq","textEdit":{"newText":"std::seed_seq","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the difference of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range.  \nIterators increment for each range. When the current element of the first range is less than the second according to @p \\_\\_comp, that element is copied and the iterator advances. If the current element of the second range is less, no element is copied and the iterator advances.  \nIf an element is contained in both ranges according to @p \\_\\_comp, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_difference","insertText":"std::set_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_difference","textEdit":{"newText":"std::set_difference($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.92650353908538818,"sortText":"4092d0aaset_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the symmetric difference of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is less than the other, that element is copied and the iterator advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_symmetric_difference","insertText":"std::set_symmetric_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_symmetric_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_symmetric_difference","textEdit":{"newText":"std::set_symmetric_difference($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the union of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is less than the other,  \nthat element is copied and the iterator advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_union","insertText":"std::set_union($0)","insertTextFormat":2,"kind":3,"label":"•std::set_union(…)","score":0.92650353908538818,"sortText":"4092d0aaset_union","textEdit":{"newText":"std::set_union($0)","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.91311287879943848,"sortText":"40963e3csetsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"send","insertText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•send(int s, const void *dataptr, size_t size, int flags)","score":0.90964943170547485,"sortText":"40972137send","textEdit":{"newText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendmsg","insertText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•sendmsg(int s, const struct msghdr *message, int flags)","score":0.90964943170547485,"sortText":"40972137sendmsg","textEdit":{"newText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendto","insertText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•sendto(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964943170547485,"sortText":"40972137sendto","textEdit":{"newText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <clocale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<clocale>`"},"filterText":"setlocale","insertText":"std::setlocale","insertTextFormat":2,"kind":18,"label":"•std::setlocale","score":0.8959164023399353,"sortText":"409aa539setlocale","textEdit":{"newText":"std::setlocale","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station connected to ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STACONNECTED","insertText":"SYSTEM_EVENT_AP_STACONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STACONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STACONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STACONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station disconnected from ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STADISCONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STADISCONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STADISCONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet phy link up"},"filterText":"SYSTEM_EVENT_ETH_CONNECTED","insertText":"SYSTEM_EVENT_ETH_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_ETH_CONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet got IP from connected AP"},"filterText":"SYSTEM_EVENT_ETH_GOT_IP","insertText":"SYSTEM_EVENT_ETH_GOT_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_GOT_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_GOT_IP","textEdit":{"newText":"SYSTEM_EVENT_ETH_GOT_IP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet stop"},"filterText":"SYSTEM_EVENT_ETH_STOP","insertText":"SYSTEM_EVENT_ETH_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_STOP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_STOP","textEdit":{"newText":"SYSTEM_EVENT_ETH_STOP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nthe auth mode of AP connected by ESP32 station changed"},"filterText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_AUTHMODE_CHANGE","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_AUTHMODE_CHANGE","textEdit":{"newText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station connected to AP"},"filterText":"SYSTEM_EVENT_STA_CONNECTED","insertText":"SYSTEM_EVENT_STA_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_STA_CONNECTED","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station lost IP and the IP is reset to 0"},"filterText":"SYSTEM_EVENT_STA_LOST_IP","insertText":"SYSTEM_EVENT_STA_LOST_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_LOST_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_LOST_IP","textEdit":{"newText":"SYSTEM_EVENT_STA_LOST_IP","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":30,"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":24},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1597

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Se'","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":23}}Content-Length: 113

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":30,"jsonrpc":"2.0"}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":25},"contentChanges":[{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":5}},"text":"i"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":6},"context":{"triggerKind":3}},"id":31,"jsonrpc":"2.0"}
<<<
Content-Length: 17191

{"id":31,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":4.8400001525878906,"sortText":"3fab0a3dHardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"3fbe6666HardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":0.84263044595718384,"sortText":"40d0bb9dSERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.84486329555511475,"sortText":"40eb4dd7SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747212886810303,"sortText":"41240b6buartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":32,"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":26},"contentChanges":[{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":6}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":32,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}Content-Length: 1599

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seri'","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":25}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":27},"contentChanges":[{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":7}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1979

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h:116:23:\nnote: 'Serial' declared here","range":{"end":{"character":7,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":26}}Content-Length: 1615

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":27}}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":8}},"context":{"diagnostics":[]}},"id":33,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":33,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":34,"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":34,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":28},"contentChanges":[{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":8}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 256

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":9},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":35,"jsonrpc":"2.0"}
<<<
Content-Length: 9086

{"id":35,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"int","filterText":"available","insertText":"available()","insertTextFormat":2,"kind":2,"label":" available()","score":9.6800003051757812,"sortText":"3ee51eb8available","textEdit":{"newText":"available()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"int","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"kind":2,"label":" availableForWrite()","score":9.6800003051757812,"sortText":"3ee51eb8availableForWrite","textEdit":{"newText":"availableForWrite()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"uint32_t","filterText":"baudRate","insertText":"baudRate()","insertTextFormat":2,"kind":2,"label":" baudRate()","score":9.6800003051757812,"sortText":"3ee51eb8baudRate","textEdit":{"newText":"baudRate()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"void","filterText":"begin","insertText":"begin(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" begin(unsigned long baud, uint32_t config = SERIAL_8N1, int8_t rxPin = -1, int8_t txPin = -1, bool invert = false, unsigned long timeout_ms = 20000UL)","score":9.6800003051757812,"sortText":"3ee51eb8begin","textEdit":{"newText":"begin(${1:unsigned long baud})","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"void","filterText":"end","insertText":"end()","insertTextFormat":2,"kind":2,"label":" end()","score":9.6800003051757812,"sortText":"3ee51eb8end","textEdit":{"newText":"end()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[2 overloads]","filterText":"flush","insertText":"flush($0)","insertTextFormat":2,"kind":2,"label":" flush(…)","score":9.6800003051757812,"sortText":"3ee51eb8flush","textEdit":{"newText":"flush($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"int","filterText":"peek","insertText":"peek()","insertTextFormat":2,"kind":2,"label":" peek()","score":9.6800003051757812,"sortText":"3ee51eb8peek","textEdit":{"newText":"peek()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[3 overloads]","filterText":"read","insertText":"read($0)","insertTextFormat":2,"kind":2,"label":" read(…)","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"void","filterText":"setDebugOutput","insertText":"setDebugOutput(${1:bool})","insertTextFormat":2,"kind":2,"label":" setDebugOutput(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setDebugOutput","textEdit":{"newText":"setDebugOutput(${1:bool})","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"size_t","filterText":"setRxBufferSize","insertText":"setRxBufferSize(${1:size_t})","insertTextFormat":2,"kind":2,"label":" setRxBufferSize(size_t)","score":9.6800003051757812,"sortText":"3ee51eb8setRxBufferSize","textEdit":{"newText":"setRxBufferSize(${1:size_t})","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"void","filterText":"setRxInvert","insertText":"setRxInvert(${1:bool})","insertTextFormat":2,"kind":2,"label":" setRxInvert(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setRxInvert","textEdit":{"newText":"setRxInvert(${1:bool})","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"void","filterText":"updateBaudRate","insertText":"updateBaudRate(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" updateBaudRate(unsigned long baud)","score":9.6800003051757812,"sortText":"3ee51eb8updateBaudRate","textEdit":{"newText":"updateBaudRate(${1:unsigned long baud})","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[8 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":9.6800003051757812,"sortText":"3ee51eb8write","textEdit":{"newText":"write($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[14 overloads]","filterText":"print","insertText":"print($0)","insertTextFormat":2,"kind":2,"label":" print(…)","score":8.6177120208740234,"sortText":"3ef61ddaprint","textEdit":{"newText":"print($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[15 overloads]","filterText":"println","insertText":"println($0)","insertTextFormat":2,"kind":2,"label":" println(…)","score":8.0884857177734375,"sortText":"3efe9590println","textEdit":{"newText":"println($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"void","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"kind":2,"label":" clearWriteError()","score":4.8400001525878906,"sortText":"3f651eb8clearWriteError","textEdit":{"newText":"clearWriteError()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[5 overloads]","filterText":"find","insertText":"find($0)","insertTextFormat":2,"kind":2,"label":" find(…)","score":4.8400001525878906,"sortText":"3f651eb8find","textEdit":{"newText":"find($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[4 overloads]","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"kind":2,"label":" findUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8findUntil","textEdit":{"newText":"findUntil($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"unsigned long","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"kind":2,"label":" getTimeout()","score":4.8400001525878906,"sortText":"3f651eb8getTimeout","textEdit":{"newText":"getTimeout()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"int","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"kind":2,"label":" getWriteError()","score":4.8400001525878906,"sortText":"3f651eb8getWriteError","textEdit":{"newText":"getWriteError()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"float","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"kind":2,"label":" parseFloat()","score":4.8400001525878906,"sortText":"3f651eb8parseFloat","textEdit":{"newText":"parseFloat()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"long","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"kind":2,"label":" parseInt()","score":4.8400001525878906,"sortText":"3f651eb8parseInt","textEdit":{"newText":"parseInt()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"size_t","filterText":"printf","insertText":"printf(${1:const char *format, ...})","insertTextFormat":2,"kind":2,"label":" printf(const char *format, ...)","score":4.8400001525878906,"sortText":"3f651eb8printf","textEdit":{"newText":"printf(${1:const char *format, ...})","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[2 overloads]","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"kind":2,"label":" readBytes(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytes","textEdit":{"newText":"readBytes($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"[2 overloads]","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"kind":2,"label":" readBytesUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytesUntil","textEdit":{"newText":"readBytesUntil($0)","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"String","filterText":"readString","insertText":"readString()","insertTextFormat":2,"kind":2,"label":" readString()","score":4.8400001525878906,"sortText":"3f651eb8readString","textEdit":{"newText":"readString()","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"String","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"kind":2,"label":" readStringUntil(char terminator)","score":4.8400001525878906,"sortText":"3f651eb8readStringUntil","textEdit":{"newText":"readStringUntil(${1:char terminator})","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}},{"detail":"void","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"kind":2,"label":" setTimeout(unsigned long timeout)","score":4.8400001525878906,"sortText":"3f651eb8setTimeout","textEdit":{"newText":"setTimeout(${1:unsigned long timeout})","range":{"end":{"character":9,"line":271},"start":{"character":9,"line":271}}}}]}}Content-Length: 1592

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":28}}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":9}},"context":{"diagnostics":[]}},"id":36,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":36,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":29},"contentChanges":[{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":9}},"text":"p"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":30},"contentChanges":[{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":10}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1797

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'p' in 'HardwareSerial'","range":{"end":{"character":10,"line":271},"start":{"character":9,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":29}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":31},"contentChanges":[{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":11}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1798

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pr' in 'HardwareSerial'","range":{"end":{"character":11,"line":271},"start":{"character":9,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":30}}Content-Length: 1799

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pre' in 'HardwareSerial'","range":{"end":{"character":12,"line":271},"start":{"character":9,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":31}}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":32},"contentChanges":[{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":12}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1798

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pr' in 'HardwareSerial'","range":{"end":{"character":11,"line":271},"start":{"character":9,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":32}}
>>>
Content-Length: 458

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":11}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'pr' in 'HardwareSerial'"}]}},"id":37,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":37,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":33},"contentChanges":[{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":34},"contentChanges":[{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":35},"contentChanges":[{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":36},"contentChanges":[{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1615

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":35}}Content-Length: 1979

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h:116:23:\nnote: 'Serial' declared here","range":{"end":{"character":7,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":36}}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":37},"contentChanges":[{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1599

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seri'","range":{"end":{"character":6,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":37}}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":38},"contentChanges":[{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1598

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Ser'","range":{"end":{"character":5,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":38}}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":39},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1597

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Se'","range":{"end":{"character":4,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":39}}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":40},"contentChanges":[{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1596

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S'","range":{"end":{"character":3,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":40}}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":41},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":41}}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":42},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":42}}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":0}},"context":{"diagnostics":[]}},"id":38,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":38,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":39,"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":39,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":43},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":1}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2409

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":30,"line":274},"start":{"character":29,"line":274}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":13,"line":281},"start":{"character":12,"line":281}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":12,"line":313},"start":{"character":11,"line":313}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:249:30: note: to match this '{'","range":{"end":{"character":0,"line":317},"start":{"character":0,"line":317}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:318:1: error: expected '}'","range":{"end":{"character":30,"line":248},"start":{"character":29,"line":248}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":43}}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":249,"character":7},"end":{"line":249,"character":7}},"context":{"diagnostics":[]}},"id":40,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":40,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":249,"character":7},"end":{"line":249,"character":7}},"context":{"diagnostics":[]}},"id":41,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":41,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":44},"contentChanges":[{"range":{"start":{"line":249,"character":2},"end":{"line":249,"character":2}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":44}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":249,"character":10},"end":{"line":249,"character":10}},"context":{"diagnostics":[]}},"id":42,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":42,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":45},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":45}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":46},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"S"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":5},"context":{"triggerKind":1}},"id":43,"jsonrpc":"2.0"}
<<<
Content-Length: 53012

{"id":43,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"size_t","insertText":"size_t","insertTextFormat":2,"kind":8,"label":"•size_t","score":10.712376594543457,"sortText":"3ed49a1bsize_t","textEdit":{"newText":"size_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"String","documentation":{"kind":"markdown","value":"String receivedString;  \nVariable to store if sending data was successful"},"filterText":"success","insertText":"success","insertTextFormat":2,"kind":6,"label":" success","score":9.0014286041259766,"sortText":"3eeffa26success","textEdit":{"newText":"success","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"short","insertText":"short","insertTextFormat":2,"kind":14,"label":" short","score":8,"sortText":"3f000000short","textEdit":{"newText":"short","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"signed","insertText":"signed","insertTextFormat":2,"kind":14,"label":" signed","score":8,"sortText":"3f000000signed","textEdit":{"newText":"signed","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"size_t","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"kind":15,"label":" sizeof(expression-or-type)","score":8,"sortText":"3f000000sizeof","textEdit":{"newText":"sizeof(${0:expression-or-type})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"size_t","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"kind":15,"label":" sizeof...(parameter-pack)","score":8,"sortText":"3f000000sizeof...","textEdit":{"newText":"sizeof...(${0:parameter-pack})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"static","insertText":"static","insertTextFormat":2,"kind":14,"label":" static","score":8,"sortText":"3f000000static","textEdit":{"newText":"static","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"static_assert","insertText":"static_assert(${1:expression}, ${0:message});","insertTextFormat":2,"kind":15,"label":" static_assert(expression, message);","score":8,"sortText":"3f000000static_assert","textEdit":{"newText":"static_assert(${1:expression}, ${0:message});","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"static_cast","insertText":"static_cast<${1:type}>(${0:expression})","insertTextFormat":2,"kind":15,"label":" static_cast<type>(expression)","score":8,"sortText":"3f000000static_cast","textEdit":{"newText":"static_cast<${1:type}>(${0:expression})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"struct","insertText":"struct","insertTextFormat":2,"kind":14,"label":" struct","score":8,"sortText":"3f000000struct","textEdit":{"newText":"struct","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"switch","insertText":"switch (${1:condition}) {\n${0:cases}\n}","insertTextFormat":2,"kind":15,"label":" switch (condition) {cases}","score":8,"sortText":"3f000000switch","textEdit":{"newText":"switch (${1:condition}) {\n${0:cases}\n}","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nThe string class"},"filterText":"String","insertText":"String","insertTextFormat":2,"kind":7,"label":"•String","score":6.0775456428527832,"sortText":"3f3d84bfString","textEdit":{"newText":"String","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Stream.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Stream.h\"`  \ncompatability macros for testing  \n#define getInt() parseInt()  \n#define getInt(skipChar) parseInt(skipchar)  \n#define getFloat() parseFloat()  \n#define getFloat(skipChar) parseFloat(skipChar)  \n#define getString( pre_string, post_string, buffer, length) readBytesBetween( pre_string, terminator, buffer, length)"},"filterText":"Stream","insertText":"Stream","insertTextFormat":2,"kind":7,"label":"•Stream","score":5.5006375312805176,"sortText":"3f4ffac7Stream","textEdit":{"newText":"Stream","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nAn inherited class for holding the result of a concatenation. These result objects are assumed to be writable by subsequent concatenations."},"filterText":"StringSumHelper","insertText":"StringSumHelper","insertTextFormat":2,"kind":7,"label":"•StringSumHelper","score":4.8400001525878906,"sortText":"3f651eb8StringSumHelper","textEdit":{"newText":"StringSumHelper","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"double","filterText":"sqrt","insertText":"sqrt(${1:double})","insertTextFormat":2,"kind":3,"label":" sqrt(double)","score":4.8400001525878906,"sortText":"3f651eb8sqrt","textEdit":{"newText":"sqrt(${1:double})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"[2 overloads]","filterText":"Stream","insertText":"Stream($0)","insertTextFormat":2,"kind":4,"label":" Stream(…)","score":4.4000000953674316,"sortText":"3f733333Stream","textEdit":{"newText":"Stream($0)","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"[13 overloads]","filterText":"String","insertText":"String($0)","insertTextFormat":2,"kind":4,"label":" String(…)","score":4.4000000953674316,"sortText":"3f733333String","textEdit":{"newText":"String($0)","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"[12 overloads]","filterText":"StringSumHelper","insertText":"StringSumHelper($0)","insertTextFormat":2,"kind":4,"label":" StringSumHelper(…)","score":4.4000000953674316,"sortText":"3f733333StringSumHelper","textEdit":{"newText":"StringSumHelper($0)","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"std","insertText":"std","insertTextFormat":2,"kind":9,"label":" std","score":3.5200002193450928,"sortText":"3f9eb851std","textEdit":{"newText":"std","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_DIS","insertText":"STICK_PARITY_DIS","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_DIS","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_DIS","textEdit":{"newText":"STICK_PARITY_DIS","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_EN","insertText":"STICK_PARITY_EN","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_EN","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_EN","textEdit":{"newText":"STICK_PARITY_EN","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•strlen(const char *)","score":1.6522369384765625,"sortText":"402c8380strlen","textEdit":{"newText":"strlen(${1:const char *})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"SDA","insertText":"SDA","insertTextFormat":2,"kind":6,"label":"•SDA","score":1.5037370920181274,"sortText":"403f858bSDA","textEdit":{"newText":"SDA","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"STA_CONNECTED_BIT","insertText":"STA_CONNECTED_BIT","insertTextFormat":2,"kind":6,"label":"•STA_CONNECTED_BIT","score":1.5037370920181274,"sortText":"403f858bSTA_CONNECTED_BIT","textEdit":{"newText":"STA_CONNECTED_BIT","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"StaticSemaphore_t","insertText":"StaticSemaphore_t","insertTextFormat":2,"kind":8,"label":"•StaticSemaphore_t","score":1.5037370920181274,"sortText":"403f858bStaticSemaphore_t","textEdit":{"newText":"StaticSemaphore_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"scanf","insertText":"scanf(${1:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•scanf(const char *, ...)","score":1.5037370920181274,"sortText":"403f858bscanf","textEdit":{"newText":"scanf(${1:const char *, ...})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Esp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Esp.h\"`"},"filterText":"sketchSize_t","insertText":"sketchSize_t","insertTextFormat":2,"kind":8,"label":"•sketchSize_t","score":1.5037370920181274,"sortText":"403f858bsketchSize_t","textEdit":{"newText":"sketchSize_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sprintf","insertText":"sprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sprintf(char *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858bsprintf","textEdit":{"newText":"sprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":1.5037370920181274,"sortText":"403f858bsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strchr","insertText":"strchr(${1:const char *}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•strchr(const char *, int)","score":1.5037370920181274,"sortText":"403f858bstrchr","textEdit":{"newText":"strchr(${1:const char *}, ${2:int})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcoll","insertText":"strcoll(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcoll(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcoll","textEdit":{"newText":"strcoll(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcspn","insertText":"strcspn(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcspn(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcspn","textEdit":{"newText":"strcspn(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strlcat(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrlcat","textEdit":{"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncasecmp(const char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncasecmp","textEdit":{"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncpy","insertText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncpy(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncpy","textEdit":{"newText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nGetting SSID and password of target AP"},"filterText":"SC_STATUS_GETTING_SSID_PSWD","insertText":"SC_STATUS_GETTING_SSID_PSWD","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_GETTING_SSID_PSWD","score":1.3747211694717407,"sortText":"40500923SC_STATUS_GETTING_SSID_PSWD","textEdit":{"newText":"SC_STATUS_GETTING_SSID_PSWD","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nConnected to AP successfully"},"filterText":"SC_STATUS_LINK_OVER","insertText":"SC_STATUS_LINK_OVER","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_LINK_OVER","score":1.3747211694717407,"sortText":"40500923SC_STATUS_LINK_OVER","textEdit":{"newText":"SC_STATUS_LINK_OVER","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \n@brief The callback of SmartConfig, executed when smart-config status changed.  \n@param status Status of SmartConfig:  \n\\- SC_STATUS_GETTING_SSID_PSWD : pdata is a pointer of smartconfig_type_t, means config type.  \n\\- SC_STATUS_LINK : pdata is a pointer to wifi_config_t.  \n\\- SC_STATUS_LINK_OVER : pdata is a pointer of phone's IP address(4 bytes) if pdata unequal NULL.  \n\\- otherwise : parameter void \\*pdata is NULL.  \n@param pdata According to the different status have different values."},"filterText":"sc_callback_t","insertText":"sc_callback_t","insertTextFormat":2,"kind":8,"label":"•sc_callback_t","score":1.3747211694717407,"sortText":"40500923sc_callback_t","textEdit":{"newText":"sc_callback_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaAttachPin","insertText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaAttachPin(uint8_t pin, uint8_t channel)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaAttachPin","textEdit":{"newText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaWrite","insertText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaWrite(uint8_t channel, uint8_t duty)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaWrite","textEdit":{"newText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nHelper functions to translate frequency to clock divider and back"},"filterText":"spiFrequencyToClockDiv","insertText":"spiFrequencyToClockDiv(${1:uint32_t freq})","insertTextFormat":2,"kind":3,"label":"•spiFrequencyToClockDiv(uint32_t freq)","score":1.3747211694717407,"sortText":"40500923spiFrequencyToClockDiv","textEdit":{"newText":"spiFrequencyToClockDiv(${1:uint32_t freq})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiGetClockDiv","insertText":"spiGetClockDiv(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiGetClockDiv(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiGetClockDiv","textEdit":{"newText":"spiGetClockDiv(${1:spi_t *spi})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nDeactivate enabled SPI_CSx pins"},"filterText":"spiSSClear","insertText":"spiSSClear(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSClear(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSClear","textEdit":{"newText":"spiSSClear(${1:spi_t *spi})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nEnable/Disable hardware control of SPI_CSx pins"},"filterText":"spiSSEnable","insertText":"spiSSEnable(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSEnable(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSEnable","textEdit":{"newText":"spiSSEnable(${1:spi_t *spi})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"spi_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiStartBus","insertText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","insertTextFormat":2,"kind":3,"label":"•spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder)","score":1.3747211694717407,"sortText":"40500923spiStartBus","textEdit":{"newText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteShortNL","insertText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteShortNL(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteShortNL","textEdit":{"newText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteWord","insertText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteWord(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteWord","textEdit":{"newText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"40500923system_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"SLEEP_MODE","insertText":"SLEEP_MODE","insertTextFormat":2,"kind":8,"label":"•SLEEP_MODE","score":1.2690916061401367,"sortText":"405d8e68SLEEP_MODE","textEdit":{"newText":"SLEEP_MODE","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinh","insertText":"sinh(${1:double})","insertTextFormat":2,"kind":3,"label":"•sinh(double)","score":1.2690916061401367,"sortText":"405d8e68sinh","textEdit":{"newText":"sinh(${1:double})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinhf","insertText":"sinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•sinhf(float)","score":1.2690916061401367,"sortText":"405d8e68sinhf","textEdit":{"newText":"sinhf(${1:float})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_a","insertText":"step_a","insertTextFormat":2,"kind":20,"label":"•step_a","score":1.2690916061401367,"sortText":"405d8e68step_a","textEdit":{"newText":"step_a","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_b","insertText":"step_b","insertTextFormat":2,"kind":20,"label":"•step_b","score":1.2690916061401367,"sortText":"405d8e68step_b","textEdit":{"newText":"step_b","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"signbit","insertText":"std::signbit($0)","insertTextFormat":2,"kind":3,"label":"•std::signbit(…)","score":1.2531143426895142,"sortText":"405f99f3signbit","textEdit":{"newText":"std::signbit($0)","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sinh","insertText":"std::sinh(${1:float __x})","insertTextFormat":2,"kind":3,"label":"•std::sinh(float __x)","score":1.2531143426895142,"sortText":"405f99f3sinh","textEdit":{"newText":"std::sinh(${1:float __x})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sqrt","insertText":"std::sqrt(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::sqrt(long double __x)","score":1.2531143426895142,"sortText":"405f99f3sqrt","textEdit":{"newText":"std::sqrt(${1:long double __x})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/gpio_sd_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"gpio_sd_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/gpio_sd_struct.h\"`"},"filterText":"SIGMADELTA","insertText":"SIGMADELTA","insertTextFormat":2,"kind":6,"label":"•SIGMADELTA","score":1.1871124505996704,"sortText":"40680cb3SIGMADELTA","textEdit":{"newText":"SIGMADELTA","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn the maximum number of available memory regions which could be returned by soc_get_available_memory_regions(). Used to size the array passed to that function."},"filterText":"soc_get_available_memory_region_max_count","insertText":"soc_get_available_memory_region_max_count()","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_region_max_count()","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_region_max_count","textEdit":{"newText":"soc_get_available_memory_region_max_count()","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn available memory regions for this SoC. Each available memory region is a contiguous piece of memory which is not being used by static data, used by ROM code, or reserved by a component using the SOC_RESERVE_MEMORY_REGION() macro.  \nThis result is soc_memory_regions[] minus all regions reserved via the SOC_RESERVE_MEMORY_REGION() macro (which may also split some regions up.)  \nAt startup, all available memory returned by this function is registered as heap space.  \n@note OS-level startup function only, not recommended to call from app code.  \n@param regions Pointer to an array for reading available regions into.  \nSize of the array should be at least the result of soc_get_available_memory_region_max_count(). Entries in the array will be ordered by memory address.  \n@return Number of entries copied to 'regions'. Will be no greater than the result of soc_get_available_memory_region_max_count()."},"filterText":"soc_get_available_memory_regions","insertText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_regions(soc_memory_region_t *regions)","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_regions","textEdit":{"newText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_region_count","insertText":"soc_memory_region_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_region_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_count","textEdit":{"newText":"soc_memory_region_count","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory on a particular SoC."},"filterText":"soc_memory_region_t","insertText":"soc_memory_region_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_t","textEdit":{"newText":"soc_memory_region_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_region_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_regions","insertText":"soc_memory_regions","insertTextFormat":2,"kind":6,"label":"•soc_memory_regions","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_regions","textEdit":{"newText":"soc_memory_regions","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_type_count","insertText":"soc_memory_type_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_type_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_count","textEdit":{"newText":"soc_memory_type_count","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nType descriptor holds a description for a particular type of memory on a particular SoC."},"filterText":"soc_memory_type_desc_t","insertText":"soc_memory_type_desc_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_type_desc_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_desc_t","textEdit":{"newText":"soc_memory_type_desc_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_type_desc_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nConstant table of tag descriptors for all this SoC's tags"},"filterText":"soc_memory_types","insertText":"soc_memory_types","insertTextFormat":2,"kind":6,"label":"•soc_memory_types","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_types","textEdit":{"newText":"soc_memory_types","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory reserved on this SoC for a particular use (ie not available for stack/heap usage.)"},"filterText":"soc_reserved_region_t","insertText":"soc_reserved_region_t","insertTextFormat":2,"kind":8,"label":"•soc_reserved_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_reserved_region_t","textEdit":{"newText":"soc_reserved_region_t","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swscanf","insertText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swscanf(const wchar_t *, const wchar_t *, ...)","score":1.1826096773147583,"sortText":"4068a03fswscanf","textEdit":{"newText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalbln","insertText":"std::scalbln","insertTextFormat":2,"kind":18,"label":"•std::scalbln","score":1.1391948461532593,"sortText":"406e2eddscalbln","textEdit":{"newText":"std::scalbln","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnf","insertText":"std::scalblnf","insertTextFormat":2,"kind":18,"label":"•std::scalblnf","score":1.1391948461532593,"sortText":"406e2eddscalblnf","textEdit":{"newText":"std::scalblnf","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnl","insertText":"std::scalblnl","insertTextFormat":2,"kind":18,"label":"•std::scalblnl","score":1.1391948461532593,"sortText":"406e2eddscalblnl","textEdit":{"newText":"std::scalblnl","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_LSBFIRST","insertText":"SPI_BITORDER_LSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_LSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_LSBFIRST","textEdit":{"newText":"SPI_BITORDER_LSBFIRST","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_MSBFIRST","insertText":"SPI_BITORDER_MSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_MSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_MSBFIRST","textEdit":{"newText":"SPI_BITORDER_MSBFIRST","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sbrk","insertText":"sbrk(${1:ptrdiff_t __incr})","insertTextFormat":2,"kind":3,"label":"•sbrk(ptrdiff_t __incr)","score":1.1118042469024658,"sortText":"4071b066sbrk","textEdit":{"newText":"sbrk(${1:ptrdiff_t __incr})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}}}}]}}Content-Length: 1596

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S'","range":{"end":{"character":5,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":46}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":47},"contentChanges":[{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":5}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":6},"context":{"triggerKind":3}},"id":44,"jsonrpc":"2.0"}
<<<
Content-Length: 60466

{"id":44,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","documentation":{"kind":"markdown","value":"Callback Function that sents message"},"filterText":"OnDataSent","insertText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","insertTextFormat":2,"kind":3,"label":" OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)","score":9.0014286041259766,"sortText":"3feffa26OnDataSent","textEdit":{"newText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"initLDRSensor","insertText":"initLDRSensor()","insertTextFormat":2,"kind":3,"label":" initLDRSensor()","score":9.0014286041259766,"sortText":"3feffa26initLDRSensor","textEdit":{"newText":"initLDRSensor()","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":" sensors_type_t","score":1.8537870645523071,"sortText":"4012b71bsensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":" HardwareSerial","score":4.8400006294250488,"sortText":"4017ae13HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"esp_now_send_cb_t","insertText":"esp_now_send_cb_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_cb_t","score":7.2600007057189941,"sortText":"4017ae13esp_now_send_cb_t","textEdit":{"newText":"esp_now_send_cb_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"402cccccHardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_COLOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GRAVITY","insertText":"SENSOR_TYPE_GRAVITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GRAVITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GRAVITY","textEdit":{"newText":"SENSOR_TYPE_GRAVITY","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_MAGNETIC_FIELD","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_OBJECT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_OBJECT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_OBJECT_TEMPERATURE","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PRESSURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PROXIMITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_VOLTAGE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"seed48","insertText":"seed48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•seed48(unsigned short *)","score":1.5037370920181274,"sortText":"403f858bseed48","textEdit":{"newText":"seed48(${1:unsigned short *})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":1.5037370920181274,"sortText":"403f858bsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":1.5037370920181274,"sortText":"403f858bsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"setenv","insertText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•setenv(const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"403f858bsetenv","textEdit":{"newText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":1.5037370920181274,"sortText":"403f858bsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":1.5037370920181274,"sortText":"403f858bsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`  \nfunction takes the following frequencies as valid values:  \n240, 160, 80 <<< For all XTAL types 40, 20, 10 <<< For 40MHz XTAL 26, 13 <<< For 26MHz XTAL 24, 12 <<< For 24MHz XTAL"},"filterText":"setCpuFrequencyMhz","insertText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","insertTextFormat":2,"kind":3,"label":"•setCpuFrequencyMhz(uint32_t cpu_freq_mhz)","score":1.3747211694717407,"sortText":"40500923setCpuFrequencyMhz","textEdit":{"newText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"filterText":"esp_now_send_status_t","insertText":"esp_now_send_status_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_status_t","score":5.4166908264160156,"sortText":"4052aa78esp_now_send_status_t","textEdit":{"newText":"esp_now_send_status_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*p : the pointer to output string.  \n@param int len : the string length.  \n@return None."},"filterText":"send_packet","insertText":"send_packet(${1:uint8_t *p}, ${2:int len})","insertTextFormat":2,"kind":3,"label":"•send_packet(uint8_t *p, int len)","score":1.2690916061401367,"sortText":"405d8e68send_packet","textEdit":{"newText":"send_packet(${1:uint8_t *p}, ${2:int len})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"405d8e68set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"detail":"esp_err_t","filterText":"esp_now_send","insertText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","insertTextFormat":2,"kind":3,"label":" esp_now_send(const uint8_t *peer_addr, const uint8_t *data, size_t len)","score":4.8400001525878906,"sortText":"40651eb8esp_now_send","textEdit":{"newText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"setlocale","insertText":"setlocale(${1:int category}, ${2:const char *locale})","insertTextFormat":2,"kind":3,"label":"•setlocale(int category, const char *locale)","score":1.1826096773147583,"sortText":"4068a03fsetlocale","textEdit":{"newText":"setlocale(${1:int category}, ${2:const char *locale})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"select","insertText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","insertTextFormat":2,"kind":3,"label":"•select(int nfds, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *errorfds, struct timeval *timeout)","score":1.1118042469024658,"sortText":"4071b066select","textEdit":{"newText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"setitimer","insertText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","insertTextFormat":2,"kind":3,"label":"•setitimer(int __which, const struct itimerval *__value, struct itimerval *__ovalue)","score":1.1118042469024658,"sortText":"4071b066setitimer","textEdit":{"newText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"settimeofday","insertText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","insertTextFormat":2,"kind":3,"label":"•settimeofday(const struct timeval *, const struct timezone *)","score":1.1118042469024658,"sortText":"4071b066settimeofday","textEdit":{"newText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setuid","insertText":"setuid(${1:uid_t __uid})","insertTextFormat":2,"kind":3,"label":"•setuid(uid_t __uid)","score":1.1118042469024658,"sortText":"4071b066setuid","textEdit":{"newText":"setuid(${1:uid_t __uid})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartBitsNum4Char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SEVEN_BITS","insertText":"SEVEN_BITS","insertTextFormat":2,"kind":20,"label":"•SEVEN_BITS","score":1.2690916061401367,"sortText":"4071dc9bSEVEN_BITS","textEdit":{"newText":"SEVEN_BITS","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_probe_req_rx_t","insertText":"system_event_ap_probe_req_rx_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_probe_req_rx_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_probe_req_rx_t","textEdit":{"newText":"system_event_ap_probe_req_rx_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staconnected_t","insertText":"system_event_ap_staconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staconnected_t","textEdit":{"newText":"system_event_ap_staconnected_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_stadisconnected_t","insertText":"system_event_ap_stadisconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_stadisconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_stadisconnected_t","textEdit":{"newText":"system_event_ap_stadisconnected_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staipassigned_t","insertText":"system_event_ap_staipassigned_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staipassigned_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staipassigned_t","textEdit":{"newText":"system_event_ap_staipassigned_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_got_ip6_t","insertText":"system_event_got_ip6_t","insertTextFormat":2,"kind":8,"label":"•system_event_got_ip6_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_got_ip6_t","textEdit":{"newText":"system_event_got_ip6_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_handler_t","insertText":"system_event_handler_t","insertTextFormat":2,"kind":8,"label":"•system_event_handler_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_handler_t","textEdit":{"newText":"system_event_handler_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_info_t","insertText":"system_event_info_t","insertTextFormat":2,"kind":8,"label":"•system_event_info_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_info_t","textEdit":{"newText":"system_event_info_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_authmode_change_t","insertText":"system_event_sta_authmode_change_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_authmode_change_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_authmode_change_t","textEdit":{"newText":"system_event_sta_authmode_change_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_connected_t","insertText":"system_event_sta_connected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_connected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_connected_t","textEdit":{"newText":"system_event_sta_connected_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_disconnected_t","insertText":"system_event_sta_disconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_disconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_disconnected_t","textEdit":{"newText":"system_event_sta_disconnected_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_got_ip_t","insertText":"system_event_sta_got_ip_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_got_ip_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_got_ip_t","textEdit":{"newText":"system_event_sta_got_ip_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_scan_done_t","insertText":"system_event_sta_scan_done_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_scan_done_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_scan_done_t","textEdit":{"newText":"system_event_sta_scan_done_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_fail_reason_t","insertText":"system_event_sta_wps_fail_reason_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_fail_reason_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_fail_reason_t","textEdit":{"newText":"system_event_sta_wps_fail_reason_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_t","insertText":"system_event_t","insertTextFormat":2,"kind":8,"label":"•system_event_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_t","textEdit":{"newText":"system_event_t","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"new_handler","documentation":{"kind":"markdown","value":"From `<new>`  \nTakes a replacement handler as the argument, returns the previous handler."},"filterText":"set_new_handler","insertText":"std::set_new_handler(${1:new_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_new_handler(new_handler)","score":0.98550808429718018,"sortText":"4083b5beset_new_handler","textEdit":{"newText":"std::set_new_handler(${1:new_handler})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"terminate_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_terminate","insertText":"std::set_terminate(${1:terminate_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_terminate(terminate_handler)","score":0.98550808429718018,"sortText":"4083b5beset_terminate","textEdit":{"newText":"std::set_terminate(${1:terminate_handler})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"unexpected_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_unexpected","insertText":"std::set_unexpected(${1:unexpected_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_unexpected(unexpected_handler)","score":0.98550808429718018,"sortText":"4083b5beset_unexpected","textEdit":{"newText":"std::set_unexpected(${1:unexpected_handler})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a matching sub-sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@param \\_\\_last2 A forward iterator.  \n@return The first iterator @c i in the range @p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2)) such that @c \\*(i+N) == @p  \n\\*(\\_\\_first2+N) for each @c N in the range @p [0,\\_\\_last2-\\_\\_first2), or @p \\_\\_last1 if no such iterator exists.  \nSearches the range @p [\\_\\_first1,\\_\\_last1) for a sub-sequence that compares equal value-by-value with the sequence given by @p [\\_\\_first2,\\_\\_last2) and returns an iterator to the first element of the sub-sequence, or @p \\_\\_last1 if the sub-sequence is not found.  \nBecause the sub-sequence must lie completely within the range @p [\\_\\_first1,\\_\\_last1) it must start at a position less than @p \\_\\_last1-(\\_\\_last2-\\_\\_first2) where @p \\_\\_last2-\\_\\_first2 is the length of the sub-sequence.  \nThis means that the returned iterator @c i will be in the range  \n@p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2))"},"filterText":"search","insertText":"std::search($0)","insertTextFormat":2,"kind":3,"label":"•std::search(…)","score":0.92650353908538818,"sortText":"4092d0aasearch","textEdit":{"newText":"std::search($0)","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a number of consecutive values.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first A forward iterator.  \n@param \\_\\_last A forward iterator.  \n@param \\_\\_count The number of consecutive values.  \n@param \\_\\_val The value to find.  \n@return The first iterator @c i in the range @p [\\_\\_first,\\_\\_last-\\_\\_count) such that @c \\*(i+N) == @p \\_\\_val for each @c N in the range @p [0,\\_\\_count), or @p \\_\\_last if no such iterator exists.  \nSearches the range @p [\\_\\_first,\\_\\_last) for @p count consecutive elements equal to @p \\_\\_val."},"filterText":"search_n","insertText":"std::search_n($0)","insertTextFormat":2,"kind":3,"label":"•std::search_n(…)","score":0.92650353908538818,"sortText":"4092d0aasearch_n","textEdit":{"newText":"std::search_n($0)","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <random>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<random>`  \n@brief The seed_seq class generates sequences of seeds for random number generators."},"filterText":"seed_seq","insertText":"std::seed_seq","insertTextFormat":2,"kind":7,"label":"•std::seed_seq","score":0.92650353908538818,"sortText":"4092d0aaseed_seq","textEdit":{"newText":"std::seed_seq","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the difference of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range.  \nIterators increment for each range. When the current element of the first range is less than the second according to @p \\_\\_comp, that element is copied and the iterator advances. If the current element of the second range is less, no element is copied and the iterator advances.  \nIf an element is contained in both ranges according to @p \\_\\_comp, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_difference","insertText":"std::set_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_difference","textEdit":{"newText":"std::set_difference($0)","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.92650353908538818,"sortText":"4092d0aaset_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the symmetric difference of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is less than the other, that element is copied and the iterator advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_symmetric_difference","insertText":"std::set_symmetric_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_symmetric_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_symmetric_difference","textEdit":{"newText":"std::set_symmetric_difference($0)","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the union of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is less than the other,  \nthat element is copied and the iterator advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_union","insertText":"std::set_union($0)","insertTextFormat":2,"kind":3,"label":"•std::set_union(…)","score":0.92650353908538818,"sortText":"4092d0aaset_union","textEdit":{"newText":"std::set_union($0)","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.91311287879943848,"sortText":"40963e3csetsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"send","insertText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•send(int s, const void *dataptr, size_t size, int flags)","score":0.90964943170547485,"sortText":"40972137send","textEdit":{"newText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendmsg","insertText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•sendmsg(int s, const struct msghdr *message, int flags)","score":0.90964943170547485,"sortText":"40972137sendmsg","textEdit":{"newText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendto","insertText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•sendto(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964943170547485,"sortText":"40972137sendto","textEdit":{"newText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <clocale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<clocale>`"},"filterText":"setlocale","insertText":"std::setlocale","insertTextFormat":2,"kind":18,"label":"•std::setlocale","score":0.8959164023399353,"sortText":"409aa539setlocale","textEdit":{"newText":"std::setlocale","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station connected to ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STACONNECTED","insertText":"SYSTEM_EVENT_AP_STACONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STACONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STACONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STACONNECTED","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station disconnected from ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STADISCONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STADISCONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STADISCONNECTED","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet phy link up"},"filterText":"SYSTEM_EVENT_ETH_CONNECTED","insertText":"SYSTEM_EVENT_ETH_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_ETH_CONNECTED","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet got IP from connected AP"},"filterText":"SYSTEM_EVENT_ETH_GOT_IP","insertText":"SYSTEM_EVENT_ETH_GOT_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_GOT_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_GOT_IP","textEdit":{"newText":"SYSTEM_EVENT_ETH_GOT_IP","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet stop"},"filterText":"SYSTEM_EVENT_ETH_STOP","insertText":"SYSTEM_EVENT_ETH_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_STOP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_STOP","textEdit":{"newText":"SYSTEM_EVENT_ETH_STOP","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nthe auth mode of AP connected by ESP32 station changed"},"filterText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_AUTHMODE_CHANGE","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_AUTHMODE_CHANGE","textEdit":{"newText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station connected to AP"},"filterText":"SYSTEM_EVENT_STA_CONNECTED","insertText":"SYSTEM_EVENT_STA_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_STA_CONNECTED","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station lost IP and the IP is reset to 0"},"filterText":"SYSTEM_EVENT_STA_LOST_IP","insertText":"SYSTEM_EVENT_STA_LOST_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_LOST_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_LOST_IP","textEdit":{"newText":"SYSTEM_EVENT_STA_LOST_IP","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":45,"jsonrpc":"2.0"}
<<<
Content-Length: 1597

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Se'","range":{"end":{"character":6,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":47}}Content-Length: 11743

{"id":45,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":48},"contentChanges":[{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":6}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":7},"context":{"triggerKind":3}},"id":46,"jsonrpc":"2.0"}
<<<
Content-Length: 64566

{"id":46,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":4.8400001525878906,"sortText":"3fcb4e81HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"3fdbbbbbHardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"4078a156set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase a range of flash sectors  \n@param start_address Address where erase operation has to start.  \nMust be 4kB-aligned  \n@param size Size of erased range, in bytes. Must be divisible by 4kB.  \n@return esp_err_t"},"filterText":"spi_flash_erase_range","insertText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_range(size_t start_address, size_t size)","score":1.1118041276931763,"sortText":"40aa889bspi_flash_erase_range","textEdit":{"newText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase the Flash sector.  \n@param sector Sector number, the count starts at sector 0, 4KB per sector.  \n@return esp_err_t"},"filterText":"spi_flash_erase_sector","insertText":"spi_flash_erase_sector(${1:size_t sector})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_sector(size_t sector)","score":1.1118041276931763,"sortText":"40aa889bspi_flash_erase_sector","textEdit":{"newText":"spi_flash_erase_sector(${1:size_t sector})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747210502624512,"sortText":"40b2b554system_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiServer.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WiFiServer.h\"`"},"filterText":"WiFiServer","insertText":"WiFiServer","insertTextFormat":2,"kind":7,"label":"•WiFiServer","score":1.5585578680038452,"sortText":"40b8812dWiFiServer","textEdit":{"newText":"WiFiServer","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.8448631763458252,"sortText":"40cbc334SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":0.84263044595718384,"sortText":"40cc3d24SERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_seed48_r","insertText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•_seed48_r(struct _reent *, unsigned short *)","score":1.5037370920181274,"sortText":"40df99f3_seed48_r","textEdit":{"newText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_setenv_r","insertText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•_setenv_r(struct _reent *, const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"40df99f3_setenv_r","textEdit":{"newText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps overlap in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps succeeds in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_SUCCESS","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_SUCCESS","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nset cache attribute (access modes) for a range of memory"},"filterText":"xthal_set_region_attribute","insertText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_attribute(void *addr, unsigned int size, unsigned int cattr, unsigned int flags)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_attribute","textEdit":{"newText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation","insertText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation(void *vaddr, void *paddr, unsigned int size, unsigned int cache_atr, unsigned int flags)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_translation","textEdit":{"newText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation_raw","insertText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation_raw(void *vaddr, void *paddr, unsigned int cattr)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_translation_raw","textEdit":{"newText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.62487328052520752,"sortText":"40fab196SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.62487328052520752,"sortText":"40fab196SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.62487328052520752,"sortText":"40fab196SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.62487328052520752,"sortText":"40fab196SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.62487328052520752,"sortText":"40fab196SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.62487328052520752,"sortText":"40fab196SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.62487328052520752,"sortText":"40fab196SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.62487328052520752,"sortText":"40fab196SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.62487328052520752,"sortText":"40fab196SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.62487328052520752,"sortText":"40fab196SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.62487328052520752,"sortText":"40fab196SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.62487328052520752,"sortText":"40fab196SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.62487328052520752,"sortText":"40fab196SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.62487328052520752,"sortText":"40fab196SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.62487328052520752,"sortText":"40fab196SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.62487328052520752,"sortText":"40fab196SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.62487328052520752,"sortText":"40fab196SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.62487328052520752,"sortText":"40fab196SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.62487328052520752,"sortText":"40fab196SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.62487328052520752,"sortText":"40fab196SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.62487328052520752,"sortText":"40fab196SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.62487328052520752,"sortText":"40fab196SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.62487328052520752,"sortText":"40fab196SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.62487328052520752,"sortText":"40fab196SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"detail":"uint32_t","filterText":"esp_dport_access_sequence_reg_read","insertText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":" esp_dport_access_sequence_reg_read(uint32_t reg)","score":2.0620818138122559,"sortText":"40fc06daesp_dport_access_sequence_reg_read","textEdit":{"newText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"_setlocale_r","insertText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","insertTextFormat":2,"kind":3,"label":"•_setlocale_r(struct _reent *, int category, const char *locale)","score":1.1826096773147583,"sortText":"4103b5bd_setlocale_r","textEdit":{"newText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/errno.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const char *const []","documentation":{"kind":"markdown","value":"From `\"sys/errno.h\"`  \nPlease don't use these variables directly.  \nUse strerror instead."},"filterText":"_sys_errlist","insertText":"_sys_errlist","insertTextFormat":2,"kind":6,"label":"•_sys_errlist","score":1.1118042469024658,"sortText":"4112d0aa_sys_errlist","textEdit":{"newText":"_sys_errlist","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Install the driver's GPIO ISR handler service, which allows per-pin GPIO interrupt handlers.  \nThis function is incompatible with gpio_isr_register() - if that function is used, a single global ISR is registered for all GPIO interrupts. If this function is used, the ISR service provides a global GPIO ISR and individual pin handlers are registered via the gpio_isr_handler_add() function.  \n@param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred) ESP_INTR_FLAG\\_\\* values. See esp_intr_alloc.h for more info.  \n@return  \n\\- ESP_OK Success  \n\\- ESP_ERR_NO_MEM No memory to install this service  \n\\- ESP_ERR_INVALID_STATE ISR service already installed.  \n\\- ESP_ERR_NOT_FOUND No free interrupt found with the specified flags  \n\\- ESP_ERR_INVALID_ARG GPIO error"},"filterText":"gpio_install_isr_service","insertText":"gpio_install_isr_service(${1:int intr_alloc_flags})","insertTextFormat":2,"kind":3,"label":"•gpio_install_isr_service(int intr_alloc_flags)","score":1.1118042469024658,"sortText":"4112d0aagpio_install_isr_service","textEdit":{"newText":"gpio_install_isr_service(${1:int intr_alloc_flags})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Uninstall the driver's GPIO ISR service, freeing related resources."},"filterText":"gpio_uninstall_isr_service","insertText":"gpio_uninstall_isr_service()","insertTextFormat":2,"kind":3,"label":"•gpio_uninstall_isr_service()","score":1.1118042469024658,"sortText":"4112d0aagpio_uninstall_isr_service","textEdit":{"newText":"gpio_uninstall_isr_service()","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-rmt.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-rmt.h\"`  \nSetting threshold for Rx completed"},"filterText":"rmtSetRxThreshold","insertText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","insertTextFormat":2,"kind":3,"label":"•rmtSetRxThreshold(rmt_obj_t *rmt, uint32_t value)","score":1.3747211694717407,"sortText":"41156184rmtSetRxThreshold","textEdit":{"newText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747211694717407,"sortText":"41156184uartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/dns.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"lwip/dns.h\"`"},"filterText":"dns_clear_servers","insertText":"dns_clear_servers(${1:bool keep_fallback})","insertTextFormat":2,"kind":3,"label":"•dns_clear_servers(bool keep_fallback)","score":0.90964943170547485,"sortText":"41172137dns_clear_servers","textEdit":{"newText":"dns_clear_servers(${1:bool keep_fallback})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/dport_access.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"soc/dport_access.h\"`  \n@brief Read value from register, NOT SMP-safe version.  \nThis method uses the pre-reading of the APB register before reading the register of the DPORT.  \nThere is not disable/enable interrupt.  \nThe difference from DPORT_REG_READ() is that the user himself must disable interrupts while DPORT reading.  \nThis implementation is useful for reading DORT registers in loop without stall other CPU. Note the usage example.  \nThe recommended way to read registers sequentially without stall other CPU is to use the method esp_dport_read_buffer(buff_out, address, num_words). It allows you to read registers in the buffer.  \n\\\\code{c} // This example shows how to use it.  \n{ // Use curly brackets to limit the visibility of variables in macros DPORT_INTERRUPT_DISABLE/RESTORE.  \nDPORT_INTERRUPT_DISABLE(); // Disable interrupt only on current CPU.  \nfor (i = 0; i < max; ++i) { array[i] = DPORT_SEQUENCE_REG_READ(Address + i * 4); // reading DPORT registers } DPORT_INTERRUPT_RESTORE(); // restore the previous interrupt level }  \n\\\\endcode  \n@param reg Register address  \n@return Value"},"filterText":"DPORT_SEQUENCE_REG_READ","insertText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":"•DPORT_SEQUENCE_REG_READ(uint32_t reg)","score":1.7739145755767822,"sortText":"411cf05eDPORT_SEQUENCE_REG_READ","textEdit":{"newText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase some sectors.  \nPlease do not call this function in SDK.  \n@param uint32_t start_addr : Start addr to erase, should be sector aligned.  \n@param uint32_t area_len : Length to erase, should be sector aligned.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_area","insertText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_area(uint32_t start_addr, uint32_t area_len)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_area","textEdit":{"newText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a 64KB block of flash Uses SPI flash command D8H.  \nPlease do not call this function in SDK.  \n@param uint32_t block_num : Which block to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_block","insertText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_block(uint32_t block_num)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_block","textEdit":{"newText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase whole flash chip.  \nPlease do not call this function in SDK.  \n@param None  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_chip","insertText":"esp_rom_spiflash_erase_chip()","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_chip()","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_chip","textEdit":{"newText":"esp_rom_spiflash_erase_chip()","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a sector of flash.  \nUses SPI flash command 20H.  \nPlease do not call this function in SDK.  \n@param uint32_t sector_num : Which sector to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_sector","insertText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_sector(uint32_t sector_num)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_sector","textEdit":{"newText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nTrampoline support functions:"},"filterText":"xthal_tram_pending_to_service","insertText":"xthal_tram_pending_to_service()","insertTextFormat":2,"kind":3,"label":"•xthal_tram_pending_to_service()","score":1.2690917253494263,"sortText":"41276889xthal_tram_pending_to_service","textEdit":{"newText":"xthal_tram_pending_to_service()","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \n@brief Read Hall Sensor  \n@note When the power switch of SARADC1, SARADC2, HALL sensor and AMP sensor is turned on,  \nthe input of GPIO36 and GPIO39 will be pulled down for about 80ns.  \nWhen enabling power for any of these peripherals, ignore input from GPIO36 and GPIO39.  \nPlease refer to section 3.11 of 'ECO_and_Workarounds_for_Bugs_in_ESP32' for the description of this issue.  \n@note The Hall Sensor uses channels 0 and 3 of ADC1. Do not configure these channels for use as ADC channels.  \n@note The ADC1 module must be enabled by calling adc1_config_width() before calling hall_sensor_read(). ADC1 should be configured for 12 bit readings, as the hall sensor readings are low values and do not cover the full range of the ADC.  \n@return The hall sensor reading."},"filterText":"hall_sensor_read","insertText":"hall_sensor_read()","insertTextFormat":2,"kind":3,"label":"•hall_sensor_read()","score":0.96751213073730469,"sortText":"413198efhall_sensor_read","textEdit":{"newText":"hall_sensor_read()","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_send_r","insertText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_send_r(int s, const void *dataptr, size_t size, int flags)","score":0.90964937210083008,"sortText":"413df103lwip_send_r","textEdit":{"newText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendmsg_r","insertText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_sendmsg_r(int s, const struct msghdr *message, int flags)","score":0.90964937210083008,"sortText":"413df103lwip_sendmsg_r","textEdit":{"newText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendto_r","insertText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•lwip_sendto_r(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964937210083008,"sortText":"413df103lwip_sendto_r","textEdit":{"newText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_setsockopt_r","insertText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•lwip_setsockopt_r(int s, int level, int optname, const void *optval, socklen_t optlen)","score":0.90964937210083008,"sortText":"413df103lwip_setsockopt_r","textEdit":{"newText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"COOKIE_SERVER","insertText":"COOKIE_SERVER","insertTextFormat":2,"kind":20,"label":"•COOKIE_SERVER","score":0.8448631763458252,"sortText":"414bc334COOKIE_SERVER","textEdit":{"newText":"COOKIE_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"IMPRESS_SERVER","insertText":"IMPRESS_SERVER","insertTextFormat":2,"kind":20,"label":"•IMPRESS_SERVER","score":0.8448631763458252,"sortText":"414bc334IMPRESS_SERVER","textEdit":{"newText":"IMPRESS_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LOG_SERVER","insertText":"LOG_SERVER","insertTextFormat":2,"kind":20,"label":"•LOG_SERVER","score":0.8448631763458252,"sortText":"414bc334LOG_SERVER","textEdit":{"newText":"LOG_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LPR_SERVER","insertText":"LPR_SERVER","insertTextFormat":2,"kind":20,"label":"•LPR_SERVER","score":0.8448631763458252,"sortText":"414bc334LPR_SERVER","textEdit":{"newText":"LPR_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"NAME_SERVER","insertText":"NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NAME_SERVER","score":0.8448631763458252,"sortText":"414bc334NAME_SERVER","textEdit":{"newText":"NAME_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NAME_SERVICE_SEARCH","insertText":"NAME_SERVICE_SEARCH","insertTextFormat":2,"kind":20,"label":"•NAME_SERVICE_SEARCH","score":0.8448631763458252,"sortText":"414bc334NAME_SERVICE_SEARCH","textEdit":{"newText":"NAME_SERVICE_SEARCH","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NDS_SERVERS","insertText":"NDS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NDS_SERVERS","score":0.8448631763458252,"sortText":"414bc334NDS_SERVERS","textEdit":{"newText":"NDS_SERVERS","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NNTP_SERVER","insertText":"NNTP_SERVER","insertTextFormat":2,"kind":20,"label":"•NNTP_SERVER","score":0.8448631763458252,"sortText":"414bc334NNTP_SERVER","textEdit":{"newText":"NNTP_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"SMTP_SERVER","insertText":"SMTP_SERVER","insertTextFormat":2,"kind":20,"label":"•SMTP_SERVER","score":0.8448631763458252,"sortText":"414bc334SMTP_SERVER","textEdit":{"newText":"SMTP_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_SERVER","insertText":"STREETTALK_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_SERVER","score":0.8448631763458252,"sortText":"414bc334STREETTALK_SERVER","textEdit":{"newText":"STREETTALK_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"SWAP_SERVER","insertText":"SWAP_SERVER","insertTextFormat":2,"kind":20,"label":"•SWAP_SERVER","score":0.8448631763458252,"sortText":"414bc334SWAP_SERVER","textEdit":{"newText":"SWAP_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"TFTP_SERVER_NAME","insertText":"TFTP_SERVER_NAME","insertTextFormat":2,"kind":20,"label":"•TFTP_SERVER_NAME","score":0.8448631763458252,"sortText":"414bc334TFTP_SERVER_NAME","textEdit":{"newText":"TFTP_SERVER_NAME","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"TIME_SERVER","insertText":"TIME_SERVER","insertTextFormat":2,"kind":20,"label":"•TIME_SERVER","score":0.8448631763458252,"sortText":"414bc334TIME_SERVER","textEdit":{"newText":"TIME_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_FINGER_SERVER","insertText":"DEFAULT_FINGER_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_FINGER_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_FINGER_SERVER","textEdit":{"newText":"DEFAULT_FINGER_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_IRC_SERVER","insertText":"DEFAULT_IRC_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_IRC_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_IRC_SERVER","textEdit":{"newText":"DEFAULT_IRC_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_WWW_SERVER","insertText":"DEFAULT_WWW_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_WWW_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_WWW_SERVER","textEdit":{"newText":"DEFAULT_WWW_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"DOMAIN_NAME_SERVER","insertText":"DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•DOMAIN_NAME_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDOMAIN_NAME_SERVER","textEdit":{"newText":"DOMAIN_NAME_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVERS","insertText":"NETWORK_INFORMATION_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVERS","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVERS","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_DOMAIN","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_DOMAIN","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_PLUS_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"POP3_SERVER","insertText":"POP3_SERVER","insertTextFormat":2,"kind":20,"label":"•POP3_SERVER","score":0.84486329555511475,"sortText":"416fcf5cPOP3_SERVER","textEdit":{"newText":"POP3_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"RESOURCE_LOCATION_SERVER","insertText":"RESOURCE_LOCATION_SERVER","insertTextFormat":2,"kind":20,"label":"•RESOURCE_LOCATION_SERVER","score":0.84486329555511475,"sortText":"416fcf5cRESOURCE_LOCATION_SERVER","textEdit":{"newText":"RESOURCE_LOCATION_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_TIME_PROTOCOL_SERVERS","insertText":"NETWORK_TIME_PROTOCOL_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_TIME_PROTOCOL_SERVERS","score":0.84486323595046997,"sortText":"41a7b70bNETWORK_TIME_PROTOCOL_SERVERS","textEdit":{"newText":"NETWORK_TIME_PROTOCOL_SERVERS","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_DIRECTORY_ASSISTANCE_SERVER","score":0.84486323595046997,"sortText":"41a7b70bSTREETTALK_DIRECTORY_ASSISTANCE_SERVER","textEdit":{"newText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"tcpip_adapter.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"tcpip_adapter_dhcp_option_id_t","documentation":{"kind":"markdown","value":"From `\"tcpip_adapter.h\"`  \nDomain name server"},"filterText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•TCPIP_ADAPTER_DOMAIN_NAME_SERVER","score":0.93569719791412354,"sortText":"41e04ec4TCPIP_ADAPTER_DOMAIN_NAME_SERVER","textEdit":{"newText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"X_WINDOW_SYSTEM_FONT_SERVER","insertText":"X_WINDOW_SYSTEM_FONT_SERVER","insertTextFormat":2,"kind":20,"label":"•X_WINDOW_SYSTEM_FONT_SERVER","score":0.84486329555511475,"sortText":"41efcf5cX_WINDOW_SYSTEM_FONT_SERVER","textEdit":{"newText":"X_WINDOW_SYSTEM_FONT_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`"},"filterText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertTextFormat":2,"kind":20,"label":"•ESP_ROM_SPIFLASH_RESULT_ERR","score":1.2690917253494263,"sortText":"42276889ESP_ROM_SPIFLASH_RESULT_ERR","textEdit":{"newText":"ESP_ROM_SPIFLASH_RESULT_ERR","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp_system.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"deprecated":true,"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_system.h\"`  \n@brief Read hardware MAC address.  \nFunction has been renamed to esp_efuse_mac_get_default.  \nThis name will be removed in a future release.  \n@param mac hardware MAC address, length: 6 bytes.  \n@return ESP_OK on success"},"filterText":"system_efuse_read_mac","insertText":"system_efuse_read_mac(${1:uint8_t *mac})","insertTextFormat":2,"kind":3,"label":"•system_efuse_read_mac(uint8_t *mac)","score":0.13747210800647736,"sortText":"42444e03system_efuse_read_mac","textEdit":{"newText":"system_efuse_read_mac(${1:uint8_t *mac})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NETBIOS_OVER_TCP_IP_NAME_SERVER","score":0.84486329555511475,"sortText":"426fcf5cNETBIOS_OVER_TCP_IP_NAME_SERVER","textEdit":{"newText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `<list>`"},"filterText":"__throw_system_error","insertText":"std::__throw_system_error(${1:int})","insertTextFormat":2,"kind":3,"label":"•std::__throw_system_error(int)","score":0.092650346457958221,"sortText":"430300b6__throw_system_error","textEdit":{"newText":"std::__throw_system_error(${1:int})","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":47,"jsonrpc":"2.0"}
<<<
Content-Length: 1598

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Ser'","range":{"end":{"character":7,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":48}}Content-Length: 11743

{"id":47,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":49},"contentChanges":[{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":8},"context":{"triggerKind":3}},"id":48,"jsonrpc":"2.0"}
<<<
Content-Length: 17191

{"id":48,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":4.8400001525878906,"sortText":"3fab0a3dHardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"3fbe6666HardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":0.84263044595718384,"sortText":"40d0bb9dSERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.84486329555511475,"sortText":"40eb4dd7SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747212886810303,"sortText":"41240b6buartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":49,"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":50},"contentChanges":[{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":8}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":49,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}Content-Length: 1599

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seri'","range":{"end":{"character":8,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":49}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":51},"contentChanges":[{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":9}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1979

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h:116:23:\nnote: 'Serial' declared here","range":{"end":{"character":9,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":50}}Content-Length: 1615

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":51}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":52},"contentChanges":[{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":10}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 257

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":11},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":50,"jsonrpc":"2.0"}
<<<
Content-Length: 9142

{"id":50,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"int","filterText":"available","insertText":"available()","insertTextFormat":2,"kind":2,"label":" available()","score":9.6800003051757812,"sortText":"3ee51eb8available","textEdit":{"newText":"available()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"int","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"kind":2,"label":" availableForWrite()","score":9.6800003051757812,"sortText":"3ee51eb8availableForWrite","textEdit":{"newText":"availableForWrite()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"uint32_t","filterText":"baudRate","insertText":"baudRate()","insertTextFormat":2,"kind":2,"label":" baudRate()","score":9.6800003051757812,"sortText":"3ee51eb8baudRate","textEdit":{"newText":"baudRate()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"void","filterText":"begin","insertText":"begin(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" begin(unsigned long baud, uint32_t config = SERIAL_8N1, int8_t rxPin = -1, int8_t txPin = -1, bool invert = false, unsigned long timeout_ms = 20000UL)","score":9.6800003051757812,"sortText":"3ee51eb8begin","textEdit":{"newText":"begin(${1:unsigned long baud})","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"void","filterText":"end","insertText":"end()","insertTextFormat":2,"kind":2,"label":" end()","score":9.6800003051757812,"sortText":"3ee51eb8end","textEdit":{"newText":"end()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[2 overloads]","filterText":"flush","insertText":"flush($0)","insertTextFormat":2,"kind":2,"label":" flush(…)","score":9.6800003051757812,"sortText":"3ee51eb8flush","textEdit":{"newText":"flush($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"int","filterText":"peek","insertText":"peek()","insertTextFormat":2,"kind":2,"label":" peek()","score":9.6800003051757812,"sortText":"3ee51eb8peek","textEdit":{"newText":"peek()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[3 overloads]","filterText":"read","insertText":"read($0)","insertTextFormat":2,"kind":2,"label":" read(…)","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"void","filterText":"setDebugOutput","insertText":"setDebugOutput(${1:bool})","insertTextFormat":2,"kind":2,"label":" setDebugOutput(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setDebugOutput","textEdit":{"newText":"setDebugOutput(${1:bool})","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"size_t","filterText":"setRxBufferSize","insertText":"setRxBufferSize(${1:size_t})","insertTextFormat":2,"kind":2,"label":" setRxBufferSize(size_t)","score":9.6800003051757812,"sortText":"3ee51eb8setRxBufferSize","textEdit":{"newText":"setRxBufferSize(${1:size_t})","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"void","filterText":"setRxInvert","insertText":"setRxInvert(${1:bool})","insertTextFormat":2,"kind":2,"label":" setRxInvert(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setRxInvert","textEdit":{"newText":"setRxInvert(${1:bool})","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"void","filterText":"updateBaudRate","insertText":"updateBaudRate(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" updateBaudRate(unsigned long baud)","score":9.6800003051757812,"sortText":"3ee51eb8updateBaudRate","textEdit":{"newText":"updateBaudRate(${1:unsigned long baud})","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[8 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":9.6800003051757812,"sortText":"3ee51eb8write","textEdit":{"newText":"write($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[14 overloads]","filterText":"print","insertText":"print($0)","insertTextFormat":2,"kind":2,"label":" print(…)","score":8.6177120208740234,"sortText":"3ef61ddaprint","textEdit":{"newText":"print($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[15 overloads]","filterText":"println","insertText":"println($0)","insertTextFormat":2,"kind":2,"label":" println(…)","score":8.0884857177734375,"sortText":"3efe9590println","textEdit":{"newText":"println($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"void","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"kind":2,"label":" clearWriteError()","score":4.8400001525878906,"sortText":"3f651eb8clearWriteError","textEdit":{"newText":"clearWriteError()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[5 overloads]","filterText":"find","insertText":"find($0)","insertTextFormat":2,"kind":2,"label":" find(…)","score":4.8400001525878906,"sortText":"3f651eb8find","textEdit":{"newText":"find($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[4 overloads]","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"kind":2,"label":" findUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8findUntil","textEdit":{"newText":"findUntil($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"unsigned long","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"kind":2,"label":" getTimeout()","score":4.8400001525878906,"sortText":"3f651eb8getTimeout","textEdit":{"newText":"getTimeout()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"int","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"kind":2,"label":" getWriteError()","score":4.8400001525878906,"sortText":"3f651eb8getWriteError","textEdit":{"newText":"getWriteError()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"float","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"kind":2,"label":" parseFloat()","score":4.8400001525878906,"sortText":"3f651eb8parseFloat","textEdit":{"newText":"parseFloat()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"long","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"kind":2,"label":" parseInt()","score":4.8400001525878906,"sortText":"3f651eb8parseInt","textEdit":{"newText":"parseInt()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"size_t","filterText":"printf","insertText":"printf(${1:const char *format, ...})","insertTextFormat":2,"kind":2,"label":" printf(const char *format, ...)","score":4.8400001525878906,"sortText":"3f651eb8printf","textEdit":{"newText":"printf(${1:const char *format, ...})","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[2 overloads]","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"kind":2,"label":" readBytes(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytes","textEdit":{"newText":"readBytes($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"[2 overloads]","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"kind":2,"label":" readBytesUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytesUntil","textEdit":{"newText":"readBytesUntil($0)","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"String","filterText":"readString","insertText":"readString()","insertTextFormat":2,"kind":2,"label":" readString()","score":4.8400001525878906,"sortText":"3f651eb8readString","textEdit":{"newText":"readString()","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"String","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"kind":2,"label":" readStringUntil(char terminator)","score":4.8400001525878906,"sortText":"3f651eb8readStringUntil","textEdit":{"newText":"readStringUntil(${1:char terminator})","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}},{"detail":"void","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"kind":2,"label":" setTimeout(unsigned long timeout)","score":4.8400001525878906,"sortText":"3f651eb8setTimeout","textEdit":{"newText":"setTimeout(${1:unsigned long timeout})","range":{"end":{"character":11,"line":271},"start":{"character":11,"line":271}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":51,"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":51,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}Content-Length: 1592

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":52}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":53},"contentChanges":[{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":11}},"text":"p"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":54},"contentChanges":[{"range":{"start":{"line":271,"character":12},"end":{"line":271,"character":12}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1798

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'p' in 'HardwareSerial'","range":{"end":{"character":12,"line":271},"start":{"character":11,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":53}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":55},"contentChanges":[{"range":{"start":{"line":271,"character":13},"end":{"line":271,"character":13}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1800

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pri' in 'HardwareSerial'","range":{"end":{"character":14,"line":271},"start":{"character":11,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":55}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":56},"contentChanges":[{"range":{"start":{"line":271,"character":14},"end":{"line":271,"character":14}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1801

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'prin' in 'HardwareSerial'","range":{"end":{"character":15,"line":271},"start":{"character":11,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":56}}
>>>
Content-Length: 461

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":15},"end":{"line":271,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":15}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'prin' in 'HardwareSerial'"}]}},"id":52,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":52,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":57},"contentChanges":[{"range":{"start":{"line":271,"character":15},"end":{"line":271,"character":15}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3518

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:81:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:82:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:83:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:84:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:85:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:86:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:87:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:88:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:89:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:90:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:91:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:92:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:93:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:94:12:\nnote: possible target for call","range":{"end":{"character":16,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":57}}
>>>
Content-Length: 2178

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":16},"end":{"line":271,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":16}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:81:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:82:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:83:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:84:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:85:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:86:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:87:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:88:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:89:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:90:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:91:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:92:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:93:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:94:12:\nnote: possible target for call"}]}},"id":53,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":53,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":58},"contentChanges":[{"range":{"start":{"line":271,"character":16},"end":{"line":271,"character":16}},"text":"l"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":59},"contentChanges":[{"range":{"start":{"line":271,"character":17},"end":{"line":271,"character":17}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1803

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'printl' in 'HardwareSerial'","range":{"end":{"character":17,"line":271},"start":{"character":11,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":58}}Content-Length: 3710

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":59}}
>>>
Content-Length: 2370

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":18}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call"}]}},"id":54,"jsonrpc":"2.0"}
<<<
Content-Length: 2401

{"id":54,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp":[{"newText":"()","range":{"end":{"character":18,"line":271},"start":{"character":18,"line":271}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert '()'"}]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":60},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3710

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":60}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":61},"contentChanges":[{"range":{"start":{"line":270,"character":2},"end":{"line":270,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3710

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":61}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":62},"contentChanges":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":4}},"text":"/"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1584

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":62}}
>>>
Content-Length: 444

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":5}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":55,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":55,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":63},"contentChanges":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3710

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":63}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":64},"contentChanges":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":4}},"text":"S"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":5},"context":{"triggerKind":1}},"id":56,"jsonrpc":"2.0"}
<<<
Content-Length: 53012

{"id":56,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":16.074844360351562,"sortText":"3e7f66b8Serial","textEdit":{"newText":"Serial","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"size_t","insertText":"size_t","insertTextFormat":2,"kind":8,"label":"•size_t","score":10.712376594543457,"sortText":"3ed49a1bsize_t","textEdit":{"newText":"size_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"String","documentation":{"kind":"markdown","value":"String receivedString;  \nVariable to store if sending data was successful"},"filterText":"success","insertText":"success","insertTextFormat":2,"kind":6,"label":" success","score":9.0014286041259766,"sortText":"3eeffa26success","textEdit":{"newText":"success","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"short","insertText":"short","insertTextFormat":2,"kind":14,"label":" short","score":8,"sortText":"3f000000short","textEdit":{"newText":"short","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"signed","insertText":"signed","insertTextFormat":2,"kind":14,"label":" signed","score":8,"sortText":"3f000000signed","textEdit":{"newText":"signed","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"size_t","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"kind":15,"label":" sizeof(expression-or-type)","score":8,"sortText":"3f000000sizeof","textEdit":{"newText":"sizeof(${0:expression-or-type})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"size_t","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"kind":15,"label":" sizeof...(parameter-pack)","score":8,"sortText":"3f000000sizeof...","textEdit":{"newText":"sizeof...(${0:parameter-pack})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"static","insertText":"static","insertTextFormat":2,"kind":14,"label":" static","score":8,"sortText":"3f000000static","textEdit":{"newText":"static","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"static_assert","insertText":"static_assert(${1:expression}, ${0:message});","insertTextFormat":2,"kind":15,"label":" static_assert(expression, message);","score":8,"sortText":"3f000000static_assert","textEdit":{"newText":"static_assert(${1:expression}, ${0:message});","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"static_cast","insertText":"static_cast<${1:type}>(${0:expression})","insertTextFormat":2,"kind":15,"label":" static_cast<type>(expression)","score":8,"sortText":"3f000000static_cast","textEdit":{"newText":"static_cast<${1:type}>(${0:expression})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"struct","insertText":"struct","insertTextFormat":2,"kind":14,"label":" struct","score":8,"sortText":"3f000000struct","textEdit":{"newText":"struct","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"switch","insertText":"switch (${1:condition}) {\n${0:cases}\n}","insertTextFormat":2,"kind":15,"label":" switch (condition) {cases}","score":8,"sortText":"3f000000switch","textEdit":{"newText":"switch (${1:condition}) {\n${0:cases}\n}","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nThe string class"},"filterText":"String","insertText":"String","insertTextFormat":2,"kind":7,"label":"•String","score":6.0775456428527832,"sortText":"3f3d84bfString","textEdit":{"newText":"String","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"Stream.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Stream.h\"`  \ncompatability macros for testing  \n#define getInt() parseInt()  \n#define getInt(skipChar) parseInt(skipchar)  \n#define getFloat() parseFloat()  \n#define getFloat(skipChar) parseFloat(skipChar)  \n#define getString( pre_string, post_string, buffer, length) readBytesBetween( pre_string, terminator, buffer, length)"},"filterText":"Stream","insertText":"Stream","insertTextFormat":2,"kind":7,"label":"•Stream","score":5.5006375312805176,"sortText":"3f4ffac7Stream","textEdit":{"newText":"Stream","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nAn inherited class for holding the result of a concatenation. These result objects are assumed to be writable by subsequent concatenations."},"filterText":"StringSumHelper","insertText":"StringSumHelper","insertTextFormat":2,"kind":7,"label":"•StringSumHelper","score":4.8400001525878906,"sortText":"3f651eb8StringSumHelper","textEdit":{"newText":"StringSumHelper","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"double","filterText":"sqrt","insertText":"sqrt(${1:double})","insertTextFormat":2,"kind":3,"label":" sqrt(double)","score":4.8400001525878906,"sortText":"3f651eb8sqrt","textEdit":{"newText":"sqrt(${1:double})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[2 overloads]","filterText":"Stream","insertText":"Stream($0)","insertTextFormat":2,"kind":4,"label":" Stream(…)","score":4.4000000953674316,"sortText":"3f733333Stream","textEdit":{"newText":"Stream($0)","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[13 overloads]","filterText":"String","insertText":"String($0)","insertTextFormat":2,"kind":4,"label":" String(…)","score":4.4000000953674316,"sortText":"3f733333String","textEdit":{"newText":"String($0)","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[12 overloads]","filterText":"StringSumHelper","insertText":"StringSumHelper($0)","insertTextFormat":2,"kind":4,"label":" StringSumHelper(…)","score":4.4000000953674316,"sortText":"3f733333StringSumHelper","textEdit":{"newText":"StringSumHelper($0)","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"std","insertText":"std","insertTextFormat":2,"kind":9,"label":" std","score":3.5200002193450928,"sortText":"3f9eb851std","textEdit":{"newText":"std","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_DIS","insertText":"STICK_PARITY_DIS","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_DIS","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_DIS","textEdit":{"newText":"STICK_PARITY_DIS","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_EN","insertText":"STICK_PARITY_EN","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_EN","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_EN","textEdit":{"newText":"STICK_PARITY_EN","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•strlen(const char *)","score":1.6522369384765625,"sortText":"402c8380strlen","textEdit":{"newText":"strlen(${1:const char *})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"SDA","insertText":"SDA","insertTextFormat":2,"kind":6,"label":"•SDA","score":1.5037370920181274,"sortText":"403f858bSDA","textEdit":{"newText":"SDA","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"STA_CONNECTED_BIT","insertText":"STA_CONNECTED_BIT","insertTextFormat":2,"kind":6,"label":"•STA_CONNECTED_BIT","score":1.5037370920181274,"sortText":"403f858bSTA_CONNECTED_BIT","textEdit":{"newText":"STA_CONNECTED_BIT","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"StaticSemaphore_t","insertText":"StaticSemaphore_t","insertTextFormat":2,"kind":8,"label":"•StaticSemaphore_t","score":1.5037370920181274,"sortText":"403f858bStaticSemaphore_t","textEdit":{"newText":"StaticSemaphore_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"scanf","insertText":"scanf(${1:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•scanf(const char *, ...)","score":1.5037370920181274,"sortText":"403f858bscanf","textEdit":{"newText":"scanf(${1:const char *, ...})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"Esp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Esp.h\"`"},"filterText":"sketchSize_t","insertText":"sketchSize_t","insertTextFormat":2,"kind":8,"label":"•sketchSize_t","score":1.5037370920181274,"sortText":"403f858bsketchSize_t","textEdit":{"newText":"sketchSize_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sprintf","insertText":"sprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sprintf(char *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858bsprintf","textEdit":{"newText":"sprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":1.5037370920181274,"sortText":"403f858bsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strchr","insertText":"strchr(${1:const char *}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•strchr(const char *, int)","score":1.5037370920181274,"sortText":"403f858bstrchr","textEdit":{"newText":"strchr(${1:const char *}, ${2:int})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcoll","insertText":"strcoll(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcoll(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcoll","textEdit":{"newText":"strcoll(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcspn","insertText":"strcspn(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcspn(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcspn","textEdit":{"newText":"strcspn(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strlcat(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrlcat","textEdit":{"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncasecmp(const char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncasecmp","textEdit":{"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncpy","insertText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncpy(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncpy","textEdit":{"newText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nGetting SSID and password of target AP"},"filterText":"SC_STATUS_GETTING_SSID_PSWD","insertText":"SC_STATUS_GETTING_SSID_PSWD","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_GETTING_SSID_PSWD","score":1.3747211694717407,"sortText":"40500923SC_STATUS_GETTING_SSID_PSWD","textEdit":{"newText":"SC_STATUS_GETTING_SSID_PSWD","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nConnected to AP successfully"},"filterText":"SC_STATUS_LINK_OVER","insertText":"SC_STATUS_LINK_OVER","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_LINK_OVER","score":1.3747211694717407,"sortText":"40500923SC_STATUS_LINK_OVER","textEdit":{"newText":"SC_STATUS_LINK_OVER","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \n@brief The callback of SmartConfig, executed when smart-config status changed.  \n@param status Status of SmartConfig:  \n\\- SC_STATUS_GETTING_SSID_PSWD : pdata is a pointer of smartconfig_type_t, means config type.  \n\\- SC_STATUS_LINK : pdata is a pointer to wifi_config_t.  \n\\- SC_STATUS_LINK_OVER : pdata is a pointer of phone's IP address(4 bytes) if pdata unequal NULL.  \n\\- otherwise : parameter void \\*pdata is NULL.  \n@param pdata According to the different status have different values."},"filterText":"sc_callback_t","insertText":"sc_callback_t","insertTextFormat":2,"kind":8,"label":"•sc_callback_t","score":1.3747211694717407,"sortText":"40500923sc_callback_t","textEdit":{"newText":"sc_callback_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaAttachPin","insertText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaAttachPin(uint8_t pin, uint8_t channel)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaAttachPin","textEdit":{"newText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaWrite","insertText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaWrite(uint8_t channel, uint8_t duty)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaWrite","textEdit":{"newText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nHelper functions to translate frequency to clock divider and back"},"filterText":"spiFrequencyToClockDiv","insertText":"spiFrequencyToClockDiv(${1:uint32_t freq})","insertTextFormat":2,"kind":3,"label":"•spiFrequencyToClockDiv(uint32_t freq)","score":1.3747211694717407,"sortText":"40500923spiFrequencyToClockDiv","textEdit":{"newText":"spiFrequencyToClockDiv(${1:uint32_t freq})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiGetClockDiv","insertText":"spiGetClockDiv(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiGetClockDiv(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiGetClockDiv","textEdit":{"newText":"spiGetClockDiv(${1:spi_t *spi})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nDeactivate enabled SPI_CSx pins"},"filterText":"spiSSClear","insertText":"spiSSClear(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSClear(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSClear","textEdit":{"newText":"spiSSClear(${1:spi_t *spi})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nEnable/Disable hardware control of SPI_CSx pins"},"filterText":"spiSSEnable","insertText":"spiSSEnable(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSEnable(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSEnable","textEdit":{"newText":"spiSSEnable(${1:spi_t *spi})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"spi_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiStartBus","insertText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","insertTextFormat":2,"kind":3,"label":"•spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder)","score":1.3747211694717407,"sortText":"40500923spiStartBus","textEdit":{"newText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteShortNL","insertText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteShortNL(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteShortNL","textEdit":{"newText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteWord","insertText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteWord(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteWord","textEdit":{"newText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"40500923system_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"SLEEP_MODE","insertText":"SLEEP_MODE","insertTextFormat":2,"kind":8,"label":"•SLEEP_MODE","score":1.2690916061401367,"sortText":"405d8e68SLEEP_MODE","textEdit":{"newText":"SLEEP_MODE","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinh","insertText":"sinh(${1:double})","insertTextFormat":2,"kind":3,"label":"•sinh(double)","score":1.2690916061401367,"sortText":"405d8e68sinh","textEdit":{"newText":"sinh(${1:double})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinhf","insertText":"sinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•sinhf(float)","score":1.2690916061401367,"sortText":"405d8e68sinhf","textEdit":{"newText":"sinhf(${1:float})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_a","insertText":"step_a","insertTextFormat":2,"kind":20,"label":"•step_a","score":1.2690916061401367,"sortText":"405d8e68step_a","textEdit":{"newText":"step_a","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_b","insertText":"step_b","insertTextFormat":2,"kind":20,"label":"•step_b","score":1.2690916061401367,"sortText":"405d8e68step_b","textEdit":{"newText":"step_b","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"signbit","insertText":"std::signbit($0)","insertTextFormat":2,"kind":3,"label":"•std::signbit(…)","score":1.2531143426895142,"sortText":"405f99f3signbit","textEdit":{"newText":"std::signbit($0)","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sinh","insertText":"std::sinh(${1:float __x})","insertTextFormat":2,"kind":3,"label":"•std::sinh(float __x)","score":1.2531143426895142,"sortText":"405f99f3sinh","textEdit":{"newText":"std::sinh(${1:float __x})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sqrt","insertText":"std::sqrt(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::sqrt(long double __x)","score":1.2531143426895142,"sortText":"405f99f3sqrt","textEdit":{"newText":"std::sqrt(${1:long double __x})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/gpio_sd_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"gpio_sd_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/gpio_sd_struct.h\"`"},"filterText":"SIGMADELTA","insertText":"SIGMADELTA","insertTextFormat":2,"kind":6,"label":"•SIGMADELTA","score":1.1871124505996704,"sortText":"40680cb3SIGMADELTA","textEdit":{"newText":"SIGMADELTA","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn the maximum number of available memory regions which could be returned by soc_get_available_memory_regions(). Used to size the array passed to that function."},"filterText":"soc_get_available_memory_region_max_count","insertText":"soc_get_available_memory_region_max_count()","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_region_max_count()","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_region_max_count","textEdit":{"newText":"soc_get_available_memory_region_max_count()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn available memory regions for this SoC. Each available memory region is a contiguous piece of memory which is not being used by static data, used by ROM code, or reserved by a component using the SOC_RESERVE_MEMORY_REGION() macro.  \nThis result is soc_memory_regions[] minus all regions reserved via the SOC_RESERVE_MEMORY_REGION() macro (which may also split some regions up.)  \nAt startup, all available memory returned by this function is registered as heap space.  \n@note OS-level startup function only, not recommended to call from app code.  \n@param regions Pointer to an array for reading available regions into.  \nSize of the array should be at least the result of soc_get_available_memory_region_max_count(). Entries in the array will be ordered by memory address.  \n@return Number of entries copied to 'regions'. Will be no greater than the result of soc_get_available_memory_region_max_count()."},"filterText":"soc_get_available_memory_regions","insertText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_regions(soc_memory_region_t *regions)","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_regions","textEdit":{"newText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_region_count","insertText":"soc_memory_region_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_region_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_count","textEdit":{"newText":"soc_memory_region_count","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory on a particular SoC."},"filterText":"soc_memory_region_t","insertText":"soc_memory_region_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_t","textEdit":{"newText":"soc_memory_region_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_region_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_regions","insertText":"soc_memory_regions","insertTextFormat":2,"kind":6,"label":"•soc_memory_regions","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_regions","textEdit":{"newText":"soc_memory_regions","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_type_count","insertText":"soc_memory_type_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_type_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_count","textEdit":{"newText":"soc_memory_type_count","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nType descriptor holds a description for a particular type of memory on a particular SoC."},"filterText":"soc_memory_type_desc_t","insertText":"soc_memory_type_desc_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_type_desc_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_desc_t","textEdit":{"newText":"soc_memory_type_desc_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_type_desc_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nConstant table of tag descriptors for all this SoC's tags"},"filterText":"soc_memory_types","insertText":"soc_memory_types","insertTextFormat":2,"kind":6,"label":"•soc_memory_types","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_types","textEdit":{"newText":"soc_memory_types","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory reserved on this SoC for a particular use (ie not available for stack/heap usage.)"},"filterText":"soc_reserved_region_t","insertText":"soc_reserved_region_t","insertTextFormat":2,"kind":8,"label":"•soc_reserved_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_reserved_region_t","textEdit":{"newText":"soc_reserved_region_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swscanf","insertText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swscanf(const wchar_t *, const wchar_t *, ...)","score":1.1826096773147583,"sortText":"4068a03fswscanf","textEdit":{"newText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalbln","insertText":"std::scalbln","insertTextFormat":2,"kind":18,"label":"•std::scalbln","score":1.1391948461532593,"sortText":"406e2eddscalbln","textEdit":{"newText":"std::scalbln","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnf","insertText":"std::scalblnf","insertTextFormat":2,"kind":18,"label":"•std::scalblnf","score":1.1391948461532593,"sortText":"406e2eddscalblnf","textEdit":{"newText":"std::scalblnf","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnl","insertText":"std::scalblnl","insertTextFormat":2,"kind":18,"label":"•std::scalblnl","score":1.1391948461532593,"sortText":"406e2eddscalblnl","textEdit":{"newText":"std::scalblnl","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_LSBFIRST","insertText":"SPI_BITORDER_LSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_LSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_LSBFIRST","textEdit":{"newText":"SPI_BITORDER_LSBFIRST","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_MSBFIRST","insertText":"SPI_BITORDER_MSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_MSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_MSBFIRST","textEdit":{"newText":"SPI_BITORDER_MSBFIRST","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sbrk","insertText":"sbrk(${1:ptrdiff_t __incr})","insertTextFormat":2,"kind":3,"label":"•sbrk(ptrdiff_t __incr)","score":1.1118042469024658,"sortText":"4071b066sbrk","textEdit":{"newText":"sbrk(${1:ptrdiff_t __incr})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}}]}}Content-Length: 1793

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'S'","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":64}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":65},"contentChanges":[{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":5}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":6},"context":{"triggerKind":3}},"id":57,"jsonrpc":"2.0"}
<<<
Content-Length: 10490

{"id":57,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":1.5037370920181274,"sortText":"403f858bsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand48","insertText":"srand48(${1:long})","insertTextFormat":2,"kind":3,"label":"•srand48(long)","score":1.5037370920181274,"sortText":"403f858bsrand48","textEdit":{"newText":"srand48(${1:long})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strerror_r","insertText":"strerror_r(${1:int}, ${2:char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strerror_r(int, char *, size_t)","score":1.5037373304367065,"sortText":"406fa427strerror_r","textEdit":{"newText":"strerror_r(${1:int}, ${2:char *}, ${3:size_t})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strtok_r","insertText":"strtok_r(${1:char *}, ${2:const char *}, ${3:char **})","insertTextFormat":2,"kind":3,"label":"•strtok_r(char *, const char *, char **)","score":1.5037373304367065,"sortText":"406fa427strtok_r","textEdit":{"newText":"strtok_r(${1:char *}, ${2:const char *}, ${3:char **})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"RcvMsgState","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SRCH_MSG_HEAD","insertText":"SRCH_MSG_HEAD","insertTextFormat":2,"kind":20,"label":"•SRCH_MSG_HEAD","score":1.2690916061401367,"sortText":"4071dc9bSRCH_MSG_HEAD","textEdit":{"newText":"SRCH_MSG_HEAD","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690917253494263,"sortText":"408c559bset_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Software Reset digital core.  \nIt is not recommended to use this function in esp-idf, use esp_restart() instead.  \n@param None  \n@return None"},"filterText":"software_reset","insertText":"software_reset()","insertTextFormat":2,"kind":3,"label":"•software_reset()","score":1.2690917253494263,"sortText":"408c559bsoftware_reset","textEdit":{"newText":"software_reset()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Software Reset digital core.  \nIt is not recommended to use this function in esp-idf, use esp_restart() instead.  \n@param int cpu_no : The CPU to reset, 0 for PRO CPU, 1 for APP CPU.  \n@return None"},"filterText":"software_reset_cpu","insertText":"software_reset_cpu(${1:int cpu_no})","insertTextFormat":2,"kind":3,"label":"•software_reset_cpu(int cpu_no)","score":1.2690917253494263,"sortText":"408c559bsoftware_reset_cpu","textEdit":{"newText":"software_reset_cpu(${1:int cpu_no})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cstdlib>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstdlib>`"},"filterText":"srand","insertText":"std::srand","insertTextFormat":2,"kind":18,"label":"•std::srand","score":0.8959164023399353,"sortText":"409aa539srand","textEdit":{"newText":"std::srand","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory reserved on this SoC for a particular use (ie not available for stack/heap usage.)"},"filterText":"soc_reserved_region_t","insertText":"soc_reserved_region_t","insertTextFormat":2,"kind":8,"label":"•soc_reserved_region_t","score":1.1826096773147583,"sortText":"409cf05esoc_reserved_region_t","textEdit":{"newText":"soc_reserved_region_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"RESET_REASON","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n6, Reset by SLC module, reset digital core"},"filterText":"SDIO_RESET","insertText":"SDIO_RESET","insertTextFormat":2,"kind":20,"label":"•SDIO_RESET","score":1.2690917253494263,"sortText":"40b4f201SDIO_RESET","textEdit":{"newText":"SDIO_RESET","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"RESET_REASON","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n3, Software reset digital core"},"filterText":"SW_RESET","insertText":"SW_RESET","insertTextFormat":2,"kind":20,"label":"•SW_RESET","score":1.2690917253494263,"sortText":"40b4f201SW_RESET","textEdit":{"newText":"SW_RESET","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"_ForwardIterator2","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Swap the elements of two sequences.  \n@ingroup mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@return An iterator equal to @p first2+(last1-first1).  \nSwaps each element in the range @p [first1,last1) with the corresponding element in the range @p [first2,(last1-first1)).  \nThe ranges must not overlap."},"filterText":"swap_ranges","insertText":"std::swap_ranges(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2})","insertTextFormat":2,"kind":3,"label":"•std::swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)","score":1.0575764179229736,"sortText":"40b4f201swap_ranges","textEdit":{"newText":"std::swap_ranges(${1:_ForwardIterator1 __first1}, ${2:_ForwardIterator1 __last1}, ${3:_ForwardIterator2 __first2})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nIP Layer Parameters per Interface"},"filterText":"STATIC_ROUTE","insertText":"STATIC_ROUTE","insertTextFormat":2,"kind":20,"label":"•STATIC_ROUTE","score":0.84486329555511475,"sortText":"40f8d266STATIC_ROUTE","textEdit":{"newText":"STATIC_ROUTE","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_system.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"deprecated":true,"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp_system.h\"`  \n@cond  \n@brief Restart system.  \nFunction has been renamed to esp_restart.  \nThis name will be removed in a future release."},"filterText":"system_restart","insertText":"system_restart()","insertTextFormat":2,"kind":3,"label":"•system_restart()","score":0.13747212290763855,"sortText":"422cd7c3system_restart","textEdit":{"newText":"system_restart()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_system.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"deprecated":true,"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp_system.h\"`  \n@brief Reset to default settings.  \nFunction has been deprecated, please use esp_wifi_restore instead.  \nThis name will be removed in a future release."},"filterText":"system_restore","insertText":"system_restore()","insertTextFormat":2,"kind":3,"label":"•system_restore()","score":0.13747212290763855,"sortText":"422cd7c3system_restore","textEdit":{"newText":"system_restore()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}}]}}Content-Length: 1794

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Sr'","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":65}}
>>>
Content-Length: 444

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":6},"end":{"line":270,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":6}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'Sr'"}]}},"id":58,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":58,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":66},"contentChanges":[{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":5},"context":{"triggerKind":1}},"id":59,"jsonrpc":"2.0"}
<<<
Content-Length: 53012

{"id":59,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"size_t","insertText":"size_t","insertTextFormat":2,"kind":8,"label":"•size_t","score":10.712376594543457,"sortText":"3ed49a1bsize_t","textEdit":{"newText":"size_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"String","documentation":{"kind":"markdown","value":"String receivedString;  \nVariable to store if sending data was successful"},"filterText":"success","insertText":"success","insertTextFormat":2,"kind":6,"label":" success","score":9.0014286041259766,"sortText":"3eeffa26success","textEdit":{"newText":"success","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"short","insertText":"short","insertTextFormat":2,"kind":14,"label":" short","score":8,"sortText":"3f000000short","textEdit":{"newText":"short","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"signed","insertText":"signed","insertTextFormat":2,"kind":14,"label":" signed","score":8,"sortText":"3f000000signed","textEdit":{"newText":"signed","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"size_t","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"kind":15,"label":" sizeof(expression-or-type)","score":8,"sortText":"3f000000sizeof","textEdit":{"newText":"sizeof(${0:expression-or-type})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"size_t","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"kind":15,"label":" sizeof...(parameter-pack)","score":8,"sortText":"3f000000sizeof...","textEdit":{"newText":"sizeof...(${0:parameter-pack})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"static","insertText":"static","insertTextFormat":2,"kind":14,"label":" static","score":8,"sortText":"3f000000static","textEdit":{"newText":"static","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"static_assert","insertText":"static_assert(${1:expression}, ${0:message});","insertTextFormat":2,"kind":15,"label":" static_assert(expression, message);","score":8,"sortText":"3f000000static_assert","textEdit":{"newText":"static_assert(${1:expression}, ${0:message});","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"static_cast","insertText":"static_cast<${1:type}>(${0:expression})","insertTextFormat":2,"kind":15,"label":" static_cast<type>(expression)","score":8,"sortText":"3f000000static_cast","textEdit":{"newText":"static_cast<${1:type}>(${0:expression})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"struct","insertText":"struct","insertTextFormat":2,"kind":14,"label":" struct","score":8,"sortText":"3f000000struct","textEdit":{"newText":"struct","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"switch","insertText":"switch (${1:condition}) {\n${0:cases}\n}","insertTextFormat":2,"kind":15,"label":" switch (condition) {cases}","score":8,"sortText":"3f000000switch","textEdit":{"newText":"switch (${1:condition}) {\n${0:cases}\n}","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nThe string class"},"filterText":"String","insertText":"String","insertTextFormat":2,"kind":7,"label":"•String","score":6.0775456428527832,"sortText":"3f3d84bfString","textEdit":{"newText":"String","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"Stream.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Stream.h\"`  \ncompatability macros for testing  \n#define getInt() parseInt()  \n#define getInt(skipChar) parseInt(skipchar)  \n#define getFloat() parseFloat()  \n#define getFloat(skipChar) parseFloat(skipChar)  \n#define getString( pre_string, post_string, buffer, length) readBytesBetween( pre_string, terminator, buffer, length)"},"filterText":"Stream","insertText":"Stream","insertTextFormat":2,"kind":7,"label":"•Stream","score":5.5006375312805176,"sortText":"3f4ffac7Stream","textEdit":{"newText":"Stream","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nAn inherited class for holding the result of a concatenation. These result objects are assumed to be writable by subsequent concatenations."},"filterText":"StringSumHelper","insertText":"StringSumHelper","insertTextFormat":2,"kind":7,"label":"•StringSumHelper","score":4.8400001525878906,"sortText":"3f651eb8StringSumHelper","textEdit":{"newText":"StringSumHelper","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"double","filterText":"sqrt","insertText":"sqrt(${1:double})","insertTextFormat":2,"kind":3,"label":" sqrt(double)","score":4.8400001525878906,"sortText":"3f651eb8sqrt","textEdit":{"newText":"sqrt(${1:double})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[2 overloads]","filterText":"Stream","insertText":"Stream($0)","insertTextFormat":2,"kind":4,"label":" Stream(…)","score":4.4000000953674316,"sortText":"3f733333Stream","textEdit":{"newText":"Stream($0)","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[13 overloads]","filterText":"String","insertText":"String($0)","insertTextFormat":2,"kind":4,"label":" String(…)","score":4.4000000953674316,"sortText":"3f733333String","textEdit":{"newText":"String($0)","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[12 overloads]","filterText":"StringSumHelper","insertText":"StringSumHelper($0)","insertTextFormat":2,"kind":4,"label":" StringSumHelper(…)","score":4.4000000953674316,"sortText":"3f733333StringSumHelper","textEdit":{"newText":"StringSumHelper($0)","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"std","insertText":"std","insertTextFormat":2,"kind":9,"label":" std","score":3.5200002193450928,"sortText":"3f9eb851std","textEdit":{"newText":"std","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_DIS","insertText":"STICK_PARITY_DIS","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_DIS","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_DIS","textEdit":{"newText":"STICK_PARITY_DIS","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_EN","insertText":"STICK_PARITY_EN","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_EN","score":1.9036375284194946,"sortText":"400c559bSTICK_PARITY_EN","textEdit":{"newText":"STICK_PARITY_EN","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•strlen(const char *)","score":1.6522369384765625,"sortText":"402c8380strlen","textEdit":{"newText":"strlen(${1:const char *})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"SDA","insertText":"SDA","insertTextFormat":2,"kind":6,"label":"•SDA","score":1.5037370920181274,"sortText":"403f858bSDA","textEdit":{"newText":"SDA","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"STA_CONNECTED_BIT","insertText":"STA_CONNECTED_BIT","insertTextFormat":2,"kind":6,"label":"•STA_CONNECTED_BIT","score":1.5037370920181274,"sortText":"403f858bSTA_CONNECTED_BIT","textEdit":{"newText":"STA_CONNECTED_BIT","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"StaticSemaphore_t","insertText":"StaticSemaphore_t","insertTextFormat":2,"kind":8,"label":"•StaticSemaphore_t","score":1.5037370920181274,"sortText":"403f858bStaticSemaphore_t","textEdit":{"newText":"StaticSemaphore_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"scanf","insertText":"scanf(${1:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•scanf(const char *, ...)","score":1.5037370920181274,"sortText":"403f858bscanf","textEdit":{"newText":"scanf(${1:const char *, ...})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"Esp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Esp.h\"`"},"filterText":"sketchSize_t","insertText":"sketchSize_t","insertTextFormat":2,"kind":8,"label":"•sketchSize_t","score":1.5037370920181274,"sortText":"403f858bsketchSize_t","textEdit":{"newText":"sketchSize_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sprintf","insertText":"sprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sprintf(char *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858bsprintf","textEdit":{"newText":"sprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":1.5037370920181274,"sortText":"403f858bsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strchr","insertText":"strchr(${1:const char *}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•strchr(const char *, int)","score":1.5037370920181274,"sortText":"403f858bstrchr","textEdit":{"newText":"strchr(${1:const char *}, ${2:int})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcoll","insertText":"strcoll(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcoll(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcoll","textEdit":{"newText":"strcoll(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcspn","insertText":"strcspn(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcspn(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcspn","textEdit":{"newText":"strcspn(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strlcat(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrlcat","textEdit":{"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncasecmp(const char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncasecmp","textEdit":{"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncpy","insertText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncpy(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncpy","textEdit":{"newText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nGetting SSID and password of target AP"},"filterText":"SC_STATUS_GETTING_SSID_PSWD","insertText":"SC_STATUS_GETTING_SSID_PSWD","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_GETTING_SSID_PSWD","score":1.3747211694717407,"sortText":"40500923SC_STATUS_GETTING_SSID_PSWD","textEdit":{"newText":"SC_STATUS_GETTING_SSID_PSWD","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nConnected to AP successfully"},"filterText":"SC_STATUS_LINK_OVER","insertText":"SC_STATUS_LINK_OVER","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_LINK_OVER","score":1.3747211694717407,"sortText":"40500923SC_STATUS_LINK_OVER","textEdit":{"newText":"SC_STATUS_LINK_OVER","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \n@brief The callback of SmartConfig, executed when smart-config status changed.  \n@param status Status of SmartConfig:  \n\\- SC_STATUS_GETTING_SSID_PSWD : pdata is a pointer of smartconfig_type_t, means config type.  \n\\- SC_STATUS_LINK : pdata is a pointer to wifi_config_t.  \n\\- SC_STATUS_LINK_OVER : pdata is a pointer of phone's IP address(4 bytes) if pdata unequal NULL.  \n\\- otherwise : parameter void \\*pdata is NULL.  \n@param pdata According to the different status have different values."},"filterText":"sc_callback_t","insertText":"sc_callback_t","insertTextFormat":2,"kind":8,"label":"•sc_callback_t","score":1.3747211694717407,"sortText":"40500923sc_callback_t","textEdit":{"newText":"sc_callback_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaAttachPin","insertText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaAttachPin(uint8_t pin, uint8_t channel)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaAttachPin","textEdit":{"newText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaWrite","insertText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaWrite(uint8_t channel, uint8_t duty)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaWrite","textEdit":{"newText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nHelper functions to translate frequency to clock divider and back"},"filterText":"spiFrequencyToClockDiv","insertText":"spiFrequencyToClockDiv(${1:uint32_t freq})","insertTextFormat":2,"kind":3,"label":"•spiFrequencyToClockDiv(uint32_t freq)","score":1.3747211694717407,"sortText":"40500923spiFrequencyToClockDiv","textEdit":{"newText":"spiFrequencyToClockDiv(${1:uint32_t freq})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiGetClockDiv","insertText":"spiGetClockDiv(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiGetClockDiv(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiGetClockDiv","textEdit":{"newText":"spiGetClockDiv(${1:spi_t *spi})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nDeactivate enabled SPI_CSx pins"},"filterText":"spiSSClear","insertText":"spiSSClear(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSClear(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSClear","textEdit":{"newText":"spiSSClear(${1:spi_t *spi})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nEnable/Disable hardware control of SPI_CSx pins"},"filterText":"spiSSEnable","insertText":"spiSSEnable(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSEnable(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSEnable","textEdit":{"newText":"spiSSEnable(${1:spi_t *spi})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"spi_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiStartBus","insertText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","insertTextFormat":2,"kind":3,"label":"•spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder)","score":1.3747211694717407,"sortText":"40500923spiStartBus","textEdit":{"newText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteShortNL","insertText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteShortNL(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteShortNL","textEdit":{"newText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteWord","insertText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteWord(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteWord","textEdit":{"newText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"40500923system_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"SLEEP_MODE","insertText":"SLEEP_MODE","insertTextFormat":2,"kind":8,"label":"•SLEEP_MODE","score":1.2690916061401367,"sortText":"405d8e68SLEEP_MODE","textEdit":{"newText":"SLEEP_MODE","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinh","insertText":"sinh(${1:double})","insertTextFormat":2,"kind":3,"label":"•sinh(double)","score":1.2690916061401367,"sortText":"405d8e68sinh","textEdit":{"newText":"sinh(${1:double})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinhf","insertText":"sinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•sinhf(float)","score":1.2690916061401367,"sortText":"405d8e68sinhf","textEdit":{"newText":"sinhf(${1:float})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_a","insertText":"step_a","insertTextFormat":2,"kind":20,"label":"•step_a","score":1.2690916061401367,"sortText":"405d8e68step_a","textEdit":{"newText":"step_a","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_b","insertText":"step_b","insertTextFormat":2,"kind":20,"label":"•step_b","score":1.2690916061401367,"sortText":"405d8e68step_b","textEdit":{"newText":"step_b","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"signbit","insertText":"std::signbit($0)","insertTextFormat":2,"kind":3,"label":"•std::signbit(…)","score":1.2531143426895142,"sortText":"405f99f3signbit","textEdit":{"newText":"std::signbit($0)","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sinh","insertText":"std::sinh(${1:float __x})","insertTextFormat":2,"kind":3,"label":"•std::sinh(float __x)","score":1.2531143426895142,"sortText":"405f99f3sinh","textEdit":{"newText":"std::sinh(${1:float __x})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sqrt","insertText":"std::sqrt(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::sqrt(long double __x)","score":1.2531143426895142,"sortText":"405f99f3sqrt","textEdit":{"newText":"std::sqrt(${1:long double __x})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/gpio_sd_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"gpio_sd_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/gpio_sd_struct.h\"`"},"filterText":"SIGMADELTA","insertText":"SIGMADELTA","insertTextFormat":2,"kind":6,"label":"•SIGMADELTA","score":1.1871124505996704,"sortText":"40680cb3SIGMADELTA","textEdit":{"newText":"SIGMADELTA","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn the maximum number of available memory regions which could be returned by soc_get_available_memory_regions(). Used to size the array passed to that function."},"filterText":"soc_get_available_memory_region_max_count","insertText":"soc_get_available_memory_region_max_count()","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_region_max_count()","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_region_max_count","textEdit":{"newText":"soc_get_available_memory_region_max_count()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn available memory regions for this SoC. Each available memory region is a contiguous piece of memory which is not being used by static data, used by ROM code, or reserved by a component using the SOC_RESERVE_MEMORY_REGION() macro.  \nThis result is soc_memory_regions[] minus all regions reserved via the SOC_RESERVE_MEMORY_REGION() macro (which may also split some regions up.)  \nAt startup, all available memory returned by this function is registered as heap space.  \n@note OS-level startup function only, not recommended to call from app code.  \n@param regions Pointer to an array for reading available regions into.  \nSize of the array should be at least the result of soc_get_available_memory_region_max_count(). Entries in the array will be ordered by memory address.  \n@return Number of entries copied to 'regions'. Will be no greater than the result of soc_get_available_memory_region_max_count()."},"filterText":"soc_get_available_memory_regions","insertText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_regions(soc_memory_region_t *regions)","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_regions","textEdit":{"newText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_region_count","insertText":"soc_memory_region_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_region_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_count","textEdit":{"newText":"soc_memory_region_count","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory on a particular SoC."},"filterText":"soc_memory_region_t","insertText":"soc_memory_region_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_t","textEdit":{"newText":"soc_memory_region_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_region_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_regions","insertText":"soc_memory_regions","insertTextFormat":2,"kind":6,"label":"•soc_memory_regions","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_regions","textEdit":{"newText":"soc_memory_regions","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_type_count","insertText":"soc_memory_type_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_type_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_count","textEdit":{"newText":"soc_memory_type_count","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nType descriptor holds a description for a particular type of memory on a particular SoC."},"filterText":"soc_memory_type_desc_t","insertText":"soc_memory_type_desc_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_type_desc_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_desc_t","textEdit":{"newText":"soc_memory_type_desc_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_type_desc_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nConstant table of tag descriptors for all this SoC's tags"},"filterText":"soc_memory_types","insertText":"soc_memory_types","insertTextFormat":2,"kind":6,"label":"•soc_memory_types","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_types","textEdit":{"newText":"soc_memory_types","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory reserved on this SoC for a particular use (ie not available for stack/heap usage.)"},"filterText":"soc_reserved_region_t","insertText":"soc_reserved_region_t","insertTextFormat":2,"kind":8,"label":"•soc_reserved_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_reserved_region_t","textEdit":{"newText":"soc_reserved_region_t","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swscanf","insertText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swscanf(const wchar_t *, const wchar_t *, ...)","score":1.1826096773147583,"sortText":"4068a03fswscanf","textEdit":{"newText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalbln","insertText":"std::scalbln","insertTextFormat":2,"kind":18,"label":"•std::scalbln","score":1.1391948461532593,"sortText":"406e2eddscalbln","textEdit":{"newText":"std::scalbln","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnf","insertText":"std::scalblnf","insertTextFormat":2,"kind":18,"label":"•std::scalblnf","score":1.1391948461532593,"sortText":"406e2eddscalblnf","textEdit":{"newText":"std::scalblnf","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnl","insertText":"std::scalblnl","insertTextFormat":2,"kind":18,"label":"•std::scalblnl","score":1.1391948461532593,"sortText":"406e2eddscalblnl","textEdit":{"newText":"std::scalblnl","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_LSBFIRST","insertText":"SPI_BITORDER_LSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_LSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_LSBFIRST","textEdit":{"newText":"SPI_BITORDER_LSBFIRST","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_MSBFIRST","insertText":"SPI_BITORDER_MSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_MSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_MSBFIRST","textEdit":{"newText":"SPI_BITORDER_MSBFIRST","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sbrk","insertText":"sbrk(${1:ptrdiff_t __incr})","insertTextFormat":2,"kind":3,"label":"•sbrk(ptrdiff_t __incr)","score":1.1118042469024658,"sortText":"4071b066sbrk","textEdit":{"newText":"sbrk(${1:ptrdiff_t __incr})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}}}}]}}Content-Length: 1793

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'S'","range":{"end":{"character":5,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":66}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":67},"contentChanges":[{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":5}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":6},"context":{"triggerKind":3}},"id":60,"jsonrpc":"2.0"}
<<<
Content-Length: 60466

{"id":60,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","documentation":{"kind":"markdown","value":"Callback Function that sents message"},"filterText":"OnDataSent","insertText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","insertTextFormat":2,"kind":3,"label":" OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)","score":9.0014286041259766,"sortText":"3feffa26OnDataSent","textEdit":{"newText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"initLDRSensor","insertText":"initLDRSensor()","insertTextFormat":2,"kind":3,"label":" initLDRSensor()","score":9.0014286041259766,"sortText":"3feffa26initLDRSensor","textEdit":{"newText":"initLDRSensor()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":" sensors_type_t","score":1.8537870645523071,"sortText":"4012b71bsensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":" HardwareSerial","score":4.8400006294250488,"sortText":"4017ae13HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"esp_now_send_cb_t","insertText":"esp_now_send_cb_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_cb_t","score":7.2600007057189941,"sortText":"4017ae13esp_now_send_cb_t","textEdit":{"newText":"esp_now_send_cb_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"402cccccHardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_COLOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GRAVITY","insertText":"SENSOR_TYPE_GRAVITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GRAVITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GRAVITY","textEdit":{"newText":"SENSOR_TYPE_GRAVITY","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_MAGNETIC_FIELD","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_OBJECT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_OBJECT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_OBJECT_TEMPERATURE","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PRESSURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PROXIMITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_VOLTAGE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"seed48","insertText":"seed48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•seed48(unsigned short *)","score":1.5037370920181274,"sortText":"403f858bseed48","textEdit":{"newText":"seed48(${1:unsigned short *})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":1.5037370920181274,"sortText":"403f858bsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":1.5037370920181274,"sortText":"403f858bsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"setenv","insertText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•setenv(const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"403f858bsetenv","textEdit":{"newText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":1.5037370920181274,"sortText":"403f858bsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":1.5037370920181274,"sortText":"403f858bsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`  \nfunction takes the following frequencies as valid values:  \n240, 160, 80 <<< For all XTAL types 40, 20, 10 <<< For 40MHz XTAL 26, 13 <<< For 26MHz XTAL 24, 12 <<< For 24MHz XTAL"},"filterText":"setCpuFrequencyMhz","insertText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","insertTextFormat":2,"kind":3,"label":"•setCpuFrequencyMhz(uint32_t cpu_freq_mhz)","score":1.3747211694717407,"sortText":"40500923setCpuFrequencyMhz","textEdit":{"newText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"filterText":"esp_now_send_status_t","insertText":"esp_now_send_status_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_status_t","score":5.4166908264160156,"sortText":"4052aa78esp_now_send_status_t","textEdit":{"newText":"esp_now_send_status_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*p : the pointer to output string.  \n@param int len : the string length.  \n@return None."},"filterText":"send_packet","insertText":"send_packet(${1:uint8_t *p}, ${2:int len})","insertTextFormat":2,"kind":3,"label":"•send_packet(uint8_t *p, int len)","score":1.2690916061401367,"sortText":"405d8e68send_packet","textEdit":{"newText":"send_packet(${1:uint8_t *p}, ${2:int len})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"405d8e68set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"detail":"esp_err_t","filterText":"esp_now_send","insertText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","insertTextFormat":2,"kind":3,"label":" esp_now_send(const uint8_t *peer_addr, const uint8_t *data, size_t len)","score":4.8400001525878906,"sortText":"40651eb8esp_now_send","textEdit":{"newText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"setlocale","insertText":"setlocale(${1:int category}, ${2:const char *locale})","insertTextFormat":2,"kind":3,"label":"•setlocale(int category, const char *locale)","score":1.1826096773147583,"sortText":"4068a03fsetlocale","textEdit":{"newText":"setlocale(${1:int category}, ${2:const char *locale})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"select","insertText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","insertTextFormat":2,"kind":3,"label":"•select(int nfds, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *errorfds, struct timeval *timeout)","score":1.1118042469024658,"sortText":"4071b066select","textEdit":{"newText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"setitimer","insertText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","insertTextFormat":2,"kind":3,"label":"•setitimer(int __which, const struct itimerval *__value, struct itimerval *__ovalue)","score":1.1118042469024658,"sortText":"4071b066setitimer","textEdit":{"newText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"settimeofday","insertText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","insertTextFormat":2,"kind":3,"label":"•settimeofday(const struct timeval *, const struct timezone *)","score":1.1118042469024658,"sortText":"4071b066settimeofday","textEdit":{"newText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setuid","insertText":"setuid(${1:uid_t __uid})","insertTextFormat":2,"kind":3,"label":"•setuid(uid_t __uid)","score":1.1118042469024658,"sortText":"4071b066setuid","textEdit":{"newText":"setuid(${1:uid_t __uid})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartBitsNum4Char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SEVEN_BITS","insertText":"SEVEN_BITS","insertTextFormat":2,"kind":20,"label":"•SEVEN_BITS","score":1.2690916061401367,"sortText":"4071dc9bSEVEN_BITS","textEdit":{"newText":"SEVEN_BITS","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_probe_req_rx_t","insertText":"system_event_ap_probe_req_rx_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_probe_req_rx_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_probe_req_rx_t","textEdit":{"newText":"system_event_ap_probe_req_rx_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staconnected_t","insertText":"system_event_ap_staconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staconnected_t","textEdit":{"newText":"system_event_ap_staconnected_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_stadisconnected_t","insertText":"system_event_ap_stadisconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_stadisconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_stadisconnected_t","textEdit":{"newText":"system_event_ap_stadisconnected_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staipassigned_t","insertText":"system_event_ap_staipassigned_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staipassigned_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staipassigned_t","textEdit":{"newText":"system_event_ap_staipassigned_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_got_ip6_t","insertText":"system_event_got_ip6_t","insertTextFormat":2,"kind":8,"label":"•system_event_got_ip6_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_got_ip6_t","textEdit":{"newText":"system_event_got_ip6_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_handler_t","insertText":"system_event_handler_t","insertTextFormat":2,"kind":8,"label":"•system_event_handler_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_handler_t","textEdit":{"newText":"system_event_handler_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_info_t","insertText":"system_event_info_t","insertTextFormat":2,"kind":8,"label":"•system_event_info_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_info_t","textEdit":{"newText":"system_event_info_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_authmode_change_t","insertText":"system_event_sta_authmode_change_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_authmode_change_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_authmode_change_t","textEdit":{"newText":"system_event_sta_authmode_change_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_connected_t","insertText":"system_event_sta_connected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_connected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_connected_t","textEdit":{"newText":"system_event_sta_connected_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_disconnected_t","insertText":"system_event_sta_disconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_disconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_disconnected_t","textEdit":{"newText":"system_event_sta_disconnected_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_got_ip_t","insertText":"system_event_sta_got_ip_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_got_ip_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_got_ip_t","textEdit":{"newText":"system_event_sta_got_ip_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_scan_done_t","insertText":"system_event_sta_scan_done_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_scan_done_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_scan_done_t","textEdit":{"newText":"system_event_sta_scan_done_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_fail_reason_t","insertText":"system_event_sta_wps_fail_reason_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_fail_reason_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_fail_reason_t","textEdit":{"newText":"system_event_sta_wps_fail_reason_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_t","insertText":"system_event_t","insertTextFormat":2,"kind":8,"label":"•system_event_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_t","textEdit":{"newText":"system_event_t","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"new_handler","documentation":{"kind":"markdown","value":"From `<new>`  \nTakes a replacement handler as the argument, returns the previous handler."},"filterText":"set_new_handler","insertText":"std::set_new_handler(${1:new_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_new_handler(new_handler)","score":0.98550808429718018,"sortText":"4083b5beset_new_handler","textEdit":{"newText":"std::set_new_handler(${1:new_handler})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"terminate_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_terminate","insertText":"std::set_terminate(${1:terminate_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_terminate(terminate_handler)","score":0.98550808429718018,"sortText":"4083b5beset_terminate","textEdit":{"newText":"std::set_terminate(${1:terminate_handler})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"unexpected_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_unexpected","insertText":"std::set_unexpected(${1:unexpected_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_unexpected(unexpected_handler)","score":0.98550808429718018,"sortText":"4083b5beset_unexpected","textEdit":{"newText":"std::set_unexpected(${1:unexpected_handler})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a matching sub-sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@param \\_\\_last2 A forward iterator.  \n@return The first iterator @c i in the range @p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2)) such that @c \\*(i+N) == @p  \n\\*(\\_\\_first2+N) for each @c N in the range @p [0,\\_\\_last2-\\_\\_first2), or @p \\_\\_last1 if no such iterator exists.  \nSearches the range @p [\\_\\_first1,\\_\\_last1) for a sub-sequence that compares equal value-by-value with the sequence given by @p [\\_\\_first2,\\_\\_last2) and returns an iterator to the first element of the sub-sequence, or @p \\_\\_last1 if the sub-sequence is not found.  \nBecause the sub-sequence must lie completely within the range @p [\\_\\_first1,\\_\\_last1) it must start at a position less than @p \\_\\_last1-(\\_\\_last2-\\_\\_first2) where @p \\_\\_last2-\\_\\_first2 is the length of the sub-sequence.  \nThis means that the returned iterator @c i will be in the range  \n@p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2))"},"filterText":"search","insertText":"std::search($0)","insertTextFormat":2,"kind":3,"label":"•std::search(…)","score":0.92650353908538818,"sortText":"4092d0aasearch","textEdit":{"newText":"std::search($0)","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a number of consecutive values.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first A forward iterator.  \n@param \\_\\_last A forward iterator.  \n@param \\_\\_count The number of consecutive values.  \n@param \\_\\_val The value to find.  \n@return The first iterator @c i in the range @p [\\_\\_first,\\_\\_last-\\_\\_count) such that @c \\*(i+N) == @p \\_\\_val for each @c N in the range @p [0,\\_\\_count), or @p \\_\\_last if no such iterator exists.  \nSearches the range @p [\\_\\_first,\\_\\_last) for @p count consecutive elements equal to @p \\_\\_val."},"filterText":"search_n","insertText":"std::search_n($0)","insertTextFormat":2,"kind":3,"label":"•std::search_n(…)","score":0.92650353908538818,"sortText":"4092d0aasearch_n","textEdit":{"newText":"std::search_n($0)","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <random>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<random>`  \n@brief The seed_seq class generates sequences of seeds for random number generators."},"filterText":"seed_seq","insertText":"std::seed_seq","insertTextFormat":2,"kind":7,"label":"•std::seed_seq","score":0.92650353908538818,"sortText":"4092d0aaseed_seq","textEdit":{"newText":"std::seed_seq","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the difference of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range.  \nIterators increment for each range. When the current element of the first range is less than the second according to @p \\_\\_comp, that element is copied and the iterator advances. If the current element of the second range is less, no element is copied and the iterator advances.  \nIf an element is contained in both ranges according to @p \\_\\_comp, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_difference","insertText":"std::set_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_difference","textEdit":{"newText":"std::set_difference($0)","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.92650353908538818,"sortText":"4092d0aaset_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the symmetric difference of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is less than the other, that element is copied and the iterator advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_symmetric_difference","insertText":"std::set_symmetric_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_symmetric_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_symmetric_difference","textEdit":{"newText":"std::set_symmetric_difference($0)","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the union of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is less than the other,  \nthat element is copied and the iterator advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_union","insertText":"std::set_union($0)","insertTextFormat":2,"kind":3,"label":"•std::set_union(…)","score":0.92650353908538818,"sortText":"4092d0aaset_union","textEdit":{"newText":"std::set_union($0)","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.91311287879943848,"sortText":"40963e3csetsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"send","insertText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•send(int s, const void *dataptr, size_t size, int flags)","score":0.90964943170547485,"sortText":"40972137send","textEdit":{"newText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendmsg","insertText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•sendmsg(int s, const struct msghdr *message, int flags)","score":0.90964943170547485,"sortText":"40972137sendmsg","textEdit":{"newText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendto","insertText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•sendto(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964943170547485,"sortText":"40972137sendto","textEdit":{"newText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <clocale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<clocale>`"},"filterText":"setlocale","insertText":"std::setlocale","insertTextFormat":2,"kind":18,"label":"•std::setlocale","score":0.8959164023399353,"sortText":"409aa539setlocale","textEdit":{"newText":"std::setlocale","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station connected to ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STACONNECTED","insertText":"SYSTEM_EVENT_AP_STACONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STACONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STACONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STACONNECTED","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station disconnected from ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STADISCONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STADISCONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STADISCONNECTED","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet phy link up"},"filterText":"SYSTEM_EVENT_ETH_CONNECTED","insertText":"SYSTEM_EVENT_ETH_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_ETH_CONNECTED","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet got IP from connected AP"},"filterText":"SYSTEM_EVENT_ETH_GOT_IP","insertText":"SYSTEM_EVENT_ETH_GOT_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_GOT_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_GOT_IP","textEdit":{"newText":"SYSTEM_EVENT_ETH_GOT_IP","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet stop"},"filterText":"SYSTEM_EVENT_ETH_STOP","insertText":"SYSTEM_EVENT_ETH_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_STOP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_STOP","textEdit":{"newText":"SYSTEM_EVENT_ETH_STOP","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nthe auth mode of AP connected by ESP32 station changed"},"filterText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_AUTHMODE_CHANGE","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_AUTHMODE_CHANGE","textEdit":{"newText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station connected to AP"},"filterText":"SYSTEM_EVENT_STA_CONNECTED","insertText":"SYSTEM_EVENT_STA_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_STA_CONNECTED","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station lost IP and the IP is reset to 0"},"filterText":"SYSTEM_EVENT_STA_LOST_IP","insertText":"SYSTEM_EVENT_STA_LOST_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_LOST_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_LOST_IP","textEdit":{"newText":"SYSTEM_EVENT_STA_LOST_IP","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}}}}]}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":68},"contentChanges":[{"range":{"start":{"line":270,"character":6},"end":{"line":270,"character":6}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":7},"context":{"triggerKind":3}},"id":61,"jsonrpc":"2.0"}
<<<
Content-Length: 1794

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Se'","range":{"end":{"character":6,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":67}}Content-Length: 64566

{"id":61,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":4.8400001525878906,"sortText":"3fcb4e81HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"3fdbbbbbHardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"4078a156set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase a range of flash sectors  \n@param start_address Address where erase operation has to start.  \nMust be 4kB-aligned  \n@param size Size of erased range, in bytes. Must be divisible by 4kB.  \n@return esp_err_t"},"filterText":"spi_flash_erase_range","insertText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_range(size_t start_address, size_t size)","score":1.1118041276931763,"sortText":"40aa889bspi_flash_erase_range","textEdit":{"newText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase the Flash sector.  \n@param sector Sector number, the count starts at sector 0, 4KB per sector.  \n@return esp_err_t"},"filterText":"spi_flash_erase_sector","insertText":"spi_flash_erase_sector(${1:size_t sector})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_sector(size_t sector)","score":1.1118041276931763,"sortText":"40aa889bspi_flash_erase_sector","textEdit":{"newText":"spi_flash_erase_sector(${1:size_t sector})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747210502624512,"sortText":"40b2b554system_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiServer.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WiFiServer.h\"`"},"filterText":"WiFiServer","insertText":"WiFiServer","insertTextFormat":2,"kind":7,"label":"•WiFiServer","score":1.5585578680038452,"sortText":"40b8812dWiFiServer","textEdit":{"newText":"WiFiServer","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.8448631763458252,"sortText":"40cbc334SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":0.84263044595718384,"sortText":"40cc3d24SERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_seed48_r","insertText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•_seed48_r(struct _reent *, unsigned short *)","score":1.5037370920181274,"sortText":"40df99f3_seed48_r","textEdit":{"newText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_setenv_r","insertText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•_setenv_r(struct _reent *, const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"40df99f3_setenv_r","textEdit":{"newText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps overlap in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps succeeds in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_SUCCESS","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_SUCCESS","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nset cache attribute (access modes) for a range of memory"},"filterText":"xthal_set_region_attribute","insertText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_attribute(void *addr, unsigned int size, unsigned int cattr, unsigned int flags)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_attribute","textEdit":{"newText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation","insertText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation(void *vaddr, void *paddr, unsigned int size, unsigned int cache_atr, unsigned int flags)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_translation","textEdit":{"newText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation_raw","insertText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation_raw(void *vaddr, void *paddr, unsigned int cattr)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_translation_raw","textEdit":{"newText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.62487328052520752,"sortText":"40fab196SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.62487328052520752,"sortText":"40fab196SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.62487328052520752,"sortText":"40fab196SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.62487328052520752,"sortText":"40fab196SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.62487328052520752,"sortText":"40fab196SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.62487328052520752,"sortText":"40fab196SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.62487328052520752,"sortText":"40fab196SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.62487328052520752,"sortText":"40fab196SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.62487328052520752,"sortText":"40fab196SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.62487328052520752,"sortText":"40fab196SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.62487328052520752,"sortText":"40fab196SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.62487328052520752,"sortText":"40fab196SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.62487328052520752,"sortText":"40fab196SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.62487328052520752,"sortText":"40fab196SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.62487328052520752,"sortText":"40fab196SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.62487328052520752,"sortText":"40fab196SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.62487328052520752,"sortText":"40fab196SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.62487328052520752,"sortText":"40fab196SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.62487328052520752,"sortText":"40fab196SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.62487328052520752,"sortText":"40fab196SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.62487328052520752,"sortText":"40fab196SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.62487328052520752,"sortText":"40fab196SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.62487328052520752,"sortText":"40fab196SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.62487328052520752,"sortText":"40fab196SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"detail":"uint32_t","filterText":"esp_dport_access_sequence_reg_read","insertText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":" esp_dport_access_sequence_reg_read(uint32_t reg)","score":2.0620818138122559,"sortText":"40fc06daesp_dport_access_sequence_reg_read","textEdit":{"newText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"_setlocale_r","insertText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","insertTextFormat":2,"kind":3,"label":"•_setlocale_r(struct _reent *, int category, const char *locale)","score":1.1826096773147583,"sortText":"4103b5bd_setlocale_r","textEdit":{"newText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"sys/errno.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const char *const []","documentation":{"kind":"markdown","value":"From `\"sys/errno.h\"`  \nPlease don't use these variables directly.  \nUse strerror instead."},"filterText":"_sys_errlist","insertText":"_sys_errlist","insertTextFormat":2,"kind":6,"label":"•_sys_errlist","score":1.1118042469024658,"sortText":"4112d0aa_sys_errlist","textEdit":{"newText":"_sys_errlist","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Install the driver's GPIO ISR handler service, which allows per-pin GPIO interrupt handlers.  \nThis function is incompatible with gpio_isr_register() - if that function is used, a single global ISR is registered for all GPIO interrupts. If this function is used, the ISR service provides a global GPIO ISR and individual pin handlers are registered via the gpio_isr_handler_add() function.  \n@param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred) ESP_INTR_FLAG\\_\\* values. See esp_intr_alloc.h for more info.  \n@return  \n\\- ESP_OK Success  \n\\- ESP_ERR_NO_MEM No memory to install this service  \n\\- ESP_ERR_INVALID_STATE ISR service already installed.  \n\\- ESP_ERR_NOT_FOUND No free interrupt found with the specified flags  \n\\- ESP_ERR_INVALID_ARG GPIO error"},"filterText":"gpio_install_isr_service","insertText":"gpio_install_isr_service(${1:int intr_alloc_flags})","insertTextFormat":2,"kind":3,"label":"•gpio_install_isr_service(int intr_alloc_flags)","score":1.1118042469024658,"sortText":"4112d0aagpio_install_isr_service","textEdit":{"newText":"gpio_install_isr_service(${1:int intr_alloc_flags})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Uninstall the driver's GPIO ISR service, freeing related resources."},"filterText":"gpio_uninstall_isr_service","insertText":"gpio_uninstall_isr_service()","insertTextFormat":2,"kind":3,"label":"•gpio_uninstall_isr_service()","score":1.1118042469024658,"sortText":"4112d0aagpio_uninstall_isr_service","textEdit":{"newText":"gpio_uninstall_isr_service()","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-rmt.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-rmt.h\"`  \nSetting threshold for Rx completed"},"filterText":"rmtSetRxThreshold","insertText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","insertTextFormat":2,"kind":3,"label":"•rmtSetRxThreshold(rmt_obj_t *rmt, uint32_t value)","score":1.3747211694717407,"sortText":"41156184rmtSetRxThreshold","textEdit":{"newText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747211694717407,"sortText":"41156184uartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/dns.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"lwip/dns.h\"`"},"filterText":"dns_clear_servers","insertText":"dns_clear_servers(${1:bool keep_fallback})","insertTextFormat":2,"kind":3,"label":"•dns_clear_servers(bool keep_fallback)","score":0.90964943170547485,"sortText":"41172137dns_clear_servers","textEdit":{"newText":"dns_clear_servers(${1:bool keep_fallback})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"soc/dport_access.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"soc/dport_access.h\"`  \n@brief Read value from register, NOT SMP-safe version.  \nThis method uses the pre-reading of the APB register before reading the register of the DPORT.  \nThere is not disable/enable interrupt.  \nThe difference from DPORT_REG_READ() is that the user himself must disable interrupts while DPORT reading.  \nThis implementation is useful for reading DORT registers in loop without stall other CPU. Note the usage example.  \nThe recommended way to read registers sequentially without stall other CPU is to use the method esp_dport_read_buffer(buff_out, address, num_words). It allows you to read registers in the buffer.  \n\\\\code{c} // This example shows how to use it.  \n{ // Use curly brackets to limit the visibility of variables in macros DPORT_INTERRUPT_DISABLE/RESTORE.  \nDPORT_INTERRUPT_DISABLE(); // Disable interrupt only on current CPU.  \nfor (i = 0; i < max; ++i) { array[i] = DPORT_SEQUENCE_REG_READ(Address + i * 4); // reading DPORT registers } DPORT_INTERRUPT_RESTORE(); // restore the previous interrupt level }  \n\\\\endcode  \n@param reg Register address  \n@return Value"},"filterText":"DPORT_SEQUENCE_REG_READ","insertText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":"•DPORT_SEQUENCE_REG_READ(uint32_t reg)","score":1.7739145755767822,"sortText":"411cf05eDPORT_SEQUENCE_REG_READ","textEdit":{"newText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase some sectors.  \nPlease do not call this function in SDK.  \n@param uint32_t start_addr : Start addr to erase, should be sector aligned.  \n@param uint32_t area_len : Length to erase, should be sector aligned.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_area","insertText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_area(uint32_t start_addr, uint32_t area_len)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_area","textEdit":{"newText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a 64KB block of flash Uses SPI flash command D8H.  \nPlease do not call this function in SDK.  \n@param uint32_t block_num : Which block to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_block","insertText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_block(uint32_t block_num)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_block","textEdit":{"newText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase whole flash chip.  \nPlease do not call this function in SDK.  \n@param None  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_chip","insertText":"esp_rom_spiflash_erase_chip()","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_chip()","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_chip","textEdit":{"newText":"esp_rom_spiflash_erase_chip()","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a sector of flash.  \nUses SPI flash command 20H.  \nPlease do not call this function in SDK.  \n@param uint32_t sector_num : Which sector to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_sector","insertText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_sector(uint32_t sector_num)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_sector","textEdit":{"newText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nTrampoline support functions:"},"filterText":"xthal_tram_pending_to_service","insertText":"xthal_tram_pending_to_service()","insertTextFormat":2,"kind":3,"label":"•xthal_tram_pending_to_service()","score":1.2690917253494263,"sortText":"41276889xthal_tram_pending_to_service","textEdit":{"newText":"xthal_tram_pending_to_service()","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \n@brief Read Hall Sensor  \n@note When the power switch of SARADC1, SARADC2, HALL sensor and AMP sensor is turned on,  \nthe input of GPIO36 and GPIO39 will be pulled down for about 80ns.  \nWhen enabling power for any of these peripherals, ignore input from GPIO36 and GPIO39.  \nPlease refer to section 3.11 of 'ECO_and_Workarounds_for_Bugs_in_ESP32' for the description of this issue.  \n@note The Hall Sensor uses channels 0 and 3 of ADC1. Do not configure these channels for use as ADC channels.  \n@note The ADC1 module must be enabled by calling adc1_config_width() before calling hall_sensor_read(). ADC1 should be configured for 12 bit readings, as the hall sensor readings are low values and do not cover the full range of the ADC.  \n@return The hall sensor reading."},"filterText":"hall_sensor_read","insertText":"hall_sensor_read()","insertTextFormat":2,"kind":3,"label":"•hall_sensor_read()","score":0.96751213073730469,"sortText":"413198efhall_sensor_read","textEdit":{"newText":"hall_sensor_read()","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_send_r","insertText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_send_r(int s, const void *dataptr, size_t size, int flags)","score":0.90964937210083008,"sortText":"413df103lwip_send_r","textEdit":{"newText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendmsg_r","insertText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_sendmsg_r(int s, const struct msghdr *message, int flags)","score":0.90964937210083008,"sortText":"413df103lwip_sendmsg_r","textEdit":{"newText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendto_r","insertText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•lwip_sendto_r(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964937210083008,"sortText":"413df103lwip_sendto_r","textEdit":{"newText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_setsockopt_r","insertText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•lwip_setsockopt_r(int s, int level, int optname, const void *optval, socklen_t optlen)","score":0.90964937210083008,"sortText":"413df103lwip_setsockopt_r","textEdit":{"newText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"COOKIE_SERVER","insertText":"COOKIE_SERVER","insertTextFormat":2,"kind":20,"label":"•COOKIE_SERVER","score":0.8448631763458252,"sortText":"414bc334COOKIE_SERVER","textEdit":{"newText":"COOKIE_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"IMPRESS_SERVER","insertText":"IMPRESS_SERVER","insertTextFormat":2,"kind":20,"label":"•IMPRESS_SERVER","score":0.8448631763458252,"sortText":"414bc334IMPRESS_SERVER","textEdit":{"newText":"IMPRESS_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LOG_SERVER","insertText":"LOG_SERVER","insertTextFormat":2,"kind":20,"label":"•LOG_SERVER","score":0.8448631763458252,"sortText":"414bc334LOG_SERVER","textEdit":{"newText":"LOG_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LPR_SERVER","insertText":"LPR_SERVER","insertTextFormat":2,"kind":20,"label":"•LPR_SERVER","score":0.8448631763458252,"sortText":"414bc334LPR_SERVER","textEdit":{"newText":"LPR_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"NAME_SERVER","insertText":"NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NAME_SERVER","score":0.8448631763458252,"sortText":"414bc334NAME_SERVER","textEdit":{"newText":"NAME_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NAME_SERVICE_SEARCH","insertText":"NAME_SERVICE_SEARCH","insertTextFormat":2,"kind":20,"label":"•NAME_SERVICE_SEARCH","score":0.8448631763458252,"sortText":"414bc334NAME_SERVICE_SEARCH","textEdit":{"newText":"NAME_SERVICE_SEARCH","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NDS_SERVERS","insertText":"NDS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NDS_SERVERS","score":0.8448631763458252,"sortText":"414bc334NDS_SERVERS","textEdit":{"newText":"NDS_SERVERS","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NNTP_SERVER","insertText":"NNTP_SERVER","insertTextFormat":2,"kind":20,"label":"•NNTP_SERVER","score":0.8448631763458252,"sortText":"414bc334NNTP_SERVER","textEdit":{"newText":"NNTP_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"SMTP_SERVER","insertText":"SMTP_SERVER","insertTextFormat":2,"kind":20,"label":"•SMTP_SERVER","score":0.8448631763458252,"sortText":"414bc334SMTP_SERVER","textEdit":{"newText":"SMTP_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_SERVER","insertText":"STREETTALK_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_SERVER","score":0.8448631763458252,"sortText":"414bc334STREETTALK_SERVER","textEdit":{"newText":"STREETTALK_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"SWAP_SERVER","insertText":"SWAP_SERVER","insertTextFormat":2,"kind":20,"label":"•SWAP_SERVER","score":0.8448631763458252,"sortText":"414bc334SWAP_SERVER","textEdit":{"newText":"SWAP_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"TFTP_SERVER_NAME","insertText":"TFTP_SERVER_NAME","insertTextFormat":2,"kind":20,"label":"•TFTP_SERVER_NAME","score":0.8448631763458252,"sortText":"414bc334TFTP_SERVER_NAME","textEdit":{"newText":"TFTP_SERVER_NAME","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"TIME_SERVER","insertText":"TIME_SERVER","insertTextFormat":2,"kind":20,"label":"•TIME_SERVER","score":0.8448631763458252,"sortText":"414bc334TIME_SERVER","textEdit":{"newText":"TIME_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_FINGER_SERVER","insertText":"DEFAULT_FINGER_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_FINGER_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_FINGER_SERVER","textEdit":{"newText":"DEFAULT_FINGER_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_IRC_SERVER","insertText":"DEFAULT_IRC_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_IRC_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_IRC_SERVER","textEdit":{"newText":"DEFAULT_IRC_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_WWW_SERVER","insertText":"DEFAULT_WWW_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_WWW_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_WWW_SERVER","textEdit":{"newText":"DEFAULT_WWW_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"DOMAIN_NAME_SERVER","insertText":"DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•DOMAIN_NAME_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDOMAIN_NAME_SERVER","textEdit":{"newText":"DOMAIN_NAME_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVERS","insertText":"NETWORK_INFORMATION_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVERS","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVERS","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_DOMAIN","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_DOMAIN","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_PLUS_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"POP3_SERVER","insertText":"POP3_SERVER","insertTextFormat":2,"kind":20,"label":"•POP3_SERVER","score":0.84486329555511475,"sortText":"416fcf5cPOP3_SERVER","textEdit":{"newText":"POP3_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"RESOURCE_LOCATION_SERVER","insertText":"RESOURCE_LOCATION_SERVER","insertTextFormat":2,"kind":20,"label":"•RESOURCE_LOCATION_SERVER","score":0.84486329555511475,"sortText":"416fcf5cRESOURCE_LOCATION_SERVER","textEdit":{"newText":"RESOURCE_LOCATION_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_TIME_PROTOCOL_SERVERS","insertText":"NETWORK_TIME_PROTOCOL_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_TIME_PROTOCOL_SERVERS","score":0.84486323595046997,"sortText":"41a7b70bNETWORK_TIME_PROTOCOL_SERVERS","textEdit":{"newText":"NETWORK_TIME_PROTOCOL_SERVERS","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_DIRECTORY_ASSISTANCE_SERVER","score":0.84486323595046997,"sortText":"41a7b70bSTREETTALK_DIRECTORY_ASSISTANCE_SERVER","textEdit":{"newText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"tcpip_adapter.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"tcpip_adapter_dhcp_option_id_t","documentation":{"kind":"markdown","value":"From `\"tcpip_adapter.h\"`  \nDomain name server"},"filterText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•TCPIP_ADAPTER_DOMAIN_NAME_SERVER","score":0.93569719791412354,"sortText":"41e04ec4TCPIP_ADAPTER_DOMAIN_NAME_SERVER","textEdit":{"newText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"X_WINDOW_SYSTEM_FONT_SERVER","insertText":"X_WINDOW_SYSTEM_FONT_SERVER","insertTextFormat":2,"kind":20,"label":"•X_WINDOW_SYSTEM_FONT_SERVER","score":0.84486329555511475,"sortText":"41efcf5cX_WINDOW_SYSTEM_FONT_SERVER","textEdit":{"newText":"X_WINDOW_SYSTEM_FONT_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`"},"filterText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertTextFormat":2,"kind":20,"label":"•ESP_ROM_SPIFLASH_RESULT_ERR","score":1.2690917253494263,"sortText":"42276889ESP_ROM_SPIFLASH_RESULT_ERR","textEdit":{"newText":"ESP_ROM_SPIFLASH_RESULT_ERR","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp_system.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"deprecated":true,"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_system.h\"`  \n@brief Read hardware MAC address.  \nFunction has been renamed to esp_efuse_mac_get_default.  \nThis name will be removed in a future release.  \n@param mac hardware MAC address, length: 6 bytes.  \n@return ESP_OK on success"},"filterText":"system_efuse_read_mac","insertText":"system_efuse_read_mac(${1:uint8_t *mac})","insertTextFormat":2,"kind":3,"label":"•system_efuse_read_mac(uint8_t *mac)","score":0.13747210800647736,"sortText":"42444e03system_efuse_read_mac","textEdit":{"newText":"system_efuse_read_mac(${1:uint8_t *mac})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NETBIOS_OVER_TCP_IP_NAME_SERVER","score":0.84486329555511475,"sortText":"426fcf5cNETBIOS_OVER_TCP_IP_NAME_SERVER","textEdit":{"newText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `<list>`"},"filterText":"__throw_system_error","insertText":"std::__throw_system_error(${1:int})","insertTextFormat":2,"kind":3,"label":"•std::__throw_system_error(int)","score":0.092650346457958221,"sortText":"430300b6__throw_system_error","textEdit":{"newText":"std::__throw_system_error(${1:int})","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}}}}]}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":69},"contentChanges":[{"range":{"start":{"line":270,"character":7},"end":{"line":270,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1795

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Ser'","range":{"end":{"character":7,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":68}}
>>>
Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":8},"context":{"triggerKind":3}},"id":62,"jsonrpc":"2.0"}
<<<
Content-Length: 17191

{"id":62,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":15.902532577514648,"sortText":"3e818f3aSerial","textEdit":{"newText":"Serial","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":9.0014286041259766,"sortText":"3eeffa26serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":7.3863968849182129,"sortText":"3f13a2a3serialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":4.8400001525878906,"sortText":"3fab0a3dHardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":4.4000000953674316,"sortText":"3fbe6666HardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":1.5037370920181274,"sortText":"403f858bSerial1","textEdit":{"newText":"Serial1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":1.5037370920181274,"sortText":"403f858bSerial2","textEdit":{"newText":"Serial2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":1.5037370920181274,"sortText":"403f858bserialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":0.84263044595718384,"sortText":"40d0bb9dSERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.84486329555511475,"sortText":"40eb4dd7SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.62487322092056274,"sortText":"40fe06c0SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747212886810303,"sortText":"41240b6buartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}}}}]}}Content-Length: 1796

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Seri'","range":{"end":{"character":8,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":69}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":70},"contentChanges":[{"range":{"start":{"line":270,"character":8},"end":{"line":270,"character":8}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":71},"contentChanges":[{"range":{"start":{"line":270,"character":9},"end":{"line":270,"character":9}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4277

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h:116:23:\nnote: 'Serial' declared here","range":{"end":{"character":9,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":70}}Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":71}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":10}},"context":{"diagnostics":[]}},"id":63,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":63,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":64,"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":64,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":72},"contentChanges":[{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":10}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1800

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'SerialP'","range":{"end":{"character":11,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":72}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":73},"contentChanges":[{"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":11}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":74},"contentChanges":[{"range":{"start":{"line":270,"character":12},"end":{"line":270,"character":12}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1801

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'SerialPr'","range":{"end":{"character":12,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":73}}Content-Length: 1802

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'SerialPri'","range":{"end":{"character":13,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":11,"line":271},"start":{"character":10,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":74}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":75},"contentChanges":[{"range":{"start":{"line":270,"character":13},"end":{"line":270,"character":13}},"text":"n"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":76},"contentChanges":[{"range":{"start":{"line":270,"character":14},"end":{"line":270,"character":14}},"text":"g"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4463

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'SerialPrin'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here","range":{"end":{"character":14,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"message":"'serialPrint' declared here\n\nEsp_Master.ino.cpp:271:5: error: use of undeclared identifier 'SerialPrin'; did you mean 'serialPrint'?","range":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":75}}Content-Length: 4465

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here","range":{"end":{"character":15,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"message":"'serialPrint' declared here\n\nEsp_Master.ino.cpp:271:5: error: use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'?","range":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":76}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":77},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":":"}]},"jsonrpc":"2.0"}Content-Length: 257

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":16},"context":{"triggerKind":2,"triggerCharacter":":"}},"id":65,"jsonrpc":"2.0"}
<<<
Content-Length: 68

{"id":65,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":66,"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":66,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}Content-Length: 3710

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":77}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"context":{"diagnostics":[]}},"id":67,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":67,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"context":{"diagnostics":[]}},"id":68,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":68,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":78},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4465

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here","range":{"end":{"character":15,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"message":"'serialPrint' declared here\n\nEsp_Master.ino.cpp:271:5: error: use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'?","range":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":78}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":79},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":80},"contentChanges":[{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":17}},"rangeLength":1,"text":")"}]},"jsonrpc":"2.0"}Content-Length: 209

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":17}},"id":69,"jsonrpc":"2.0"}
<<<
Content-Length: 4465

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here","range":{"end":{"character":15,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"message":"'serialPrint' declared here\n\nEsp_Master.ino.cpp:271:5: error: use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'?","range":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":80}}Content-Length: 92

{"id":69,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":70,"jsonrpc":"2.0"}
<<<
Content-Length: 11743

{"id":70,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"context":{"diagnostics":[]}},"id":71,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":71,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":15}},"id":72,"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"id":72,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":1,"range":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":1,"range":{"end":{"character":15,"line":270},"start":{"character":4,"line":270}}}]}
>>>
Content-Length: 585

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":12},"end":{"line":270,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":15}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here"}]}},"id":73,"jsonrpc":"2.0"}
<<<
Content-Length: 650

{"id":73,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here","range":{"end":{"character":15,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp":[{"newText":"serialPrint","range":{"end":{"character":15,"line":270},"start":{"character":4,"line":270}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'SerialPring' to 'serialPrint'"}]}
>>>
Content-Length: 585

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":15}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here"}]}},"id":74,"jsonrpc":"2.0"}
<<<
Content-Length: 650

{"id":74,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'SerialPring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here","range":{"end":{"character":15,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp":[{"newText":"serialPrint","range":{"end":{"character":15,"line":270},"start":{"character":4,"line":270}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'SerialPring' to 'serialPrint'"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":81},"contentChanges":[{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4463

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Serialring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here","range":{"end":{"character":14,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"message":"'serialPrint' declared here\n\nEsp_Master.ino.cpp:271:5: error: use of undeclared identifier 'Serialring'; did you mean 'serialPrint'?","range":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":81}}
>>>
Content-Length: 584

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":14}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'Serialring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here"}]}},"id":75,"jsonrpc":"2.0"}
<<<
Content-Length: 648

{"id":75,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Serialring'; did you mean 'serialPrint'? (fix available)\n\nEsp_Master.ino.cpp:142:6: note: 'serialPrint' declared here","range":{"end":{"character":14,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp":[{"newText":"serialPrint","range":{"end":{"character":14,"line":270},"start":{"character":4,"line":270}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'Serialring' to 'serialPrint'"}]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":82},"contentChanges":[{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":10}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 257

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":11},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":76,"jsonrpc":"2.0"}
<<<
Content-Length: 9142

{"id":76,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"int","filterText":"available","insertText":"available()","insertTextFormat":2,"kind":2,"label":" available()","score":9.6800003051757812,"sortText":"3ee51eb8available","textEdit":{"newText":"available()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"int","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"kind":2,"label":" availableForWrite()","score":9.6800003051757812,"sortText":"3ee51eb8availableForWrite","textEdit":{"newText":"availableForWrite()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"uint32_t","filterText":"baudRate","insertText":"baudRate()","insertTextFormat":2,"kind":2,"label":" baudRate()","score":9.6800003051757812,"sortText":"3ee51eb8baudRate","textEdit":{"newText":"baudRate()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"void","filterText":"begin","insertText":"begin(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" begin(unsigned long baud, uint32_t config = SERIAL_8N1, int8_t rxPin = -1, int8_t txPin = -1, bool invert = false, unsigned long timeout_ms = 20000UL)","score":9.6800003051757812,"sortText":"3ee51eb8begin","textEdit":{"newText":"begin(${1:unsigned long baud})","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"void","filterText":"end","insertText":"end()","insertTextFormat":2,"kind":2,"label":" end()","score":9.6800003051757812,"sortText":"3ee51eb8end","textEdit":{"newText":"end()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[2 overloads]","filterText":"flush","insertText":"flush($0)","insertTextFormat":2,"kind":2,"label":" flush(…)","score":9.6800003051757812,"sortText":"3ee51eb8flush","textEdit":{"newText":"flush($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"int","filterText":"peek","insertText":"peek()","insertTextFormat":2,"kind":2,"label":" peek()","score":9.6800003051757812,"sortText":"3ee51eb8peek","textEdit":{"newText":"peek()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[3 overloads]","filterText":"read","insertText":"read($0)","insertTextFormat":2,"kind":2,"label":" read(…)","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"void","filterText":"setDebugOutput","insertText":"setDebugOutput(${1:bool})","insertTextFormat":2,"kind":2,"label":" setDebugOutput(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setDebugOutput","textEdit":{"newText":"setDebugOutput(${1:bool})","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"size_t","filterText":"setRxBufferSize","insertText":"setRxBufferSize(${1:size_t})","insertTextFormat":2,"kind":2,"label":" setRxBufferSize(size_t)","score":9.6800003051757812,"sortText":"3ee51eb8setRxBufferSize","textEdit":{"newText":"setRxBufferSize(${1:size_t})","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"void","filterText":"setRxInvert","insertText":"setRxInvert(${1:bool})","insertTextFormat":2,"kind":2,"label":" setRxInvert(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setRxInvert","textEdit":{"newText":"setRxInvert(${1:bool})","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"void","filterText":"updateBaudRate","insertText":"updateBaudRate(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" updateBaudRate(unsigned long baud)","score":9.6800003051757812,"sortText":"3ee51eb8updateBaudRate","textEdit":{"newText":"updateBaudRate(${1:unsigned long baud})","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[8 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":9.6800003051757812,"sortText":"3ee51eb8write","textEdit":{"newText":"write($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[14 overloads]","filterText":"print","insertText":"print($0)","insertTextFormat":2,"kind":2,"label":" print(…)","score":8.6177120208740234,"sortText":"3ef61ddaprint","textEdit":{"newText":"print($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[15 overloads]","filterText":"println","insertText":"println($0)","insertTextFormat":2,"kind":2,"label":" println(…)","score":8.0884857177734375,"sortText":"3efe9590println","textEdit":{"newText":"println($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"void","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"kind":2,"label":" clearWriteError()","score":4.8400001525878906,"sortText":"3f651eb8clearWriteError","textEdit":{"newText":"clearWriteError()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[5 overloads]","filterText":"find","insertText":"find($0)","insertTextFormat":2,"kind":2,"label":" find(…)","score":4.8400001525878906,"sortText":"3f651eb8find","textEdit":{"newText":"find($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[4 overloads]","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"kind":2,"label":" findUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8findUntil","textEdit":{"newText":"findUntil($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"unsigned long","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"kind":2,"label":" getTimeout()","score":4.8400001525878906,"sortText":"3f651eb8getTimeout","textEdit":{"newText":"getTimeout()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"int","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"kind":2,"label":" getWriteError()","score":4.8400001525878906,"sortText":"3f651eb8getWriteError","textEdit":{"newText":"getWriteError()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"float","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"kind":2,"label":" parseFloat()","score":4.8400001525878906,"sortText":"3f651eb8parseFloat","textEdit":{"newText":"parseFloat()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"long","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"kind":2,"label":" parseInt()","score":4.8400001525878906,"sortText":"3f651eb8parseInt","textEdit":{"newText":"parseInt()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"size_t","filterText":"printf","insertText":"printf(${1:const char *format, ...})","insertTextFormat":2,"kind":2,"label":" printf(const char *format, ...)","score":4.8400001525878906,"sortText":"3f651eb8printf","textEdit":{"newText":"printf(${1:const char *format, ...})","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[2 overloads]","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"kind":2,"label":" readBytes(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytes","textEdit":{"newText":"readBytes($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[2 overloads]","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"kind":2,"label":" readBytesUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytesUntil","textEdit":{"newText":"readBytesUntil($0)","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"String","filterText":"readString","insertText":"readString()","insertTextFormat":2,"kind":2,"label":" readString()","score":4.8400001525878906,"sortText":"3f651eb8readString","textEdit":{"newText":"readString()","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"String","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"kind":2,"label":" readStringUntil(char terminator)","score":4.8400001525878906,"sortText":"3f651eb8readStringUntil","textEdit":{"newText":"readStringUntil(${1:char terminator})","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}},{"detail":"void","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"kind":2,"label":" setTimeout(unsigned long timeout)","score":4.8400001525878906,"sortText":"3f651eb8setTimeout","textEdit":{"newText":"setTimeout(${1:unsigned long timeout})","range":{"end":{"character":11,"line":270},"start":{"character":11,"line":270}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":77,"jsonrpc":"2.0"}
<<<
Content-Length: 4099

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'ring' in 'HardwareSerial'","range":{"end":{"character":15,"line":270},"start":{"character":11,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":82}}Content-Length: 11743

{"id":77,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":83},"contentChanges":[{"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":11}},"text":"p"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4100

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pring' in 'HardwareSerial'","range":{"end":{"character":16,"line":270},"start":{"character":11,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":83}}
>>>
Content-Length: 462

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":12},"end":{"line":270,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":16}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'pring' in 'HardwareSerial'"}]}},"id":78,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":78,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":13}},"id":79,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":79,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 462

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":16}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'pring' in 'HardwareSerial'"}]}},"id":80,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":80,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":84},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":85},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":16},"context":{"triggerKind":1}},"id":81,"jsonrpc":"2.0"}
<<<
Content-Length: 4099

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'prin' in 'HardwareSerial'","range":{"end":{"character":15,"line":270},"start":{"character":11,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":84}}Content-Length: 68

{"id":81,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 4100

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'prinr' in 'HardwareSerial'","range":{"end":{"character":16,"line":270},"start":{"character":11,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":85}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":17},"end":{"line":270,"character":17}},"context":{"diagnostics":[]}},"id":82,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":82,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":86},"contentChanges":[{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":18}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4100

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'prinr' in 'HardwareSerial'","range":{"end":{"character":16,"line":270},"start":{"character":11,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":86}}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":87},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4099

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'prin' in 'HardwareSerial'","range":{"end":{"character":15,"line":270},"start":{"character":11,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":87}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":88},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":"t"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":16},"context":{"triggerKind":1}},"id":83,"jsonrpc":"2.0"}
<<<
Content-Length: 1031

{"id":83,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"[14 overloads]","filterText":"print","insertText":"print($0)","insertTextFormat":2,"kind":2,"label":" print(…)","score":8.6177120208740234,"sortText":"3e761ddaprint","textEdit":{"newText":"print($0)","range":{"end":{"character":16,"line":270},"start":{"character":11,"line":270}}}},{"detail":"[15 overloads]","filterText":"println","insertText":"println($0)","insertTextFormat":2,"kind":2,"label":" println(…)","score":8.0884857177734375,"sortText":"3efe9590println","textEdit":{"newText":"println($0)","range":{"end":{"character":16,"line":270},"start":{"character":11,"line":270}}}},{"detail":"size_t","filterText":"printf","insertText":"printf(${1:const char *format, ...})","insertTextFormat":2,"kind":2,"label":" printf(const char *format, ...)","score":4.8400001525878906,"sortText":"3f651eb8printf","textEdit":{"newText":"printf(${1:const char *format, ...})","range":{"end":{"character":16,"line":270},"start":{"character":11,"line":270}}}}]}}Content-Length: 5816

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:81:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:82:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:83:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:84:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:85:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:86:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:87:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:88:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:89:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:90:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:91:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:92:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:93:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:94:12:\nnote: possible target for call","range":{"end":{"character":16,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":88}}
>>>
Content-Length: 2178

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":16}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:81:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:82:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:83:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:84:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:85:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:86:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:87:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:88:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:89:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:90:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:91:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:92:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:93:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:94:12:\nnote: possible target for call"}]}},"id":84,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":84,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":89},"contentChanges":[{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 209

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":17}},"id":85,"jsonrpc":"2.0"}
<<<
Content-Length: 6584

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"ovl_no_viable_member_function_in_call","message":"No matching member function for call to 'print'\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:81:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:82:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:83:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:84:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:93:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:85:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:86:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:87:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:88:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:89:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:90:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:91:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:92:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:94:12:\nnote: candidate function not viable: requires at least argument 'timeinfo', but no arguments were provided","range":{"end":{"character":16,"line":270},"start":{"character":4,"line":270}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":89}}Content-Length: 1404

{"id":85,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"print(char) -> size_t","parameters":[{"label":[6,10]}]},{"label":"print(const char *) -> size_t","parameters":[{"label":[6,18]}]},{"label":"print(const String &) -> size_t","parameters":[{"label":[6,20]}]},{"label":"print(const Printable &) -> size_t","parameters":[{"label":[6,23]}]},{"label":"print(const __FlashStringHelper *) -> size_t","parameters":[{"label":[6,33]}]},{"label":"print(int, int = DEC) -> size_t","parameters":[{"label":[6,9]},{"label":[11,20]}]},{"label":"print(double, int = 2) -> size_t","parameters":[{"label":[6,12]},{"label":[14,21]}]},{"label":"print(long, int = DEC) -> size_t","parameters":[{"label":[6,10]},{"label":[12,21]}]},{"label":"print(long long, int = DEC) -> size_t","parameters":[{"label":[6,15]},{"label":[17,26]}]},{"label":"print(unsigned int, int = DEC) -> size_t","parameters":[{"label":[6,18]},{"label":[20,29]}]},{"label":"print(unsigned char, int = DEC) -> size_t","parameters":[{"label":[6,19]},{"label":[21,30]}]},{"label":"print(unsigned long, int = DEC) -> size_t","parameters":[{"label":[6,19]},{"label":[21,30]}]},{"label":"print(unsigned long long, int = DEC) -> size_t","parameters":[{"label":[6,24]},{"label":[26,35]}]},{"label":"print(struct tm *timeinfo, const char *format = NULL) -> size_t","parameters":[{"label":[6,25]},{"label":[27,52]}]}]}}
>>>
Content-Length: 286

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":90},"contentChanges":[{"range":{"start":{"line":270,"character":17},"end":{"line":270,"character":17}},"text":"\"\""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":90}}
>>>
Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":91},"contentChanges":[{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":19}},"rangeLength":1,"text":"\""}]},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":18}},"context":{"diagnostics":[]}},"id":86,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":86,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":92},"contentChanges":[{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":18}},"text":"O"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":92}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":19},"end":{"line":270,"character":19}},"context":{"diagnostics":[]}},"id":87,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":87,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":93},"contentChanges":[{"range":{"start":{"line":270,"character":19},"end":{"line":270,"character":19}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":93}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":94},"contentChanges":[{"range":{"start":{"line":270,"character":20},"end":{"line":270,"character":20}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":95},"contentChanges":[{"range":{"start":{"line":270,"character":21},"end":{"line":270,"character":21}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":94}}Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":95}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":22},"end":{"line":270,"character":22}},"context":{"diagnostics":[]}},"id":88,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":88,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":96},"contentChanges":[{"range":{"start":{"line":270,"character":22},"end":{"line":270,"character":22}},"text":"f"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":97},"contentChanges":[{"range":{"start":{"line":270,"character":23},"end":{"line":270,"character":23}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":96}}Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":97}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":98},"contentChanges":[{"range":{"start":{"line":270,"character":24},"end":{"line":270,"character":24}},"text":"o"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":99},"contentChanges":[{"range":{"start":{"line":270,"character":25},"end":{"line":270,"character":25}},"text":"w"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":98}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":100},"contentChanges":[{"range":{"start":{"line":270,"character":26},"end":{"line":270,"character":26}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3913

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":99}}Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":100}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":27},"end":{"line":270,"character":27}},"context":{"diagnostics":[]}},"id":89,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":89,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":101},"contentChanges":[{"range":{"start":{"line":270,"character":27},"end":{"line":270,"character":27}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":101}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":102},"contentChanges":[{"range":{"start":{"line":270,"character":28},"end":{"line":270,"character":28}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":102}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":103},"contentChanges":[{"range":{"start":{"line":270,"character":29},"end":{"line":270,"character":29}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":103}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":104},"contentChanges":[{"range":{"start":{"line":270,"character":30},"end":{"line":270,"character":30}},"text":"c"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":105},"contentChanges":[{"range":{"start":{"line":270,"character":31},"end":{"line":270,"character":31}},"text":"k"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":104}}Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":105}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":32},"end":{"line":270,"character":32}},"context":{"diagnostics":[]}},"id":90,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":90,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":18}},"context":{"diagnostics":[]}},"id":91,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":91,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"context":{"diagnostics":[]}},"id":92,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":92,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":18}},"context":{"diagnostics":[]}},"id":93,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":93,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":106},"contentChanges":[{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":18}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":106}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":33},"end":{"line":270,"character":33}},"context":{"diagnostics":[]}},"id":94,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":94,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":107},"contentChanges":[{"range":{"start":{"line":270,"character":33},"end":{"line":270,"character":33}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":107}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":108},"contentChanges":[{"range":{"start":{"line":270,"character":34},"end":{"line":270,"character":34}},"text":":"}]},"jsonrpc":"2.0"}Content-Length: 257

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":35},"context":{"triggerKind":2,"triggerCharacter":":"}},"id":95,"jsonrpc":"2.0"}
<<<
Content-Length: 68

{"id":95,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":108}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":18}},"id":96,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":96,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":151},"start":{"character":9,"line":151}}},{"kind":1,"range":{"end":{"character":18,"line":271},"start":{"character":11,"line":271}}}]}
>>>
Content-Length: 2370

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":18}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call"}]}},"id":97,"jsonrpc":"2.0"}
<<<
Content-Length: 2401

{"id":97,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp":[{"newText":"()","range":{"end":{"character":18,"line":271},"start":{"character":18,"line":271}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert '()'"}]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":109},"contentChanges":[{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":18}},"text":"*"}]},"jsonrpc":"2.0"}Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":110},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":19}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1788

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":109}}
>>>
Content-Length: 209

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":20}},"id":98,"jsonrpc":"2.0"}
<<<
Content-Length: 1790

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":21,"line":271},"start":{"character":20,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":110}}Content-Length: 92

{"id":98,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[]}}
>>>
Content-Length: 448

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":20},"end":{"line":271,"character":20}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":20},"end":{"line":271,"character":21}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":99,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":99,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":111},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":21}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":112},"contentChanges":[{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1788

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":111}}Content-Length: 3914

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":112}}
>>>
Content-Length: 2371

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":18}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call"}]}},"id":100,"jsonrpc":"2.0"}
<<<
Content-Length: 2402

{"id":100,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"bound_member_function","message":"Reference to non-static member function must be called; did you mean to call it with no arguments? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:96:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:97:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:98:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:99:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:100:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:101:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:102:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:103:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:104:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:105:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:106:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:107:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:108:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:109:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:110:12:\nnote: possible target for call","range":{"end":{"character":18,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp":[{"newText":"()","range":{"end":{"character":18,"line":271},"start":{"character":18,"line":271}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert '()'"}]}
>>>
Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":113},"contentChanges":[{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":18}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":114},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":20}},"rangeLength":1,"text":")"}]},"jsonrpc":"2.0"}Content-Length: 210

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":20}},"id":101,"jsonrpc":"2.0"}
<<<
Content-Length: 1819

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":114}}Content-Length: 93

{"id":101,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[]}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":20},"end":{"line":271,"character":20}},"context":{"diagnostics":[]}},"id":102,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":102,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":19}},"context":{"diagnostics":[]}},"id":103,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":103,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":20},"end":{"line":271,"character":20}},"context":{"diagnostics":[]}},"id":104,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":104,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":10}},"id":105,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":105,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":19}},"context":{"diagnostics":[]}},"id":106,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":106,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":115},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":19}},"text":"u"}]},"jsonrpc":"2.0"}Content-Length: 235

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":20},"context":{"triggerKind":1}},"id":107,"jsonrpc":"2.0"}
<<<
Content-Length: 70432

{"id":107,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"stdint.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"stdint.h\"`"},"filterText":"uint8_t","insertText":"uint8_t","insertTextFormat":2,"kind":8,"label":"•uint8_t","score":22.413049697875977,"sortText":"3e4cb213uint8_t","textEdit":{"newText":"uint8_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdint.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"stdint.h\"`"},"filterText":"uint32_t","insertText":"uint32_t","insertTextFormat":2,"kind":8,"label":"•uint32_t","score":11.613373756408691,"sortText":"3ec62f9fuint32_t","textEdit":{"newText":"uint32_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdint.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"stdint.h\"`"},"filterText":"uint16_t","insertText":"uint16_t","insertTextFormat":2,"kind":8,"label":"•uint16_t","score":9.9279708862304688,"sortText":"3ee12708uint16_t","textEdit":{"newText":"uint16_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"filterText":"union","insertText":"union","insertTextFormat":2,"kind":14,"label":" union","score":8,"sortText":"3f000000union","textEdit":{"newText":"union","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"filterText":"unsigned","insertText":"unsigned","insertTextFormat":2,"kind":14,"label":" unsigned","score":8,"sortText":"3f000000unsigned","textEdit":{"newText":"unsigned","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"arch/cc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"arch/cc.h\"`"},"filterText":"u32_t","insertText":"u32_t","insertTextFormat":2,"kind":8,"label":"•u32_t","score":7.5246739387512207,"sortText":"3f0f35dfu32_t","textEdit":{"newText":"u32_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"uint32_t","documentation":{"kind":"markdown","value":"Simplified macro for receiving task notification.  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nulTaskNotifyTake() is intended for use when a task notification is used as a faster and lighter weight binary or counting semaphore alternative. Actual FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the equivalent action that instead uses a task notification is ulTaskNotifyTake().  \nWhen a task is using its notification value as a binary or counting semaphore other tasks should send notifications to it using the xTaskNotifyGive() macro, or xTaskNotify() function with the eAction parameter set to eIncrement.  \nulTaskNotifyTake() can either clear the task's notification value to zero on exit, in which case the notification value acts like a binary semaphore, or decrement the task's notification value on exit, in which case the notification value acts like a counting semaphore.  \nA task can use ulTaskNotifyTake() to [optionally] block to wait for a the task's notification value to be non-zero. The task does not consume any CPU time while it is in the Blocked state.  \nWhere as xTaskNotifyWait() will return when a notification is pending,  \nulTaskNotifyTake() will return when the task's notification value is not zero.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's notification value is decremented when the function exits. In this way the notification value acts like a counting semaphore. If xClearCountOnExit is not pdFALSE then the task's notification value is cleared to zero when the function exits. In this way the notification value acts like a binary semaphore.  \n@param xTicksToWait The maximum amount of time that the task should wait in the Blocked state for the task's notification value to be greater than zero,  \nshould the count not already be greater than zero when ulTaskNotifyTake() was called. The task will not consume any processing time while it is in the Blocked state. This is specified in kernel ticks,  \nthe macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time specified in milliseconds to a time specified in ticks.  \n@return The task's notification count before it is either cleared to zero or decremented (see the xClearCountOnExit parameter).  \n\\\\ingroup TaskNotifications"},"filterText":"ulTaskNotifyTake","insertText":"ulTaskNotifyTake(${1:BaseType_t xClearCountOnExit}, ${2:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" ulTaskNotifyTake(BaseType_t xClearCountOnExit, TickType_t xTicksToWait)","score":2.2556054592132568,"sortText":"3fefa429ulTaskNotifyTake","textEdit":{"newText":"ulTaskNotifyTake(${1:BaseType_t xClearCountOnExit}, ${2:TickType_t xTicksToWait})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Get current number of tasks  \n@return The number of tasks that the real time kernel is currently managing.  \nThis includes all ready, blocked and suspended tasks. A task that has been deleted but not yet freed by the idle task will also be included in the count.  \n\\\\ingroup TaskUtils"},"filterText":"uxTaskGetNumberOfTasks","insertText":"uxTaskGetNumberOfTasks()","insertTextFormat":2,"kind":3,"label":" uxTaskGetNumberOfTasks()","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetNumberOfTasks","textEdit":{"newText":"uxTaskGetNumberOfTasks()","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"This function fills array with TaskSnapshot_t structures for every task in the system.  \nUsed by core dump facility to get snapshots of all tasks in the system.  \nOnly available when configENABLE_TASK_SNAPSHOT is set to 1.  \n@param pxTaskSnapshotArray Pointer to array of TaskSnapshot_t structures to store tasks snapshot data.  \n@param uxArraySize Size of tasks snapshots array.  \n@param pxTcbSz Pointer to store size of TCB.  \n@return Number of elements stored in array."},"filterText":"uxTaskGetSnapshotAll","insertText":"uxTaskGetSnapshotAll(${1:TaskSnapshot_t *const pxTaskSnapshotArray}, ${2:const UBaseType_t uxArraySize}, ${3:UBaseType_t *const pxTcbSz})","insertTextFormat":2,"kind":3,"label":" uxTaskGetSnapshotAll(TaskSnapshot_t *const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t *const pxTcbSz)","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetSnapshotAll","textEdit":{"newText":"uxTaskGetSnapshotAll(${1:TaskSnapshot_t *const pxTaskSnapshotArray}, ${2:const UBaseType_t uxArraySize}, ${3:UBaseType_t *const pxTcbSz})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Returns the high water mark of the stack associated with xTask.  \nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for this function to be available.  \nHigh water mark is the minimum free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task started.  \nThe smaller the returned number the closer the task has come to overflowing its stack.  \n@param xTask Handle of the task associated with the stack to be checked.  \nSet xTask to NULL to check the stack of the calling task.  \n@return The smallest amount of free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task referenced by xTask was created."},"filterText":"uxTaskGetStackHighWaterMark","insertText":"uxTaskGetStackHighWaterMark(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" uxTaskGetStackHighWaterMark(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetStackHighWaterMark","textEdit":{"newText":"uxTaskGetStackHighWaterMark(${1:TaskHandle_t xTask})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Get the state of tasks in the system.  \nconfigUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for uxTaskGetSystemState() to be available.  \nuxTaskGetSystemState() populates an TaskStatus_t structure for each task in the system. TaskStatus_t structures contain, among other things, members for the task handle, task name, task priority, task state, and total amount of run time consumed by the task. See the TaskStatus_t structure definition in this file for the full member list.  \n@note This function is intended for debugging use only as its use results in the scheduler remaining suspended for an extended period.  \n@param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.  \nThe array must contain at least one TaskStatus_t structure for each task that is under the control of the RTOS. The number of tasks under the control of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.  \n@param uxArraySize The size of the array pointed to by the pxTaskStatusArray parameter. The size is specified as the number of indexes in the array, or the number of TaskStatus_t structures contained in the array, not by the number of bytes in the array.  \n@param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in FreeRTOSConfig.h then \\*pulTotalRunTime is set by uxTaskGetSystemState() to the total run time (as defined by the run time stats clock, see http://www.freertos.org/rtos-run-time-stats.html) since the target booted.  \npulTotalRunTime can be set to NULL to omit the total run time information.  \n@return The number of TaskStatus_t structures that were populated by uxTaskGetSystemState(). This should equal the number returned by the uxTaskGetNumberOfTasks() API function, but will be zero if the value passed in the uxArraySize parameter was too small.  \nExample usage:  \n@code{c} // This example demonstrates how a human readable table of run time stats // information is generated from raw data provided by uxTaskGetSystemState().  \n// The human readable table is written to pcWriteBuffer void vTaskGetRunTimeStats( char \\*pcWriteBuffer ) { TaskStatus_t \\*pxTaskStatusArray;  \nvolatile UBaseType_t uxArraySize, x;  \nuint32_t ulTotalRunTime, ulStatsAsPercentage;  \n// Make sure the write buffer does not contain a string.  \n\\*pcWriteBuffer = 0x00;  \n// Take a snapshot of the number of tasks in case it changes while this // function is executing.  \nuxArraySize = uxTaskGetNumberOfTasks();  \n// Allocate a TaskStatus_t structure for each task. An array could be // allocated statically at compile time.  \npxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );  \nif( pxTaskStatusArray != NULL ) { // Generate raw status information about each task.  \nuxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalRunTime );  \n// For percentage calculations.  \nulTotalRunTime /= 100UL;  \n// Avoid divide by zero errors.  \nif( ulTotalRunTime > 0 ) { // For each populated position in the pxTaskStatusArray array,  \n// format the raw data as human readable ASCII data for( x = 0; x < uxArraySize; x++ ) { // What percentage of the total run time has the task used?  \n// This will always be rounded down to the nearest integer.  \n// ulTotalRunTimeDiv100 has already been divided by 100.  \nulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;  \nif( ulStatsAsPercentage > 0UL ) { sprintf( pcWriteBuffer, \"%s\\\\t\\\\t%lu\\\\t\\\\t%lu%%\\\\r\\\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );  \n} else { // If the percentage is zero here then the task has // consumed less than 1% of the total run time.  \nsprintf( pcWriteBuffer, \"%s\\\\t\\\\t%lu\\\\t\\\\t<1%%\\\\r\\\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );  \n}  \npcWriteBuffer += strlen( ( char * ) pcWriteBuffer );  \n} }  \n// The array is no longer needed, free the memory it consumes.  \nvPortFree( pxTaskStatusArray );  \n} }  \n@endcode"},"filterText":"uxTaskGetSystemState","insertText":"uxTaskGetSystemState(${1:TaskStatus_t *const pxTaskStatusArray}, ${2:const UBaseType_t uxArraySize}, ${3:uint32_t *const pulTotalRunTime})","insertTextFormat":2,"kind":3,"label":" uxTaskGetSystemState(TaskStatus_t *const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t *const pulTotalRunTime)","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetSystemState","textEdit":{"newText":"uxTaskGetSystemState(${1:TaskStatus_t *const pxTaskStatusArray}, ${2:const UBaseType_t uxArraySize}, ${3:uint32_t *const pulTotalRunTime})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Get the uxTCBNumber assigned to the task referenced by the xTask parameter."},"filterText":"uxTaskGetTaskNumber","insertText":"uxTaskGetTaskNumber(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" uxTaskGetTaskNumber(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetTaskNumber","textEdit":{"newText":"uxTaskGetTaskNumber(${1:TaskHandle_t xTask})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Obtain the priority of any task.  \nINCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \n@param xTask Handle of the task to be queried. Passing a NULL handle results in the priority of the calling task being returned.  \n@return The priority of xTask.  \nExample usage:  \n@code{c} void vAFunction( void ) { TaskHandle_t xHandle;  \n// Create a task, storing the handle.  \nxTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );  \n// ...  \n// Use the handle to obtain the priority of the created task.  \n// It was created with tskIDLE_PRIORITY, but may have changed // it itself.  \nif( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY ) { // The task has changed it's priority.  \n}  \n// ...  \n// Is our priority higher than the created task?  \nif( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) ) { // Our priority (obtained using NULL handle) is higher.  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl"},"filterText":"uxTaskPriorityGet","insertText":"uxTaskPriorityGet(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" uxTaskPriorityGet(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429uxTaskPriorityGet","textEdit":{"newText":"uxTaskPriorityGet(${1:TaskHandle_t xTask})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"A version of uxTaskPriorityGet() that can be used from an ISR.  \n@param xTask Handle of the task to be queried. Passing a NULL handle results in the priority of the calling task being returned.  \n@return The priority of xTask."},"filterText":"uxTaskPriorityGetFromISR","insertText":"uxTaskPriorityGetFromISR(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" uxTaskPriorityGetFromISR(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429uxTaskPriorityGetFromISR","textEdit":{"newText":"uxTaskPriorityGetFromISR(${1:TaskHandle_t xTask})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE. THEY ARE USED BY THE EVENT BITS MODULE."},"filterText":"uxTaskResetEventItemValue","insertText":"uxTaskResetEventItemValue()","insertTextFormat":2,"kind":3,"label":" uxTaskResetEventItemValue()","score":2.2556054592132568,"sortText":"3fefa429uxTaskResetEventItemValue","textEdit":{"newText":"uxTaskResetEventItemValue()","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/portable.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"freertos/portable.h\"`"},"filterText":"uxPortCompareSetExtram","insertText":"uxPortCompareSetExtram(${1:volatile uint32_t *addr}, ${2:uint32_t compare}, ${3:uint32_t *set})","insertTextFormat":2,"kind":3,"label":"•uxPortCompareSetExtram(volatile uint32_t *addr, uint32_t compare, uint32_t *set)","score":1.9036375284194946,"sortText":"400c559buxPortCompareSetExtram","textEdit":{"newText":"uxPortCompareSetExtram(${1:volatile uint32_t *addr}, ${2:uint32_t compare}, ${3:uint32_t *set})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdint.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"stdint.h\"`"},"filterText":"uint64_t","insertText":"uint64_t","insertTextFormat":2,"kind":8,"label":"•uint64_t","score":1.7334029674530029,"sortText":"40221fdauint64_t","textEdit":{"newText":"uint64_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uart_t","insertText":"uart_t","insertTextFormat":2,"kind":8,"label":"•uart_t","score":1.6578313112258911,"sortText":"402bcc2fuart_t","textEdit":{"newText":"uart_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Udp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Udp.h\"`"},"filterText":"UDP","insertText":"UDP","insertTextFormat":2,"kind":7,"label":"•UDP","score":1.5037370920181274,"sortText":"403f858bUDP","textEdit":{"newText":"UDP","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdint.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"stdint.h\"`"},"filterText":"uint_fast16_t","insertText":"uint_fast16_t","insertTextFormat":2,"kind":8,"label":"•uint_fast16_t","score":1.5037370920181274,"sortText":"403f858buint_fast16_t","textEdit":{"newText":"uint_fast16_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdint.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"stdint.h\"`"},"filterText":"uint_least8_t","insertText":"uint_least8_t","insertTextFormat":2,"kind":8,"label":"•uint_least8_t","score":1.5037370920181274,"sortText":"403f858buint_least8_t","textEdit":{"newText":"uint_least8_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib_noniso.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"stdlib_noniso.h\"`"},"filterText":"ultoa","insertText":"ultoa(${1:unsigned long val}, ${2:char *s}, ${3:int radix})","insertTextFormat":2,"kind":3,"label":"•ultoa(unsigned long val, char *s, int radix)","score":1.5037370920181274,"sortText":"403f858bultoa","textEdit":{"newText":"ultoa(${1:unsigned long val}, ${2:char *s}, ${3:int radix})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"ungetc","insertText":"ungetc(${1:int}, ${2:FILE *})","insertTextFormat":2,"kind":3,"label":"•ungetc(int, FILE *)","score":1.5037370920181274,"sortText":"403f858bungetc","textEdit":{"newText":"ungetc(${1:int}, ${2:FILE *})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"unsetenv","insertText":"unsetenv(${1:const char *__string})","insertTextFormat":2,"kind":3,"label":"•unsetenv(const char *__string)","score":1.5037370920181274,"sortText":"403f858bunsetenv","textEdit":{"newText":"unsetenv(${1:const char *__string})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"utoa","insertText":"utoa(${1:unsigned int}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•utoa(unsigned int, char *, int)","score":1.5037370920181274,"sortText":"403f858butoa","textEdit":{"newText":"utoa(${1:unsigned int}, ${2:char *}, ${3:int})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartAvailable","insertText":"uartAvailable(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartAvailable(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartAvailable","textEdit":{"newText":"uartAvailable(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartAvailableForWrite","insertText":"uartAvailableForWrite(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartAvailableForWrite(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartAvailableForWrite","textEdit":{"newText":"uartAvailableForWrite(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uart_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartBegin","insertText":"uartBegin(${1:uint8_t uart_nr}, ${2:uint32_t baudrate}, ${3:uint32_t config}, ${4:int8_t rxPin}, ${5:int8_t txPin}, ${6:uint16_t queueLen}, ${7:bool inverted})","insertTextFormat":2,"kind":3,"label":"•uartBegin(uint8_t uart_nr, uint32_t baudrate, uint32_t config, int8_t rxPin, int8_t txPin, uint16_t queueLen, bool inverted)","score":1.3747211694717407,"sortText":"40500923uartBegin","textEdit":{"newText":"uartBegin(${1:uint8_t uart_nr}, ${2:uint32_t baudrate}, ${3:uint32_t config}, ${4:int8_t rxPin}, ${5:int8_t txPin}, ${6:uint16_t queueLen}, ${7:bool inverted})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned long","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartDetectBaudrate","insertText":"uartDetectBaudrate(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartDetectBaudrate(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartDetectBaudrate","textEdit":{"newText":"uartDetectBaudrate(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartEnd","insertText":"uartEnd(${1:uart_t *uart}, ${2:uint8_t rxPin}, ${3:uint8_t txPin})","insertTextFormat":2,"kind":3,"label":"•uartEnd(uart_t *uart, uint8_t rxPin, uint8_t txPin)","score":1.3747211694717407,"sortText":"40500923uartEnd","textEdit":{"newText":"uartEnd(${1:uart_t *uart}, ${2:uint8_t rxPin}, ${3:uint8_t txPin})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartFlush","insertText":"uartFlush(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartFlush(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartFlush","textEdit":{"newText":"uartFlush(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartFlushTxOnly","insertText":"uartFlushTxOnly(${1:uart_t *uart}, ${2:bool txOnly})","insertTextFormat":2,"kind":3,"label":"•uartFlushTxOnly(uart_t *uart, bool txOnly)","score":1.3747211694717407,"sortText":"40500923uartFlushTxOnly","textEdit":{"newText":"uartFlushTxOnly(${1:uart_t *uart}, ${2:bool txOnly})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartGetBaudRate","insertText":"uartGetBaudRate(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartGetBaudRate(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartGetBaudRate","textEdit":{"newText":"uartGetBaudRate(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartGetDebug","insertText":"uartGetDebug()","insertTextFormat":2,"kind":3,"label":"•uartGetDebug()","score":1.3747211694717407,"sortText":"40500923uartGetDebug","textEdit":{"newText":"uartGetDebug()","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint8_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartPeek","insertText":"uartPeek(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartPeek(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartPeek","textEdit":{"newText":"uartPeek(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint8_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartRead","insertText":"uartRead(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartRead(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartRead","textEdit":{"newText":"uartRead(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartResizeRxBuffer","insertText":"uartResizeRxBuffer(${1:uart_t *uart}, ${2:size_t new_size})","insertTextFormat":2,"kind":3,"label":"•uartResizeRxBuffer(uart_t *uart, size_t new_size)","score":1.3747211694717407,"sortText":"40500923uartResizeRxBuffer","textEdit":{"newText":"uartResizeRxBuffer(${1:uart_t *uart}, ${2:size_t new_size})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartRxActive","insertText":"uartRxActive(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartRxActive(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartRxActive","textEdit":{"newText":"uartRxActive(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetBaudRate","insertText":"uartSetBaudRate(${1:uart_t *uart}, ${2:uint32_t baud_rate})","insertTextFormat":2,"kind":3,"label":"•uartSetBaudRate(uart_t *uart, uint32_t baud_rate)","score":1.3747211694717407,"sortText":"40500923uartSetBaudRate","textEdit":{"newText":"uartSetBaudRate(${1:uart_t *uart}, ${2:uint32_t baud_rate})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetDebug","insertText":"uartSetDebug(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartSetDebug(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartSetDebug","textEdit":{"newText":"uartSetDebug(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747211694717407,"sortText":"40500923uartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartStartDetectBaudrate","insertText":"uartStartDetectBaudrate(${1:uart_t *uart})","insertTextFormat":2,"kind":3,"label":"•uartStartDetectBaudrate(uart_t *uart)","score":1.3747211694717407,"sortText":"40500923uartStartDetectBaudrate","textEdit":{"newText":"uartStartDetectBaudrate(${1:uart_t *uart})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartWrite","insertText":"uartWrite(${1:uart_t *uart}, ${2:uint8_t c})","insertTextFormat":2,"kind":3,"label":"•uartWrite(uart_t *uart, uint8_t c)","score":1.3747211694717407,"sortText":"40500923uartWrite","textEdit":{"newText":"uartWrite(${1:uart_t *uart}, ${2:uint8_t c})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartWriteBuf","insertText":"uartWriteBuf(${1:uart_t *uart}, ${2:const uint8_t *data}, ${3:size_t len})","insertTextFormat":2,"kind":3,"label":"•uartWriteBuf(uart_t *uart, const uint8_t *data, size_t len)","score":1.3747211694717407,"sortText":"40500923uartWriteBuf","textEdit":{"newText":"uartWriteBuf(${1:uart_t *uart}, ${2:const uint8_t *data}, ${3:size_t len})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uart_struct_t","insertText":"uart_struct_t","insertTextFormat":2,"kind":22,"label":"•uart_struct_t","score":1.3747211694717407,"sortText":"40500923uart_struct_t","textEdit":{"newText":"uart_struct_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"WAKEUP_ENABLE","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"UART0_TRIG_EN","insertText":"UART0_TRIG_EN","insertTextFormat":2,"kind":20,"label":"•UART0_TRIG_EN","score":1.2690916061401367,"sortText":"405d8e68UART0_TRIG_EN","textEdit":{"newText":"UART0_TRIG_EN","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"WAKEUP_REASON","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"UART1_TRIG","insertText":"UART1_TRIG","insertTextFormat":2,"kind":20,"label":"•UART1_TRIG","score":1.2690916061401367,"sortText":"405d8e68UART1_TRIG","textEdit":{"newText":"UART1_TRIG","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartIntType","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"UART_RCV_TMOUT_INT_FLAG","insertText":"UART_RCV_TMOUT_INT_FLAG","insertTextFormat":2,"kind":20,"label":"•UART_RCV_TMOUT_INT_FLAG","score":1.2690916061401367,"sortText":"405d8e68UART_RCV_TMOUT_INT_FLAG","textEdit":{"newText":"UART_RCV_TMOUT_INT_FLAG","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/portmacro.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/portmacro.h\"`"},"filterText":"UBaseType_t","insertText":"UBaseType_t","insertTextFormat":2,"kind":8,"label":"•UBaseType_t","score":1.2690916061401367,"sortText":"405d8e68UBaseType_t","textEdit":{"newText":"UBaseType_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"RcvMsgBuffState","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"UNDER_WRITE","insertText":"UNDER_WRITE","insertTextFormat":2,"kind":20,"label":"•UNDER_WRITE","score":1.2690916061401367,"sortText":"405d8e68UNDER_WRITE","textEdit":{"newText":"UNDER_WRITE","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"UartBautRate","insertText":"UartBautRate","insertTextFormat":2,"kind":8,"label":"•UartBautRate","score":1.2690916061401367,"sortText":"405d8e68UartBautRate","textEdit":{"newText":"UartBautRate","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"UartDevice","insertText":"UartDevice","insertTextFormat":2,"kind":8,"label":"•UartDevice","score":1.2690916061401367,"sortText":"405d8e68UartDevice","textEdit":{"newText":"UartDevice","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"UartFlowCtrl","insertText":"UartFlowCtrl","insertTextFormat":2,"kind":8,"label":"•UartFlowCtrl","score":1.2690916061401367,"sortText":"405d8e68UartFlowCtrl","textEdit":{"newText":"UartFlowCtrl","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"UartIntType","insertText":"UartIntType","insertTextFormat":2,"kind":8,"label":"•UartIntType","score":1.2690916061401367,"sortText":"405d8e68UartIntType","textEdit":{"newText":"UartIntType","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"UartParityMode","insertText":"UartParityMode","insertTextFormat":2,"kind":8,"label":"•UartParityMode","score":1.2690916061401367,"sortText":"405d8e68UartParityMode","textEdit":{"newText":"UartParityMode","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"UartStopBitsNum","insertText":"UartStopBitsNum","insertTextFormat":2,"kind":8,"label":"•UartStopBitsNum","score":1.2690916061401367,"sortText":"405d8e68UartStopBitsNum","textEdit":{"newText":"UartStopBitsNum","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Init uart0 or uart1 for UART download booting mode.  \nPlease do not call this function in SDK.  \n@param uint8_t uart_no : 0 for UART0, else for UART1.  \n@param uint32_t clock : clock used by uart module, to adjust baudrate.  \n@return None"},"filterText":"Uart_Init","insertText":"Uart_Init(${1:uint8_t uart_no}, ${2:uint32_t clock})","insertTextFormat":2,"kind":3,"label":"•Uart_Init(uint8_t uart_no, uint32_t clock)","score":1.2690916061401367,"sortText":"405d8e68Uart_Init","textEdit":{"newText":"Uart_Init(${1:uint8_t uart_no}, ${2:uint32_t clock})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/xtruntime-frames.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"xtensa/xtruntime-frames.h\"`"},"filterText":"UserFrame","insertText":"UserFrame","insertTextFormat":2,"kind":8,"label":"•UserFrame","score":1.2690916061401367,"sortText":"405d8e68UserFrame","textEdit":{"newText":"UserFrame","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"u_char","insertText":"u_char","insertTextFormat":2,"kind":8,"label":"•u_char","score":1.2690916061401367,"sortText":"405d8e68u_char","textEdit":{"newText":"u_char","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"u_int","insertText":"u_int","insertTextFormat":2,"kind":8,"label":"•u_int","score":1.2690916061401367,"sortText":"405d8e68u_int","textEdit":{"newText":"u_int","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"u_long","insertText":"u_long","insertTextFormat":2,"kind":8,"label":"•u_long","score":1.2690916061401367,"sortText":"405d8e68u_long","textEdit":{"newText":"u_long","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"u_short","insertText":"u_short","insertTextFormat":2,"kind":8,"label":"•u_short","score":1.2690916061401367,"sortText":"405d8e68u_short","textEdit":{"newText":"u_short","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Init uart0 or uart1 for UART download booting mode.  \nPlease do not call this function in SDK.  \n@param uint8_t uart_no : 0 for UART0, 1 for UART1.  \n@param uint8_t is_sync : 0, only one UART module, easy to detect, wait until detected;  \n1, two UART modules, hard to detect, detect and return.  \n@return None"},"filterText":"uart_baudrate_detect","insertText":"uart_baudrate_detect(${1:uint8_t uart_no}, ${2:uint8_t is_sync})","insertTextFormat":2,"kind":3,"label":"•uart_baudrate_detect(uint8_t uart_no, uint8_t is_sync)","score":1.2690916061401367,"sortText":"405d8e68uart_baudrate_detect","textEdit":{"newText":"uart_baudrate_detect(${1:uint8_t uart_no}, ${2:uint8_t is_sync})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Modify uart baudrate.  \nThis function will reset RX/TX fifo for uart.  \n@param uint8_t uart_no : 0 for UART0, 1 for UART1.  \n@param uint32_t DivLatchValue : (clock << 4)/baudrate.  \n@return None"},"filterText":"uart_div_modify","insertText":"uart_div_modify(${1:uint8_t uart_no}, ${2:uint32_t DivLatchValue})","insertTextFormat":2,"kind":3,"label":"•uart_div_modify(uint8_t uart_no, uint32_t DivLatchValue)","score":1.2690916061401367,"sortText":"405d8e68uart_div_modify","textEdit":{"newText":"uart_div_modify(${1:uint8_t uart_no}, ${2:uint32_t DivLatchValue})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Process uart received information in the interrupt handler.  \nPlease do not call this function in SDK.  \n@param void \\*para : the message receive buffer.  \n@return None"},"filterText":"uart_rx_intr_handler","insertText":"uart_rx_intr_handler(${1:void *para})","insertTextFormat":2,"kind":3,"label":"•uart_rx_intr_handler(void *para)","score":1.2690916061401367,"sortText":"405d8e68uart_rx_intr_handler","textEdit":{"newText":"uart_rx_intr_handler(${1:void *para})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Get an input char from message channel, wait until successful.  \nPlease do not call this function in SDK.  \n@param None  \n@return char : input char value."},"filterText":"uart_rx_one_char_block","insertText":"uart_rx_one_char_block()","insertTextFormat":2,"kind":3,"label":"•uart_rx_one_char_block()","score":1.2690916061401367,"sortText":"405d8e68uart_rx_one_char_block","textEdit":{"newText":"uart_rx_one_char_block()","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Get an char from receive buffer.  \nPlease do not call this function in SDK.  \n@param RcvMsgBuff \\*pRxBuff : the pointer to the struct that include receive buffer.  \n@param uint8_t \\*pRxByte : the pointer to store the char.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"uart_rx_readbuff","insertText":"uart_rx_readbuff(${1:RcvMsgBuff *pRxBuff}, ${2:uint8_t *pRxByte})","insertTextFormat":2,"kind":3,"label":"•uart_rx_readbuff(RcvMsgBuff *pRxBuff, uint8_t *pRxByte)","score":1.2690916061401367,"sortText":"405d8e68uart_rx_readbuff","textEdit":{"newText":"uart_rx_readbuff(${1:RcvMsgBuff *pRxBuff}, ${2:uint8_t *pRxByte})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Wait until uart tx full empty.  \n@param uint8_t uart_no : 0 for UART0, 1 for UART1.  \n@return None."},"filterText":"uart_tx_flush","insertText":"uart_tx_flush(${1:uint8_t uart_no})","insertTextFormat":2,"kind":3,"label":"•uart_tx_flush(uint8_t uart_no)","score":1.2690916061401367,"sortText":"405d8e68uart_tx_flush","textEdit":{"newText":"uart_tx_flush(${1:uint8_t uart_no})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Output a char to message exchange channel, wait until fifo not full.  \nPlease do not call this function in SDK.  \n@param None  \n@return OK."},"filterText":"uart_tx_one_char2","insertText":"uart_tx_one_char2(${1:uint8_t TxChar})","insertTextFormat":2,"kind":3,"label":"•uart_tx_one_char2(uint8_t TxChar)","score":1.2690916061401367,"sortText":"405d8e68uart_tx_one_char2","textEdit":{"newText":"uart_tx_one_char2(${1:uint8_t TxChar})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Wait until uart tx full empty and the last char send ok.  \n@param uart_no : 0 for UART0, 1 for UART1, 2 for UART2  \nThe function defined in ROM code has a bug, so we define the correct version here for compatibility."},"filterText":"uart_tx_wait_idle","insertText":"uart_tx_wait_idle(${1:uint8_t uart_no})","insertTextFormat":2,"kind":3,"label":"•uart_tx_wait_idle(uint8_t uart_no)","score":1.2690916061401367,"sortText":"405d8e68uart_tx_wait_idle","textEdit":{"newText":"uart_tx_wait_idle(${1:uint8_t uart_no})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"uint8_t","filterText":"ucQueueGetQueueType","insertText":"ucQueueGetQueueType(${1:QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" ucQueueGetQueueType(QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68ucQueueGetQueueType","textEdit":{"newText":"ucQueueGetQueueType(${1:QueueHandle_t xQueue})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"uid_t","insertText":"uid_t","insertTextFormat":2,"kind":8,"label":"•uid_t","score":1.2690916061401367,"sortText":"405d8e68uid_t","textEdit":{"newText":"uid_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"uint","insertText":"uint","insertTextFormat":2,"kind":8,"label":"•uint","score":1.2690916061401367,"sortText":"405d8e68uint","textEdit":{"newText":"uint","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"ulong","insertText":"ulong","insertTextFormat":2,"kind":8,"label":"•ulong","score":1.2690916061401367,"sortText":"405d8e68ulong","textEdit":{"newText":"ulong","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"useconds_t","insertText":"useconds_t","insertTextFormat":2,"kind":8,"label":"•useconds_t","score":1.2690916061401367,"sortText":"405d8e68useconds_t","textEdit":{"newText":"useconds_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Wire.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Wire.h\"`"},"filterText":"user_onReceive","insertText":"user_onReceive","insertTextFormat":2,"kind":8,"label":"•user_onReceive","score":1.2690916061401367,"sortText":"405d8e68user_onReceive","textEdit":{"newText":"user_onReceive","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"Wire.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Wire.h\"`"},"filterText":"user_onRequest","insertText":"user_onRequest","insertTextFormat":2,"kind":8,"label":"•user_onRequest","score":1.2690916061401367,"sortText":"405d8e68user_onRequest","textEdit":{"newText":"user_onRequest","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"ushort","insertText":"ushort","insertTextFormat":2,"kind":8,"label":"•ushort","score":1.2690916061401367,"sortText":"405d8e68ushort","textEdit":{"newText":"ushort","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","filterText":"uxQueueGetQueueNumber","insertText":"uxQueueGetQueueNumber(${1:QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" uxQueueGetQueueNumber(QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68uxQueueGetQueueNumber","textEdit":{"newText":"uxQueueGetQueueNumber(${1:QueueHandle_t xQueue})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Return the number of messages stored in a queue.  \n@param xQueue A handle to the queue being queried.  \n@return The number of messages available in the queue.  \n\\\\ingroup QueueManagement"},"filterText":"uxQueueMessagesWaiting","insertText":"uxQueueMessagesWaiting(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" uxQueueMessagesWaiting(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68uxQueueMessagesWaiting","textEdit":{"newText":"uxQueueMessagesWaiting(${1:const QueueHandle_t xQueue})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","filterText":"uxQueueMessagesWaitingFromISR","insertText":"uxQueueMessagesWaitingFromISR(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" uxQueueMessagesWaitingFromISR(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68uxQueueMessagesWaitingFromISR","textEdit":{"newText":"uxQueueMessagesWaitingFromISR(${1:const QueueHandle_t xQueue})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Return the number of free spaces available in a queue. This is equal to the number of items that can be sent to the queue before the queue becomes full if no items are removed.  \n@param xQueue A handle to the queue being queried.  \n@return The number of spaces available in the queue.  \n\\\\ingroup QueueManagement"},"filterText":"uxQueueSpacesAvailable","insertText":"uxQueueSpacesAvailable(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" uxQueueSpacesAvailable(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68uxQueueSpacesAvailable","textEdit":{"newText":"uxQueueSpacesAvailable(${1:const QueueHandle_t xQueue})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/uart_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uart_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/uart_struct.h\"`"},"filterText":"UART0","insertText":"UART0","insertTextFormat":2,"kind":6,"label":"•UART0","score":1.1826096773147583,"sortText":"4068a03fUART0","textEdit":{"newText":"UART0","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"soc/uart_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/uart_struct.h\"`"},"filterText":"uart_dev_t","insertText":"uart_dev_t","insertTextFormat":2,"kind":8,"label":"•uart_dev_t","score":1.1826096773147583,"sortText":"4068a03fuart_dev_t","textEdit":{"newText":"uart_dev_t","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"wint_t","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"ungetwc","insertText":"ungetwc(${1:wint_t wc}, ${2:__FILE *})","insertTextFormat":2,"kind":3,"label":"•ungetwc(wint_t wc, __FILE *)","score":1.1826096773147583,"sortText":"4068a03fungetwc","textEdit":{"newText":"ungetwc(${1:wint_t wc}, ${2:__FILE *})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/stat.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"mode_t","documentation":{"kind":"markdown","value":"From `<sys/stat.h>`"},"filterText":"umask","insertText":"umask(${1:mode_t __mask})","insertTextFormat":2,"kind":3,"label":"•umask(mode_t __mask)","score":1.1118042469024658,"sortText":"4071b066umask","textEdit":{"newText":"umask(${1:mode_t __mask})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"unlink","insertText":"unlink(${1:const char *__path})","insertTextFormat":2,"kind":3,"label":"•unlink(const char *__path)","score":1.1118042469024658,"sortText":"4071b066unlink","textEdit":{"newText":"unlink(${1:const char *__path})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"unlinkat","insertText":"unlinkat(${1:int}, ${2:const char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•unlinkat(int, const char *, int)","score":1.1118042469024658,"sortText":"4071b066unlinkat","textEdit":{"newText":"unlinkat(${1:int}, ${2:const char *}, ${3:int})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"usleep","insertText":"usleep(${1:useconds_t __useconds})","insertTextFormat":2,"kind":3,"label":"•usleep(useconds_t __useconds)","score":1.1118042469024658,"sortText":"4071b066usleep","textEdit":{"newText":"usleep(${1:useconds_t __useconds})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/stat.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/stat.h>`"},"filterText":"utimensat","insertText":"utimensat(${1:int}, ${2:const char *}, ${3:const struct timespec *}, ${4:int})","insertTextFormat":2,"kind":3,"label":"•utimensat(int, const char *, const struct timespec *, int)","score":1.1118042469024658,"sortText":"4071b066utimensat","textEdit":{"newText":"utimensat(${1:int}, ${2:const char *}, ${3:const struct timespec *}, ${4:int})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"utimes","insertText":"utimes(${1:const char *__path}, ${2:const struct timeval *__tvp})","insertTextFormat":2,"kind":3,"label":"•utimes(const char *__path, const struct timeval *__tvp)","score":1.1118042469024658,"sortText":"4071b066utimes","textEdit":{"newText":"utimes(${1:const char *__path}, ${2:const struct timeval *__tvp})","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `<exception>`  \n[18.6.4]/1: 'Returns true after completing evaluation of a throw-expression until either completing initialization of the exception-declaration in the matching handler or entering @c unexpected() due to the throw; or after entering @c terminate() for any reason other than an explicit call to @c terminate(). [Note: This includes stack unwinding [15.2]. end note]'  \n2: 'When @c uncaught_exception() is true, throwing an %exception can result in a call of @c terminate() (15.5.1).'"},"filterText":"uncaught_exception","insertText":"std::uncaught_exception()","insertTextFormat":2,"kind":3,"label":"•std::uncaught_exception()","score":0.98550808429718018,"sortText":"4083b5beuncaught_exception","textEdit":{"newText":"std::uncaught_exception()","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <stdexcept>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<stdexcept>`  \nThrown to indicate arithmetic underflow."},"filterText":"underflow_error","insertText":"std::underflow_error","insertTextFormat":2,"kind":7,"label":"•std::underflow_error","score":0.98550808429718018,"sortText":"4083b5beunderflow_error","textEdit":{"newText":"std::underflow_error","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nThe underlying type of an enum."},"filterText":"underlying_type","insertText":"std::underlying_type<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::underlying_type<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5beunderlying_type","textEdit":{"newText":"std::underlying_type<${1:typename _Tp}>","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `<exception>`  \nThe runtime will call this function if an %exception is thrown which violates the function's %exception specification."},"filterText":"unexpected","insertText":"std::unexpected()","insertTextFormat":2,"kind":3,"label":"•std::unexpected()","score":0.98550808429718018,"sortText":"4083b5beunexpected","textEdit":{"newText":"std::unexpected()","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<exception>`  \nIf you write a replacement %unexpected handler, it must be of this type."},"filterText":"unexpected_handler","insertText":"std::unexpected_handler","insertTextFormat":2,"kind":8,"label":"•std::unexpected_handler","score":0.98550808429718018,"sortText":"4083b5beunexpected_handler","textEdit":{"newText":"std::unexpected_handler","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <ios>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<ios>`  \nFile position for char16_t streams."},"filterText":"u16streampos","insertText":"std::u16streampos","insertTextFormat":2,"kind":8,"label":"•std::u16streampos","score":0.92650353908538818,"sortText":"4092d0aau16streampos","textEdit":{"newText":"std::u16streampos","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <ios>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<ios>`  \nFile position for char32_t streams."},"filterText":"u32streampos","insertText":"std::u32streampos","insertTextFormat":2,"kind":8,"label":"•std::u32streampos","score":0.92650353908538818,"sortText":"4092d0aau32streampos","textEdit":{"newText":"std::u32streampos","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <functional>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<functional>`  \n20.3.1 base classes  \n@defgroup functors Function Objects  \n@ingroup utilities  \nFunction objects, or @e functors, are objects with an @c operator() defined and accessible. They can be passed as arguments to algorithm templates and used in place of a function pointer. Not only is the resulting expressiveness of the library increased, but the generated code can be more efficient than what you might write by hand. When we refer to @a functors, then, generally we include function pointers in the description as well.  \nOften, functors are only created as temporaries passed to algorithm calls, rather than being created as named variables.  \nTwo examples taken from the standard itself follow. To perform a by-element addition of two vectors @c a and @c b containing @c double,  \nand put the result in @c a, use  \n\\\\code transform (a.begin(), a.end(), b.begin(), a.begin(), plus\\<double>());  \n\\\\endcode To negate every element in @c a, use  \n\\\\code transform(a.begin(), a.end(), a.begin(), negate\\<double>());  \n\\\\endcode The addition and negation functions will be inlined directly.  \nThe standard functors are derived from structs named @c unary_function and @c binary_function. These two classes contain nothing but typedefs,  \nto aid in generic (template) programming. If you write your own functors, you might consider doing the same.  \n@{  \nThis is one of the @link functors functor base classes@endlink."},"filterText":"unary_function","insertText":"std::unary_function<${1:typename _Arg}, ${2:typename _Result}>","insertTextFormat":2,"kind":22,"label":"•std::unary_function<typename _Arg, typename _Result>","score":0.92650353908538818,"sortText":"4092d0aaunary_function","textEdit":{"newText":"std::unary_function<${1:typename _Arg}, ${2:typename _Result}>","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include <functional>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<functional>`  \n20.3.5 negators  \n@defgroup negators Negators  \n@ingroup functors  \nThe functions @c not1 and @c not2 each take a predicate functor and return an instance of @c unary_negate or  \n@c binary_negate, respectively. These classes are functors whose  \n@c operator() performs the stored predicate function and then returns the negation of the result.  \nFor example, given a vector of integers and a trivial predicate,  \n\\\\code struct IntGreaterThanThree : public std::unary_function<int, bool> { bool operator() (int x) { return x > 3; } };  \nstd::find_if (v.begin(), v.end(), not1(IntGreaterThanThree()));  \n\\\\endcode The call to @c find_if will locate the first index (i) of @c v for which \\<code>!(v[i] > 3)\\</code> is true.  \nThe not1/unary_negate combination works on predicates taking a single argument. The not2/binary_negate combination works on predicates which take two arguments.  \n@{  \nOne of the @link negators negation functors@endlink."},"filterText":"unary_negate","insertText":"std::unary_negate<${1:typename _Predicate}>","insertTextFormat":2,"kind":7,"label":"•std::unary_negate<typename _Predicate>","score":0.92650353908538818,"sortText":"4092d0aaunary_negate","textEdit":{"newText":"std::unary_negate<${1:typename _Predicate}>","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}}}}]}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":116},"contentChanges":[{"range":{"start":{"line":271,"character":20},"end":{"line":271,"character":20}},"text":"x"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2004

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'u'","range":{"end":{"character":20,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":115}}
>>>
Content-Length: 235

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":21},"context":{"triggerKind":3}},"id":108,"jsonrpc":"2.0"}
<<<
Content-Length: 17045

{"id":108,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Get current number of tasks  \n@return The number of tasks that the real time kernel is currently managing.  \nThis includes all ready, blocked and suspended tasks. A task that has been deleted but not yet freed by the idle task will also be included in the count.  \n\\\\ingroup TaskUtils"},"filterText":"uxTaskGetNumberOfTasks","insertText":"uxTaskGetNumberOfTasks()","insertTextFormat":2,"kind":3,"label":" uxTaskGetNumberOfTasks()","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetNumberOfTasks","textEdit":{"newText":"uxTaskGetNumberOfTasks()","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"This function fills array with TaskSnapshot_t structures for every task in the system.  \nUsed by core dump facility to get snapshots of all tasks in the system.  \nOnly available when configENABLE_TASK_SNAPSHOT is set to 1.  \n@param pxTaskSnapshotArray Pointer to array of TaskSnapshot_t structures to store tasks snapshot data.  \n@param uxArraySize Size of tasks snapshots array.  \n@param pxTcbSz Pointer to store size of TCB.  \n@return Number of elements stored in array."},"filterText":"uxTaskGetSnapshotAll","insertText":"uxTaskGetSnapshotAll(${1:TaskSnapshot_t *const pxTaskSnapshotArray}, ${2:const UBaseType_t uxArraySize}, ${3:UBaseType_t *const pxTcbSz})","insertTextFormat":2,"kind":3,"label":" uxTaskGetSnapshotAll(TaskSnapshot_t *const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t *const pxTcbSz)","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetSnapshotAll","textEdit":{"newText":"uxTaskGetSnapshotAll(${1:TaskSnapshot_t *const pxTaskSnapshotArray}, ${2:const UBaseType_t uxArraySize}, ${3:UBaseType_t *const pxTcbSz})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Returns the high water mark of the stack associated with xTask.  \nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for this function to be available.  \nHigh water mark is the minimum free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task started.  \nThe smaller the returned number the closer the task has come to overflowing its stack.  \n@param xTask Handle of the task associated with the stack to be checked.  \nSet xTask to NULL to check the stack of the calling task.  \n@return The smallest amount of free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task referenced by xTask was created."},"filterText":"uxTaskGetStackHighWaterMark","insertText":"uxTaskGetStackHighWaterMark(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" uxTaskGetStackHighWaterMark(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetStackHighWaterMark","textEdit":{"newText":"uxTaskGetStackHighWaterMark(${1:TaskHandle_t xTask})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Get the state of tasks in the system.  \nconfigUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for uxTaskGetSystemState() to be available.  \nuxTaskGetSystemState() populates an TaskStatus_t structure for each task in the system. TaskStatus_t structures contain, among other things, members for the task handle, task name, task priority, task state, and total amount of run time consumed by the task. See the TaskStatus_t structure definition in this file for the full member list.  \n@note This function is intended for debugging use only as its use results in the scheduler remaining suspended for an extended period.  \n@param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.  \nThe array must contain at least one TaskStatus_t structure for each task that is under the control of the RTOS. The number of tasks under the control of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.  \n@param uxArraySize The size of the array pointed to by the pxTaskStatusArray parameter. The size is specified as the number of indexes in the array, or the number of TaskStatus_t structures contained in the array, not by the number of bytes in the array.  \n@param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in FreeRTOSConfig.h then \\*pulTotalRunTime is set by uxTaskGetSystemState() to the total run time (as defined by the run time stats clock, see http://www.freertos.org/rtos-run-time-stats.html) since the target booted.  \npulTotalRunTime can be set to NULL to omit the total run time information.  \n@return The number of TaskStatus_t structures that were populated by uxTaskGetSystemState(). This should equal the number returned by the uxTaskGetNumberOfTasks() API function, but will be zero if the value passed in the uxArraySize parameter was too small.  \nExample usage:  \n@code{c} // This example demonstrates how a human readable table of run time stats // information is generated from raw data provided by uxTaskGetSystemState().  \n// The human readable table is written to pcWriteBuffer void vTaskGetRunTimeStats( char \\*pcWriteBuffer ) { TaskStatus_t \\*pxTaskStatusArray;  \nvolatile UBaseType_t uxArraySize, x;  \nuint32_t ulTotalRunTime, ulStatsAsPercentage;  \n// Make sure the write buffer does not contain a string.  \n\\*pcWriteBuffer = 0x00;  \n// Take a snapshot of the number of tasks in case it changes while this // function is executing.  \nuxArraySize = uxTaskGetNumberOfTasks();  \n// Allocate a TaskStatus_t structure for each task. An array could be // allocated statically at compile time.  \npxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );  \nif( pxTaskStatusArray != NULL ) { // Generate raw status information about each task.  \nuxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalRunTime );  \n// For percentage calculations.  \nulTotalRunTime /= 100UL;  \n// Avoid divide by zero errors.  \nif( ulTotalRunTime > 0 ) { // For each populated position in the pxTaskStatusArray array,  \n// format the raw data as human readable ASCII data for( x = 0; x < uxArraySize; x++ ) { // What percentage of the total run time has the task used?  \n// This will always be rounded down to the nearest integer.  \n// ulTotalRunTimeDiv100 has already been divided by 100.  \nulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;  \nif( ulStatsAsPercentage > 0UL ) { sprintf( pcWriteBuffer, \"%s\\\\t\\\\t%lu\\\\t\\\\t%lu%%\\\\r\\\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );  \n} else { // If the percentage is zero here then the task has // consumed less than 1% of the total run time.  \nsprintf( pcWriteBuffer, \"%s\\\\t\\\\t%lu\\\\t\\\\t<1%%\\\\r\\\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );  \n}  \npcWriteBuffer += strlen( ( char * ) pcWriteBuffer );  \n} }  \n// The array is no longer needed, free the memory it consumes.  \nvPortFree( pxTaskStatusArray );  \n} }  \n@endcode"},"filterText":"uxTaskGetSystemState","insertText":"uxTaskGetSystemState(${1:TaskStatus_t *const pxTaskStatusArray}, ${2:const UBaseType_t uxArraySize}, ${3:uint32_t *const pulTotalRunTime})","insertTextFormat":2,"kind":3,"label":" uxTaskGetSystemState(TaskStatus_t *const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t *const pulTotalRunTime)","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetSystemState","textEdit":{"newText":"uxTaskGetSystemState(${1:TaskStatus_t *const pxTaskStatusArray}, ${2:const UBaseType_t uxArraySize}, ${3:uint32_t *const pulTotalRunTime})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Get the uxTCBNumber assigned to the task referenced by the xTask parameter."},"filterText":"uxTaskGetTaskNumber","insertText":"uxTaskGetTaskNumber(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" uxTaskGetTaskNumber(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429uxTaskGetTaskNumber","textEdit":{"newText":"uxTaskGetTaskNumber(${1:TaskHandle_t xTask})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Obtain the priority of any task.  \nINCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \n@param xTask Handle of the task to be queried. Passing a NULL handle results in the priority of the calling task being returned.  \n@return The priority of xTask.  \nExample usage:  \n@code{c} void vAFunction( void ) { TaskHandle_t xHandle;  \n// Create a task, storing the handle.  \nxTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );  \n// ...  \n// Use the handle to obtain the priority of the created task.  \n// It was created with tskIDLE_PRIORITY, but may have changed // it itself.  \nif( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY ) { // The task has changed it's priority.  \n}  \n// ...  \n// Is our priority higher than the created task?  \nif( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) ) { // Our priority (obtained using NULL handle) is higher.  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl"},"filterText":"uxTaskPriorityGet","insertText":"uxTaskPriorityGet(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" uxTaskPriorityGet(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429uxTaskPriorityGet","textEdit":{"newText":"uxTaskPriorityGet(${1:TaskHandle_t xTask})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"A version of uxTaskPriorityGet() that can be used from an ISR.  \n@param xTask Handle of the task to be queried. Passing a NULL handle results in the priority of the calling task being returned.  \n@return The priority of xTask."},"filterText":"uxTaskPriorityGetFromISR","insertText":"uxTaskPriorityGetFromISR(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" uxTaskPriorityGetFromISR(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429uxTaskPriorityGetFromISR","textEdit":{"newText":"uxTaskPriorityGetFromISR(${1:TaskHandle_t xTask})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE. THEY ARE USED BY THE EVENT BITS MODULE."},"filterText":"uxTaskResetEventItemValue","insertText":"uxTaskResetEventItemValue()","insertTextFormat":2,"kind":3,"label":" uxTaskResetEventItemValue()","score":2.2556054592132568,"sortText":"3fefa429uxTaskResetEventItemValue","textEdit":{"newText":"uxTaskResetEventItemValue()","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/portmacro.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"freertos/portmacro.h\"`  \nWrapper for the Xtensa compare-and-set instruction. This subroutine will atomically compare  \n\\*addr to 'compare'. If \\*addr == compare, \\*addr is set to \\*set. \\*set is updated with the previous value of \\*addr (either 'compare' or some other value.)  \nWarning: From the ISA docs: in some (unspecified) cases, the s32c1i instruction may return the  \n\\*bitwise inverse\\* of the old mem if the mem wasn't written. This doesn't seem to happen on the ESP32 (portMUX assertions would fail)."},"filterText":"uxPortCompareSet","insertText":"uxPortCompareSet(${1:volatile uint32_t *addr}, ${2:uint32_t compare}, ${3:uint32_t *set})","insertTextFormat":2,"kind":3,"label":"•uxPortCompareSet(volatile uint32_t *addr, uint32_t compare, uint32_t *set)","score":1.9036375284194946,"sortText":"400c559buxPortCompareSet","textEdit":{"newText":"uxPortCompareSet(${1:volatile uint32_t *addr}, ${2:uint32_t compare}, ${3:uint32_t *set})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/portable.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"freertos/portable.h\"`"},"filterText":"uxPortCompareSetExtram","insertText":"uxPortCompareSetExtram(${1:volatile uint32_t *addr}, ${2:uint32_t compare}, ${3:uint32_t *set})","insertTextFormat":2,"kind":3,"label":"•uxPortCompareSetExtram(volatile uint32_t *addr, uint32_t compare, uint32_t *set)","score":1.9036375284194946,"sortText":"400c559buxPortCompareSetExtram","textEdit":{"newText":"uxPortCompareSetExtram(${1:volatile uint32_t *addr}, ${2:uint32_t compare}, ${3:uint32_t *set})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Remove an item from a list. The list item has a pointer to the list that it is in, so only the list item need be passed into the function.  \n@param uxListRemove The item to be removed. The item will remove itself from the list pointed to by it's pxContainer parameter.  \n@return The number of items that remain in the list after the list item has been removed.  \n\\\\page uxListRemove uxListRemove  \n\\\\ingroup LinkedList"},"filterText":"uxListRemove","insertText":"uxListRemove(${1:ListItem_t *const pxItemToRemove})","insertTextFormat":2,"kind":3,"label":" uxListRemove(ListItem_t *const pxItemToRemove)","score":1.2690916061401367,"sortText":"405d8e68uxListRemove","textEdit":{"newText":"uxListRemove(${1:ListItem_t *const pxItemToRemove})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","filterText":"uxQueueGetQueueNumber","insertText":"uxQueueGetQueueNumber(${1:QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" uxQueueGetQueueNumber(QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68uxQueueGetQueueNumber","textEdit":{"newText":"uxQueueGetQueueNumber(${1:QueueHandle_t xQueue})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Return the number of messages stored in a queue.  \n@param xQueue A handle to the queue being queried.  \n@return The number of messages available in the queue.  \n\\\\ingroup QueueManagement"},"filterText":"uxQueueMessagesWaiting","insertText":"uxQueueMessagesWaiting(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" uxQueueMessagesWaiting(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68uxQueueMessagesWaiting","textEdit":{"newText":"uxQueueMessagesWaiting(${1:const QueueHandle_t xQueue})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","filterText":"uxQueueMessagesWaitingFromISR","insertText":"uxQueueMessagesWaitingFromISR(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" uxQueueMessagesWaitingFromISR(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68uxQueueMessagesWaitingFromISR","textEdit":{"newText":"uxQueueMessagesWaitingFromISR(${1:const QueueHandle_t xQueue})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"detail":"UBaseType_t","documentation":{"kind":"markdown","value":"Return the number of free spaces available in a queue. This is equal to the number of items that can be sent to the queue before the queue becomes full if no items are removed.  \n@param xQueue A handle to the queue being queried.  \n@return The number of spaces available in the queue.  \n\\\\ingroup QueueManagement"},"filterText":"uxQueueSpacesAvailable","insertText":"uxQueueSpacesAvailable(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" uxQueueSpacesAvailable(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68uxQueueSpacesAvailable","textEdit":{"newText":"uxQueueSpacesAvailable(${1:const QueueHandle_t xQueue})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}},{"filterText":"uxSemaphoreGetCount","insertText":"uxSemaphoreGetCount(${1:xSemaphore})","insertTextFormat":2,"kind":1,"label":" uxSemaphoreGetCount(xSemaphore)","score":0.68351686000823975,"sortText":"40d1050auxSemaphoreGetCount","textEdit":{"newText":"uxSemaphoreGetCount(${1:xSemaphore})","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}}}}]}}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":109,"jsonrpc":"2.0"}
<<<
Content-Length: 2005

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ux'","range":{"end":{"character":21,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":116}}Content-Length: 11744

{"id":109,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 462

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":21},"end":{"line":271,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":21}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'ux'"}]}},"id":110,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":110,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":111,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":111,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":117},"contentChanges":[{"range":{"start":{"line":271,"character":21},"end":{"line":271,"character":21}},"text":"T"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2006

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'uxT'","range":{"end":{"character":22,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":117}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":118},"contentChanges":[{"range":{"start":{"line":271,"character":22},"end":{"line":271,"character":22}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2007

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'uxTa'","range":{"end":{"character":23,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":118}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":119},"contentChanges":[{"range":{"start":{"line":271,"character":23},"end":{"line":271,"character":23}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":120},"contentChanges":[{"range":{"start":{"line":271,"character":24},"end":{"line":271,"character":24}},"text":"k"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2008

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'uxTas'","range":{"end":{"character":24,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":119}}Content-Length: 2009

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'uxTask'","range":{"end":{"character":25,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":120}}
>>>
Content-Length: 466

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":25},"end":{"line":271,"character":25}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'uxTask'"}]}},"id":112,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":112,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":113,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":113,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":121},"contentChanges":[{"range":{"start":{"line":271,"character":25},"end":{"line":271,"character":25}},"text":"G"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2010

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'uxTaskG'","range":{"end":{"character":26,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":121}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":122},"contentChanges":[{"range":{"start":{"line":271,"character":26},"end":{"line":271,"character":26}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2011

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'uxTaskGe'","range":{"end":{"character":27,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":122}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":123},"contentChanges":[{"range":{"start":{"line":271,"character":27},"end":{"line":271,"character":27}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2012

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'uxTaskGet'","range":{"end":{"character":28,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":123}}
>>>
Content-Length: 469

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":28},"end":{"line":271,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":28}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'uxTaskGet'"}]}},"id":114,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":114,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":115,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":115,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":124},"contentChanges":[{"range":{"start":{"line":271,"character":28},"end":{"line":271,"character":28}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2013

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'uxTaskGetS'","range":{"end":{"character":29,"line":271},"start":{"character":19,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":124}}
>>>
Content-Length: 470

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":29},"end":{"line":271,"character":29}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'uxTaskGetS'"}]}},"id":116,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":116,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":117,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":117,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 347

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":125},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":29}},"rangeLength":10,"text":"uxTaskGetStackHighWaterMark(TaskHandle_t xTask)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1826

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":59,"line":271},"start":{"character":47,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":125}}
>>>
Content-Length: 485

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":47},"end":{"line":271,"character":65}},"context":{"diagnostics":[{"range":{"start":{"line":271,"character":47},"end":{"line":271,"character":59}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'TaskHandle_t': expected expression"}]}},"id":118,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":118,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 301

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":126},"contentChanges":[{"range":{"start":{"line":271,"character":47},"end":{"line":271,"character":65}},"rangeLength":18,"text":"N"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":127},"contentChanges":[{"range":{"start":{"line":271,"character":48},"end":{"line":271,"character":48}},"text":"U"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2005

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'NU'","range":{"end":{"character":49,"line":271},"start":{"character":47,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":127}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":128},"contentChanges":[{"range":{"start":{"line":271,"character":49},"end":{"line":271,"character":49}},"text":"L"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":129},"contentChanges":[{"range":{"start":{"line":271,"character":50},"end":{"line":271,"character":50}},"text":"L"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2006

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'NUL'","range":{"end":{"character":50,"line":271},"start":{"character":47,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":128}}Content-Length: 1819

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":129}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":51},"end":{"line":271,"character":51}},"context":{"diagnostics":[]}},"id":119,"jsonrpc":"2.0"}
<<<
Content-Length: 363

{"id":119,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":51,"line":271},"start":{"character":51,"line":271}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":120,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":120,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":279},"start":{"character":0,"line":274}},"selectionRange":{"end":{"character":10,"line":274},"start":{"character":5,"line":274}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":309},"start":{"character":0,"line":281}},"selectionRange":{"end":{"character":10,"line":281},"start":{"character":5,"line":281}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":315},"start":{"character":0,"line":313}},"selectionRange":{"end":{"character":9,"line":313},"start":{"character":5,"line":313}}}]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":53},"end":{"line":271,"character":53}},"context":{"diagnostics":[]}},"id":121,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":121,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":130},"contentChanges":[{"range":{"start":{"line":271,"character":53},"end":{"line":271,"character":53}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1617

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":271},"start":{"character":4,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":130}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":54},"end":{"line":271,"character":54}},"context":{"diagnostics":[]}},"id":122,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":122,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":37}},"id":123,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":123,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t print(const char[])\n```"},"range":{"end":{"character":37,"line":270},"start":{"character":36,"line":270}}}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":131},"contentChanges":[{"range":{"start":{"line":270,"character":37},"end":{"line":270,"character":37}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":131}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":270,"character":38},"end":{"line":270,"character":38}},"context":{"diagnostics":[]}},"id":124,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":124,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":271,"character":54},"end":{"line":271,"character":54}},"context":{"diagnostics":[]}},"id":125,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":125,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 289

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":132},"contentChanges":[{"range":{"start":{"line":271,"character":54},"end":{"line":271,"character":54}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":132}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":133},"contentChanges":[{"range":{"start":{"line":272,"character":4},"end":{"line":272,"character":4}},"text":"S"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":5},"context":{"triggerKind":1}},"id":126,"jsonrpc":"2.0"}
<<<
Content-Length: 53013

{"id":126,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":24.359029769897461,"sortText":"3e3d20b5Serial","textEdit":{"newText":"Serial","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":13.502143859863281,"sortText":"3ea7f738serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":11.079595565795898,"sortText":"3eceb9faserialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"size_t","insertText":"size_t","insertTextFormat":2,"kind":8,"label":"•size_t","score":10.712376594543457,"sortText":"3ed49a1bsize_t","textEdit":{"newText":"size_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"String","documentation":{"kind":"markdown","value":"String receivedString;  \nVariable to store if sending data was successful"},"filterText":"success","insertText":"success","insertTextFormat":2,"kind":6,"label":" success","score":9.0014286041259766,"sortText":"3eeffa26success","textEdit":{"newText":"success","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"short","insertText":"short","insertTextFormat":2,"kind":14,"label":" short","score":8,"sortText":"3f000000short","textEdit":{"newText":"short","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"signed","insertText":"signed","insertTextFormat":2,"kind":14,"label":" signed","score":8,"sortText":"3f000000signed","textEdit":{"newText":"signed","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"size_t","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"kind":15,"label":" sizeof(expression-or-type)","score":8,"sortText":"3f000000sizeof","textEdit":{"newText":"sizeof(${0:expression-or-type})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"size_t","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"kind":15,"label":" sizeof...(parameter-pack)","score":8,"sortText":"3f000000sizeof...","textEdit":{"newText":"sizeof...(${0:parameter-pack})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"static","insertText":"static","insertTextFormat":2,"kind":14,"label":" static","score":8,"sortText":"3f000000static","textEdit":{"newText":"static","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"static_assert","insertText":"static_assert(${1:expression}, ${0:message});","insertTextFormat":2,"kind":15,"label":" static_assert(expression, message);","score":8,"sortText":"3f000000static_assert","textEdit":{"newText":"static_assert(${1:expression}, ${0:message});","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"static_cast","insertText":"static_cast<${1:type}>(${0:expression})","insertTextFormat":2,"kind":15,"label":" static_cast<type>(expression)","score":8,"sortText":"3f000000static_cast","textEdit":{"newText":"static_cast<${1:type}>(${0:expression})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"struct","insertText":"struct","insertTextFormat":2,"kind":14,"label":" struct","score":8,"sortText":"3f000000struct","textEdit":{"newText":"struct","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"switch","insertText":"switch (${1:condition}) {\n${0:cases}\n}","insertTextFormat":2,"kind":15,"label":" switch (condition) {cases}","score":8,"sortText":"3f000000switch","textEdit":{"newText":"switch (${1:condition}) {\n${0:cases}\n}","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nThe string class"},"filterText":"String","insertText":"String","insertTextFormat":2,"kind":7,"label":"•String","score":6.0775456428527832,"sortText":"3f3d84bfString","textEdit":{"newText":"String","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"Stream.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Stream.h\"`  \ncompatability macros for testing  \n#define getInt() parseInt()  \n#define getInt(skipChar) parseInt(skipchar)  \n#define getFloat() parseFloat()  \n#define getFloat(skipChar) parseFloat(skipChar)  \n#define getString( pre_string, post_string, buffer, length) readBytesBetween( pre_string, terminator, buffer, length)"},"filterText":"Stream","insertText":"Stream","insertTextFormat":2,"kind":7,"label":"•Stream","score":5.5006375312805176,"sortText":"3f4ffac7Stream","textEdit":{"newText":"Stream","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nAn inherited class for holding the result of a concatenation. These result objects are assumed to be writable by subsequent concatenations."},"filterText":"StringSumHelper","insertText":"StringSumHelper","insertTextFormat":2,"kind":7,"label":"•StringSumHelper","score":4.8400001525878906,"sortText":"3f651eb8StringSumHelper","textEdit":{"newText":"StringSumHelper","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"double","filterText":"sqrt","insertText":"sqrt(${1:double})","insertTextFormat":2,"kind":3,"label":" sqrt(double)","score":4.8400001525878906,"sortText":"3f651eb8sqrt","textEdit":{"newText":"sqrt(${1:double})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"[2 overloads]","filterText":"Stream","insertText":"Stream($0)","insertTextFormat":2,"kind":4,"label":" Stream(…)","score":4.4000000953674316,"sortText":"3f733333Stream","textEdit":{"newText":"Stream($0)","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"[13 overloads]","filterText":"String","insertText":"String($0)","insertTextFormat":2,"kind":4,"label":" String(…)","score":4.4000000953674316,"sortText":"3f733333String","textEdit":{"newText":"String($0)","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"[12 overloads]","filterText":"StringSumHelper","insertText":"StringSumHelper($0)","insertTextFormat":2,"kind":4,"label":" StringSumHelper(…)","score":4.4000000953674316,"sortText":"3f733333StringSumHelper","textEdit":{"newText":"StringSumHelper($0)","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"std","insertText":"std","insertTextFormat":2,"kind":9,"label":" std","score":3.5200002193450928,"sortText":"3f9eb851std","textEdit":{"newText":"std","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sprintf","insertText":"sprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sprintf(char *, const char *, ...)","score":2.2556054592132568,"sortText":"3fefa429sprintf","textEdit":{"newText":"sprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•strlen(const char *)","score":1.6522369384765625,"sortText":"402c8380strlen","textEdit":{"newText":"strlen(${1:const char *})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"SDA","insertText":"SDA","insertTextFormat":2,"kind":6,"label":"•SDA","score":1.5037370920181274,"sortText":"403f858bSDA","textEdit":{"newText":"SDA","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"STA_CONNECTED_BIT","insertText":"STA_CONNECTED_BIT","insertTextFormat":2,"kind":6,"label":"•STA_CONNECTED_BIT","score":1.5037370920181274,"sortText":"403f858bSTA_CONNECTED_BIT","textEdit":{"newText":"STA_CONNECTED_BIT","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"StaticSemaphore_t","insertText":"StaticSemaphore_t","insertTextFormat":2,"kind":8,"label":"•StaticSemaphore_t","score":1.5037370920181274,"sortText":"403f858bStaticSemaphore_t","textEdit":{"newText":"StaticSemaphore_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"scanf","insertText":"scanf(${1:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•scanf(const char *, ...)","score":1.5037370920181274,"sortText":"403f858bscanf","textEdit":{"newText":"scanf(${1:const char *, ...})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"Esp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Esp.h\"`"},"filterText":"sketchSize_t","insertText":"sketchSize_t","insertTextFormat":2,"kind":8,"label":"•sketchSize_t","score":1.5037370920181274,"sortText":"403f858bsketchSize_t","textEdit":{"newText":"sketchSize_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":1.5037370920181274,"sortText":"403f858bsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strchr","insertText":"strchr(${1:const char *}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•strchr(const char *, int)","score":1.5037370920181274,"sortText":"403f858bstrchr","textEdit":{"newText":"strchr(${1:const char *}, ${2:int})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcoll","insertText":"strcoll(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcoll(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcoll","textEdit":{"newText":"strcoll(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcspn","insertText":"strcspn(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcspn(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcspn","textEdit":{"newText":"strcspn(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strlcat(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrlcat","textEdit":{"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncasecmp(const char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncasecmp","textEdit":{"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncpy","insertText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncpy(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncpy","textEdit":{"newText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nGetting SSID and password of target AP"},"filterText":"SC_STATUS_GETTING_SSID_PSWD","insertText":"SC_STATUS_GETTING_SSID_PSWD","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_GETTING_SSID_PSWD","score":1.3747211694717407,"sortText":"40500923SC_STATUS_GETTING_SSID_PSWD","textEdit":{"newText":"SC_STATUS_GETTING_SSID_PSWD","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nConnected to AP successfully"},"filterText":"SC_STATUS_LINK_OVER","insertText":"SC_STATUS_LINK_OVER","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_LINK_OVER","score":1.3747211694717407,"sortText":"40500923SC_STATUS_LINK_OVER","textEdit":{"newText":"SC_STATUS_LINK_OVER","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \n@brief The callback of SmartConfig, executed when smart-config status changed.  \n@param status Status of SmartConfig:  \n\\- SC_STATUS_GETTING_SSID_PSWD : pdata is a pointer of smartconfig_type_t, means config type.  \n\\- SC_STATUS_LINK : pdata is a pointer to wifi_config_t.  \n\\- SC_STATUS_LINK_OVER : pdata is a pointer of phone's IP address(4 bytes) if pdata unequal NULL.  \n\\- otherwise : parameter void \\*pdata is NULL.  \n@param pdata According to the different status have different values."},"filterText":"sc_callback_t","insertText":"sc_callback_t","insertTextFormat":2,"kind":8,"label":"•sc_callback_t","score":1.3747211694717407,"sortText":"40500923sc_callback_t","textEdit":{"newText":"sc_callback_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaAttachPin","insertText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaAttachPin(uint8_t pin, uint8_t channel)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaAttachPin","textEdit":{"newText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaWrite","insertText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaWrite(uint8_t channel, uint8_t duty)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaWrite","textEdit":{"newText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nHelper functions to translate frequency to clock divider and back"},"filterText":"spiFrequencyToClockDiv","insertText":"spiFrequencyToClockDiv(${1:uint32_t freq})","insertTextFormat":2,"kind":3,"label":"•spiFrequencyToClockDiv(uint32_t freq)","score":1.3747211694717407,"sortText":"40500923spiFrequencyToClockDiv","textEdit":{"newText":"spiFrequencyToClockDiv(${1:uint32_t freq})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiGetClockDiv","insertText":"spiGetClockDiv(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiGetClockDiv(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiGetClockDiv","textEdit":{"newText":"spiGetClockDiv(${1:spi_t *spi})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nDeactivate enabled SPI_CSx pins"},"filterText":"spiSSClear","insertText":"spiSSClear(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSClear(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSClear","textEdit":{"newText":"spiSSClear(${1:spi_t *spi})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nEnable/Disable hardware control of SPI_CSx pins"},"filterText":"spiSSEnable","insertText":"spiSSEnable(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSEnable(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSEnable","textEdit":{"newText":"spiSSEnable(${1:spi_t *spi})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"spi_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiStartBus","insertText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","insertTextFormat":2,"kind":3,"label":"•spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder)","score":1.3747211694717407,"sortText":"40500923spiStartBus","textEdit":{"newText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteShortNL","insertText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteShortNL(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteShortNL","textEdit":{"newText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteWord","insertText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteWord(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteWord","textEdit":{"newText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"40500923system_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"SLEEP_MODE","insertText":"SLEEP_MODE","insertTextFormat":2,"kind":8,"label":"•SLEEP_MODE","score":1.2690916061401367,"sortText":"405d8e68SLEEP_MODE","textEdit":{"newText":"SLEEP_MODE","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_DIS","insertText":"STICK_PARITY_DIS","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_DIS","score":1.2690916061401367,"sortText":"405d8e68STICK_PARITY_DIS","textEdit":{"newText":"STICK_PARITY_DIS","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_EN","insertText":"STICK_PARITY_EN","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_EN","score":1.2690916061401367,"sortText":"405d8e68STICK_PARITY_EN","textEdit":{"newText":"STICK_PARITY_EN","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinh","insertText":"sinh(${1:double})","insertTextFormat":2,"kind":3,"label":"•sinh(double)","score":1.2690916061401367,"sortText":"405d8e68sinh","textEdit":{"newText":"sinh(${1:double})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinhf","insertText":"sinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•sinhf(float)","score":1.2690916061401367,"sortText":"405d8e68sinhf","textEdit":{"newText":"sinhf(${1:float})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_a","insertText":"step_a","insertTextFormat":2,"kind":20,"label":"•step_a","score":1.2690916061401367,"sortText":"405d8e68step_a","textEdit":{"newText":"step_a","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_b","insertText":"step_b","insertTextFormat":2,"kind":20,"label":"•step_b","score":1.2690916061401367,"sortText":"405d8e68step_b","textEdit":{"newText":"step_b","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"signbit","insertText":"std::signbit($0)","insertTextFormat":2,"kind":3,"label":"•std::signbit(…)","score":1.2531143426895142,"sortText":"405f99f3signbit","textEdit":{"newText":"std::signbit($0)","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sinh","insertText":"std::sinh(${1:float __x})","insertTextFormat":2,"kind":3,"label":"•std::sinh(float __x)","score":1.2531143426895142,"sortText":"405f99f3sinh","textEdit":{"newText":"std::sinh(${1:float __x})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sqrt","insertText":"std::sqrt(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::sqrt(long double __x)","score":1.2531143426895142,"sortText":"405f99f3sqrt","textEdit":{"newText":"std::sqrt(${1:long double __x})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/gpio_sd_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"gpio_sd_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/gpio_sd_struct.h\"`"},"filterText":"SIGMADELTA","insertText":"SIGMADELTA","insertTextFormat":2,"kind":6,"label":"•SIGMADELTA","score":1.1871124505996704,"sortText":"40680cb3SIGMADELTA","textEdit":{"newText":"SIGMADELTA","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn the maximum number of available memory regions which could be returned by soc_get_available_memory_regions(). Used to size the array passed to that function."},"filterText":"soc_get_available_memory_region_max_count","insertText":"soc_get_available_memory_region_max_count()","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_region_max_count()","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_region_max_count","textEdit":{"newText":"soc_get_available_memory_region_max_count()","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn available memory regions for this SoC. Each available memory region is a contiguous piece of memory which is not being used by static data, used by ROM code, or reserved by a component using the SOC_RESERVE_MEMORY_REGION() macro.  \nThis result is soc_memory_regions[] minus all regions reserved via the SOC_RESERVE_MEMORY_REGION() macro (which may also split some regions up.)  \nAt startup, all available memory returned by this function is registered as heap space.  \n@note OS-level startup function only, not recommended to call from app code.  \n@param regions Pointer to an array for reading available regions into.  \nSize of the array should be at least the result of soc_get_available_memory_region_max_count(). Entries in the array will be ordered by memory address.  \n@return Number of entries copied to 'regions'. Will be no greater than the result of soc_get_available_memory_region_max_count()."},"filterText":"soc_get_available_memory_regions","insertText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_regions(soc_memory_region_t *regions)","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_regions","textEdit":{"newText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_region_count","insertText":"soc_memory_region_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_region_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_count","textEdit":{"newText":"soc_memory_region_count","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory on a particular SoC."},"filterText":"soc_memory_region_t","insertText":"soc_memory_region_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_t","textEdit":{"newText":"soc_memory_region_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_region_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_regions","insertText":"soc_memory_regions","insertTextFormat":2,"kind":6,"label":"•soc_memory_regions","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_regions","textEdit":{"newText":"soc_memory_regions","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_type_count","insertText":"soc_memory_type_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_type_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_count","textEdit":{"newText":"soc_memory_type_count","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nType descriptor holds a description for a particular type of memory on a particular SoC."},"filterText":"soc_memory_type_desc_t","insertText":"soc_memory_type_desc_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_type_desc_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_desc_t","textEdit":{"newText":"soc_memory_type_desc_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_type_desc_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nConstant table of tag descriptors for all this SoC's tags"},"filterText":"soc_memory_types","insertText":"soc_memory_types","insertTextFormat":2,"kind":6,"label":"•soc_memory_types","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_types","textEdit":{"newText":"soc_memory_types","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory reserved on this SoC for a particular use (ie not available for stack/heap usage.)"},"filterText":"soc_reserved_region_t","insertText":"soc_reserved_region_t","insertTextFormat":2,"kind":8,"label":"•soc_reserved_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_reserved_region_t","textEdit":{"newText":"soc_reserved_region_t","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swscanf","insertText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swscanf(const wchar_t *, const wchar_t *, ...)","score":1.1826096773147583,"sortText":"4068a03fswscanf","textEdit":{"newText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalbln","insertText":"std::scalbln","insertTextFormat":2,"kind":18,"label":"•std::scalbln","score":1.1391948461532593,"sortText":"406e2eddscalbln","textEdit":{"newText":"std::scalbln","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnf","insertText":"std::scalblnf","insertTextFormat":2,"kind":18,"label":"•std::scalblnf","score":1.1391948461532593,"sortText":"406e2eddscalblnf","textEdit":{"newText":"std::scalblnf","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnl","insertText":"std::scalblnl","insertTextFormat":2,"kind":18,"label":"•std::scalblnl","score":1.1391948461532593,"sortText":"406e2eddscalblnl","textEdit":{"newText":"std::scalblnl","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_LSBFIRST","insertText":"SPI_BITORDER_LSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_LSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_LSBFIRST","textEdit":{"newText":"SPI_BITORDER_LSBFIRST","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_MSBFIRST","insertText":"SPI_BITORDER_MSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_MSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_MSBFIRST","textEdit":{"newText":"SPI_BITORDER_MSBFIRST","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sbrk","insertText":"sbrk(${1:ptrdiff_t __incr})","insertTextFormat":2,"kind":3,"label":"•sbrk(ptrdiff_t __incr)","score":1.1118042469024658,"sortText":"4071b066sbrk","textEdit":{"newText":"sbrk(${1:ptrdiff_t __incr})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}}}}]}}Content-Length: 1597

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S'","range":{"end":{"character":5,"line":272},"start":{"character":4,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":133}}
>>>
Content-Length: 457

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":5},"end":{"line":272,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":272,"character":4},"end":{"line":272,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'S'"}]}},"id":127,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":127,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":128,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":128,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":280},"start":{"character":0,"line":275}},"selectionRange":{"end":{"character":10,"line":275},"start":{"character":5,"line":275}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":310},"start":{"character":0,"line":282}},"selectionRange":{"end":{"character":10,"line":282},"start":{"character":5,"line":282}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":316},"start":{"character":0,"line":314}},"selectionRange":{"end":{"character":9,"line":314},"start":{"character":5,"line":314}}}]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":134},"contentChanges":[{"range":{"start":{"line":272,"character":5},"end":{"line":272,"character":5}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":6},"context":{"triggerKind":3}},"id":129,"jsonrpc":"2.0"}
<<<
Content-Length: 60467

{"id":129,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":24.359029769897461,"sortText":"3e3d20b5Serial","textEdit":{"newText":"Serial","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":13.502143859863281,"sortText":"3ea7f738serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":11.079595565795898,"sortText":"3eceb9faserialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":" HardwareSerial","score":7.2600007057189941,"sortText":"3fd1c28eHardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":6.6000003814697266,"sortText":"3fe19999HardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":2.2556054592132568,"sortText":"3fefa429Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":2.2556054592132568,"sortText":"3fefa429Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":2.2556054592132568,"sortText":"3fefa429serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","documentation":{"kind":"markdown","value":"Callback Function that sents message"},"filterText":"OnDataSent","insertText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","insertTextFormat":2,"kind":3,"label":" OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)","score":9.0014286041259766,"sortText":"3feffa26OnDataSent","textEdit":{"newText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"initLDRSensor","insertText":"initLDRSensor()","insertTextFormat":2,"kind":3,"label":" initLDRSensor()","score":9.0014286041259766,"sortText":"3feffa26initLDRSensor","textEdit":{"newText":"initLDRSensor()","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":" sensors_type_t","score":1.8537870645523071,"sortText":"4012b71bsensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"esp_now_send_cb_t","insertText":"esp_now_send_cb_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_cb_t","score":7.2600007057189941,"sortText":"4017ae13esp_now_send_cb_t","textEdit":{"newText":"esp_now_send_cb_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_COLOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GRAVITY","insertText":"SENSOR_TYPE_GRAVITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GRAVITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GRAVITY","textEdit":{"newText":"SENSOR_TYPE_GRAVITY","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_MAGNETIC_FIELD","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_OBJECT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_OBJECT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_OBJECT_TEMPERATURE","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PRESSURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PROXIMITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_VOLTAGE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"seed48","insertText":"seed48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•seed48(unsigned short *)","score":1.5037370920181274,"sortText":"403f858bseed48","textEdit":{"newText":"seed48(${1:unsigned short *})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":1.5037370920181274,"sortText":"403f858bsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":1.5037370920181274,"sortText":"403f858bsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"setenv","insertText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•setenv(const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"403f858bsetenv","textEdit":{"newText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":1.5037370920181274,"sortText":"403f858bsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":1.5037370920181274,"sortText":"403f858bsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`  \nfunction takes the following frequencies as valid values:  \n240, 160, 80 <<< For all XTAL types 40, 20, 10 <<< For 40MHz XTAL 26, 13 <<< For 26MHz XTAL 24, 12 <<< For 24MHz XTAL"},"filterText":"setCpuFrequencyMhz","insertText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","insertTextFormat":2,"kind":3,"label":"•setCpuFrequencyMhz(uint32_t cpu_freq_mhz)","score":1.3747211694717407,"sortText":"40500923setCpuFrequencyMhz","textEdit":{"newText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"filterText":"esp_now_send_status_t","insertText":"esp_now_send_status_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_status_t","score":5.4166908264160156,"sortText":"4052aa78esp_now_send_status_t","textEdit":{"newText":"esp_now_send_status_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*p : the pointer to output string.  \n@param int len : the string length.  \n@return None."},"filterText":"send_packet","insertText":"send_packet(${1:uint8_t *p}, ${2:int len})","insertTextFormat":2,"kind":3,"label":"•send_packet(uint8_t *p, int len)","score":1.2690916061401367,"sortText":"405d8e68send_packet","textEdit":{"newText":"send_packet(${1:uint8_t *p}, ${2:int len})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"405d8e68set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"detail":"esp_err_t","filterText":"esp_now_send","insertText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","insertTextFormat":2,"kind":3,"label":" esp_now_send(const uint8_t *peer_addr, const uint8_t *data, size_t len)","score":4.8400001525878906,"sortText":"40651eb8esp_now_send","textEdit":{"newText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"setlocale","insertText":"setlocale(${1:int category}, ${2:const char *locale})","insertTextFormat":2,"kind":3,"label":"•setlocale(int category, const char *locale)","score":1.1826096773147583,"sortText":"4068a03fsetlocale","textEdit":{"newText":"setlocale(${1:int category}, ${2:const char *locale})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"select","insertText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","insertTextFormat":2,"kind":3,"label":"•select(int nfds, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *errorfds, struct timeval *timeout)","score":1.1118042469024658,"sortText":"4071b066select","textEdit":{"newText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"setitimer","insertText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","insertTextFormat":2,"kind":3,"label":"•setitimer(int __which, const struct itimerval *__value, struct itimerval *__ovalue)","score":1.1118042469024658,"sortText":"4071b066setitimer","textEdit":{"newText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"settimeofday","insertText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","insertTextFormat":2,"kind":3,"label":"•settimeofday(const struct timeval *, const struct timezone *)","score":1.1118042469024658,"sortText":"4071b066settimeofday","textEdit":{"newText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setuid","insertText":"setuid(${1:uid_t __uid})","insertTextFormat":2,"kind":3,"label":"•setuid(uid_t __uid)","score":1.1118042469024658,"sortText":"4071b066setuid","textEdit":{"newText":"setuid(${1:uid_t __uid})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartBitsNum4Char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SEVEN_BITS","insertText":"SEVEN_BITS","insertTextFormat":2,"kind":20,"label":"•SEVEN_BITS","score":1.2690916061401367,"sortText":"4071dc9bSEVEN_BITS","textEdit":{"newText":"SEVEN_BITS","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_probe_req_rx_t","insertText":"system_event_ap_probe_req_rx_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_probe_req_rx_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_probe_req_rx_t","textEdit":{"newText":"system_event_ap_probe_req_rx_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staconnected_t","insertText":"system_event_ap_staconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staconnected_t","textEdit":{"newText":"system_event_ap_staconnected_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_stadisconnected_t","insertText":"system_event_ap_stadisconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_stadisconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_stadisconnected_t","textEdit":{"newText":"system_event_ap_stadisconnected_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staipassigned_t","insertText":"system_event_ap_staipassigned_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staipassigned_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staipassigned_t","textEdit":{"newText":"system_event_ap_staipassigned_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_got_ip6_t","insertText":"system_event_got_ip6_t","insertTextFormat":2,"kind":8,"label":"•system_event_got_ip6_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_got_ip6_t","textEdit":{"newText":"system_event_got_ip6_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_handler_t","insertText":"system_event_handler_t","insertTextFormat":2,"kind":8,"label":"•system_event_handler_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_handler_t","textEdit":{"newText":"system_event_handler_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_info_t","insertText":"system_event_info_t","insertTextFormat":2,"kind":8,"label":"•system_event_info_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_info_t","textEdit":{"newText":"system_event_info_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_authmode_change_t","insertText":"system_event_sta_authmode_change_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_authmode_change_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_authmode_change_t","textEdit":{"newText":"system_event_sta_authmode_change_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_connected_t","insertText":"system_event_sta_connected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_connected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_connected_t","textEdit":{"newText":"system_event_sta_connected_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_disconnected_t","insertText":"system_event_sta_disconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_disconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_disconnected_t","textEdit":{"newText":"system_event_sta_disconnected_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_got_ip_t","insertText":"system_event_sta_got_ip_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_got_ip_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_got_ip_t","textEdit":{"newText":"system_event_sta_got_ip_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_scan_done_t","insertText":"system_event_sta_scan_done_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_scan_done_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_scan_done_t","textEdit":{"newText":"system_event_sta_scan_done_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_fail_reason_t","insertText":"system_event_sta_wps_fail_reason_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_fail_reason_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_fail_reason_t","textEdit":{"newText":"system_event_sta_wps_fail_reason_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_t","insertText":"system_event_t","insertTextFormat":2,"kind":8,"label":"•system_event_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_t","textEdit":{"newText":"system_event_t","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"new_handler","documentation":{"kind":"markdown","value":"From `<new>`  \nTakes a replacement handler as the argument, returns the previous handler."},"filterText":"set_new_handler","insertText":"std::set_new_handler(${1:new_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_new_handler(new_handler)","score":0.98550808429718018,"sortText":"4083b5beset_new_handler","textEdit":{"newText":"std::set_new_handler(${1:new_handler})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"terminate_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_terminate","insertText":"std::set_terminate(${1:terminate_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_terminate(terminate_handler)","score":0.98550808429718018,"sortText":"4083b5beset_terminate","textEdit":{"newText":"std::set_terminate(${1:terminate_handler})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"unexpected_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_unexpected","insertText":"std::set_unexpected(${1:unexpected_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_unexpected(unexpected_handler)","score":0.98550808429718018,"sortText":"4083b5beset_unexpected","textEdit":{"newText":"std::set_unexpected(${1:unexpected_handler})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a matching sub-sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@param \\_\\_last2 A forward iterator.  \n@return The first iterator @c i in the range @p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2)) such that @c \\*(i+N) == @p  \n\\*(\\_\\_first2+N) for each @c N in the range @p [0,\\_\\_last2-\\_\\_first2), or @p \\_\\_last1 if no such iterator exists.  \nSearches the range @p [\\_\\_first1,\\_\\_last1) for a sub-sequence that compares equal value-by-value with the sequence given by @p [\\_\\_first2,\\_\\_last2) and returns an iterator to the first element of the sub-sequence, or @p \\_\\_last1 if the sub-sequence is not found.  \nBecause the sub-sequence must lie completely within the range @p [\\_\\_first1,\\_\\_last1) it must start at a position less than @p \\_\\_last1-(\\_\\_last2-\\_\\_first2) where @p \\_\\_last2-\\_\\_first2 is the length of the sub-sequence.  \nThis means that the returned iterator @c i will be in the range  \n@p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2))"},"filterText":"search","insertText":"std::search($0)","insertTextFormat":2,"kind":3,"label":"•std::search(…)","score":0.92650353908538818,"sortText":"4092d0aasearch","textEdit":{"newText":"std::search($0)","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a number of consecutive values.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first A forward iterator.  \n@param \\_\\_last A forward iterator.  \n@param \\_\\_count The number of consecutive values.  \n@param \\_\\_val The value to find.  \n@return The first iterator @c i in the range @p [\\_\\_first,\\_\\_last-\\_\\_count) such that @c \\*(i+N) == @p \\_\\_val for each @c N in the range @p [0,\\_\\_count), or @p \\_\\_last if no such iterator exists.  \nSearches the range @p [\\_\\_first,\\_\\_last) for @p count consecutive elements equal to @p \\_\\_val."},"filterText":"search_n","insertText":"std::search_n($0)","insertTextFormat":2,"kind":3,"label":"•std::search_n(…)","score":0.92650353908538818,"sortText":"4092d0aasearch_n","textEdit":{"newText":"std::search_n($0)","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <random>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<random>`  \n@brief The seed_seq class generates sequences of seeds for random number generators."},"filterText":"seed_seq","insertText":"std::seed_seq","insertTextFormat":2,"kind":7,"label":"•std::seed_seq","score":0.92650353908538818,"sortText":"4092d0aaseed_seq","textEdit":{"newText":"std::seed_seq","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the difference of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range.  \nIterators increment for each range. When the current element of the first range is less than the second according to @p \\_\\_comp, that element is copied and the iterator advances. If the current element of the second range is less, no element is copied and the iterator advances.  \nIf an element is contained in both ranges according to @p \\_\\_comp, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_difference","insertText":"std::set_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_difference","textEdit":{"newText":"std::set_difference($0)","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.92650353908538818,"sortText":"4092d0aaset_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the symmetric difference of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is less than the other, that element is copied and the iterator advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_symmetric_difference","insertText":"std::set_symmetric_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_symmetric_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_symmetric_difference","textEdit":{"newText":"std::set_symmetric_difference($0)","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the union of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is less than the other,  \nthat element is copied and the iterator advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_union","insertText":"std::set_union($0)","insertTextFormat":2,"kind":3,"label":"•std::set_union(…)","score":0.92650353908538818,"sortText":"4092d0aaset_union","textEdit":{"newText":"std::set_union($0)","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.91311287879943848,"sortText":"40963e3csetsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"send","insertText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•send(int s, const void *dataptr, size_t size, int flags)","score":0.90964943170547485,"sortText":"40972137send","textEdit":{"newText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendmsg","insertText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•sendmsg(int s, const struct msghdr *message, int flags)","score":0.90964943170547485,"sortText":"40972137sendmsg","textEdit":{"newText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendto","insertText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•sendto(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964943170547485,"sortText":"40972137sendto","textEdit":{"newText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <clocale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<clocale>`"},"filterText":"setlocale","insertText":"std::setlocale","insertTextFormat":2,"kind":18,"label":"•std::setlocale","score":0.8959164023399353,"sortText":"409aa539setlocale","textEdit":{"newText":"std::setlocale","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station connected to ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STACONNECTED","insertText":"SYSTEM_EVENT_AP_STACONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STACONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STACONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STACONNECTED","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station disconnected from ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STADISCONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STADISCONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STADISCONNECTED","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet phy link up"},"filterText":"SYSTEM_EVENT_ETH_CONNECTED","insertText":"SYSTEM_EVENT_ETH_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_ETH_CONNECTED","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet got IP from connected AP"},"filterText":"SYSTEM_EVENT_ETH_GOT_IP","insertText":"SYSTEM_EVENT_ETH_GOT_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_GOT_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_GOT_IP","textEdit":{"newText":"SYSTEM_EVENT_ETH_GOT_IP","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet stop"},"filterText":"SYSTEM_EVENT_ETH_STOP","insertText":"SYSTEM_EVENT_ETH_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_STOP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_STOP","textEdit":{"newText":"SYSTEM_EVENT_ETH_STOP","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nthe auth mode of AP connected by ESP32 station changed"},"filterText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_AUTHMODE_CHANGE","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_AUTHMODE_CHANGE","textEdit":{"newText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station connected to AP"},"filterText":"SYSTEM_EVENT_STA_CONNECTED","insertText":"SYSTEM_EVENT_STA_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_STA_CONNECTED","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station lost IP and the IP is reset to 0"},"filterText":"SYSTEM_EVENT_STA_LOST_IP","insertText":"SYSTEM_EVENT_STA_LOST_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_LOST_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_LOST_IP","textEdit":{"newText":"SYSTEM_EVENT_STA_LOST_IP","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}}}}]}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":135},"contentChanges":[{"range":{"start":{"line":272,"character":6},"end":{"line":272,"character":6}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1598

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Se'","range":{"end":{"character":6,"line":272},"start":{"character":4,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":134}}
>>>
Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":7},"context":{"triggerKind":3}},"id":130,"jsonrpc":"2.0"}
<<<
Content-Length: 64566

{"id":130,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":24.359029769897461,"sortText":"3e3d20b5Serial","textEdit":{"newText":"Serial","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":13.502143859863281,"sortText":"3ea7f738serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":11.079595565795898,"sortText":"3eceb9faserialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":7.2600007057189941,"sortText":"3f787ae0HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":6.6000003814697266,"sortText":"3f899998HardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":2.2556054592132568,"sortText":"3fefa429Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":2.2556054592132568,"sortText":"3fefa429Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":2.2556054592132568,"sortText":"3fefa429serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"4078a156set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":1.2639456987380981,"sortText":"40792ddbSERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase a range of flash sectors  \n@param start_address Address where erase operation has to start.  \nMust be 4kB-aligned  \n@param size Size of erased range, in bytes. Must be divisible by 4kB.  \n@return esp_err_t"},"filterText":"spi_flash_erase_range","insertText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_range(size_t start_address, size_t size)","score":1.1118041276931763,"sortText":"40aa889bspi_flash_erase_range","textEdit":{"newText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase the Flash sector.  \n@param sector Sector number, the count starts at sector 0, 4KB per sector.  \n@return esp_err_t"},"filterText":"spi_flash_erase_sector","insertText":"spi_flash_erase_sector(${1:size_t sector})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_sector(size_t sector)","score":1.1118041276931763,"sortText":"40aa889bspi_flash_erase_sector","textEdit":{"newText":"spi_flash_erase_sector(${1:size_t sector})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747210502624512,"sortText":"40b2b554system_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiServer.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WiFiServer.h\"`"},"filterText":"WiFiServer","insertText":"WiFiServer","insertTextFormat":2,"kind":7,"label":"•WiFiServer","score":1.5585578680038452,"sortText":"40b8812dWiFiServer","textEdit":{"newText":"WiFiServer","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.8448631763458252,"sortText":"40cbc334SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_seed48_r","insertText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•_seed48_r(struct _reent *, unsigned short *)","score":1.5037370920181274,"sortText":"40df99f3_seed48_r","textEdit":{"newText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_setenv_r","insertText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•_setenv_r(struct _reent *, const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"40df99f3_setenv_r","textEdit":{"newText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps overlap in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps succeeds in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_SUCCESS","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_SUCCESS","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nset cache attribute (access modes) for a range of memory"},"filterText":"xthal_set_region_attribute","insertText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_attribute(void *addr, unsigned int size, unsigned int cattr, unsigned int flags)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_attribute","textEdit":{"newText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation","insertText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation(void *vaddr, void *paddr, unsigned int size, unsigned int cache_atr, unsigned int flags)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_translation","textEdit":{"newText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation_raw","insertText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation_raw(void *vaddr, void *paddr, unsigned int cattr)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_translation_raw","textEdit":{"newText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"_setlocale_r","insertText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","insertTextFormat":2,"kind":3,"label":"•_setlocale_r(struct _reent *, int category, const char *locale)","score":1.1826096773147583,"sortText":"4103b5bd_setlocale_r","textEdit":{"newText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"sys/errno.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const char *const []","documentation":{"kind":"markdown","value":"From `\"sys/errno.h\"`  \nPlease don't use these variables directly.  \nUse strerror instead."},"filterText":"_sys_errlist","insertText":"_sys_errlist","insertTextFormat":2,"kind":6,"label":"•_sys_errlist","score":1.1118042469024658,"sortText":"4112d0aa_sys_errlist","textEdit":{"newText":"_sys_errlist","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Install the driver's GPIO ISR handler service, which allows per-pin GPIO interrupt handlers.  \nThis function is incompatible with gpio_isr_register() - if that function is used, a single global ISR is registered for all GPIO interrupts. If this function is used, the ISR service provides a global GPIO ISR and individual pin handlers are registered via the gpio_isr_handler_add() function.  \n@param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred) ESP_INTR_FLAG\\_\\* values. See esp_intr_alloc.h for more info.  \n@return  \n\\- ESP_OK Success  \n\\- ESP_ERR_NO_MEM No memory to install this service  \n\\- ESP_ERR_INVALID_STATE ISR service already installed.  \n\\- ESP_ERR_NOT_FOUND No free interrupt found with the specified flags  \n\\- ESP_ERR_INVALID_ARG GPIO error"},"filterText":"gpio_install_isr_service","insertText":"gpio_install_isr_service(${1:int intr_alloc_flags})","insertTextFormat":2,"kind":3,"label":"•gpio_install_isr_service(int intr_alloc_flags)","score":1.1118042469024658,"sortText":"4112d0aagpio_install_isr_service","textEdit":{"newText":"gpio_install_isr_service(${1:int intr_alloc_flags})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Uninstall the driver's GPIO ISR service, freeing related resources."},"filterText":"gpio_uninstall_isr_service","insertText":"gpio_uninstall_isr_service()","insertTextFormat":2,"kind":3,"label":"•gpio_uninstall_isr_service()","score":1.1118042469024658,"sortText":"4112d0aagpio_uninstall_isr_service","textEdit":{"newText":"gpio_uninstall_isr_service()","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-rmt.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-rmt.h\"`  \nSetting threshold for Rx completed"},"filterText":"rmtSetRxThreshold","insertText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","insertTextFormat":2,"kind":3,"label":"•rmtSetRxThreshold(rmt_obj_t *rmt, uint32_t value)","score":1.3747211694717407,"sortText":"41156184rmtSetRxThreshold","textEdit":{"newText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747211694717407,"sortText":"41156184uartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/dns.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"lwip/dns.h\"`"},"filterText":"dns_clear_servers","insertText":"dns_clear_servers(${1:bool keep_fallback})","insertTextFormat":2,"kind":3,"label":"•dns_clear_servers(bool keep_fallback)","score":0.90964943170547485,"sortText":"41172137dns_clear_servers","textEdit":{"newText":"dns_clear_servers(${1:bool keep_fallback})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase some sectors.  \nPlease do not call this function in SDK.  \n@param uint32_t start_addr : Start addr to erase, should be sector aligned.  \n@param uint32_t area_len : Length to erase, should be sector aligned.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_area","insertText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_area(uint32_t start_addr, uint32_t area_len)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_area","textEdit":{"newText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a 64KB block of flash Uses SPI flash command D8H.  \nPlease do not call this function in SDK.  \n@param uint32_t block_num : Which block to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_block","insertText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_block(uint32_t block_num)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_block","textEdit":{"newText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase whole flash chip.  \nPlease do not call this function in SDK.  \n@param None  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_chip","insertText":"esp_rom_spiflash_erase_chip()","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_chip()","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_chip","textEdit":{"newText":"esp_rom_spiflash_erase_chip()","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a sector of flash.  \nUses SPI flash command 20H.  \nPlease do not call this function in SDK.  \n@param uint32_t sector_num : Which sector to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_sector","insertText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_sector(uint32_t sector_num)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_sector","textEdit":{"newText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nTrampoline support functions:"},"filterText":"xthal_tram_pending_to_service","insertText":"xthal_tram_pending_to_service()","insertTextFormat":2,"kind":3,"label":"•xthal_tram_pending_to_service()","score":1.2690917253494263,"sortText":"41276889xthal_tram_pending_to_service","textEdit":{"newText":"xthal_tram_pending_to_service()","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \n@brief Read Hall Sensor  \n@note When the power switch of SARADC1, SARADC2, HALL sensor and AMP sensor is turned on,  \nthe input of GPIO36 and GPIO39 will be pulled down for about 80ns.  \nWhen enabling power for any of these peripherals, ignore input from GPIO36 and GPIO39.  \nPlease refer to section 3.11 of 'ECO_and_Workarounds_for_Bugs_in_ESP32' for the description of this issue.  \n@note The Hall Sensor uses channels 0 and 3 of ADC1. Do not configure these channels for use as ADC channels.  \n@note The ADC1 module must be enabled by calling adc1_config_width() before calling hall_sensor_read(). ADC1 should be configured for 12 bit readings, as the hall sensor readings are low values and do not cover the full range of the ADC.  \n@return The hall sensor reading."},"filterText":"hall_sensor_read","insertText":"hall_sensor_read()","insertTextFormat":2,"kind":3,"label":"•hall_sensor_read()","score":0.96751213073730469,"sortText":"413198efhall_sensor_read","textEdit":{"newText":"hall_sensor_read()","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_send_r","insertText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_send_r(int s, const void *dataptr, size_t size, int flags)","score":0.90964937210083008,"sortText":"413df103lwip_send_r","textEdit":{"newText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendmsg_r","insertText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_sendmsg_r(int s, const struct msghdr *message, int flags)","score":0.90964937210083008,"sortText":"413df103lwip_sendmsg_r","textEdit":{"newText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendto_r","insertText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•lwip_sendto_r(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964937210083008,"sortText":"413df103lwip_sendto_r","textEdit":{"newText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_setsockopt_r","insertText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•lwip_setsockopt_r(int s, int level, int optname, const void *optval, socklen_t optlen)","score":0.90964937210083008,"sortText":"413df103lwip_setsockopt_r","textEdit":{"newText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"COOKIE_SERVER","insertText":"COOKIE_SERVER","insertTextFormat":2,"kind":20,"label":"•COOKIE_SERVER","score":0.8448631763458252,"sortText":"414bc334COOKIE_SERVER","textEdit":{"newText":"COOKIE_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"IMPRESS_SERVER","insertText":"IMPRESS_SERVER","insertTextFormat":2,"kind":20,"label":"•IMPRESS_SERVER","score":0.8448631763458252,"sortText":"414bc334IMPRESS_SERVER","textEdit":{"newText":"IMPRESS_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LOG_SERVER","insertText":"LOG_SERVER","insertTextFormat":2,"kind":20,"label":"•LOG_SERVER","score":0.8448631763458252,"sortText":"414bc334LOG_SERVER","textEdit":{"newText":"LOG_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LPR_SERVER","insertText":"LPR_SERVER","insertTextFormat":2,"kind":20,"label":"•LPR_SERVER","score":0.8448631763458252,"sortText":"414bc334LPR_SERVER","textEdit":{"newText":"LPR_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"NAME_SERVER","insertText":"NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NAME_SERVER","score":0.8448631763458252,"sortText":"414bc334NAME_SERVER","textEdit":{"newText":"NAME_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NAME_SERVICE_SEARCH","insertText":"NAME_SERVICE_SEARCH","insertTextFormat":2,"kind":20,"label":"•NAME_SERVICE_SEARCH","score":0.8448631763458252,"sortText":"414bc334NAME_SERVICE_SEARCH","textEdit":{"newText":"NAME_SERVICE_SEARCH","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NDS_SERVERS","insertText":"NDS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NDS_SERVERS","score":0.8448631763458252,"sortText":"414bc334NDS_SERVERS","textEdit":{"newText":"NDS_SERVERS","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NNTP_SERVER","insertText":"NNTP_SERVER","insertTextFormat":2,"kind":20,"label":"•NNTP_SERVER","score":0.8448631763458252,"sortText":"414bc334NNTP_SERVER","textEdit":{"newText":"NNTP_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"SMTP_SERVER","insertText":"SMTP_SERVER","insertTextFormat":2,"kind":20,"label":"•SMTP_SERVER","score":0.8448631763458252,"sortText":"414bc334SMTP_SERVER","textEdit":{"newText":"SMTP_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_SERVER","insertText":"STREETTALK_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_SERVER","score":0.8448631763458252,"sortText":"414bc334STREETTALK_SERVER","textEdit":{"newText":"STREETTALK_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"SWAP_SERVER","insertText":"SWAP_SERVER","insertTextFormat":2,"kind":20,"label":"•SWAP_SERVER","score":0.8448631763458252,"sortText":"414bc334SWAP_SERVER","textEdit":{"newText":"SWAP_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"TFTP_SERVER_NAME","insertText":"TFTP_SERVER_NAME","insertTextFormat":2,"kind":20,"label":"•TFTP_SERVER_NAME","score":0.8448631763458252,"sortText":"414bc334TFTP_SERVER_NAME","textEdit":{"newText":"TFTP_SERVER_NAME","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"TIME_SERVER","insertText":"TIME_SERVER","insertTextFormat":2,"kind":20,"label":"•TIME_SERVER","score":0.8448631763458252,"sortText":"414bc334TIME_SERVER","textEdit":{"newText":"TIME_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"detail":"uint32_t","filterText":"esp_dport_access_sequence_reg_read","insertText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":" esp_dport_access_sequence_reg_read(uint32_t reg)","score":1.3747211694717407,"sortText":"41500923esp_dport_access_sequence_reg_read","textEdit":{"newText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"soc/dport_access.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"soc/dport_access.h\"`  \n@brief Read value from register, NOT SMP-safe version.  \nThis method uses the pre-reading of the APB register before reading the register of the DPORT.  \nThere is not disable/enable interrupt.  \nThe difference from DPORT_REG_READ() is that the user himself must disable interrupts while DPORT reading.  \nThis implementation is useful for reading DORT registers in loop without stall other CPU. Note the usage example.  \nThe recommended way to read registers sequentially without stall other CPU is to use the method esp_dport_read_buffer(buff_out, address, num_words). It allows you to read registers in the buffer.  \n\\\\code{c} // This example shows how to use it.  \n{ // Use curly brackets to limit the visibility of variables in macros DPORT_INTERRUPT_DISABLE/RESTORE.  \nDPORT_INTERRUPT_DISABLE(); // Disable interrupt only on current CPU.  \nfor (i = 0; i < max; ++i) { array[i] = DPORT_SEQUENCE_REG_READ(Address + i * 4); // reading DPORT registers } DPORT_INTERRUPT_RESTORE(); // restore the previous interrupt level }  \n\\\\endcode  \n@param reg Register address  \n@return Value"},"filterText":"DPORT_SEQUENCE_REG_READ","insertText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":"•DPORT_SEQUENCE_REG_READ(uint32_t reg)","score":1.1826096773147583,"sortText":"4168a03fDPORT_SEQUENCE_REG_READ","textEdit":{"newText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_FINGER_SERVER","insertText":"DEFAULT_FINGER_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_FINGER_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_FINGER_SERVER","textEdit":{"newText":"DEFAULT_FINGER_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_IRC_SERVER","insertText":"DEFAULT_IRC_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_IRC_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_IRC_SERVER","textEdit":{"newText":"DEFAULT_IRC_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_WWW_SERVER","insertText":"DEFAULT_WWW_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_WWW_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_WWW_SERVER","textEdit":{"newText":"DEFAULT_WWW_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"DOMAIN_NAME_SERVER","insertText":"DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•DOMAIN_NAME_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDOMAIN_NAME_SERVER","textEdit":{"newText":"DOMAIN_NAME_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVERS","insertText":"NETWORK_INFORMATION_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVERS","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVERS","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_DOMAIN","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_DOMAIN","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_PLUS_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"POP3_SERVER","insertText":"POP3_SERVER","insertTextFormat":2,"kind":20,"label":"•POP3_SERVER","score":0.84486329555511475,"sortText":"416fcf5cPOP3_SERVER","textEdit":{"newText":"POP3_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"RESOURCE_LOCATION_SERVER","insertText":"RESOURCE_LOCATION_SERVER","insertTextFormat":2,"kind":20,"label":"•RESOURCE_LOCATION_SERVER","score":0.84486329555511475,"sortText":"416fcf5cRESOURCE_LOCATION_SERVER","textEdit":{"newText":"RESOURCE_LOCATION_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_TIME_PROTOCOL_SERVERS","insertText":"NETWORK_TIME_PROTOCOL_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_TIME_PROTOCOL_SERVERS","score":0.84486323595046997,"sortText":"41a7b70bNETWORK_TIME_PROTOCOL_SERVERS","textEdit":{"newText":"NETWORK_TIME_PROTOCOL_SERVERS","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_DIRECTORY_ASSISTANCE_SERVER","score":0.84486323595046997,"sortText":"41a7b70bSTREETTALK_DIRECTORY_ASSISTANCE_SERVER","textEdit":{"newText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"tcpip_adapter.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"tcpip_adapter_dhcp_option_id_t","documentation":{"kind":"markdown","value":"From `\"tcpip_adapter.h\"`  \nDomain name server"},"filterText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•TCPIP_ADAPTER_DOMAIN_NAME_SERVER","score":0.93569719791412354,"sortText":"41e04ec4TCPIP_ADAPTER_DOMAIN_NAME_SERVER","textEdit":{"newText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"X_WINDOW_SYSTEM_FONT_SERVER","insertText":"X_WINDOW_SYSTEM_FONT_SERVER","insertTextFormat":2,"kind":20,"label":"•X_WINDOW_SYSTEM_FONT_SERVER","score":0.84486329555511475,"sortText":"41efcf5cX_WINDOW_SYSTEM_FONT_SERVER","textEdit":{"newText":"X_WINDOW_SYSTEM_FONT_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`"},"filterText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertTextFormat":2,"kind":20,"label":"•ESP_ROM_SPIFLASH_RESULT_ERR","score":1.2690917253494263,"sortText":"42276889ESP_ROM_SPIFLASH_RESULT_ERR","textEdit":{"newText":"ESP_ROM_SPIFLASH_RESULT_ERR","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp_system.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"deprecated":true,"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_system.h\"`  \n@brief Read hardware MAC address.  \nFunction has been renamed to esp_efuse_mac_get_default.  \nThis name will be removed in a future release.  \n@param mac hardware MAC address, length: 6 bytes.  \n@return ESP_OK on success"},"filterText":"system_efuse_read_mac","insertText":"system_efuse_read_mac(${1:uint8_t *mac})","insertTextFormat":2,"kind":3,"label":"•system_efuse_read_mac(uint8_t *mac)","score":0.13747210800647736,"sortText":"42444e03system_efuse_read_mac","textEdit":{"newText":"system_efuse_read_mac(${1:uint8_t *mac})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NETBIOS_OVER_TCP_IP_NAME_SERVER","score":0.84486329555511475,"sortText":"426fcf5cNETBIOS_OVER_TCP_IP_NAME_SERVER","textEdit":{"newText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `<list>`"},"filterText":"__throw_system_error","insertText":"std::__throw_system_error(${1:int})","insertTextFormat":2,"kind":3,"label":"•std::__throw_system_error(int)","score":0.092650346457958221,"sortText":"430300b6__throw_system_error","textEdit":{"newText":"std::__throw_system_error(${1:int})","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}}}}]}}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":131,"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":136},"contentChanges":[{"range":{"start":{"line":272,"character":7},"end":{"line":272,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1599

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Ser'","range":{"end":{"character":7,"line":272},"start":{"character":4,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":135}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":131,"jsonrpc":"2.0"}
>>>
Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":8},"context":{"triggerKind":3}},"id":132,"jsonrpc":"2.0"}
<<<
Content-Length: 17167

{"id":132,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":24.359029769897461,"sortText":"3e3d20b5Serial","textEdit":{"newText":"Serial","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":13.502143859863281,"sortText":"3ea7f738serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":11.079595565795898,"sortText":"3eceb9faserialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":7.2600007057189941,"sortText":"3f6047adHardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":6.6000003814697266,"sortText":"3f6eccccHardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":2.2556054592132568,"sortText":"3fefa429Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":2.2556054592132568,"sortText":"3fefa429Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":2.2556054592132568,"sortText":"3fefa429serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":1.2639456987380981,"sortText":"407c8cb6SERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.9373098611831665,"sortText":"40bd0a20SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.84486329555511475,"sortText":"40eb4dd7SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747212886810303,"sortText":"41240b6buartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}}}}]}}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":133,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":133,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":280},"start":{"character":0,"line":275}},"selectionRange":{"end":{"character":10,"line":275},"start":{"character":5,"line":275}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":310},"start":{"character":0,"line":282}},"selectionRange":{"end":{"character":10,"line":282},"start":{"character":5,"line":282}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":316},"start":{"character":0,"line":314}},"selectionRange":{"end":{"character":9,"line":314},"start":{"character":5,"line":314}}}]}Content-Length: 1600

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seri'","range":{"end":{"character":8,"line":272},"start":{"character":4,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":136}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":137},"contentChanges":[{"range":{"start":{"line":272,"character":8},"end":{"line":272,"character":8}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":138},"contentChanges":[{"range":{"start":{"line":272,"character":9},"end":{"line":272,"character":9}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1980

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h:116:23:\nnote: 'Serial' declared here","range":{"end":{"character":9,"line":272},"start":{"character":4,"line":272}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":137}}Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":138}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":10},"end":{"line":272,"character":10}},"context":{"diagnostics":[]}},"id":134,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":134,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":135,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":135,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":280},"start":{"character":0,"line":275}},"selectionRange":{"end":{"character":10,"line":275},"start":{"character":5,"line":275}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":310},"start":{"character":0,"line":282}},"selectionRange":{"end":{"character":10,"line":282},"start":{"character":5,"line":282}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":316},"start":{"character":0,"line":314}},"selectionRange":{"end":{"character":9,"line":314},"start":{"character":5,"line":314}}}]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":139},"contentChanges":[{"range":{"start":{"line":272,"character":10},"end":{"line":272,"character":10}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 258

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":11},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":136,"jsonrpc":"2.0"}
<<<
Content-Length: 9143

{"id":136,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"[14 overloads]","filterText":"print","insertText":"print($0)","insertTextFormat":2,"kind":2,"label":" print(…)","score":13.596538543701172,"sortText":"3ea67494print","textEdit":{"newText":"print($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"[15 overloads]","filterText":"println","insertText":"println($0)","insertTextFormat":2,"kind":2,"label":" println(…)","score":12.132729530334473,"sortText":"3ebde057println","textEdit":{"newText":"println($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"int","filterText":"available","insertText":"available()","insertTextFormat":2,"kind":2,"label":" available()","score":9.6800003051757812,"sortText":"3ee51eb8available","textEdit":{"newText":"available()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"int","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"kind":2,"label":" availableForWrite()","score":9.6800003051757812,"sortText":"3ee51eb8availableForWrite","textEdit":{"newText":"availableForWrite()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"uint32_t","filterText":"baudRate","insertText":"baudRate()","insertTextFormat":2,"kind":2,"label":" baudRate()","score":9.6800003051757812,"sortText":"3ee51eb8baudRate","textEdit":{"newText":"baudRate()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"void","filterText":"begin","insertText":"begin(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" begin(unsigned long baud, uint32_t config = SERIAL_8N1, int8_t rxPin = -1, int8_t txPin = -1, bool invert = false, unsigned long timeout_ms = 20000UL)","score":9.6800003051757812,"sortText":"3ee51eb8begin","textEdit":{"newText":"begin(${1:unsigned long baud})","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"void","filterText":"end","insertText":"end()","insertTextFormat":2,"kind":2,"label":" end()","score":9.6800003051757812,"sortText":"3ee51eb8end","textEdit":{"newText":"end()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"[2 overloads]","filterText":"flush","insertText":"flush($0)","insertTextFormat":2,"kind":2,"label":" flush(…)","score":9.6800003051757812,"sortText":"3ee51eb8flush","textEdit":{"newText":"flush($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"int","filterText":"peek","insertText":"peek()","insertTextFormat":2,"kind":2,"label":" peek()","score":9.6800003051757812,"sortText":"3ee51eb8peek","textEdit":{"newText":"peek()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"[3 overloads]","filterText":"read","insertText":"read($0)","insertTextFormat":2,"kind":2,"label":" read(…)","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"void","filterText":"setDebugOutput","insertText":"setDebugOutput(${1:bool})","insertTextFormat":2,"kind":2,"label":" setDebugOutput(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setDebugOutput","textEdit":{"newText":"setDebugOutput(${1:bool})","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"size_t","filterText":"setRxBufferSize","insertText":"setRxBufferSize(${1:size_t})","insertTextFormat":2,"kind":2,"label":" setRxBufferSize(size_t)","score":9.6800003051757812,"sortText":"3ee51eb8setRxBufferSize","textEdit":{"newText":"setRxBufferSize(${1:size_t})","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"void","filterText":"setRxInvert","insertText":"setRxInvert(${1:bool})","insertTextFormat":2,"kind":2,"label":" setRxInvert(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setRxInvert","textEdit":{"newText":"setRxInvert(${1:bool})","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"void","filterText":"updateBaudRate","insertText":"updateBaudRate(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" updateBaudRate(unsigned long baud)","score":9.6800003051757812,"sortText":"3ee51eb8updateBaudRate","textEdit":{"newText":"updateBaudRate(${1:unsigned long baud})","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"[8 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":9.6800003051757812,"sortText":"3ee51eb8write","textEdit":{"newText":"write($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"size_t","filterText":"printf","insertText":"printf(${1:const char *format, ...})","insertTextFormat":2,"kind":2,"label":" printf(const char *format, ...)","score":7.2600007057189941,"sortText":"3f17ae13printf","textEdit":{"newText":"printf(${1:const char *format, ...})","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"void","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"kind":2,"label":" clearWriteError()","score":4.8400001525878906,"sortText":"3f651eb8clearWriteError","textEdit":{"newText":"clearWriteError()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"[5 overloads]","filterText":"find","insertText":"find($0)","insertTextFormat":2,"kind":2,"label":" find(…)","score":4.8400001525878906,"sortText":"3f651eb8find","textEdit":{"newText":"find($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"[4 overloads]","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"kind":2,"label":" findUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8findUntil","textEdit":{"newText":"findUntil($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"unsigned long","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"kind":2,"label":" getTimeout()","score":4.8400001525878906,"sortText":"3f651eb8getTimeout","textEdit":{"newText":"getTimeout()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"int","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"kind":2,"label":" getWriteError()","score":4.8400001525878906,"sortText":"3f651eb8getWriteError","textEdit":{"newText":"getWriteError()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"float","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"kind":2,"label":" parseFloat()","score":4.8400001525878906,"sortText":"3f651eb8parseFloat","textEdit":{"newText":"parseFloat()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"long","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"kind":2,"label":" parseInt()","score":4.8400001525878906,"sortText":"3f651eb8parseInt","textEdit":{"newText":"parseInt()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"[2 overloads]","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"kind":2,"label":" readBytes(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytes","textEdit":{"newText":"readBytes($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"[2 overloads]","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"kind":2,"label":" readBytesUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytesUntil","textEdit":{"newText":"readBytesUntil($0)","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"String","filterText":"readString","insertText":"readString()","insertTextFormat":2,"kind":2,"label":" readString()","score":4.8400001525878906,"sortText":"3f651eb8readString","textEdit":{"newText":"readString()","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"String","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"kind":2,"label":" readStringUntil(char terminator)","score":4.8400001525878906,"sortText":"3f651eb8readStringUntil","textEdit":{"newText":"readStringUntil(${1:char terminator})","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}},{"detail":"void","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"kind":2,"label":" setTimeout(unsigned long timeout)","score":4.8400001525878906,"sortText":"3f651eb8setTimeout","textEdit":{"newText":"setTimeout(${1:unsigned long timeout})","range":{"end":{"character":11,"line":272},"start":{"character":11,"line":272}}}}]}}Content-Length: 1593

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":139}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":140},"contentChanges":[{"range":{"start":{"line":272,"character":11},"end":{"line":272,"character":11}},"text":"p"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":141},"contentChanges":[{"range":{"start":{"line":272,"character":12},"end":{"line":272,"character":12}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1799

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'p' in 'HardwareSerial'","range":{"end":{"character":12,"line":272},"start":{"character":11,"line":272}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":140}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":142},"contentChanges":[{"range":{"start":{"line":272,"character":13},"end":{"line":272,"character":13}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1800

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pr' in 'HardwareSerial'","range":{"end":{"character":13,"line":272},"start":{"character":11,"line":272}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":141}}Content-Length: 1801

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pri' in 'HardwareSerial'","range":{"end":{"character":14,"line":272},"start":{"character":11,"line":272}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":142}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":143},"contentChanges":[{"range":{"start":{"line":272,"character":14},"end":{"line":272,"character":14}},"text":"n"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":144},"contentChanges":[{"range":{"start":{"line":272,"character":15},"end":{"line":272,"character":15}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1802

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'prin' in 'HardwareSerial'","range":{"end":{"character":15,"line":272},"start":{"character":11,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":143}}Content-Length: 3519

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:81:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:82:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:83:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:84:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:85:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:86:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:87:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:88:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:89:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:90:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:91:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:92:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:93:12:\nnote: possible target for call\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:94:12:\nnote: possible target for call","range":{"end":{"character":16,"line":272},"start":{"character":4,"line":272}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":144}}
>>>
Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":145},"contentChanges":[{"range":{"start":{"line":272,"character":16},"end":{"line":272,"character":16}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":146},"contentChanges":[{"range":{"start":{"line":272,"character":17},"end":{"line":272,"character":18}},"rangeLength":1,"text":")"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4287

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"ovl_no_viable_member_function_in_call","message":"No matching member function for call to 'print'\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:81:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:82:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:83:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:84:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:93:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:85:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:86:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:87:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:88:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:89:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:90:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:91:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:92:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:94:12:\nnote: candidate function not viable: requires at least argument 'timeinfo', but no arguments were provided","range":{"end":{"character":16,"line":272},"start":{"character":4,"line":272}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":145}}
>>>
Content-Length: 210

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":18}},"id":137,"jsonrpc":"2.0"}
<<<
Content-Length: 93

{"id":137,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[]}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":17},"end":{"line":272,"character":17}},"context":{"diagnostics":[]}},"id":138,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":138,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 287

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":147},"contentChanges":[{"range":{"start":{"line":272,"character":17},"end":{"line":272,"character":17}},"text":"\"\""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":147}}
>>>
Content-Length: 301

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":148},"contentChanges":[{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":19}},"rangeLength":1,"text":"\""}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":19},"end":{"line":272,"character":19}},"context":{"diagnostics":[]}},"id":139,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":139,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":18}},"context":{"diagnostics":[]}},"id":140,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":140,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":149},"contentChanges":[{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":18}},"text":"H"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":149}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":150},"contentChanges":[{"range":{"start":{"line":272,"character":19},"end":{"line":272,"character":19}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":150}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":151},"contentChanges":[{"range":{"start":{"line":272,"character":20},"end":{"line":272,"character":20}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":151}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":152},"contentChanges":[{"range":{"start":{"line":272,"character":21},"end":{"line":272,"character":21}},"text":"p"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":152}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":153},"contentChanges":[{"range":{"start":{"line":272,"character":22},"end":{"line":272,"character":22}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":153}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":154},"contentChanges":[{"range":{"start":{"line":272,"character":23},"end":{"line":272,"character":23}},"text":"b"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":154}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":155},"contentChanges":[{"range":{"start":{"line":272,"character":24},"end":{"line":272,"character":24}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":156},"contentChanges":[{"range":{"start":{"line":272,"character":25},"end":{"line":272,"character":25}},"text":"f"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":155}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":157},"contentChanges":[{"range":{"start":{"line":272,"character":26},"end":{"line":272,"character":26}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":156}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":158},"contentChanges":[{"range":{"start":{"line":272,"character":27},"end":{"line":272,"character":27}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":157}}Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":158}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":28},"end":{"line":272,"character":28}},"context":{"diagnostics":[]}},"id":141,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":141,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":159},"contentChanges":[{"range":{"start":{"line":272,"character":28},"end":{"line":272,"character":28}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":159}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":160},"contentChanges":[{"range":{"start":{"line":272,"character":29},"end":{"line":272,"character":29}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":161},"contentChanges":[{"range":{"start":{"line":272,"character":30},"end":{"line":272,"character":30}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":160}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":162},"contentChanges":[{"range":{"start":{"line":272,"character":31},"end":{"line":272,"character":31}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":161}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":163},"contentChanges":[{"range":{"start":{"line":272,"character":32},"end":{"line":272,"character":32}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":162}}Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":163}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":164},"contentChanges":[{"range":{"start":{"line":272,"character":33},"end":{"line":272,"character":33}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":164}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":165},"contentChanges":[{"range":{"start":{"line":272,"character":34},"end":{"line":272,"character":34}},"text":"o"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":166},"contentChanges":[{"range":{"start":{"line":272,"character":35},"end":{"line":272,"character":35}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":165}}Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":166}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":167},"contentChanges":[{"range":{"start":{"line":272,"character":36},"end":{"line":272,"character":36}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":167}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":168},"contentChanges":[{"range":{"start":{"line":272,"character":37},"end":{"line":272,"character":37}},"text":"("}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":169},"contentChanges":[{"range":{"start":{"line":272,"character":38},"end":{"line":272,"character":38}},"text":")"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":168}}
>>>
Content-Length: 210

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":39}},"id":142,"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":169}}Content-Length: 1405

{"id":142,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"print(char) -> size_t","parameters":[{"label":[6,10]}]},{"label":"print(const char *) -> size_t","parameters":[{"label":[6,18]}]},{"label":"print(const String &) -> size_t","parameters":[{"label":[6,20]}]},{"label":"print(const Printable &) -> size_t","parameters":[{"label":[6,23]}]},{"label":"print(const __FlashStringHelper *) -> size_t","parameters":[{"label":[6,33]}]},{"label":"print(int, int = DEC) -> size_t","parameters":[{"label":[6,9]},{"label":[11,20]}]},{"label":"print(double, int = 2) -> size_t","parameters":[{"label":[6,12]},{"label":[14,21]}]},{"label":"print(long, int = DEC) -> size_t","parameters":[{"label":[6,10]},{"label":[12,21]}]},{"label":"print(long long, int = DEC) -> size_t","parameters":[{"label":[6,15]},{"label":[17,26]}]},{"label":"print(unsigned int, int = DEC) -> size_t","parameters":[{"label":[6,18]},{"label":[20,29]}]},{"label":"print(unsigned char, int = DEC) -> size_t","parameters":[{"label":[6,19]},{"label":[21,30]}]},{"label":"print(unsigned long, int = DEC) -> size_t","parameters":[{"label":[6,19]},{"label":[21,30]}]},{"label":"print(unsigned long long, int = DEC) -> size_t","parameters":[{"label":[6,24]},{"label":[26,35]}]},{"label":"print(struct tm *timeinfo, const char *format = NULL) -> size_t","parameters":[{"label":[6,25]},{"label":[27,52]}]}]}}
>>>
Content-Length: 210

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":38}},"id":143,"jsonrpc":"2.0"}
<<<
Content-Length: 1405

{"id":143,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"print(char) -> size_t","parameters":[{"label":[6,10]}]},{"label":"print(const char *) -> size_t","parameters":[{"label":[6,18]}]},{"label":"print(const String &) -> size_t","parameters":[{"label":[6,20]}]},{"label":"print(const Printable &) -> size_t","parameters":[{"label":[6,23]}]},{"label":"print(const __FlashStringHelper *) -> size_t","parameters":[{"label":[6,33]}]},{"label":"print(int, int = DEC) -> size_t","parameters":[{"label":[6,9]},{"label":[11,20]}]},{"label":"print(double, int = 2) -> size_t","parameters":[{"label":[6,12]},{"label":[14,21]}]},{"label":"print(long, int = DEC) -> size_t","parameters":[{"label":[6,10]},{"label":[12,21]}]},{"label":"print(long long, int = DEC) -> size_t","parameters":[{"label":[6,15]},{"label":[17,26]}]},{"label":"print(unsigned int, int = DEC) -> size_t","parameters":[{"label":[6,18]},{"label":[20,29]}]},{"label":"print(unsigned char, int = DEC) -> size_t","parameters":[{"label":[6,19]},{"label":[21,30]}]},{"label":"print(unsigned long, int = DEC) -> size_t","parameters":[{"label":[6,19]},{"label":[21,30]}]},{"label":"print(unsigned long long, int = DEC) -> size_t","parameters":[{"label":[6,24]},{"label":[26,35]}]},{"label":"print(struct tm *timeinfo, const char *format = NULL) -> size_t","parameters":[{"label":[6,25]},{"label":[27,52]}]}]}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":170},"contentChanges":[{"range":{"start":{"line":272,"character":38},"end":{"line":272,"character":38}},"text":"B"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":170}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":171},"contentChanges":[{"range":{"start":{"line":272,"character":39},"end":{"line":272,"character":39}},"text":"y"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":171}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":172},"contentChanges":[{"range":{"start":{"line":272,"character":40},"end":{"line":272,"character":40}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":172}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":173},"contentChanges":[{"range":{"start":{"line":272,"character":41},"end":{"line":272,"character":41}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":173}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":174},"contentChanges":[{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":42}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":174}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":44},"end":{"line":272,"character":44}},"context":{"diagnostics":[]}},"id":144,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":144,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":43}},"id":145,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":145,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":175},"contentChanges":[{"range":{"start":{"line":272,"character":43},"end":{"line":272,"character":43}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":176},"contentChanges":[{"range":{"start":{"line":272,"character":43},"end":{"line":272,"character":44}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":43},"end":{"line":272,"character":43}},"context":{"diagnostics":[]}},"id":146,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":146,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":177},"contentChanges":[{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":43}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":177}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":178},"contentChanges":[{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":42}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":178}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":42}},"id":147,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":147,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":18}},"context":{"diagnostics":[]}},"id":148,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":148,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":179},"contentChanges":[{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":18}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":179}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":47},"end":{"line":272,"character":47}},"context":{"diagnostics":[]}},"id":149,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":149,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":44},"end":{"line":272,"character":44}},"context":{"diagnostics":[]}},"id":150,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":150,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":45}},"context":{"diagnostics":[]}},"id":151,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":151,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":180},"contentChanges":[{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":45}},"text":"L"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":180}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":181},"contentChanges":[{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":46}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":181}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":49},"end":{"line":272,"character":49}},"context":{"diagnostics":[]}},"id":152,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":152,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":182},"contentChanges":[{"range":{"start":{"line":272,"character":48},"end":{"line":272,"character":49}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1795

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected ')'\n\nEsp_Master.ino.cpp:273:17: note: to match this '('","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"},{"message":"To match this '('\n\nEsp_Master.ino.cpp:274:1: error: expected ')'","range":{"end":{"character":17,"line":272},"start":{"character":16,"line":272}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":182}}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":183},"contentChanges":[{"range":{"start":{"line":272,"character":47},"end":{"line":272,"character":48}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1968

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":47,"line":272},"start":{"character":17,"line":272}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:249:30: note: to match this '{'","range":{"end":{"character":0,"line":318},"start":{"character":0,"line":318}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:319:1: error: expected '}'","range":{"end":{"character":30,"line":248},"start":{"character":29,"line":248}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":183}}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":184},"contentChanges":[{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":47}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":185},"contentChanges":[{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":46}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1968

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":46,"line":272},"start":{"character":17,"line":272}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:249:30: note: to match this '{'","range":{"end":{"character":0,"line":318},"start":{"character":0,"line":318}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:319:1: error: expected '}'","range":{"end":{"character":30,"line":248},"start":{"character":29,"line":248}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":184}}Content-Length: 1968

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":45,"line":272},"start":{"character":17,"line":272}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:249:30: note: to match this '{'","range":{"end":{"character":0,"line":318},"start":{"character":0,"line":318}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:319:1: error: expected '}'","range":{"end":{"character":30,"line":248},"start":{"character":29,"line":248}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":185}}
>>>
Content-Length: 449

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":45}},"context":{"diagnostics":[{"range":{"start":{"line":272,"character":17},"end":{"line":272,"character":45}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":153,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":153,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":186},"contentChanges":[{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":45}},"text":":"}]},"jsonrpc":"2.0"}Content-Length: 258

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":46},"context":{"triggerKind":2,"triggerCharacter":":"}},"id":154,"jsonrpc":"2.0"}
<<<
Content-Length: 69

{"id":154,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 1968

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":46,"line":272},"start":{"character":17,"line":272}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:249:30: note: to match this '{'","range":{"end":{"character":0,"line":318},"start":{"character":0,"line":318}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:319:1: error: expected '}'","range":{"end":{"character":30,"line":248},"start":{"character":29,"line":248}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":186}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":187},"contentChanges":[{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":46}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1968

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":47,"line":272},"start":{"character":17,"line":272}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:249:30: note: to match this '{'","range":{"end":{"character":0,"line":318},"start":{"character":0,"line":318}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:319:1: error: expected '}'","range":{"end":{"character":30,"line":248},"start":{"character":29,"line":248}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":187}}
>>>
Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":188},"contentChanges":[{"range":{"start":{"line":272,"character":47},"end":{"line":272,"character":47}},"text":"\""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1795

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected ')'\n\nEsp_Master.ino.cpp:273:17: note: to match this '('","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"},{"message":"To match this '('\n\nEsp_Master.ino.cpp:274:1: error: expected ')'","range":{"end":{"character":17,"line":272},"start":{"character":16,"line":272}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":188}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":48},"end":{"line":272,"character":48}},"context":{"diagnostics":[]}},"id":155,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":155,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":189},"contentChanges":[{"range":{"start":{"line":272,"character":48},"end":{"line":272,"character":48}},"text":")"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":273},"start":{"character":0,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":189}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":190},"contentChanges":[{"range":{"start":{"line":272,"character":49},"end":{"line":272,"character":49}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":190}}
>>>
Content-Length: 289

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":191},"contentChanges":[{"range":{"start":{"line":272,"character":50},"end":{"line":272,"character":50}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":191}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":192},"contentChanges":[{"range":{"start":{"line":273,"character":4},"end":{"line":273,"character":4}},"text":"S"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":5},"context":{"triggerKind":1}},"id":156,"jsonrpc":"2.0"}
<<<
Content-Length: 53013

{"id":156,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":24.595098495483398,"sortText":"3e3b3d3dSerial","textEdit":{"newText":"Serial","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":13.502143859863281,"sortText":"3ea7f738serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":11.079595565795898,"sortText":"3eceb9faserialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"size_t","insertText":"size_t","insertTextFormat":2,"kind":8,"label":"•size_t","score":10.712376594543457,"sortText":"3ed49a1bsize_t","textEdit":{"newText":"size_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"String","documentation":{"kind":"markdown","value":"String receivedString;  \nVariable to store if sending data was successful"},"filterText":"success","insertText":"success","insertTextFormat":2,"kind":6,"label":" success","score":9.0014286041259766,"sortText":"3eeffa26success","textEdit":{"newText":"success","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"short","insertText":"short","insertTextFormat":2,"kind":14,"label":" short","score":8,"sortText":"3f000000short","textEdit":{"newText":"short","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"signed","insertText":"signed","insertTextFormat":2,"kind":14,"label":" signed","score":8,"sortText":"3f000000signed","textEdit":{"newText":"signed","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"size_t","filterText":"sizeof","insertText":"sizeof(${0:expression-or-type})","insertTextFormat":2,"kind":15,"label":" sizeof(expression-or-type)","score":8,"sortText":"3f000000sizeof","textEdit":{"newText":"sizeof(${0:expression-or-type})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"size_t","filterText":"sizeof...","insertText":"sizeof...(${0:parameter-pack})","insertTextFormat":2,"kind":15,"label":" sizeof...(parameter-pack)","score":8,"sortText":"3f000000sizeof...","textEdit":{"newText":"sizeof...(${0:parameter-pack})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"static","insertText":"static","insertTextFormat":2,"kind":14,"label":" static","score":8,"sortText":"3f000000static","textEdit":{"newText":"static","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"static_assert","insertText":"static_assert(${1:expression}, ${0:message});","insertTextFormat":2,"kind":15,"label":" static_assert(expression, message);","score":8,"sortText":"3f000000static_assert","textEdit":{"newText":"static_assert(${1:expression}, ${0:message});","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"static_cast","insertText":"static_cast<${1:type}>(${0:expression})","insertTextFormat":2,"kind":15,"label":" static_cast<type>(expression)","score":8,"sortText":"3f000000static_cast","textEdit":{"newText":"static_cast<${1:type}>(${0:expression})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"struct","insertText":"struct","insertTextFormat":2,"kind":14,"label":" struct","score":8,"sortText":"3f000000struct","textEdit":{"newText":"struct","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"switch","insertText":"switch (${1:condition}) {\n${0:cases}\n}","insertTextFormat":2,"kind":15,"label":" switch (condition) {cases}","score":8,"sortText":"3f000000switch","textEdit":{"newText":"switch (${1:condition}) {\n${0:cases}\n}","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nThe string class"},"filterText":"String","insertText":"String","insertTextFormat":2,"kind":7,"label":"•String","score":6.0775456428527832,"sortText":"3f3d84bfString","textEdit":{"newText":"String","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"Stream.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Stream.h\"`  \ncompatability macros for testing  \n#define getInt() parseInt()  \n#define getInt(skipChar) parseInt(skipchar)  \n#define getFloat() parseFloat()  \n#define getFloat(skipChar) parseFloat(skipChar)  \n#define getString( pre_string, post_string, buffer, length) readBytesBetween( pre_string, terminator, buffer, length)"},"filterText":"Stream","insertText":"Stream","insertTextFormat":2,"kind":7,"label":"•Stream","score":5.5006375312805176,"sortText":"3f4ffac7Stream","textEdit":{"newText":"Stream","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"WString.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WString.h\"`  \nAn inherited class for holding the result of a concatenation. These result objects are assumed to be writable by subsequent concatenations."},"filterText":"StringSumHelper","insertText":"StringSumHelper","insertTextFormat":2,"kind":7,"label":"•StringSumHelper","score":4.8400001525878906,"sortText":"3f651eb8StringSumHelper","textEdit":{"newText":"StringSumHelper","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"double","filterText":"sqrt","insertText":"sqrt(${1:double})","insertTextFormat":2,"kind":3,"label":" sqrt(double)","score":4.8400001525878906,"sortText":"3f651eb8sqrt","textEdit":{"newText":"sqrt(${1:double})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"[2 overloads]","filterText":"Stream","insertText":"Stream($0)","insertTextFormat":2,"kind":4,"label":" Stream(…)","score":4.4000000953674316,"sortText":"3f733333Stream","textEdit":{"newText":"Stream($0)","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"[13 overloads]","filterText":"String","insertText":"String($0)","insertTextFormat":2,"kind":4,"label":" String(…)","score":4.4000000953674316,"sortText":"3f733333String","textEdit":{"newText":"String($0)","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"[12 overloads]","filterText":"StringSumHelper","insertText":"StringSumHelper($0)","insertTextFormat":2,"kind":4,"label":" StringSumHelper(…)","score":4.4000000953674316,"sortText":"3f733333StringSumHelper","textEdit":{"newText":"StringSumHelper($0)","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"std","insertText":"std","insertTextFormat":2,"kind":9,"label":" std","score":3.5200002193450928,"sortText":"3f9eb851std","textEdit":{"newText":"std","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"sprintf","insertText":"sprintf(${1:char *}, ${2:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•sprintf(char *, const char *, ...)","score":2.2556054592132568,"sortText":"3fefa429sprintf","textEdit":{"newText":"sprintf(${1:char *}, ${2:const char *, ...})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.8537870645523071,"sortText":"4012b71bSENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlen","insertText":"strlen(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•strlen(const char *)","score":1.6522369384765625,"sortText":"402c8380strlen","textEdit":{"newText":"strlen(${1:const char *})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"SDA","insertText":"SDA","insertTextFormat":2,"kind":6,"label":"•SDA","score":1.5037370920181274,"sortText":"403f858bSDA","textEdit":{"newText":"SDA","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"STA_CONNECTED_BIT","insertText":"STA_CONNECTED_BIT","insertTextFormat":2,"kind":6,"label":"•STA_CONNECTED_BIT","score":1.5037370920181274,"sortText":"403f858bSTA_CONNECTED_BIT","textEdit":{"newText":"STA_CONNECTED_BIT","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"StaticSemaphore_t","insertText":"StaticSemaphore_t","insertTextFormat":2,"kind":8,"label":"•StaticSemaphore_t","score":1.5037370920181274,"sortText":"403f858bStaticSemaphore_t","textEdit":{"newText":"StaticSemaphore_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"scanf","insertText":"scanf(${1:const char *, ...})","insertTextFormat":2,"kind":3,"label":"•scanf(const char *, ...)","score":1.5037370920181274,"sortText":"403f858bscanf","textEdit":{"newText":"scanf(${1:const char *, ...})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"Esp.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Esp.h\"`"},"filterText":"sketchSize_t","insertText":"sketchSize_t","insertTextFormat":2,"kind":8,"label":"•sketchSize_t","score":1.5037370920181274,"sortText":"403f858bsketchSize_t","textEdit":{"newText":"sketchSize_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"srand","insertText":"srand(${1:unsigned int __seed})","insertTextFormat":2,"kind":3,"label":"•srand(unsigned int __seed)","score":1.5037370920181274,"sortText":"403f858bsrand","textEdit":{"newText":"srand(${1:unsigned int __seed})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strchr","insertText":"strchr(${1:const char *}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•strchr(const char *, int)","score":1.5037370920181274,"sortText":"403f858bstrchr","textEdit":{"newText":"strchr(${1:const char *}, ${2:int})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcoll","insertText":"strcoll(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcoll(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcoll","textEdit":{"newText":"strcoll(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strcspn","insertText":"strcspn(${1:const char *}, ${2:const char *})","insertTextFormat":2,"kind":3,"label":"•strcspn(const char *, const char *)","score":1.5037370920181274,"sortText":"403f858bstrcspn","textEdit":{"newText":"strcspn(${1:const char *}, ${2:const char *})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strlcat","insertText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strlcat(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrlcat","textEdit":{"newText":"strlcat(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncasecmp","insertText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncasecmp(const char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncasecmp","textEdit":{"newText":"strncasecmp(${1:const char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"string.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"string.h\"`"},"filterText":"strncpy","insertText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","insertTextFormat":2,"kind":3,"label":"•strncpy(char *, const char *, size_t)","score":1.5037370920181274,"sortText":"403f858bstrncpy","textEdit":{"newText":"strncpy(${1:char *}, ${2:const char *}, ${3:size_t})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nGetting SSID and password of target AP"},"filterText":"SC_STATUS_GETTING_SSID_PSWD","insertText":"SC_STATUS_GETTING_SSID_PSWD","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_GETTING_SSID_PSWD","score":1.3747211694717407,"sortText":"40500923SC_STATUS_GETTING_SSID_PSWD","textEdit":{"newText":"SC_STATUS_GETTING_SSID_PSWD","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"smartconfig_status_t","documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \nConnected to AP successfully"},"filterText":"SC_STATUS_LINK_OVER","insertText":"SC_STATUS_LINK_OVER","insertTextFormat":2,"kind":20,"label":"•SC_STATUS_LINK_OVER","score":1.3747211694717407,"sortText":"40500923SC_STATUS_LINK_OVER","textEdit":{"newText":"SC_STATUS_LINK_OVER","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 soft-AP stop"},"filterText":"SYSTEM_EVENT_AP_STOP","insertText":"SYSTEM_EVENT_AP_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_AP_STOP","textEdit":{"newText":"SYSTEM_EVENT_AP_STOP","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station stop"},"filterText":"SYSTEM_EVENT_STA_STOP","insertText":"SYSTEM_EVENT_STA_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_STOP","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_STOP","textEdit":{"newText":"SYSTEM_EVENT_STA_STOP","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40500923SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_smartconfig.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_smartconfig.h\"`  \n@brief The callback of SmartConfig, executed when smart-config status changed.  \n@param status Status of SmartConfig:  \n\\- SC_STATUS_GETTING_SSID_PSWD : pdata is a pointer of smartconfig_type_t, means config type.  \n\\- SC_STATUS_LINK : pdata is a pointer to wifi_config_t.  \n\\- SC_STATUS_LINK_OVER : pdata is a pointer of phone's IP address(4 bytes) if pdata unequal NULL.  \n\\- otherwise : parameter void \\*pdata is NULL.  \n@param pdata According to the different status have different values."},"filterText":"sc_callback_t","insertText":"sc_callback_t","insertTextFormat":2,"kind":8,"label":"•sc_callback_t","score":1.3747211694717407,"sortText":"40500923sc_callback_t","textEdit":{"newText":"sc_callback_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaAttachPin","insertText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaAttachPin(uint8_t pin, uint8_t channel)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaAttachPin","textEdit":{"newText":"sigmaDeltaAttachPin(${1:uint8_t pin}, ${2:uint8_t channel})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-sigmadelta.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-sigmadelta.h\"`"},"filterText":"sigmaDeltaWrite","insertText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","insertTextFormat":2,"kind":3,"label":"•sigmaDeltaWrite(uint8_t channel, uint8_t duty)","score":1.3747211694717407,"sortText":"40500923sigmaDeltaWrite","textEdit":{"newText":"sigmaDeltaWrite(${1:uint8_t channel}, ${2:uint8_t duty})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nHelper functions to translate frequency to clock divider and back"},"filterText":"spiFrequencyToClockDiv","insertText":"spiFrequencyToClockDiv(${1:uint32_t freq})","insertTextFormat":2,"kind":3,"label":"•spiFrequencyToClockDiv(uint32_t freq)","score":1.3747211694717407,"sortText":"40500923spiFrequencyToClockDiv","textEdit":{"newText":"spiFrequencyToClockDiv(${1:uint32_t freq})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiGetClockDiv","insertText":"spiGetClockDiv(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiGetClockDiv(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiGetClockDiv","textEdit":{"newText":"spiGetClockDiv(${1:spi_t *spi})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nDeactivate enabled SPI_CSx pins"},"filterText":"spiSSClear","insertText":"spiSSClear(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSClear(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSClear","textEdit":{"newText":"spiSSClear(${1:spi_t *spi})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`  \nEnable/Disable hardware control of SPI_CSx pins"},"filterText":"spiSSEnable","insertText":"spiSSEnable(${1:spi_t *spi})","insertTextFormat":2,"kind":3,"label":"•spiSSEnable(spi_t *spi)","score":1.3747211694717407,"sortText":"40500923spiSSEnable","textEdit":{"newText":"spiSSEnable(${1:spi_t *spi})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"spi_t *","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiStartBus","insertText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","insertTextFormat":2,"kind":3,"label":"•spiStartBus(uint8_t spi_num, uint32_t clockDiv, uint8_t dataMode, uint8_t bitOrder)","score":1.3747211694717407,"sortText":"40500923spiStartBus","textEdit":{"newText":"spiStartBus(${1:uint8_t spi_num}, ${2:uint32_t clockDiv}, ${3:uint8_t dataMode}, ${4:uint8_t bitOrder})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteShortNL","insertText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteShortNL(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteShortNL","textEdit":{"newText":"spiWriteShortNL(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-spi.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-spi.h\"`"},"filterText":"spiWriteWord","insertText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","insertTextFormat":2,"kind":3,"label":"•spiWriteWord(spi_t *spi, uint16_t data)","score":1.3747211694717407,"sortText":"40500923spiWriteWord","textEdit":{"newText":"spiWriteWord(${1:spi_t *spi}, ${2:uint16_t data})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"40500923system_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"SLEEP_MODE","insertText":"SLEEP_MODE","insertTextFormat":2,"kind":8,"label":"•SLEEP_MODE","score":1.2690916061401367,"sortText":"405d8e68SLEEP_MODE","textEdit":{"newText":"SLEEP_MODE","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_DIS","insertText":"STICK_PARITY_DIS","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_DIS","score":1.2690916061401367,"sortText":"405d8e68STICK_PARITY_DIS","textEdit":{"newText":"STICK_PARITY_DIS","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartExistParity","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"STICK_PARITY_EN","insertText":"STICK_PARITY_EN","insertTextFormat":2,"kind":20,"label":"•STICK_PARITY_EN","score":1.2690916061401367,"sortText":"405d8e68STICK_PARITY_EN","textEdit":{"newText":"STICK_PARITY_EN","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinh","insertText":"sinh(${1:double})","insertTextFormat":2,"kind":3,"label":"•sinh(double)","score":1.2690916061401367,"sortText":"405d8e68sinh","textEdit":{"newText":"sinh(${1:double})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"sinhf","insertText":"sinhf(${1:float})","insertTextFormat":2,"kind":3,"label":"•sinhf(float)","score":1.2690916061401367,"sortText":"405d8e68sinhf","textEdit":{"newText":"sinhf(${1:float})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_a","insertText":"step_a","insertTextFormat":2,"kind":20,"label":"•step_a","score":1.2690916061401367,"sortText":"405d8e68step_a","textEdit":{"newText":"step_a","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"libb64/cdecode.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"base64_decodestep","documentation":{"kind":"markdown","value":"From `\"libb64/cdecode.h\"`"},"filterText":"step_b","insertText":"step_b","insertTextFormat":2,"kind":20,"label":"•step_b","score":1.2690916061401367,"sortText":"405d8e68step_b","textEdit":{"newText":"step_b","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"signbit","insertText":"std::signbit($0)","insertTextFormat":2,"kind":3,"label":"•std::signbit(…)","score":1.2531143426895142,"sortText":"405f99f3signbit","textEdit":{"newText":"std::signbit($0)","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sinh","insertText":"std::sinh(${1:float __x})","insertTextFormat":2,"kind":3,"label":"•std::sinh(float __x)","score":1.2531143426895142,"sortText":"405f99f3sinh","textEdit":{"newText":"std::sinh(${1:float __x})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"sqrt","insertText":"std::sqrt(${1:long double __x})","insertTextFormat":2,"kind":3,"label":"•std::sqrt(long double __x)","score":1.2531143426895142,"sortText":"405f99f3sqrt","textEdit":{"newText":"std::sqrt(${1:long double __x})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/gpio_sd_struct.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"gpio_sd_dev_t","documentation":{"kind":"markdown","value":"From `\"soc/gpio_sd_struct.h\"`"},"filterText":"SIGMADELTA","insertText":"SIGMADELTA","insertTextFormat":2,"kind":6,"label":"•SIGMADELTA","score":1.1871124505996704,"sortText":"40680cb3SIGMADELTA","textEdit":{"newText":"SIGMADELTA","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn the maximum number of available memory regions which could be returned by soc_get_available_memory_regions(). Used to size the array passed to that function."},"filterText":"soc_get_available_memory_region_max_count","insertText":"soc_get_available_memory_region_max_count()","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_region_max_count()","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_region_max_count","textEdit":{"newText":"soc_get_available_memory_region_max_count()","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nReturn available memory regions for this SoC. Each available memory region is a contiguous piece of memory which is not being used by static data, used by ROM code, or reserved by a component using the SOC_RESERVE_MEMORY_REGION() macro.  \nThis result is soc_memory_regions[] minus all regions reserved via the SOC_RESERVE_MEMORY_REGION() macro (which may also split some regions up.)  \nAt startup, all available memory returned by this function is registered as heap space.  \n@note OS-level startup function only, not recommended to call from app code.  \n@param regions Pointer to an array for reading available regions into.  \nSize of the array should be at least the result of soc_get_available_memory_region_max_count(). Entries in the array will be ordered by memory address.  \n@return Number of entries copied to 'regions'. Will be no greater than the result of soc_get_available_memory_region_max_count()."},"filterText":"soc_get_available_memory_regions","insertText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","insertTextFormat":2,"kind":3,"label":"•soc_get_available_memory_regions(soc_memory_region_t *regions)","score":1.1826096773147583,"sortText":"4068a03fsoc_get_available_memory_regions","textEdit":{"newText":"soc_get_available_memory_regions(${1:soc_memory_region_t *regions})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_region_count","insertText":"soc_memory_region_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_region_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_count","textEdit":{"newText":"soc_memory_region_count","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory on a particular SoC."},"filterText":"soc_memory_region_t","insertText":"soc_memory_region_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_region_t","textEdit":{"newText":"soc_memory_region_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_region_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_regions","insertText":"soc_memory_regions","insertTextFormat":2,"kind":6,"label":"•soc_memory_regions","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_regions","textEdit":{"newText":"soc_memory_regions","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const size_t","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`"},"filterText":"soc_memory_type_count","insertText":"soc_memory_type_count","insertTextFormat":2,"kind":6,"label":"•soc_memory_type_count","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_count","textEdit":{"newText":"soc_memory_type_count","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nType descriptor holds a description for a particular type of memory on a particular SoC."},"filterText":"soc_memory_type_desc_t","insertText":"soc_memory_type_desc_t","insertTextFormat":2,"kind":8,"label":"•soc_memory_type_desc_t","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_type_desc_t","textEdit":{"newText":"soc_memory_type_desc_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const soc_memory_type_desc_t []","documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nConstant table of tag descriptors for all this SoC's tags"},"filterText":"soc_memory_types","insertText":"soc_memory_types","insertTextFormat":2,"kind":6,"label":"•soc_memory_types","score":1.1826096773147583,"sortText":"4068a03fsoc_memory_types","textEdit":{"newText":"soc_memory_types","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/soc_memory_layout.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/soc_memory_layout.h\"`  \nRegion descriptor holds a description for a particular region of memory reserved on this SoC for a particular use (ie not available for stack/heap usage.)"},"filterText":"soc_reserved_region_t","insertText":"soc_reserved_region_t","insertTextFormat":2,"kind":8,"label":"•soc_reserved_region_t","score":1.1826096773147583,"sortText":"4068a03fsoc_reserved_region_t","textEdit":{"newText":"soc_reserved_region_t","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"wchar.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"wchar.h\"`"},"filterText":"swscanf","insertText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","insertTextFormat":2,"kind":3,"label":"•swscanf(const wchar_t *, const wchar_t *, ...)","score":1.1826096773147583,"sortText":"4068a03fswscanf","textEdit":{"newText":"swscanf(${1:const wchar_t *}, ${2:const wchar_t *, ...})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalbln","insertText":"std::scalbln","insertTextFormat":2,"kind":18,"label":"•std::scalbln","score":1.1391948461532593,"sortText":"406e2eddscalbln","textEdit":{"newText":"std::scalbln","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnf","insertText":"std::scalblnf","insertTextFormat":2,"kind":18,"label":"•std::scalblnf","score":1.1391948461532593,"sortText":"406e2eddscalblnf","textEdit":{"newText":"std::scalblnf","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"scalblnl","insertText":"std::scalblnl","insertTextFormat":2,"kind":18,"label":"•std::scalblnl","score":1.1391948461532593,"sortText":"406e2eddscalblnl","textEdit":{"newText":"std::scalblnl","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_LSBFIRST","insertText":"SPI_BITORDER_LSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_LSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_LSBFIRST","textEdit":{"newText":"SPI_BITORDER_LSBFIRST","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"detail":"_BitOrder","filterText":"SPI_BITORDER_MSBFIRST","insertText":"SPI_BITORDER_MSBFIRST","insertTextFormat":2,"kind":20,"label":" SPI_BITORDER_MSBFIRST","score":1.1118042469024658,"sortText":"4071b066SPI_BITORDER_MSBFIRST","textEdit":{"newText":"SPI_BITORDER_MSBFIRST","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sbrk","insertText":"sbrk(${1:ptrdiff_t __incr})","insertTextFormat":2,"kind":3,"label":"•sbrk(ptrdiff_t __incr)","score":1.1118042469024658,"sortText":"4071b066sbrk","textEdit":{"newText":"sbrk(${1:ptrdiff_t __incr})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}}}}]}}Content-Length: 1597

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S'","range":{"end":{"character":5,"line":273},"start":{"character":4,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":192}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":193},"contentChanges":[{"range":{"start":{"line":273,"character":5},"end":{"line":273,"character":5}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":6},"context":{"triggerKind":3}},"id":157,"jsonrpc":"2.0"}
<<<
Content-Length: 60467

{"id":157,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":24.595098495483398,"sortText":"3e3b3d3dSerial","textEdit":{"newText":"Serial","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":13.502143859863281,"sortText":"3ea7f738serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":11.079595565795898,"sortText":"3eceb9faserialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor event (36 bytes)  \nstruct sensor_event_s is used to provide a single sensor event in a common format."},"filterText":"sensors_event_t","insertText":"sensors_event_t","insertTextFormat":2,"kind":8,"label":" sensors_event_t","score":7.4727926254272461,"sortText":"3f10dee2sensors_event_t","textEdit":{"newText":"sensors_event_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"setup","insertText":"setup()","insertTextFormat":2,"kind":3,"label":" setup()","score":7.3863968849182129,"sortText":"3f13a2a3setup","textEdit":{"newText":"setup()","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_color_s is used to return color data in a common format."},"filterText":"sensors_color_t","insertText":"sensors_color_t","insertTextFormat":2,"kind":8,"label":" sensors_color_t","score":5.1494083404541016,"sortText":"3f5b380csensors_color_t","textEdit":{"newText":"sensors_color_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nstruct sensors_vec_s is used to return a vector in a common format."},"filterText":"sensors_vec_t","insertText":"sensors_vec_t","insertTextFormat":2,"kind":8,"label":" sensors_vec_t","score":5.1494083404541016,"sortText":"3f5b380csensors_vec_t","textEdit":{"newText":"sensors_vec_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":" HardwareSerial","score":7.2600007057189941,"sortText":"3fd1c28eHardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":6.6000003814697266,"sortText":"3fe19999HardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":2.2556054592132568,"sortText":"3fefa429Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":2.2556054592132568,"sortText":"3fefa429Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":2.2556054592132568,"sortText":"3fefa429serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","documentation":{"kind":"markdown","value":"Callback Function that sents message"},"filterText":"OnDataSent","insertText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","insertTextFormat":2,"kind":3,"label":" OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)","score":9.0014286041259766,"sortText":"3feffa26OnDataSent","textEdit":{"newText":"OnDataSent(${1:const uint8_t *mac_addr}, ${2:esp_now_send_status_t status})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"initLDRSensor","insertText":"initLDRSensor()","insertTextFormat":2,"kind":3,"label":" initLDRSensor()","score":9.0014286041259766,"sortText":"3feffa26initLDRSensor","textEdit":{"newText":"initLDRSensor()","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor details (40 bytes)  \nstruct sensor_s is used to describe basic information about a specific sensor."},"filterText":"sensor_t","insertText":"sensor_t","insertTextFormat":2,"kind":8,"label":" sensor_t","score":1.8537870645523071,"sortText":"4012b71bsensor_t","textEdit":{"newText":"sensor_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nSensor types"},"filterText":"sensors_type_t","insertText":"sensors_type_t","insertTextFormat":2,"kind":8,"label":" sensors_type_t","score":1.8537870645523071,"sortText":"4012b71bsensors_type_t","textEdit":{"newText":"sensors_type_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"esp_now_send_cb_t","insertText":"esp_now_send_cb_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_cb_t","score":7.2600007057189941,"sortText":"4017ae13esp_now_send_cb_t","textEdit":{"newText":"esp_now_send_cb_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`  \nGravity + linear acceleration"},"filterText":"SENSOR_TYPE_ACCELEROMETER","insertText":"SENSOR_TYPE_ACCELEROMETER","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ACCELEROMETER","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ACCELEROMETER","textEdit":{"newText":"SENSOR_TYPE_ACCELEROMETER","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_AMBIENT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_AMBIENT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_AMBIENT_TEMPERATURE","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_COLOR","insertText":"SENSOR_TYPE_COLOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_COLOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_COLOR","textEdit":{"newText":"SENSOR_TYPE_COLOR","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_CURRENT","insertText":"SENSOR_TYPE_CURRENT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_CURRENT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_CURRENT","textEdit":{"newText":"SENSOR_TYPE_CURRENT","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GRAVITY","insertText":"SENSOR_TYPE_GRAVITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GRAVITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GRAVITY","textEdit":{"newText":"SENSOR_TYPE_GRAVITY","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_GYROSCOPE","insertText":"SENSOR_TYPE_GYROSCOPE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_GYROSCOPE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_GYROSCOPE","textEdit":{"newText":"SENSOR_TYPE_GYROSCOPE","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LIGHT","insertText":"SENSOR_TYPE_LIGHT","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LIGHT","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LIGHT","textEdit":{"newText":"SENSOR_TYPE_LIGHT","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertText":"SENSOR_TYPE_LINEAR_ACCELERATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_LINEAR_ACCELERATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_LINEAR_ACCELERATION","textEdit":{"newText":"SENSOR_TYPE_LINEAR_ACCELERATION","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_MAGNETIC_FIELD","insertText":"SENSOR_TYPE_MAGNETIC_FIELD","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_MAGNETIC_FIELD","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_MAGNETIC_FIELD","textEdit":{"newText":"SENSOR_TYPE_MAGNETIC_FIELD","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertText":"SENSOR_TYPE_OBJECT_TEMPERATURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_OBJECT_TEMPERATURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_OBJECT_TEMPERATURE","textEdit":{"newText":"SENSOR_TYPE_OBJECT_TEMPERATURE","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ORIENTATION","insertText":"SENSOR_TYPE_ORIENTATION","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ORIENTATION","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ORIENTATION","textEdit":{"newText":"SENSOR_TYPE_ORIENTATION","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PRESSURE","insertText":"SENSOR_TYPE_PRESSURE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PRESSURE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PRESSURE","textEdit":{"newText":"SENSOR_TYPE_PRESSURE","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_PROXIMITY","insertText":"SENSOR_TYPE_PROXIMITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_PROXIMITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_PROXIMITY","textEdit":{"newText":"SENSOR_TYPE_PROXIMITY","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertText":"SENSOR_TYPE_RELATIVE_HUMIDITY","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_RELATIVE_HUMIDITY","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_RELATIVE_HUMIDITY","textEdit":{"newText":"SENSOR_TYPE_RELATIVE_HUMIDITY","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_ROTATION_VECTOR","insertText":"SENSOR_TYPE_ROTATION_VECTOR","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_ROTATION_VECTOR","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_ROTATION_VECTOR","textEdit":{"newText":"SENSOR_TYPE_ROTATION_VECTOR","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"sensors_type_t","documentation":{"kind":"markdown","value":"From `\"Adafruit_Sensor.h\"`"},"filterText":"SENSOR_TYPE_VOLTAGE","insertText":"SENSOR_TYPE_VOLTAGE","insertTextFormat":2,"kind":20,"label":" SENSOR_TYPE_VOLTAGE","score":1.853786826133728,"sortText":"40306039SENSOR_TYPE_VOLTAGE","textEdit":{"newText":"SENSOR_TYPE_VOLTAGE","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"SemaphoreHandle_t","insertText":"SemaphoreHandle_t","insertTextFormat":2,"kind":8,"label":" SemaphoreHandle_t","score":1.5037370920181274,"sortText":"403f858bSemaphoreHandle_t","textEdit":{"newText":"SemaphoreHandle_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"seed48","insertText":"seed48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•seed48(unsigned short *)","score":1.5037370920181274,"sortText":"403f858bseed48","textEdit":{"newText":"seed48(${1:unsigned short *})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuf","insertText":"setbuf(${1:FILE *}, ${2:char *})","insertTextFormat":2,"kind":3,"label":"•setbuf(FILE *, char *)","score":1.5037370920181274,"sortText":"403f858bsetbuf","textEdit":{"newText":"setbuf(${1:FILE *}, ${2:char *})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setbuffer","insertText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","insertTextFormat":2,"kind":3,"label":"•setbuffer(FILE *, char *, int)","score":1.5037370920181274,"sortText":"403f858bsetbuffer","textEdit":{"newText":"setbuffer(${1:FILE *}, ${2:char *}, ${3:int})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"setenv","insertText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•setenv(const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"403f858bsetenv","textEdit":{"newText":"setenv(${1:const char *__string}, ${2:const char *__value}, ${3:int __overwrite})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setlinebuf","insertText":"setlinebuf(${1:FILE *})","insertTextFormat":2,"kind":3,"label":"•setlinebuf(FILE *)","score":1.5037370920181274,"sortText":"403f858bsetlinebuf","textEdit":{"newText":"setlinebuf(${1:FILE *})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"setvbuf","insertText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","insertTextFormat":2,"kind":3,"label":"•setvbuf(FILE *, char *, int, size_t)","score":1.5037370920181274,"sortText":"403f858bsetvbuf","textEdit":{"newText":"setvbuf(${1:FILE *}, ${2:char *}, ${3:int}, ${4:size_t})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`  \nfunction takes the following frequencies as valid values:  \n240, 160, 80 <<< For all XTAL types 40, 20, 10 <<< For 40MHz XTAL 26, 13 <<< For 26MHz XTAL 24, 12 <<< For 24MHz XTAL"},"filterText":"setCpuFrequencyMhz","insertText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","insertTextFormat":2,"kind":3,"label":"•setCpuFrequencyMhz(uint32_t cpu_freq_mhz)","score":1.3747211694717407,"sortText":"40500923setCpuFrequencyMhz","textEdit":{"newText":"setCpuFrequencyMhz(${1:uint32_t cpu_freq_mhz})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"filterText":"esp_now_send_status_t","insertText":"esp_now_send_status_t","insertTextFormat":2,"kind":8,"label":" esp_now_send_status_t","score":5.4166908264160156,"sortText":"4052aa78esp_now_send_status_t","textEdit":{"newText":"esp_now_send_status_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"STATUS","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*pData : the pointer to input string.  \n@param uint16_t DataLen : the string length.  \n@return OK for successful.  \nFAIL for failed."},"filterText":"SendMsg","insertText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","insertTextFormat":2,"kind":3,"label":"•SendMsg(uint8_t *pData, uint16_t DataLen)","score":1.2690916061401367,"sortText":"405d8e68SendMsg","textEdit":{"newText":"SendMsg(${1:uint8_t *pData}, ${2:uint16_t DataLen})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`  \n@brief Send an packet to download tool, with SLIP escaping.  \nPlease do not call this function in SDK.  \n@param uint8_t \\*p : the pointer to output string.  \n@param int len : the string length.  \n@return None."},"filterText":"send_packet","insertText":"send_packet(${1:uint8_t *p}, ${2:int len})","insertTextFormat":2,"kind":3,"label":"•send_packet(uint8_t *p, int len)","score":1.2690916061401367,"sortText":"405d8e68send_packet","textEdit":{"newText":"send_packet(${1:uint8_t *p}, ${2:int len})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"405d8e68set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"detail":"esp_err_t","filterText":"esp_now_send","insertText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","insertTextFormat":2,"kind":3,"label":" esp_now_send(const uint8_t *peer_addr, const uint8_t *data, size_t len)","score":4.8400001525878906,"sortText":"40651eb8esp_now_send","textEdit":{"newText":"esp_now_send(${1:const uint8_t *peer_addr}, ${2:const uint8_t *data}, ${3:size_t len})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"setlocale","insertText":"setlocale(${1:int category}, ${2:const char *locale})","insertTextFormat":2,"kind":3,"label":"•setlocale(int category, const char *locale)","score":1.1826096773147583,"sortText":"4068a03fsetlocale","textEdit":{"newText":"setlocale(${1:int category}, ${2:const char *locale})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"select","insertText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","insertTextFormat":2,"kind":3,"label":"•select(int nfds, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *errorfds, struct timeval *timeout)","score":1.1118042469024658,"sortText":"4071b066select","textEdit":{"newText":"select(${1:int nfds}, ${2:_types_fd_set *readfds}, ${3:_types_fd_set *writefds}, ${4:_types_fd_set *errorfds}, ${5:struct timeval *timeout})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setgid","insertText":"setgid(${1:gid_t __gid})","insertTextFormat":2,"kind":3,"label":"•setgid(gid_t __gid)","score":1.1118042469024658,"sortText":"4071b066setgid","textEdit":{"newText":"setgid(${1:gid_t __gid})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"sethostname","insertText":"sethostname(${1:const char *}, ${2:size_t})","insertTextFormat":2,"kind":3,"label":"•sethostname(const char *, size_t)","score":1.1118042469024658,"sortText":"4071b066sethostname","textEdit":{"newText":"sethostname(${1:const char *}, ${2:size_t})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"setitimer","insertText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","insertTextFormat":2,"kind":3,"label":"•setitimer(int __which, const struct itimerval *__value, struct itimerval *__ovalue)","score":1.1118042469024658,"sortText":"4071b066setitimer","textEdit":{"newText":"setitimer(${1:int __which}, ${2:const struct itimerval *__value}, ${3:struct itimerval *__ovalue})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgid","insertText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","insertTextFormat":2,"kind":3,"label":"•setpgid(pid_t __pid, pid_t __pgid)","score":1.1118042469024658,"sortText":"4071b066setpgid","textEdit":{"newText":"setpgid(${1:pid_t __pid}, ${2:pid_t __pgid})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setpgrp","insertText":"setpgrp()","insertTextFormat":2,"kind":3,"label":"•setpgrp()","score":1.1118042469024658,"sortText":"4071b066setpgrp","textEdit":{"newText":"setpgrp()","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pid_t","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setsid","insertText":"setsid()","insertTextFormat":2,"kind":3,"label":"•setsid()","score":1.1118042469024658,"sortText":"4071b066setsid","textEdit":{"newText":"setsid()","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <sys/select.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `<sys/select.h>`"},"filterText":"settimeofday","insertText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","insertTextFormat":2,"kind":3,"label":"•settimeofday(const struct timeval *, const struct timezone *)","score":1.1118042469024658,"sortText":"4071b066settimeofday","textEdit":{"newText":"settimeofday(${1:const struct timeval *}, ${2:const struct timezone *})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"setuid","insertText":"setuid(${1:uid_t __uid})","insertTextFormat":2,"kind":3,"label":"•setuid(uid_t __uid)","score":1.1118042469024658,"sortText":"4071b066setuid","textEdit":{"newText":"setuid(${1:uid_t __uid})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartBitsNum4Char","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"SEVEN_BITS","insertText":"SEVEN_BITS","insertTextFormat":2,"kind":20,"label":"•SEVEN_BITS","score":1.2690916061401367,"sortText":"4071dc9bSEVEN_BITS","textEdit":{"newText":"SEVEN_BITS","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_probe_req_rx_t","insertText":"system_event_ap_probe_req_rx_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_probe_req_rx_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_probe_req_rx_t","textEdit":{"newText":"system_event_ap_probe_req_rx_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staconnected_t","insertText":"system_event_ap_staconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staconnected_t","textEdit":{"newText":"system_event_ap_staconnected_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_stadisconnected_t","insertText":"system_event_ap_stadisconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_stadisconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_stadisconnected_t","textEdit":{"newText":"system_event_ap_stadisconnected_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_ap_staipassigned_t","insertText":"system_event_ap_staipassigned_t","insertTextFormat":2,"kind":8,"label":"•system_event_ap_staipassigned_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_ap_staipassigned_t","textEdit":{"newText":"system_event_ap_staipassigned_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_loop.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_loop.h\"`  \n@brief Application specified event callback function  \n@param void \\*ctx : reserved for user  \n@param system_event_t \\*event : event type defined in this file  \n@return ESP_OK : succeed  \n@return others : fail"},"filterText":"system_event_cb_t","insertText":"system_event_cb_t","insertTextFormat":2,"kind":8,"label":"•system_event_cb_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_cb_t","textEdit":{"newText":"system_event_cb_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_got_ip6_t","insertText":"system_event_got_ip6_t","insertTextFormat":2,"kind":8,"label":"•system_event_got_ip6_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_got_ip6_t","textEdit":{"newText":"system_event_got_ip6_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_handler_t","insertText":"system_event_handler_t","insertTextFormat":2,"kind":8,"label":"•system_event_handler_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_handler_t","textEdit":{"newText":"system_event_handler_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_id_t","insertText":"system_event_id_t","insertTextFormat":2,"kind":8,"label":"•system_event_id_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_id_t","textEdit":{"newText":"system_event_id_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_info_t","insertText":"system_event_info_t","insertTextFormat":2,"kind":8,"label":"•system_event_info_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_info_t","textEdit":{"newText":"system_event_info_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_authmode_change_t","insertText":"system_event_sta_authmode_change_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_authmode_change_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_authmode_change_t","textEdit":{"newText":"system_event_sta_authmode_change_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_connected_t","insertText":"system_event_sta_connected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_connected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_connected_t","textEdit":{"newText":"system_event_sta_connected_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_disconnected_t","insertText":"system_event_sta_disconnected_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_disconnected_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_disconnected_t","textEdit":{"newText":"system_event_sta_disconnected_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_got_ip_t","insertText":"system_event_sta_got_ip_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_got_ip_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_got_ip_t","textEdit":{"newText":"system_event_sta_got_ip_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_scan_done_t","insertText":"system_event_sta_scan_done_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_scan_done_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_scan_done_t","textEdit":{"newText":"system_event_sta_scan_done_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_fail_reason_t","insertText":"system_event_sta_wps_fail_reason_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_fail_reason_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_sta_wps_fail_reason_t","textEdit":{"newText":"system_event_sta_wps_fail_reason_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_t","insertText":"system_event_t","insertTextFormat":2,"kind":8,"label":"•system_event_t","score":1.3747211694717407,"sortText":"407c06dasystem_event_t","textEdit":{"newText":"system_event_t","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"new_handler","documentation":{"kind":"markdown","value":"From `<new>`  \nTakes a replacement handler as the argument, returns the previous handler."},"filterText":"set_new_handler","insertText":"std::set_new_handler(${1:new_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_new_handler(new_handler)","score":0.98550808429718018,"sortText":"4083b5beset_new_handler","textEdit":{"newText":"std::set_new_handler(${1:new_handler})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"terminate_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_terminate","insertText":"std::set_terminate(${1:terminate_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_terminate(terminate_handler)","score":0.98550808429718018,"sortText":"4083b5beset_terminate","textEdit":{"newText":"std::set_terminate(${1:terminate_handler})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"unexpected_handler","documentation":{"kind":"markdown","value":"From `<exception>`  \nTakes a new handler function as an argument, returns the old function."},"filterText":"set_unexpected","insertText":"std::set_unexpected(${1:unexpected_handler})","insertTextFormat":2,"kind":3,"label":"•std::set_unexpected(unexpected_handler)","score":0.98550808429718018,"sortText":"4083b5beset_unexpected","textEdit":{"newText":"std::set_unexpected(${1:unexpected_handler})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a matching sub-sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first1 A forward iterator.  \n@param \\_\\_last1 A forward iterator.  \n@param \\_\\_first2 A forward iterator.  \n@param \\_\\_last2 A forward iterator.  \n@return The first iterator @c i in the range @p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2)) such that @c \\*(i+N) == @p  \n\\*(\\_\\_first2+N) for each @c N in the range @p [0,\\_\\_last2-\\_\\_first2), or @p \\_\\_last1 if no such iterator exists.  \nSearches the range @p [\\_\\_first1,\\_\\_last1) for a sub-sequence that compares equal value-by-value with the sequence given by @p [\\_\\_first2,\\_\\_last2) and returns an iterator to the first element of the sub-sequence, or @p \\_\\_last1 if the sub-sequence is not found.  \nBecause the sub-sequence must lie completely within the range @p [\\_\\_first1,\\_\\_last1) it must start at a position less than @p \\_\\_last1-(\\_\\_last2-\\_\\_first2) where @p \\_\\_last2-\\_\\_first2 is the length of the sub-sequence.  \nThis means that the returned iterator @c i will be in the range  \n@p [\\_\\_first1,\\_\\_last1-(\\_\\_last2-\\_\\_first2))"},"filterText":"search","insertText":"std::search($0)","insertTextFormat":2,"kind":3,"label":"•std::search(…)","score":0.92650353908538818,"sortText":"4092d0aasearch","textEdit":{"newText":"std::search($0)","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Search a sequence for a number of consecutive values.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first A forward iterator.  \n@param \\_\\_last A forward iterator.  \n@param \\_\\_count The number of consecutive values.  \n@param \\_\\_val The value to find.  \n@return The first iterator @c i in the range @p [\\_\\_first,\\_\\_last-\\_\\_count) such that @c \\*(i+N) == @p \\_\\_val for each @c N in the range @p [0,\\_\\_count), or @p \\_\\_last if no such iterator exists.  \nSearches the range @p [\\_\\_first,\\_\\_last) for @p count consecutive elements equal to @p \\_\\_val."},"filterText":"search_n","insertText":"std::search_n($0)","insertTextFormat":2,"kind":3,"label":"•std::search_n(…)","score":0.92650353908538818,"sortText":"4092d0aasearch_n","textEdit":{"newText":"std::search_n($0)","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <random>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<random>`  \n@brief The seed_seq class generates sequences of seeds for random number generators."},"filterText":"seed_seq","insertText":"std::seed_seq","insertTextFormat":2,"kind":7,"label":"•std::seed_seq","score":0.92650353908538818,"sortText":"4092d0aaseed_seq","textEdit":{"newText":"std::seed_seq","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the difference of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in the first range but not the second in order to the output range.  \nIterators increment for each range. When the current element of the first range is less than the second according to @p \\_\\_comp, that element is copied and the iterator advances. If the current element of the second range is less, no element is copied and the iterator advances.  \nIf an element is contained in both ranges according to @p \\_\\_comp, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_difference","insertText":"std::set_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_difference","textEdit":{"newText":"std::set_difference($0)","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the intersection of two sorted ranges using comparison functor.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@param \\_\\_comp The comparison functor.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in both ranges in order to the output range. Iterators increment for each range. When the current element of one range is less than the other according to @p \\_\\_comp, that iterator advances. If an element is contained in both ranges according to @p \\_\\_comp, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_intersection","insertText":"std::set_intersection($0)","insertTextFormat":2,"kind":3,"label":"•std::set_intersection(…)","score":0.92650353908538818,"sortText":"4092d0aaset_intersection","textEdit":{"newText":"std::set_intersection($0)","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the symmetric difference of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in one range but not the other in order to the output range. Iterators increment for each range. When the current element of one range is less than the other, that element is copied and the iterator advances. If an element is contained in both ranges, no elements are copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_symmetric_difference","insertText":"std::set_symmetric_difference($0)","insertTextFormat":2,"kind":3,"label":"•std::set_symmetric_difference(…)","score":0.92650353908538818,"sortText":"4092d0aaset_symmetric_difference","textEdit":{"newText":"std::set_symmetric_difference($0)","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Return the union of two sorted ranges.  \n@ingroup set_algorithms  \n@param \\_\\_first1 Start of first range.  \n@param \\_\\_last1 End of first range.  \n@param \\_\\_first2 Start of second range.  \n@param \\_\\_last2 End of second range.  \n@return End of the output range.  \n@ingroup set_algorithms  \nThis operation iterates over both ranges, copying elements present in each range in order to the output range. Iterators increment for each range. When the current element of one range is less than the other,  \nthat element is copied and the iterator advanced. If an element is contained in both ranges, the element from the first range is copied and both ranges advance. The output range may not overlap either input range."},"filterText":"set_union","insertText":"std::set_union($0)","insertTextFormat":2,"kind":3,"label":"•std::set_union(…)","score":0.92650353908538818,"sortText":"4092d0aaset_union","textEdit":{"newText":"std::set_union($0)","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"setsockopt","insertText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•setsockopt(int s, int level, int optname, const void *opval, socklen_t optlen)","score":0.91311287879943848,"sortText":"40963e3csetsockopt","textEdit":{"newText":"setsockopt(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *opval}, ${5:socklen_t optlen})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"send","insertText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•send(int s, const void *dataptr, size_t size, int flags)","score":0.90964943170547485,"sortText":"40972137send","textEdit":{"newText":"send(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendmsg","insertText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•sendmsg(int s, const struct msghdr *message, int flags)","score":0.90964943170547485,"sortText":"40972137sendmsg","textEdit":{"newText":"sendmsg(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"sendto","insertText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•sendto(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964943170547485,"sortText":"40972137sendto","textEdit":{"newText":"sendto(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <clocale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<clocale>`"},"filterText":"setlocale","insertText":"std::setlocale","insertTextFormat":2,"kind":18,"label":"•std::setlocale","score":0.8959164023399353,"sortText":"409aa539setlocale","textEdit":{"newText":"std::setlocale","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station connected to ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STACONNECTED","insertText":"SYSTEM_EVENT_AP_STACONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STACONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STACONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STACONNECTED","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \na station disconnected from ESP32 soft-AP"},"filterText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertText":"SYSTEM_EVENT_AP_STADISCONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_AP_STADISCONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_AP_STADISCONNECTED","textEdit":{"newText":"SYSTEM_EVENT_AP_STADISCONNECTED","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet phy link up"},"filterText":"SYSTEM_EVENT_ETH_CONNECTED","insertText":"SYSTEM_EVENT_ETH_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_ETH_CONNECTED","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet got IP from connected AP"},"filterText":"SYSTEM_EVENT_ETH_GOT_IP","insertText":"SYSTEM_EVENT_ETH_GOT_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_GOT_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_GOT_IP","textEdit":{"newText":"SYSTEM_EVENT_ETH_GOT_IP","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 ethernet stop"},"filterText":"SYSTEM_EVENT_ETH_STOP","insertText":"SYSTEM_EVENT_ETH_STOP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_ETH_STOP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_ETH_STOP","textEdit":{"newText":"SYSTEM_EVENT_ETH_STOP","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nthe auth mode of AP connected by ESP32 station changed"},"filterText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_AUTHMODE_CHANGE","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_AUTHMODE_CHANGE","textEdit":{"newText":"SYSTEM_EVENT_STA_AUTHMODE_CHANGE","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station connected to AP"},"filterText":"SYSTEM_EVENT_STA_CONNECTED","insertText":"SYSTEM_EVENT_STA_CONNECTED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_CONNECTED","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_CONNECTED","textEdit":{"newText":"SYSTEM_EVENT_STA_CONNECTED","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station lost IP and the IP is reset to 0"},"filterText":"SYSTEM_EVENT_STA_LOST_IP","insertText":"SYSTEM_EVENT_STA_LOST_IP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_LOST_IP","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_LOST_IP","textEdit":{"newText":"SYSTEM_EVENT_STA_LOST_IP","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747212886810303,"sortText":"40a40b6bSYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}}}}]}}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":158,"jsonrpc":"2.0"}
<<<
Content-Length: 1598

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Se'","range":{"end":{"character":6,"line":273},"start":{"character":4,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":193}}Content-Length: 11744

{"id":158,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":281},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":311},"start":{"character":0,"line":283}},"selectionRange":{"end":{"character":10,"line":283},"start":{"character":5,"line":283}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":317},"start":{"character":0,"line":315}},"selectionRange":{"end":{"character":9,"line":315},"start":{"character":5,"line":315}}}]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":194},"contentChanges":[{"range":{"start":{"line":273,"character":6},"end":{"line":273,"character":6}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":7},"context":{"triggerKind":3}},"id":159,"jsonrpc":"2.0"}
<<<
Content-Length: 64566

{"id":159,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":24.595098495483398,"sortText":"3e3b3d3dSerial","textEdit":{"newText":"Serial","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":13.502143859863281,"sortText":"3ea7f738serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":11.079595565795898,"sortText":"3eceb9faserialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":7.2600007057189941,"sortText":"3f787ae0HardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":6.6000003814697266,"sortText":"3f899998HardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":2.2556054592132568,"sortText":"3fefa429Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":2.2556054592132568,"sortText":"3fefa429Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":2.2556054592132568,"sortText":"3fefa429serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"Server.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Server.h\"`"},"filterText":"Server","insertText":"Server","insertTextFormat":2,"kind":7,"label":"•Server","score":1.5037370920181274,"sortText":"403f858bServer","textEdit":{"newText":"Server","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \n@brief Set CRC of Fast RTC memory 0-0x7ff into RTC STORE7.  \n@param None  \n@return None"},"filterText":"set_rtc_memory_crc","insertText":"set_rtc_memory_crc()","insertTextFormat":2,"kind":3,"label":"•set_rtc_memory_crc()","score":1.2690916061401367,"sortText":"4078a156set_rtc_memory_crc","textEdit":{"newText":"set_rtc_memory_crc()","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":1.2639456987380981,"sortText":"40792ddbSERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase a range of flash sectors  \n@param start_address Address where erase operation has to start.  \nMust be 4kB-aligned  \n@param size Size of erased range, in bytes. Must be divisible by 4kB.  \n@return esp_err_t"},"filterText":"spi_flash_erase_range","insertText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_range(size_t start_address, size_t size)","score":1.1118041276931763,"sortText":"40aa889bspi_flash_erase_range","textEdit":{"newText":"spi_flash_erase_range(${1:size_t start_address}, ${2:size_t size})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_spi_flash.h\"`  \n@brief Erase the Flash sector.  \n@param sector Sector number, the count starts at sector 0, 4KB per sector.  \n@return esp_err_t"},"filterText":"spi_flash_erase_sector","insertText":"spi_flash_erase_sector(${1:size_t sector})","insertTextFormat":2,"kind":3,"label":"•spi_flash_erase_sector(size_t sector)","score":1.1118041276931763,"sortText":"40aa889bspi_flash_erase_sector","textEdit":{"newText":"spi_flash_erase_sector(${1:size_t sector})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`"},"filterText":"system_event_sta_wps_er_pin_t","insertText":"system_event_sta_wps_er_pin_t","insertTextFormat":2,"kind":8,"label":"•system_event_sta_wps_er_pin_t","score":1.3747210502624512,"sortText":"40b2b554system_event_sta_wps_er_pin_t","textEdit":{"newText":"system_event_sta_wps_er_pin_t","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.93730992078781128,"sortText":"40b80a61SERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiServer.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"WiFiServer.h\"`"},"filterText":"WiFiServer","insertText":"WiFiServer","insertTextFormat":2,"kind":7,"label":"•WiFiServer","score":1.5585578680038452,"sortText":"40b8812dWiFiServer","textEdit":{"newText":"WiFiServer","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"SERVER_IDENTIFIER","insertText":"SERVER_IDENTIFIER","insertTextFormat":2,"kind":20,"label":"•SERVER_IDENTIFIER","score":0.8448631763458252,"sortText":"40cbc334SERVER_IDENTIFIER","textEdit":{"newText":"SERVER_IDENTIFIER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned short *","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_seed48_r","insertText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•_seed48_r(struct _reent *, unsigned short *)","score":1.5037370920181274,"sortText":"40df99f3_seed48_r","textEdit":{"newText":"_seed48_r(${1:struct _reent *}, ${2:unsigned short *})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"_setenv_r","insertText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","insertTextFormat":2,"kind":3,"label":"•_setenv_r(struct _reent *, const char *__string, const char *__value, int __overwrite)","score":1.5037370920181274,"sortText":"40df99f3_setenv_r","textEdit":{"newText":"_setenv_r(${1:struct _reent *}, ${2:const char *__string}, ${3:const char *__value}, ${4:int __overwrite})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps fails in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_FAILED","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_FAILED","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_FAILED","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps overlap in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps pin code in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertText":"SYSTEM_EVENT_STA_WPS_ER_PIN","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_PIN","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_PIN","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_PIN","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps succeeds in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_SUCCESS","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_SUCCESS","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_SUCCESS","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_event_legacy.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"system_event_id_t","documentation":{"kind":"markdown","value":"From `\"esp_event_legacy.h\"`  \nESP32 station wps timeout in enrollee mode"},"filterText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","insertTextFormat":2,"kind":20,"label":"•SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","score":1.3747211694717407,"sortText":"40ed5cf2SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","textEdit":{"newText":"SYSTEM_EVENT_STA_WPS_ER_TIMEOUT","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nset cache attribute (access modes) for a range of memory"},"filterText":"xthal_set_region_attribute","insertText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_attribute(void *addr, unsigned int size, unsigned int cattr, unsigned int flags)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_attribute","textEdit":{"newText":"xthal_set_region_attribute(${1:void *addr}, ${2:unsigned int size}, ${3:unsigned int cattr}, ${4:unsigned int flags})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation","insertText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation(void *vaddr, void *paddr, unsigned int size, unsigned int cache_atr, unsigned int flags)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_translation","textEdit":{"newText":"xthal_set_region_translation(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int size}, ${4:unsigned int cache_atr}, ${5:unsigned int flags})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_region_translation_raw","insertText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","insertTextFormat":2,"kind":3,"label":"•xthal_set_region_translation_raw(void *vaddr, void *paddr, unsigned int cattr)","score":1.2690916061401367,"sortText":"40f8a156xthal_set_region_translation_raw","textEdit":{"newText":"xthal_set_region_translation_raw(${1:void *vaddr}, ${2:void *paddr}, ${3:unsigned int cattr})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"locale.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"locale.h\"`"},"filterText":"_setlocale_r","insertText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","insertTextFormat":2,"kind":3,"label":"•_setlocale_r(struct _reent *, int category, const char *locale)","score":1.1826096773147583,"sortText":"4103b5bd_setlocale_r","textEdit":{"newText":"_setlocale_r(${1:struct _reent *}, ${2:int category}, ${3:const char *locale})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"sys/errno.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const char *const []","documentation":{"kind":"markdown","value":"From `\"sys/errno.h\"`  \nPlease don't use these variables directly.  \nUse strerror instead."},"filterText":"_sys_errlist","insertText":"_sys_errlist","insertTextFormat":2,"kind":6,"label":"•_sys_errlist","score":1.1118042469024658,"sortText":"4112d0aa_sys_errlist","textEdit":{"newText":"_sys_errlist","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Install the driver's GPIO ISR handler service, which allows per-pin GPIO interrupt handlers.  \nThis function is incompatible with gpio_isr_register() - if that function is used, a single global ISR is registered for all GPIO interrupts. If this function is used, the ISR service provides a global GPIO ISR and individual pin handlers are registered via the gpio_isr_handler_add() function.  \n@param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred) ESP_INTR_FLAG\\_\\* values. See esp_intr_alloc.h for more info.  \n@return  \n\\- ESP_OK Success  \n\\- ESP_ERR_NO_MEM No memory to install this service  \n\\- ESP_ERR_INVALID_STATE ISR service already installed.  \n\\- ESP_ERR_NOT_FOUND No free interrupt found with the specified flags  \n\\- ESP_ERR_INVALID_ARG GPIO error"},"filterText":"gpio_install_isr_service","insertText":"gpio_install_isr_service(${1:int intr_alloc_flags})","insertTextFormat":2,"kind":3,"label":"•gpio_install_isr_service(int intr_alloc_flags)","score":1.1118042469024658,"sortText":"4112d0aagpio_install_isr_service","textEdit":{"newText":"gpio_install_isr_service(${1:int intr_alloc_flags})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"driver/gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"driver/gpio.h\"`  \n@brief Uninstall the driver's GPIO ISR service, freeing related resources."},"filterText":"gpio_uninstall_isr_service","insertText":"gpio_uninstall_isr_service()","insertTextFormat":2,"kind":3,"label":"•gpio_uninstall_isr_service()","score":1.1118042469024658,"sortText":"4112d0aagpio_uninstall_isr_service","textEdit":{"newText":"gpio_uninstall_isr_service()","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-rmt.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-rmt.h\"`  \nSetting threshold for Rx completed"},"filterText":"rmtSetRxThreshold","insertText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","insertTextFormat":2,"kind":3,"label":"•rmtSetRxThreshold(rmt_obj_t *rmt, uint32_t value)","score":1.3747211694717407,"sortText":"41156184rmtSetRxThreshold","textEdit":{"newText":"rmtSetRxThreshold(${1:rmt_obj_t *rmt}, ${2:uint32_t value})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"uartSetRxInvert","insertText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","insertTextFormat":2,"kind":3,"label":"•uartSetRxInvert(uart_t *uart, bool invert)","score":1.3747211694717407,"sortText":"41156184uartSetRxInvert","textEdit":{"newText":"uartSetRxInvert(${1:uart_t *uart}, ${2:bool invert})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/dns.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"lwip/dns.h\"`"},"filterText":"dns_clear_servers","insertText":"dns_clear_servers(${1:bool keep_fallback})","insertTextFormat":2,"kind":3,"label":"•dns_clear_servers(bool keep_fallback)","score":0.90964943170547485,"sortText":"41172137dns_clear_servers","textEdit":{"newText":"dns_clear_servers(${1:bool keep_fallback})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase some sectors.  \nPlease do not call this function in SDK.  \n@param uint32_t start_addr : Start addr to erase, should be sector aligned.  \n@param uint32_t area_len : Length to erase, should be sector aligned.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_area","insertText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_area(uint32_t start_addr, uint32_t area_len)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_area","textEdit":{"newText":"esp_rom_spiflash_erase_area(${1:uint32_t start_addr}, ${2:uint32_t area_len})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a 64KB block of flash Uses SPI flash command D8H.  \nPlease do not call this function in SDK.  \n@param uint32_t block_num : Which block to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_block","insertText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_block(uint32_t block_num)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_block","textEdit":{"newText":"esp_rom_spiflash_erase_block(${1:uint32_t block_num})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase whole flash chip.  \nPlease do not call this function in SDK.  \n@param None  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_chip","insertText":"esp_rom_spiflash_erase_chip()","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_chip()","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_chip","textEdit":{"newText":"esp_rom_spiflash_erase_chip()","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`  \n@brief Erase a sector of flash.  \nUses SPI flash command 20H.  \nPlease do not call this function in SDK.  \n@param uint32_t sector_num : Which sector to erase.  \n@return ESP_ROM_SPIFLASH_RESULT_OK : Erase OK.  \nESP_ROM_SPIFLASH_RESULT_ERR : Erase error.  \nESP_ROM_SPIFLASH_RESULT_TIMEOUT : Erase timeout."},"filterText":"esp_rom_spiflash_erase_sector","insertText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","insertTextFormat":2,"kind":3,"label":"•esp_rom_spiflash_erase_sector(uint32_t sector_num)","score":1.2690917253494263,"sortText":"41276889esp_rom_spiflash_erase_sector","textEdit":{"newText":"esp_rom_spiflash_erase_sector(${1:uint32_t sector_num})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nTrampoline support functions:"},"filterText":"xthal_tram_pending_to_service","insertText":"xthal_tram_pending_to_service()","insertTextFormat":2,"kind":3,"label":"•xthal_tram_pending_to_service()","score":1.2690917253494263,"sortText":"41276889xthal_tram_pending_to_service","textEdit":{"newText":"xthal_tram_pending_to_service()","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \n@brief Read Hall Sensor  \n@note When the power switch of SARADC1, SARADC2, HALL sensor and AMP sensor is turned on,  \nthe input of GPIO36 and GPIO39 will be pulled down for about 80ns.  \nWhen enabling power for any of these peripherals, ignore input from GPIO36 and GPIO39.  \nPlease refer to section 3.11 of 'ECO_and_Workarounds_for_Bugs_in_ESP32' for the description of this issue.  \n@note The Hall Sensor uses channels 0 and 3 of ADC1. Do not configure these channels for use as ADC channels.  \n@note The ADC1 module must be enabled by calling adc1_config_width() before calling hall_sensor_read(). ADC1 should be configured for 12 bit readings, as the hall sensor readings are low values and do not cover the full range of the ADC.  \n@return The hall sensor reading."},"filterText":"hall_sensor_read","insertText":"hall_sensor_read()","insertTextFormat":2,"kind":3,"label":"•hall_sensor_read()","score":0.96751213073730469,"sortText":"413198efhall_sensor_read","textEdit":{"newText":"hall_sensor_read()","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_send_r","insertText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_send_r(int s, const void *dataptr, size_t size, int flags)","score":0.90964937210083008,"sortText":"413df103lwip_send_r","textEdit":{"newText":"lwip_send_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendmsg_r","insertText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","insertTextFormat":2,"kind":3,"label":"•lwip_sendmsg_r(int s, const struct msghdr *message, int flags)","score":0.90964937210083008,"sortText":"413df103lwip_sendmsg_r","textEdit":{"newText":"lwip_sendmsg_r(${1:int s}, ${2:const struct msghdr *message}, ${3:int flags})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_sendto_r","insertText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","insertTextFormat":2,"kind":3,"label":"•lwip_sendto_r(int s, const void *dataptr, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)","score":0.90964937210083008,"sortText":"413df103lwip_sendto_r","textEdit":{"newText":"lwip_sendto_r(${1:int s}, ${2:const void *dataptr}, ${3:size_t size}, ${4:int flags}, ${5:const struct sockaddr *to}, ${6:socklen_t tolen})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"lwip/sockets.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"lwip/sockets.h\"`"},"filterText":"lwip_setsockopt_r","insertText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","insertTextFormat":2,"kind":3,"label":"•lwip_setsockopt_r(int s, int level, int optname, const void *optval, socklen_t optlen)","score":0.90964937210083008,"sortText":"413df103lwip_setsockopt_r","textEdit":{"newText":"lwip_setsockopt_r(${1:int s}, ${2:int level}, ${3:int optname}, ${4:const void *optval}, ${5:socklen_t optlen})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"COOKIE_SERVER","insertText":"COOKIE_SERVER","insertTextFormat":2,"kind":20,"label":"•COOKIE_SERVER","score":0.8448631763458252,"sortText":"414bc334COOKIE_SERVER","textEdit":{"newText":"COOKIE_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"IMPRESS_SERVER","insertText":"IMPRESS_SERVER","insertTextFormat":2,"kind":20,"label":"•IMPRESS_SERVER","score":0.8448631763458252,"sortText":"414bc334IMPRESS_SERVER","textEdit":{"newText":"IMPRESS_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LOG_SERVER","insertText":"LOG_SERVER","insertTextFormat":2,"kind":20,"label":"•LOG_SERVER","score":0.8448631763458252,"sortText":"414bc334LOG_SERVER","textEdit":{"newText":"LOG_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"LPR_SERVER","insertText":"LPR_SERVER","insertTextFormat":2,"kind":20,"label":"•LPR_SERVER","score":0.8448631763458252,"sortText":"414bc334LPR_SERVER","textEdit":{"newText":"LPR_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"NAME_SERVER","insertText":"NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NAME_SERVER","score":0.8448631763458252,"sortText":"414bc334NAME_SERVER","textEdit":{"newText":"NAME_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NAME_SERVICE_SEARCH","insertText":"NAME_SERVICE_SEARCH","insertTextFormat":2,"kind":20,"label":"•NAME_SERVICE_SEARCH","score":0.8448631763458252,"sortText":"414bc334NAME_SERVICE_SEARCH","textEdit":{"newText":"NAME_SERVICE_SEARCH","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"NDS_SERVERS","insertText":"NDS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NDS_SERVERS","score":0.8448631763458252,"sortText":"414bc334NDS_SERVERS","textEdit":{"newText":"NDS_SERVERS","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NNTP_SERVER","insertText":"NNTP_SERVER","insertTextFormat":2,"kind":20,"label":"•NNTP_SERVER","score":0.8448631763458252,"sortText":"414bc334NNTP_SERVER","textEdit":{"newText":"NNTP_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"SMTP_SERVER","insertText":"SMTP_SERVER","insertTextFormat":2,"kind":20,"label":"•SMTP_SERVER","score":0.8448631763458252,"sortText":"414bc334SMTP_SERVER","textEdit":{"newText":"SMTP_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_SERVER","insertText":"STREETTALK_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_SERVER","score":0.8448631763458252,"sortText":"414bc334STREETTALK_SERVER","textEdit":{"newText":"STREETTALK_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"SWAP_SERVER","insertText":"SWAP_SERVER","insertTextFormat":2,"kind":20,"label":"•SWAP_SERVER","score":0.8448631763458252,"sortText":"414bc334SWAP_SERVER","textEdit":{"newText":"SWAP_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nDHCP Extensions"},"filterText":"TFTP_SERVER_NAME","insertText":"TFTP_SERVER_NAME","insertTextFormat":2,"kind":20,"label":"•TFTP_SERVER_NAME","score":0.8448631763458252,"sortText":"414bc334TFTP_SERVER_NAME","textEdit":{"newText":"TFTP_SERVER_NAME","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"TIME_SERVER","insertText":"TIME_SERVER","insertTextFormat":2,"kind":20,"label":"•TIME_SERVER","score":0.8448631763458252,"sortText":"414bc334TIME_SERVER","textEdit":{"newText":"TIME_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"detail":"uint32_t","filterText":"esp_dport_access_sequence_reg_read","insertText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":" esp_dport_access_sequence_reg_read(uint32_t reg)","score":1.3747211694717407,"sortText":"41500923esp_dport_access_sequence_reg_read","textEdit":{"newText":"esp_dport_access_sequence_reg_read(${1:uint32_t reg})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"soc/dport_access.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"soc/dport_access.h\"`  \n@brief Read value from register, NOT SMP-safe version.  \nThis method uses the pre-reading of the APB register before reading the register of the DPORT.  \nThere is not disable/enable interrupt.  \nThe difference from DPORT_REG_READ() is that the user himself must disable interrupts while DPORT reading.  \nThis implementation is useful for reading DORT registers in loop without stall other CPU. Note the usage example.  \nThe recommended way to read registers sequentially without stall other CPU is to use the method esp_dport_read_buffer(buff_out, address, num_words). It allows you to read registers in the buffer.  \n\\\\code{c} // This example shows how to use it.  \n{ // Use curly brackets to limit the visibility of variables in macros DPORT_INTERRUPT_DISABLE/RESTORE.  \nDPORT_INTERRUPT_DISABLE(); // Disable interrupt only on current CPU.  \nfor (i = 0; i < max; ++i) { array[i] = DPORT_SEQUENCE_REG_READ(Address + i * 4); // reading DPORT registers } DPORT_INTERRUPT_RESTORE(); // restore the previous interrupt level }  \n\\\\endcode  \n@param reg Register address  \n@return Value"},"filterText":"DPORT_SEQUENCE_REG_READ","insertText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","insertTextFormat":2,"kind":3,"label":"•DPORT_SEQUENCE_REG_READ(uint32_t reg)","score":1.1826096773147583,"sortText":"4168a03fDPORT_SEQUENCE_REG_READ","textEdit":{"newText":"DPORT_SEQUENCE_REG_READ(${1:uint32_t reg})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_FINGER_SERVER","insertText":"DEFAULT_FINGER_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_FINGER_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_FINGER_SERVER","textEdit":{"newText":"DEFAULT_FINGER_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_IRC_SERVER","insertText":"DEFAULT_IRC_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_IRC_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_IRC_SERVER","textEdit":{"newText":"DEFAULT_IRC_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"DEFAULT_WWW_SERVER","insertText":"DEFAULT_WWW_SERVER","insertTextFormat":2,"kind":20,"label":"•DEFAULT_WWW_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDEFAULT_WWW_SERVER","textEdit":{"newText":"DEFAULT_WWW_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"DOMAIN_NAME_SERVER","insertText":"DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•DOMAIN_NAME_SERVER","score":0.84486329555511475,"sortText":"416fcf5cDOMAIN_NAME_SERVER","textEdit":{"newText":"DOMAIN_NAME_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVERS","insertText":"NETWORK_INFORMATION_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVERS","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVERS","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_DOMAIN","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_DOMAIN","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_DOMAIN","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","score":0.84486329555511475,"sortText":"416fcf5cNETWORK_INFORMATION_SERVICE_PLUS_SERVERS","textEdit":{"newText":"NETWORK_INFORMATION_SERVICE_PLUS_SERVERS","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"POP3_SERVER","insertText":"POP3_SERVER","insertTextFormat":2,"kind":20,"label":"•POP3_SERVER","score":0.84486329555511475,"sortText":"416fcf5cPOP3_SERVER","textEdit":{"newText":"POP3_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nRFC 1497 Vendor Extensions"},"filterText":"RESOURCE_LOCATION_SERVER","insertText":"RESOURCE_LOCATION_SERVER","insertTextFormat":2,"kind":20,"label":"•RESOURCE_LOCATION_SERVER","score":0.84486329555511475,"sortText":"416fcf5cRESOURCE_LOCATION_SERVER","textEdit":{"newText":"RESOURCE_LOCATION_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETWORK_TIME_PROTOCOL_SERVERS","insertText":"NETWORK_TIME_PROTOCOL_SERVERS","insertTextFormat":2,"kind":20,"label":"•NETWORK_TIME_PROTOCOL_SERVERS","score":0.84486323595046997,"sortText":"41a7b70bNETWORK_TIME_PROTOCOL_SERVERS","textEdit":{"newText":"NETWORK_TIME_PROTOCOL_SERVERS","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","insertTextFormat":2,"kind":20,"label":"•STREETTALK_DIRECTORY_ASSISTANCE_SERVER","score":0.84486323595046997,"sortText":"41a7b70bSTREETTALK_DIRECTORY_ASSISTANCE_SERVER","textEdit":{"newText":"STREETTALK_DIRECTORY_ASSISTANCE_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"tcpip_adapter.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"tcpip_adapter_dhcp_option_id_t","documentation":{"kind":"markdown","value":"From `\"tcpip_adapter.h\"`  \nDomain name server"},"filterText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•TCPIP_ADAPTER_DOMAIN_NAME_SERVER","score":0.93569719791412354,"sortText":"41e04ec4TCPIP_ADAPTER_DOMAIN_NAME_SERVER","textEdit":{"newText":"TCPIP_ADAPTER_DOMAIN_NAME_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"X_WINDOW_SYSTEM_FONT_SERVER","insertText":"X_WINDOW_SYSTEM_FONT_SERVER","insertTextFormat":2,"kind":20,"label":"•X_WINDOW_SYSTEM_FONT_SERVER","score":0.84486329555511475,"sortText":"41efcf5cX_WINDOW_SYSTEM_FONT_SERVER","textEdit":{"newText":"X_WINDOW_SYSTEM_FONT_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"rom/spi_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_rom_spiflash_result_t","documentation":{"kind":"markdown","value":"From `\"rom/spi_flash.h\"`"},"filterText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertText":"ESP_ROM_SPIFLASH_RESULT_ERR","insertTextFormat":2,"kind":20,"label":"•ESP_ROM_SPIFLASH_RESULT_ERR","score":1.2690917253494263,"sortText":"42276889ESP_ROM_SPIFLASH_RESULT_ERR","textEdit":{"newText":"ESP_ROM_SPIFLASH_RESULT_ERR","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp_system.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"deprecated":true,"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"esp_system.h\"`  \n@brief Read hardware MAC address.  \nFunction has been renamed to esp_efuse_mac_get_default.  \nThis name will be removed in a future release.  \n@param mac hardware MAC address, length: 6 bytes.  \n@return ESP_OK on success"},"filterText":"system_efuse_read_mac","insertText":"system_efuse_read_mac(${1:uint8_t *mac})","insertTextFormat":2,"kind":3,"label":"•system_efuse_read_mac(uint8_t *mac)","score":0.13747210800647736,"sortText":"42444e03system_efuse_read_mac","textEdit":{"newText":"system_efuse_read_mac(${1:uint8_t *mac})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nApplication and Service Parameters"},"filterText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","insertTextFormat":2,"kind":20,"label":"•NETBIOS_OVER_TCP_IP_NAME_SERVER","score":0.84486329555511475,"sortText":"426fcf5cNETBIOS_OVER_TCP_IP_NAME_SERVER","textEdit":{"newText":"NETBIOS_OVER_TCP_IP_NAME_SERVER","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `<list>`"},"filterText":"__throw_system_error","insertText":"std::__throw_system_error(${1:int})","insertTextFormat":2,"kind":3,"label":"•std::__throw_system_error(int)","score":0.092650346457958221,"sortText":"430300b6__throw_system_error","textEdit":{"newText":"std::__throw_system_error(${1:int})","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}}}}]}}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":160,"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":195},"contentChanges":[{"range":{"start":{"line":273,"character":7},"end":{"line":273,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1599

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Ser'","range":{"end":{"character":7,"line":273},"start":{"character":4,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":194}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":160,"jsonrpc":"2.0"}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":196},"contentChanges":[{"range":{"start":{"line":273,"character":8},"end":{"line":273,"character":8}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1600

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seri'","range":{"end":{"character":8,"line":273},"start":{"character":4,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":195}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":197},"contentChanges":[{"range":{"start":{"line":273,"character":9},"end":{"line":273,"character":9}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1980

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h:116:23:\nnote: 'Serial' declared here","range":{"end":{"character":9,"line":273},"start":{"character":4,"line":273}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":196}}Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":197}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":10},"end":{"line":273,"character":10}},"context":{"diagnostics":[]}},"id":161,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":161,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":162,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":162,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":281},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":311},"start":{"character":0,"line":283}},"selectionRange":{"end":{"character":10,"line":283},"start":{"character":5,"line":283}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":317},"start":{"character":0,"line":315}},"selectionRange":{"end":{"character":9,"line":315},"start":{"character":5,"line":315}}}]}
>>>
Content-Length: 235

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":10},"context":{"triggerKind":3}},"id":163,"jsonrpc":"2.0"}
<<<
Content-Length: 15947

{"id":163,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial","insertText":"Serial","insertTextFormat":2,"kind":6,"label":"•Serial","score":24.821348190307617,"sortText":"3db96de1Serial","textEdit":{"newText":"Serial","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"serialPlotter","insertText":"serialPlotter()","insertTextFormat":2,"kind":3,"label":" serialPlotter()","score":13.502143859863281,"sortText":"3ea7f738serialPlotter","textEdit":{"newText":"serialPlotter()","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"detail":"void","filterText":"serialPrint","insertText":"serialPrint()","insertTextFormat":2,"kind":3,"label":" serialPrint()","score":11.079595565795898,"sortText":"3eceb9faserialPrint","textEdit":{"newText":"serialPrint()","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"HardwareSerial","insertText":"HardwareSerial","insertTextFormat":2,"kind":7,"label":"•HardwareSerial","score":7.2600002288818359,"sortText":"3f48147aHardwareSerial","textEdit":{"newText":"HardwareSerial","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"detail":"[3 overloads]","filterText":"HardwareSerial","insertText":"HardwareSerial($0)","insertTextFormat":2,"kind":4,"label":" HardwareSerial(…)","score":6.6000003814697266,"sortText":"3f58ccccHardwareSerial","textEdit":{"newText":"HardwareSerial($0)","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial1","insertText":"Serial1","insertTextFormat":2,"kind":6,"label":"•Serial1","score":2.2556054592132568,"sortText":"3fefa429Serial1","textEdit":{"newText":"Serial1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"HardwareSerial","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"Serial2","insertText":"Serial2","insertTextFormat":2,"kind":6,"label":"•Serial2","score":2.2556054592132568,"sortText":"3fefa429Serial2","textEdit":{"newText":"Serial2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"HardwareSerial.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"HardwareSerial.h\"`"},"filterText":"serialEventRun","insertText":"serialEventRun()","insertTextFormat":2,"kind":3,"label":"•serialEventRun()","score":2.2556054592132568,"sortText":"3fefa429serialEventRun","textEdit":{"newText":"serialEventRun()","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"documentation":{"kind":"markdown","value":"From `\"Arduino.h\"`"},"filterText":"SERIAL","insertText":"SERIAL","insertTextFormat":2,"kind":1,"label":" SERIAL","score":1.2639456987380981,"sortText":"3fffeb90SERIAL","textEdit":{"newText":"SERIAL","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E1","insertText":"SERIAL_5E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_5E1","textEdit":{"newText":"SERIAL_5E1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5E2","insertText":"SERIAL_5E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5E2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_5E2","textEdit":{"newText":"SERIAL_5E2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N1","insertText":"SERIAL_5N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_5N1","textEdit":{"newText":"SERIAL_5N1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5N2","insertText":"SERIAL_5N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5N2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_5N2","textEdit":{"newText":"SERIAL_5N2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O1","insertText":"SERIAL_5O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_5O1","textEdit":{"newText":"SERIAL_5O1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_5O2","insertText":"SERIAL_5O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_5O2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_5O2","textEdit":{"newText":"SERIAL_5O2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E1","insertText":"SERIAL_6E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_6E1","textEdit":{"newText":"SERIAL_6E1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6E2","insertText":"SERIAL_6E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6E2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_6E2","textEdit":{"newText":"SERIAL_6E2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N1","insertText":"SERIAL_6N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_6N1","textEdit":{"newText":"SERIAL_6N1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6N2","insertText":"SERIAL_6N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6N2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_6N2","textEdit":{"newText":"SERIAL_6N2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O1","insertText":"SERIAL_6O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_6O1","textEdit":{"newText":"SERIAL_6O1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_6O2","insertText":"SERIAL_6O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_6O2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_6O2","textEdit":{"newText":"SERIAL_6O2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E1","insertText":"SERIAL_7E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_7E1","textEdit":{"newText":"SERIAL_7E1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7E2","insertText":"SERIAL_7E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7E2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_7E2","textEdit":{"newText":"SERIAL_7E2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N1","insertText":"SERIAL_7N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_7N1","textEdit":{"newText":"SERIAL_7N1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7N2","insertText":"SERIAL_7N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7N2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_7N2","textEdit":{"newText":"SERIAL_7N2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O1","insertText":"SERIAL_7O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_7O1","textEdit":{"newText":"SERIAL_7O1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_7O2","insertText":"SERIAL_7O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_7O2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_7O2","textEdit":{"newText":"SERIAL_7O2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E1","insertText":"SERIAL_8E1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_8E1","textEdit":{"newText":"SERIAL_8E1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8E2","insertText":"SERIAL_8E2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8E2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_8E2","textEdit":{"newText":"SERIAL_8E2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N1","insertText":"SERIAL_8N1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_8N1","textEdit":{"newText":"SERIAL_8N1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8N2","insertText":"SERIAL_8N2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8N2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_8N2","textEdit":{"newText":"SERIAL_8N2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O1","insertText":"SERIAL_8O1","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O1","score":0.9373098611831665,"sortText":"40c209ddSERIAL_8O1","textEdit":{"newText":"SERIAL_8O1","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-uart.h\"`"},"filterText":"SERIAL_8O2","insertText":"SERIAL_8O2","insertTextFormat":2,"kind":1,"label":"•SERIAL_8O2","score":0.9373098611831665,"sortText":"40c209ddSERIAL_8O2","textEdit":{"newText":"SERIAL_8O2","range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}}]}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":198},"contentChanges":[{"range":{"start":{"line":273,"character":10},"end":{"line":273,"character":10}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 258

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":11},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":164,"jsonrpc":"2.0"}
<<<
Content-Length: 9143

{"id":164,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"[14 overloads]","filterText":"print","insertText":"print($0)","insertTextFormat":2,"kind":2,"label":" print(…)","score":14.175917625427246,"sortText":"3e9d2f71print","textEdit":{"newText":"print($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"[15 overloads]","filterText":"println","insertText":"println($0)","insertTextFormat":2,"kind":2,"label":" println(…)","score":12.132729530334473,"sortText":"3ebde057println","textEdit":{"newText":"println($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"int","filterText":"available","insertText":"available()","insertTextFormat":2,"kind":2,"label":" available()","score":9.6800003051757812,"sortText":"3ee51eb8available","textEdit":{"newText":"available()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"int","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"kind":2,"label":" availableForWrite()","score":9.6800003051757812,"sortText":"3ee51eb8availableForWrite","textEdit":{"newText":"availableForWrite()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"uint32_t","filterText":"baudRate","insertText":"baudRate()","insertTextFormat":2,"kind":2,"label":" baudRate()","score":9.6800003051757812,"sortText":"3ee51eb8baudRate","textEdit":{"newText":"baudRate()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"void","filterText":"begin","insertText":"begin(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" begin(unsigned long baud, uint32_t config = SERIAL_8N1, int8_t rxPin = -1, int8_t txPin = -1, bool invert = false, unsigned long timeout_ms = 20000UL)","score":9.6800003051757812,"sortText":"3ee51eb8begin","textEdit":{"newText":"begin(${1:unsigned long baud})","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"void","filterText":"end","insertText":"end()","insertTextFormat":2,"kind":2,"label":" end()","score":9.6800003051757812,"sortText":"3ee51eb8end","textEdit":{"newText":"end()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"[2 overloads]","filterText":"flush","insertText":"flush($0)","insertTextFormat":2,"kind":2,"label":" flush(…)","score":9.6800003051757812,"sortText":"3ee51eb8flush","textEdit":{"newText":"flush($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"int","filterText":"peek","insertText":"peek()","insertTextFormat":2,"kind":2,"label":" peek()","score":9.6800003051757812,"sortText":"3ee51eb8peek","textEdit":{"newText":"peek()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"[3 overloads]","filterText":"read","insertText":"read($0)","insertTextFormat":2,"kind":2,"label":" read(…)","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"void","filterText":"setDebugOutput","insertText":"setDebugOutput(${1:bool})","insertTextFormat":2,"kind":2,"label":" setDebugOutput(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setDebugOutput","textEdit":{"newText":"setDebugOutput(${1:bool})","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"size_t","filterText":"setRxBufferSize","insertText":"setRxBufferSize(${1:size_t})","insertTextFormat":2,"kind":2,"label":" setRxBufferSize(size_t)","score":9.6800003051757812,"sortText":"3ee51eb8setRxBufferSize","textEdit":{"newText":"setRxBufferSize(${1:size_t})","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"void","filterText":"setRxInvert","insertText":"setRxInvert(${1:bool})","insertTextFormat":2,"kind":2,"label":" setRxInvert(bool)","score":9.6800003051757812,"sortText":"3ee51eb8setRxInvert","textEdit":{"newText":"setRxInvert(${1:bool})","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"void","filterText":"updateBaudRate","insertText":"updateBaudRate(${1:unsigned long baud})","insertTextFormat":2,"kind":2,"label":" updateBaudRate(unsigned long baud)","score":9.6800003051757812,"sortText":"3ee51eb8updateBaudRate","textEdit":{"newText":"updateBaudRate(${1:unsigned long baud})","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"[8 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":9.6800003051757812,"sortText":"3ee51eb8write","textEdit":{"newText":"write($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"size_t","filterText":"printf","insertText":"printf(${1:const char *format, ...})","insertTextFormat":2,"kind":2,"label":" printf(const char *format, ...)","score":7.2600007057189941,"sortText":"3f17ae13printf","textEdit":{"newText":"printf(${1:const char *format, ...})","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"[2 overloads]","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"kind":2,"label":" readBytes(…)","score":7.2600007057189941,"sortText":"3f17ae13readBytes","textEdit":{"newText":"readBytes($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"[2 overloads]","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"kind":2,"label":" readBytesUntil(…)","score":7.2600007057189941,"sortText":"3f17ae13readBytesUntil","textEdit":{"newText":"readBytesUntil($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"void","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"kind":2,"label":" clearWriteError()","score":4.8400001525878906,"sortText":"3f651eb8clearWriteError","textEdit":{"newText":"clearWriteError()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"[5 overloads]","filterText":"find","insertText":"find($0)","insertTextFormat":2,"kind":2,"label":" find(…)","score":4.8400001525878906,"sortText":"3f651eb8find","textEdit":{"newText":"find($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"[4 overloads]","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"kind":2,"label":" findUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8findUntil","textEdit":{"newText":"findUntil($0)","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"unsigned long","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"kind":2,"label":" getTimeout()","score":4.8400001525878906,"sortText":"3f651eb8getTimeout","textEdit":{"newText":"getTimeout()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"int","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"kind":2,"label":" getWriteError()","score":4.8400001525878906,"sortText":"3f651eb8getWriteError","textEdit":{"newText":"getWriteError()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"float","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"kind":2,"label":" parseFloat()","score":4.8400001525878906,"sortText":"3f651eb8parseFloat","textEdit":{"newText":"parseFloat()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"long","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"kind":2,"label":" parseInt()","score":4.8400001525878906,"sortText":"3f651eb8parseInt","textEdit":{"newText":"parseInt()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"String","filterText":"readString","insertText":"readString()","insertTextFormat":2,"kind":2,"label":" readString()","score":4.8400001525878906,"sortText":"3f651eb8readString","textEdit":{"newText":"readString()","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"String","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"kind":2,"label":" readStringUntil(char terminator)","score":4.8400001525878906,"sortText":"3f651eb8readStringUntil","textEdit":{"newText":"readStringUntil(${1:char terminator})","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}},{"detail":"void","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"kind":2,"label":" setTimeout(unsigned long timeout)","score":4.8400001525878906,"sortText":"3f651eb8setTimeout","textEdit":{"newText":"setTimeout(${1:unsigned long timeout})","range":{"end":{"character":11,"line":273},"start":{"character":11,"line":273}}}}]}}Content-Length: 1593

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":198}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":199},"contentChanges":[{"range":{"start":{"line":273,"character":11},"end":{"line":273,"character":11}},"text":"p"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1799

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'p' in 'HardwareSerial'","range":{"end":{"character":12,"line":273},"start":{"character":11,"line":273}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":199}}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":200},"contentChanges":[{"range":{"start":{"line":273,"character":12},"end":{"line":273,"character":12}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1800

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pr' in 'HardwareSerial'","range":{"end":{"character":13,"line":273},"start":{"character":11,"line":273}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":200}}
>>>
Content-Length: 306

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":201},"contentChanges":[{"range":{"start":{"line":273,"character":11},"end":{"line":273,"character":13}},"rangeLength":2,"text":"print()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 4287

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"ovl_no_viable_member_function_in_call","message":"No matching member function for call to 'print'\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:81:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:82:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:83:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:84:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:93:12:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:85:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:86:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:87:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:88:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:89:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:90:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:91:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:92:12:\nnote: candidate function not viable: requires at least 1 argument, but 0 were provided\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.h:94:12:\nnote: candidate function not viable: requires at least argument 'timeinfo', but no arguments were provided","range":{"end":{"character":16,"line":273},"start":{"character":4,"line":273}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":201}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":17},"end":{"line":273,"character":17}},"context":{"diagnostics":[]}},"id":165,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":165,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 9409

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":202},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\n//#include \u003cArduino.h\u003e\n// For IMU\n#include \u003cAdafruit_LSM6DS33.h\u003e\n#include \u003cAdafruit_Sensor.h\u003e\n\n//For WiFi and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\n//  Create sensor object\nAdafruit_LSM6DS33 imu;\n\n//  Create sensor object\nsensors_event_t a,g,temp;\nfloat accX, accY, accZ,\n      accRoll,      accPitch,     accYaw;            // units degrees (roll and pitch noisy, yaw not possible)\n\n\n// LDR sensor pin\nconst int ldrPin=34;\n// Flashed pins\nconst int rightPin=13;\nconst int leftPin=14;\nconst int lightPin=12;\nint lightInit; // initial value\n//Receiver MAC Address\n//C4:4F:33:6B:0F:E1\nuint8_t broadcastAddress[] = {0xC4, 0x4F, 0x33, 0x6B, 0x0F, 0xE1};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct masterMessage {\n  float roll;\n  float pitch;\n  int lightSensor;\n} masterMessage;\n\ntypedef struct receivedMessage{\n  bool imuUsage;\n  //String rec_message;\n}receivedMessage;\n\n// Define the masterMessage\nmasterMessage msgToSlave;\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nreceivedMessage messageFromSlave;\n\n// String receivedString; \n// Variable to store if sending data was successful\nString success;\n// Should be global ... ( TODO -\u003e Check why ???)\nesp_now_peer_info_t peerInfo;\n\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW();\n#line 83 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initIMU();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initLDRSensor();\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPrint();\n#line 121 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPlotter();\n#line 136 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 147 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 157 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getAccReadings();\n#line 166 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getLDRReadings();\n#line 172 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid doCalculations();\n#line 180 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid blinking(int pin);\n#line 195 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid checkAlarms();\n#line 214 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task1(void * parameters);\n#line 242 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task2(void * parameters);\n#line 249 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid setup();\n#line 281 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid loop();\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  //esp_now_peer_info_t peerInfo;\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\nvoid initIMU(){\n  while (!Serial)\n    delay(10); // will pause Zero, Leonardo, etc until serial console opens\n\n  Serial.println(\"Adafruit LSM6DS33 test!\");\n\n  if (!imu.begin_I2C()) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS)) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS, LSM_SCK, LSM_MISO, LSM_MOSI)) {\n    Serial.println(\"Failed to find LSM6DS33 chip\");\n    while (1) {\n      delay(10);\n    }\n  }  \n  Serial.println(\"Adafruit LSM6DS33 FOUND!\");\n}\n\nvoid initLDRSensor(){\n  //we will take a single reading from the light sensor and store it in the lightCal        \n  //variable. This will give us a prelinary value to compare against in the loop\n  pinMode(ldrPin, INPUT);\n  // lightInit=analogRead(ldrPin);\n}\n\nvoid serialPrint(){\n  Serial.print(\"X: \");\n  Serial.print(accX);\n  Serial.print(\"  Y: \");\n  Serial.print(accY);\n  Serial.print(\"  Z: \");\n  Serial.print(accZ);\n  v itch);\n  Serial.print(\"  Light: \");\n  Serial.print(msgToSlave.lightSensor);\n  Serial.println();\n\n}\n\nvoid serialPlotter(){\n  // Serial.print(accX);\n  // Serial.print(accY);\n  // Serial.print(accZ);\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"\\t\");\n  Serial.println(msgToSlave.pitch);\n  \n  // Serial.print(\"  Light: \");\n  // Serial.print(msgToSlave.lightSensor);\n  // Serial.println();\n\n}\n\n// Callback Function that sents message\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  //Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  //Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    success = \"Delivery Success :)\";\n  }\n  else{\n    success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026messageFromSlave,incomingData, sizeof(messageFromSlave));\n  //Just for debug\n  //Serial.print(\"Bytes received: \");\n  //Serial.println(len);\n\n  // Write the data that have been sent\n  // receivedString = messageFromSlave.rec_message;\n  \n}\nvoid getAccReadings(){\n  imu.getEvent(\u0026a, \u0026g, \u0026temp);\n  // Get current acceleration values\n  accX = a.acceleration.x;\n  accY = a.acceleration.y;\n  accZ = a.acceleration.z;\n}\n\n\nvoid getLDRReadings(){\n  // Read the current light Levels\n  // lightInit=\n  msgToSlave.lightSensor=analogRead(ldrPin);\n}\n\nvoid doCalculations() {\n  /*\n  Calculate Roll and pitch and save them into the structure message\n  */\n  msgToSlave.roll = atan2(accY, accZ) * 180/M_PI;\n  msgToSlave.pitch = atan2(-accX, sqrt(accY*accY + accZ*accZ)) * 180/M_PI;\n}\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (msgToSlave.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n  if (msgToSlave.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (msgToSlave.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  \n}\n\n\nvoid task1(void * parameters){\n  // for(;;){\n    Serial.print(\"Task 1\");\n    //Get accelation readings\n    getAccReadings();\n    getLDRReadings();\n    doCalculations();\n    \n    // Send message via ESP-NOW\n    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) \u0026msgToSlave, sizeof(msgToSlave));\n    \n    if (result == ESP_OK) {\n      // Serial.println(\"Sent with success\");\n    }\n    else {\n      // Serial.println(\"Error sending the data\");\n    }\n    // Delay should be reduced ? \n    // serialPrint();\n    serialPlotter();\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n    Serial.print(\" Overflow Stack :\");\n    Serial.println(uxTaskGetStackHighWaterMark(NULL));\n    Serial.print(\" Heap before malloc (Bytes): \");\n    Serial.print()\n}\n\nvoid task2(void * parameters){\n  for(;;){\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n}\n\nvoid setup(){\n  Serial.begin(115200);\n  initIMU();\n  initLDRSensor();\n  initESPNOW();\n\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n\n  xTaskCreate(\n    task1, // function name\n    \"Task1\", // task name\n    2000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n  delay(500);\n  xTaskCreate(\n    task2, // function name\n    \"Task2\", // task name\n    1000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n}\n\n\n\nvoid loop(){\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":203},"contentChanges":[{"range":{"start":{"line":273,"character":17},"end":{"line":273,"character":17}},"text":"x"}]},"jsonrpc":"2.0"}Content-Length: 235

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":18},"context":{"triggerKind":1}},"id":166,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":2,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":2,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 86499

{"id":166,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"detail":"BaseType_t","filterText":"xTaskCreate","insertText":"xTaskCreate(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask})","insertTextFormat":2,"kind":3,"label":" xTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)","score":2.5243632793426514,"sortText":"3fde70d5xTaskCreate","textEdit":{"newText":"xTaskCreate(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"documentation":{"kind":"markdown","value":"Parameters required to create an MPU protected task."},"filterText":"xTASK_PARAMETERS","insertText":"xTASK_PARAMETERS","insertTextFormat":2,"kind":22,"label":" xTASK_PARAMETERS","score":2.2556054592132568,"sortText":"3fefa429xTASK_PARAMETERS","textEdit":{"newText":"xTASK_PARAMETERS","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"documentation":{"kind":"markdown","value":"Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.  \nWe need this struct because TCB_t is defined (hidden) in tasks.c."},"filterText":"xTASK_SNAPSHOT","insertText":"xTASK_SNAPSHOT","insertTextFormat":2,"kind":22,"label":" xTASK_SNAPSHOT","score":2.2556054592132568,"sortText":"3fefa429xTASK_SNAPSHOT","textEdit":{"newText":"xTASK_SNAPSHOT","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"documentation":{"kind":"markdown","value":"Used with the uxTaskGetSystemState() function to return the state of each task in the system."},"filterText":"xTASK_STATUS","insertText":"xTASK_STATUS","insertTextFormat":2,"kind":22,"label":" xTASK_STATUS","score":2.2556054592132568,"sortText":"3fefa429xTASK_STATUS","textEdit":{"newText":"xTASK_STATUS","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Calls the hook function associated with xTask. Passing xTask as NULL has the effect of calling the Running tasks (the calling task) hook function.  \n@param xTask Handle of the task to call the hook for.  \n@param pvParameter Parameter passed to the hook function for the task to interpret as it wants. The return value is the value returned by the task hook function registered by the user."},"filterText":"xTaskCallApplicationTaskHook","insertText":"xTaskCallApplicationTaskHook(${1:TaskHandle_t xTask}, ${2:void *pvParameter})","insertTextFormat":2,"kind":3,"label":" xTaskCallApplicationTaskHook(TaskHandle_t xTask, void *pvParameter)","score":2.2556054592132568,"sortText":"3fefa429xTaskCallApplicationTaskHook","textEdit":{"newText":"xTaskCallApplicationTaskHook(${1:TaskHandle_t xTask}, ${2:void *pvParameter})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Compare the time status now with that previously captured to see if the timeout has expired."},"filterText":"xTaskCheckForTimeOut","insertText":"xTaskCheckForTimeOut(${1:TimeOut_t *const pxTimeOut}, ${2:TickType_t *const pxTicksToWait})","insertTextFormat":2,"kind":3,"label":" xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut, TickType_t *const pxTicksToWait)","score":2.2556054592132568,"sortText":"3fefa429xTaskCheckForTimeOut","textEdit":{"newText":"xTaskCheckForTimeOut(${1:TimeOut_t *const pxTimeOut}, ${2:TickType_t *const pxTicksToWait})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","filterText":"xTaskCreatePinnedToCore","insertText":"xTaskCreatePinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask}, ${7:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":" xTaskCreatePinnedToCore(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask, const BaseType_t xCoreID)","score":2.2556054592132568,"sortText":"3fefa429xTaskCreatePinnedToCore","textEdit":{"newText":"xTaskCreatePinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask}, ${7:const BaseType_t xCoreID})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","filterText":"xTaskCreateRestricted","insertText":"xTaskCreateRestricted(${1:const TaskParameters_t *const pxTaskDefinition}, ${2:TaskHandle_t *pxCreatedTask})","insertTextFormat":2,"kind":3,"label":" xTaskCreateRestricted(const TaskParameters_t *const pxTaskDefinition, TaskHandle_t *pxCreatedTask)","score":2.2556054592132568,"sortText":"3fefa429xTaskCreateRestricted","textEdit":{"newText":"xTaskCreateRestricted(${1:const TaskParameters_t *const pxTaskDefinition}, ${2:TaskHandle_t *pxCreatedTask})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"TaskHandle_t","filterText":"xTaskCreateStatic","insertText":"xTaskCreateStatic(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer})","insertTextFormat":2,"kind":3,"label":" xTaskCreateStatic(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t ulStackDepth, void *const pvParameters, UBaseType_t uxPriority, StackType_t *const pxStackBuffer, StaticTask_t *const pxTaskBuffer)","score":2.2556054592132568,"sortText":"3fefa429xTaskCreateStatic","textEdit":{"newText":"xTaskCreateStatic(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"TaskHandle_t","filterText":"xTaskCreateStaticPinnedToCore","insertText":"xTaskCreateStaticPinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer}, ${8:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":" xTaskCreateStaticPinnedToCore(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t ulStackDepth, void *const pvParameters, UBaseType_t uxPriority, StackType_t *const pxStackBuffer, StaticTask_t *const pxTaskBuffer, const BaseType_t xCoreID)","score":2.2556054592132568,"sortText":"3fefa429xTaskCreateStaticPinnedToCore","textEdit":{"newText":"xTaskCreateStaticPinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer}, ${8:const BaseType_t xCoreID})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Get the current core affinity of a task"},"filterText":"xTaskGetAffinity","insertText":"xTaskGetAffinity(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" xTaskGetAffinity(TaskHandle_t xTask)","score":2.2556054592132568,"sortText":"3fefa429xTaskGetAffinity","textEdit":{"newText":"xTaskGetAffinity(${1:TaskHandle_t xTask})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Return the handle of the calling task."},"filterText":"xTaskGetCurrentTaskHandle","insertText":"xTaskGetCurrentTaskHandle()","insertTextFormat":2,"kind":3,"label":" xTaskGetCurrentTaskHandle()","score":2.2556054592132568,"sortText":"3fefa429xTaskGetCurrentTaskHandle","textEdit":{"newText":"xTaskGetCurrentTaskHandle()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Return the handle of the task running on a certain CPU. Because of the nature of SMP processing, there is no guarantee that this value will still be valid on return and should only be used for debugging purposes."},"filterText":"xTaskGetCurrentTaskHandleForCPU","insertText":"xTaskGetCurrentTaskHandleForCPU(${1:BaseType_t cpuid})","insertTextFormat":2,"kind":3,"label":" xTaskGetCurrentTaskHandleForCPU(BaseType_t cpuid)","score":2.2556054592132568,"sortText":"3fefa429xTaskGetCurrentTaskHandleForCPU","textEdit":{"newText":"xTaskGetCurrentTaskHandleForCPU(${1:BaseType_t cpuid})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Get the handle of idle task for the current CPU.  \nxTaskGetIdleTaskHandle() is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.  \n@return The handle of the idle task. It is not valid to call xTaskGetIdleTaskHandle() before the scheduler has been started."},"filterText":"xTaskGetIdleTaskHandle","insertText":"xTaskGetIdleTaskHandle()","insertTextFormat":2,"kind":3,"label":" xTaskGetIdleTaskHandle()","score":2.2556054592132568,"sortText":"3fefa429xTaskGetIdleTaskHandle","textEdit":{"newText":"xTaskGetIdleTaskHandle()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Get the handle of idle task for the given CPU.  \nxTaskGetIdleTaskHandleForCPU() is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.  \n@param cpuid The CPU to get the handle for  \n@return Idle task handle of a given cpu. It is not valid to call xTaskGetIdleTaskHandleForCPU() before the scheduler has been started."},"filterText":"xTaskGetIdleTaskHandleForCPU","insertText":"xTaskGetIdleTaskHandleForCPU(${1:UBaseType_t cpuid})","insertTextFormat":2,"kind":3,"label":" xTaskGetIdleTaskHandleForCPU(UBaseType_t cpuid)","score":2.2556054592132568,"sortText":"3fefa429xTaskGetIdleTaskHandleForCPU","textEdit":{"newText":"xTaskGetIdleTaskHandleForCPU(${1:UBaseType_t cpuid})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Returns the scheduler state as taskSCHEDULER_RUNNING,  \ntaskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED."},"filterText":"xTaskGetSchedulerState","insertText":"xTaskGetSchedulerState()","insertTextFormat":2,"kind":3,"label":" xTaskGetSchedulerState()","score":2.2556054592132568,"sortText":"3fefa429xTaskGetSchedulerState","textEdit":{"newText":"xTaskGetSchedulerState()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Get tick count  \n@return The count of ticks since vTaskStartScheduler was called.  \n\\\\ingroup TaskUtils"},"filterText":"xTaskGetTickCount","insertText":"xTaskGetTickCount()","insertTextFormat":2,"kind":3,"label":" xTaskGetTickCount()","score":2.2556054592132568,"sortText":"3fefa429xTaskGetTickCount","textEdit":{"newText":"xTaskGetTickCount()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Get tick count from ISR  \n@return The count of ticks since vTaskStartScheduler was called.  \nThis is a version of xTaskGetTickCount() that is safe to be called from an ISR - provided that TickType_t is the natural word size of the microcontroller being used or interrupt nesting is either not supported or not being used.  \n\\\\ingroup TaskUtils"},"filterText":"xTaskGetTickCountFromISR","insertText":"xTaskGetTickCountFromISR()","insertTextFormat":2,"kind":3,"label":" xTaskGetTickCountFromISR()","score":2.2556054592132568,"sortText":"3fefa429xTaskGetTickCountFromISR","textEdit":{"newText":"xTaskGetTickCountFromISR()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"\\----------------------------------------------------------- SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES  \n\\----------------------------------------------------------  \n@cond  \nTHIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE. IT IS ONLY INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.  \nCalled from the real time kernel tick (either preemptive or cooperative),  \nthis increments the tick count and checks if any tasks that are blocked for a finite period required removing from a blocked list and placing on a ready list. If a non-zero value is returned then a context switch is required because either:  \n\\+ A task was removed from a blocked list because its timeout had expired,  \nor + Time slicing is in use and there is a task of equal priority to the currently running task."},"filterText":"xTaskIncrementTick","insertText":"xTaskIncrementTick()","insertTextFormat":2,"kind":3,"label":" xTaskIncrementTick()","score":2.2556054592132568,"sortText":"3fefa429xTaskIncrementTick","textEdit":{"newText":"xTaskIncrementTick()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Send task notification.  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param xTaskToNotify The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().  \n@param ulValue Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.  \n@param eAction Specifies how the notification updates the task's notification value, if at all. Valid values for eAction are as follows:  \n\\- eSetBits:  \nThe task's notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.  \n\\- eIncrement:  \nThe task's notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithOverwrite:  \nThe task's notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithoutOverwrite:  \nIf the task being notified did not already have a notification pending then the task's notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.  \n\\- eNoAction:  \nThe task receives a notification without its notification value being   updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n@return Dependent on the value of eAction. See the description of the eAction parameter.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotify","insertText":"xTaskNotify(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction})","insertTextFormat":2,"kind":3,"label":" xTaskNotify(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction)","score":2.2556054592132568,"sortText":"3fefa429xTaskNotify","textEdit":{"newText":"xTaskNotify(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Send task notification from an ISR.  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nA version of xTaskNotify() that can be used from an interrupt service routine (ISR).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param xTaskToNotify The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().  \n@param ulValue Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.  \n@param eAction Specifies how the notification updates the task's notification value, if at all. Valid values for eAction are as follows:  \n\\- eSetBits:  \nThe task's notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.  \n\\- eIncrement:  \nThe task's notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithOverwrite:  \nThe task's notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithoutOverwrite:  \nIf the task being notified did not already have a notification pending then the task's notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.  \n\\- eNoAction:  \nThe task receives a notification without its notification value being updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n@param pxHigherPriorityTaskWoken xTaskNotifyFromISR() will set  \n\\*pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the task to which the notification was sent to leave the Blocked state, and the unblocked task has a priority higher than the currently running task. If xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should be requested before the interrupt is exited. How a context switch is requested from an ISR is dependent on the port - see the documentation page for the port in use.  \n@return Dependent on the value of eAction. See the description of the eAction parameter.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotifyFromISR","insertText":"xTaskNotifyFromISR(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","insertTextFormat":2,"kind":3,"label":" xTaskNotifyFromISR(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken)","score":2.2556054592132568,"sortText":"3fefa429xTaskNotifyFromISR","textEdit":{"newText":"xTaskNotifyFromISR(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Wait for task notification  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value will be cleared in the calling task's notification value before the task checks to see if any notifications are pending, and optionally blocks if no notifications are pending. Setting ulBitsToClearOnEntry to ULONG_MAX (if limits.h is included) or 0xffffffffUL (if limits.h is not included) will have the effect of resetting the task's notification value to 0. Setting ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.  \n@param ulBitsToClearOnExit If a notification is pending or received before the calling task exits the xTaskNotifyWait() function then the task's notification value (see the xTaskNotify() API function) is passed out using the pulNotificationValue parameter. Then any bits that are set in ulBitsToClearOnExit will be cleared in the task's notification value (note  \n\\*pulNotificationValue is set before any bits are cleared). Setting ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL (if limits.h is not included) will have the effect of resetting the task's notification value to 0 before the function exits. Setting ulBitsToClearOnExit to 0 will leave the task's notification value unchanged when the function exits (in which case the value passed out in pulNotificationValue will match the task's notification value).  \n@param pulNotificationValue Used to pass the task's notification value out of the function. Note the value passed out will not be effected by the clearing of any bits caused by ulBitsToClearOnExit being non-zero.  \n@param xTicksToWait The maximum amount of time that the task should wait in the Blocked state for a notification to be received, should a notification not already be pending when xTaskNotifyWait() was called. The task will not consume any processing time while it is in the Blocked state. This is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time specified in milliseconds to a time specified in ticks.  \n@return If a notification was received (including notifications that were already pending when xTaskNotifyWait was called) then pdPASS is returned. Otherwise pdFAIL is returned.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotifyWait","insertText":"xTaskNotifyWait(${1:uint32_t ulBitsToClearOnEntry}, ${2:uint32_t ulBitsToClearOnExit}, ${3:uint32_t *pulNotificationValue}, ${4:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xTaskNotifyWait(uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait)","score":2.2556054592132568,"sortText":"3fefa429xTaskNotifyWait","textEdit":{"newText":"xTaskNotifyWait(${1:uint32_t ulBitsToClearOnEntry}, ${2:uint32_t ulBitsToClearOnExit}, ${3:uint32_t *pulNotificationValue}, ${4:TickType_t xTicksToWait})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Set the priority of a task back to its proper priority in the case that it inherited a higher priority while it was holding a semaphore."},"filterText":"xTaskPriorityDisinherit","insertText":"xTaskPriorityDisinherit(${1:const TaskHandle_t pxMutexHolder})","insertTextFormat":2,"kind":3,"label":" xTaskPriorityDisinherit(const TaskHandle_t pxMutexHolder)","score":2.2556054592132568,"sortText":"3fefa429xTaskPriorityDisinherit","textEdit":{"newText":"xTaskPriorityDisinherit(${1:const TaskHandle_t pxMutexHolder})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE. IT IS AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.  \nTHIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.  \nRemoves a task from both the specified event list and the list of blocked tasks, and places it on a ready queue.  \nxTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called if either an event occurs to unblock a task, or the block timeout period expires.  \nxTaskRemoveFromEventList() is used when the event list is in task priority order. It removes the list item from the head of the event list as that will have the highest priority owning task of all the tasks on the event list.  \nxTaskRemoveFromUnorderedEventList() is used when the event list is not ordered and the event list items hold something other than the owning tasks priority. In this case the event list item value is updated to the value passed in the xItemValue parameter.  \n@return pdTRUE if the task being removed has a higher priority than the task making the call, otherwise pdFALSE."},"filterText":"xTaskRemoveFromEventList","insertText":"xTaskRemoveFromEventList(${1:const List_t *const pxEventList})","insertTextFormat":2,"kind":3,"label":" xTaskRemoveFromEventList(const List_t *const pxEventList)","score":2.2556054592132568,"sortText":"3fefa429xTaskRemoveFromEventList","textEdit":{"newText":"xTaskRemoveFromEventList(${1:const List_t *const pxEventList})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","filterText":"xTaskRemoveFromUnorderedEventList","insertText":"xTaskRemoveFromUnorderedEventList(${1:ListItem_t *pxEventListItem}, ${2:const TickType_t xItemValue})","insertTextFormat":2,"kind":3,"label":" xTaskRemoveFromUnorderedEventList(ListItem_t *pxEventListItem, const TickType_t xItemValue)","score":2.2556054592132568,"sortText":"3fefa429xTaskRemoveFromUnorderedEventList","textEdit":{"newText":"xTaskRemoveFromUnorderedEventList(${1:ListItem_t *pxEventListItem}, ${2:const TickType_t xItemValue})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Resumes scheduler activity after it was suspended by a call to vTaskSuspendAll().  \nxTaskResumeAll() only resumes the scheduler. It does not unsuspend tasks that were previously suspended by a call to vTaskSuspend().  \n@return If resuming the scheduler caused a context switch then pdTRUE is returned, otherwise pdFALSE is returned.  \nExample usage:  \n@code{c} void vTask1( void * pvParameters ) { for( ;; ) { // Task code goes here.  \n// ...  \n// At some point the task wants to perform a long operation during // which it does not want to get swapped out. It cannot use // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the // operation may cause interrupts to be missed - including the // ticks.  \n// Prevent the real time kernel swapping out the task.  \nvTaskSuspendAll ();  \n// Perform the operation here. There is no need to use critical // sections as we have all the microcontroller processing time.  \n// During this time interrupts will still operate and the real // time kernel tick count will be maintained.  \n// ...  \n// The operation is complete. Restart the kernel. We want to force // a context switch - but there is no point if resuming the scheduler // caused a context switch already.  \nif( !xTaskResumeAll () ) { taskYIELD ();  \n} } }  \n@endcode  \n\\\\ingroup SchedulerControl"},"filterText":"xTaskResumeAll","insertText":"xTaskResumeAll()","insertTextFormat":2,"kind":3,"label":" xTaskResumeAll()","score":2.2556054592132568,"sortText":"3fefa429xTaskResumeAll","textEdit":{"newText":"xTaskResumeAll()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"An implementation of vTaskResume() that can be called from within an ISR.  \nINCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be available. See the configuration section for more information.  \nA task that has been suspended by one or more calls to vTaskSuspend () will be made available for running again by a single call to xTaskResumeFromISR ().  \nxTaskResumeFromISR() should not be used to synchronise a task with an interrupt if there is a chance that the interrupt could arrive prior to the task being suspended - as this can lead to interrupts being missed. Use of a semaphore as a synchronisation mechanism would avoid this eventuality.  \n@param xTaskToResume Handle to the task being readied.  \n@return pdTRUE if resuming the task should result in a context switch,  \notherwise pdFALSE. This is used by the ISR to determine if a context switch may be required following the ISR.  \n\\\\ingroup TaskCtrl"},"filterText":"xTaskResumeFromISR","insertText":"xTaskResumeFromISR(${1:TaskHandle_t xTaskToResume})","insertTextFormat":2,"kind":3,"label":" xTaskResumeFromISR(TaskHandle_t xTaskToResume)","score":2.2556054592132568,"sortText":"3fefa429xTaskResumeFromISR","textEdit":{"newText":"xTaskResumeFromISR(${1:TaskHandle_t xTaskToResume})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"It is preferred that the macros xQueueSend(), xQueueSendToFront() and xQueueSendToBack() are used in place of calling this function directly.  \nPost an item on a queue. The item is queued by copy, not by reference.  \nThis function must not be called from an interrupt service routine.  \nSee xQueueSendFromISR () for an alternative which may be used in an ISR.  \n@param xQueue The handle to the queue on which the item is to be posted.  \n@param pvItemToQueue A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.  \n@param xTicksToWait The maximum amount of time the task should block waiting for space to become available on the queue, should it already be full. The call will return immediately if this is set to 0 and the queue is full. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.  \n@param xCopyPosition Can take the value queueSEND_TO_BACK to place the item at the back of the queue, or queueSEND_TO_FRONT to place the item at the front of the queue (for high priority messages).  \n@return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.  \nExample usage:  \n@code{c} struct AMessage { char ucMessageID;  \nchar ucData[ 20 ];  \n} xMessage;  \nuint32_t ulVar = 10UL;  \nvoid vATask( void \\*pvParameters ) { QueueHandle_t xQueue1, xQueue2;  \nstruct AMessage \\*pxMessage;  \n// Create a queue capable of containing 10 uint32_t values.  \nxQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );  \n// Create a queue capable of containing 10 pointers to AMessage structures.  \n// These should be passed by pointer as they contain a lot of data.  \nxQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );  \n// ...  \nif( xQueue1 != 0 ) { // Send an uint32_t. Wait for 10 ticks for space to become // available if necessary.  \nif( xQueueGenericSend( xQueue1, ( void * ) &ulVar, ( TickType_t ) 10, queueSEND_TO_BACK ) != pdPASS ) { // Failed to post the message, even after 10 ticks.  \n} }  \nif( xQueue2 != 0 ) { // Send a pointer to a struct AMessage object. Don't block if the // queue is already full.  \npxMessage = & xMessage;  \nxQueueGenericSend( xQueue2, ( void * ) &pxMessage, ( TickType_t ) 0, queueSEND_TO_BACK );  \n}  \n// ... Rest of task code.  \n}  \n@endcode  \n\\\\ingroup QueueManagement"},"filterText":"xQueueGenericSend","insertText":"xQueueGenericSend(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:TickType_t xTicksToWait}, ${4:const BaseType_t xCopyPosition})","insertTextFormat":2,"kind":3,"label":" xQueueGenericSend(QueueHandle_t xQueue, const void *const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition)","score":1.5304485559463501,"sortText":"403c1a43xQueueGenericSend","textEdit":{"newText":"xQueueGenericSend(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:TickType_t xTicksToWait}, ${4:const BaseType_t xCopyPosition})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"It is preferred that the macro xQueueReceive() be used rather than calling this function directly.  \nReceive an item from a queue. The item is received by copy so a buffer of adequate size must be provided. The number of bytes copied into the buffer was defined when the queue was created.  \nThis function must not be used in an interrupt service routine. See xQueueReceiveFromISR for an alternative that can.  \n@param xQueue The handle to the queue from which the item is to be received.  \n@param pvBuffer Pointer to the buffer into which the received item will be copied.  \n@param xTicksToWait The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.  \nxQueueGenericReceive() will return immediately if the queue is empty and xTicksToWait is 0.  \n@param xJustPeek When set to true, the item received from the queue is not actually removed from the queue - meaning a subsequent call to xQueueReceive() will return the same item. When set to false, the item being received from the queue is also removed from the queue.  \n@return pdTRUE if an item was successfully received from the queue,  \notherwise pdFALSE.  \nExample usage:  \n@code{c} struct AMessage { char ucMessageID;  \nchar ucData[ 20 ];  \n} xMessage;  \nQueueHandle_t xQueue;  \n// Task to create a queue and post a value.  \nvoid vATask( void \\*pvParameters ) { struct AMessage \\*pxMessage;  \n// Create a queue capable of containing 10 pointers to AMessage structures.  \n// These should be passed by pointer as they contain a lot of data.  \nxQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );  \nif( xQueue == 0 ) { // Failed to create the queue.  \n}  \n// ...  \n// Send a pointer to a struct AMessage object. Don't block if the // queue is already full.  \npxMessage = & xMessage;  \nxQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );  \n// ... Rest of task code.  \n}  \n// Task to receive from the queue.  \nvoid vADifferentTask( void \\*pvParameters ) { struct AMessage \\*pxRxedMessage;  \nif( xQueue != 0 ) { // Receive a message on the created queue. Block for 10 ticks if a // message is not immediately available.  \nif( xQueueGenericReceive( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) ) { // pcRxedMessage now points to the struct AMessage variable posted // by vATask.  \n} }  \n// ... Rest of task code.  \n}  \n@endcode  \n\\\\ingroup QueueManagement"},"filterText":"xQueueGenericReceive","insertText":"xQueueGenericReceive(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer}, ${3:TickType_t xTicksToWait}, ${4:const BaseType_t xJustPeek})","insertTextFormat":2,"kind":3,"label":" xQueueGenericReceive(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeek)","score":1.5074357986450195,"sortText":"403f0c58xQueueGenericReceive","textEdit":{"newText":"xQueueGenericReceive(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer}, ${3:TickType_t xTicksToWait}, ${4:const BaseType_t xJustPeek})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"documentation":{"kind":"markdown","value":"Defines the memory ranges allocated to the task when an MPU is used."},"filterText":"xMEMORY_REGION","insertText":"xMEMORY_REGION","insertTextFormat":2,"kind":22,"label":" xMEMORY_REGION","score":1.5037370920181274,"sortText":"403f858bxMEMORY_REGION","textEdit":{"newText":"xMEMORY_REGION","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`  \nSee the comments above the struct xSTATIC_LIST_ITEM definition."},"filterText":"xSTATIC_LIST","insertText":"xSTATIC_LIST","insertTextFormat":2,"kind":22,"label":"•xSTATIC_LIST","score":1.5037370920181274,"sortText":"403f858bxSTATIC_LIST","textEdit":{"newText":"xSTATIC_LIST","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`  \nIn line with software engineering best practice, especially when supplying a library that is likely to change in future versions, FreeRTOS implements a strict data hiding policy. This means the software timer structure used internally by FreeRTOS is not accessible to application code. However, if the application writer wants to statically allocate the memory required to create a software timer then the size of the queue object needs to be know.  \nThe StaticTimer_t structure below is provided for this purpose. Its sizes and alignment requirements are guaranteed to match those of the genuine structure, no matter which architecture is being used, and no matter how the values in FreeRTOSConfig.h are set. Its contents are somewhat obfuscated in the hope users will recognise that it would be unwise to make direct use of the structure members."},"filterText":"xSTATIC_TIMER","insertText":"xSTATIC_TIMER","insertTextFormat":2,"kind":22,"label":"•xSTATIC_TIMER","score":1.5037370920181274,"sortText":"403f858bxSTATIC_TIMER","textEdit":{"newText":"xSTATIC_TIMER","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"documentation":{"kind":"markdown","value":"@cond  \nUsed internally only."},"filterText":"xTIME_OUT","insertText":"xTIME_OUT","insertTextFormat":2,"kind":22,"label":" xTIME_OUT","score":1.5037370920181274,"sortText":"403f858bxTIME_OUT","textEdit":{"newText":"xTIME_OUT","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- Generic Interrupt Trampolining Support (DEPRECATED)  \n\\----------------------------------------------------------------------"},"filterText":"XtHalVoidFunc","insertText":"XtHalVoidFunc","insertTextFormat":2,"kind":8,"label":"•XtHalVoidFunc","score":1.2690916061401367,"sortText":"405d8e68XtHalVoidFunc","textEdit":{"newText":"XtHalVoidFunc","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_all_extra_size","insertText":"Xthal_all_extra_size","insertTextFormat":2,"kind":6,"label":"•Xthal_all_extra_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_all_extra_size","textEdit":{"newText":"Xthal_all_extra_size","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_build_unique_id","insertText":"Xthal_build_unique_id","insertTextFormat":2,"kind":6,"label":"•Xthal_build_unique_id","score":1.2690916061401367,"sortText":"405d8e68Xthal_build_unique_id","textEdit":{"newText":"Xthal_build_unique_id","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nindex of highest allowed coprocessor number, per cfg, plus one  \nextern const unsigned char Xthal_cp_maxcfg;  \nbitmask of which coprocessors are present"},"filterText":"Xthal_cp_mask","insertText":"Xthal_cp_mask","insertTextFormat":2,"kind":6,"label":"•Xthal_cp_mask","score":1.2690916061401367,"sortText":"405d8e68Xthal_cp_mask","textEdit":{"newText":"Xthal_cp_mask","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int [8]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_cpregs_align","insertText":"Xthal_cpregs_align","insertTextFormat":2,"kind":6,"label":"•Xthal_cpregs_align","score":1.2690916061401367,"sortText":"405d8e68Xthal_cpregs_align","textEdit":{"newText":"Xthal_cpregs_align","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *[8]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nsimilarly for non-windowed ABI (may be same or different)"},"filterText":"Xthal_cpregs_save_nw_fn","insertText":"Xthal_cpregs_save_nw_fn","insertTextFormat":2,"kind":6,"label":"•Xthal_cpregs_save_nw_fn","score":1.2690916061401367,"sortText":"405d8e68Xthal_cpregs_save_nw_fn","textEdit":{"newText":"Xthal_cpregs_save_nw_fn","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int [8]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_cpregs_size","insertText":"Xthal_cpregs_size","insertTextFormat":2,"kind":6,"label":"•Xthal_cpregs_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_cpregs_size","textEdit":{"newText":"Xthal_cpregs_size","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dataram_size","insertText":"Xthal_dataram_size","insertTextFormat":2,"kind":6,"label":"•Xthal_dataram_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_dataram_size","textEdit":{"newText":"Xthal_dataram_size","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_datarom_paddr","insertText":"Xthal_datarom_paddr","insertTextFormat":2,"kind":6,"label":"•Xthal_datarom_paddr","score":1.2690916061401367,"sortText":"405d8e68Xthal_datarom_paddr","textEdit":{"newText":"Xthal_datarom_paddr","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dcache_size","insertText":"Xthal_dcache_size","insertTextFormat":2,"kind":6,"label":"•Xthal_dcache_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_dcache_size","textEdit":{"newText":"Xthal_dcache_size","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dtlb_way_bits","insertText":"Xthal_dtlb_way_bits","insertTextFormat":2,"kind":6,"label":"•Xthal_dtlb_way_bits","score":1.2690916061401367,"sortText":"405d8e68Xthal_dtlb_way_bits","textEdit":{"newText":"Xthal_dtlb_way_bits","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_booleans","insertText":"Xthal_have_booleans","insertTextFormat":2,"kind":6,"label":"•Xthal_have_booleans","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_booleans","textEdit":{"newText":"Xthal_have_booleans","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nset if CCOUNT register present"},"filterText":"Xthal_have_ccount","insertText":"Xthal_have_ccount","insertTextFormat":2,"kind":6,"label":"•Xthal_have_ccount","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_ccount","textEdit":{"newText":"Xthal_have_ccount","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_exceptions","insertText":"Xthal_have_exceptions","insertTextFormat":2,"kind":6,"label":"•Xthal_have_exceptions","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_exceptions","textEdit":{"newText":"Xthal_have_exceptions","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_mimic_cacheattr","insertText":"Xthal_have_mimic_cacheattr","insertTextFormat":2,"kind":6,"label":"•Xthal_have_mimic_cacheattr","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_mimic_cacheattr","textEdit":{"newText":"Xthal_have_mimic_cacheattr","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_mul16","insertText":"Xthal_have_mul16","insertTextFormat":2,"kind":6,"label":"•Xthal_have_mul16","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_mul16","textEdit":{"newText":"Xthal_have_mul16","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_nmi","insertText":"Xthal_have_nmi","insertTextFormat":2,"kind":6,"label":"•Xthal_have_nmi","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_nmi","textEdit":{"newText":"Xthal_have_nmi","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_nsa","insertText":"Xthal_have_nsa","insertTextFormat":2,"kind":6,"label":"•Xthal_have_nsa","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_nsa","textEdit":{"newText":"Xthal_have_nsa","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- Memory Management Unit  \n\\----------------------------------------------------------------------"},"filterText":"Xthal_have_spanning_way","insertText":"Xthal_have_spanning_way","insertTextFormat":2,"kind":6,"label":"•Xthal_have_spanning_way","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_spanning_way","textEdit":{"newText":"Xthal_have_spanning_way","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_windowed","insertText":"Xthal_have_windowed","insertTextFormat":2,"kind":6,"label":"•Xthal_have_windowed","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_windowed","textEdit":{"newText":"Xthal_have_windowed","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nsize of the cache lines in log2(bytes)"},"filterText":"Xthal_icache_linewidth","insertText":"Xthal_icache_linewidth","insertTextFormat":2,"kind":6,"label":"•Xthal_icache_linewidth","score":1.2690916061401367,"sortText":"405d8e68Xthal_icache_linewidth","textEdit":{"newText":"Xthal_icache_linewidth","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_instram_size","insertText":"Xthal_instram_size","insertTextFormat":2,"kind":6,"label":"•Xthal_instram_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_instram_size","textEdit":{"newText":"Xthal_instram_size","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_instram_vaddr","insertText":"Xthal_instram_vaddr","insertTextFormat":2,"kind":6,"label":"•Xthal_instram_vaddr","score":1.2690916061401367,"sortText":"405d8e68Xthal_instram_vaddr","textEdit":{"newText":"Xthal_instram_vaddr","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_instrom_size","insertText":"Xthal_instrom_size","insertTextFormat":2,"kind":6,"label":"•Xthal_instrom_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_instrom_size","textEdit":{"newText":"Xthal_instrom_size","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char [32]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \ntype per interrupt"},"filterText":"Xthal_inttype","insertText":"Xthal_inttype","insertTextFormat":2,"kind":6,"label":"•Xthal_inttype","score":1.2690916061401367,"sortText":"405d8e68Xthal_inttype","textEdit":{"newText":"Xthal_inttype","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n0 .. 8"},"filterText":"Xthal_mmu_asid_bits","insertText":"Xthal_mmu_asid_bits","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_asid_bits","score":1.2690916061401367,"sortText":"405d8e68Xthal_mmu_asid_bits","textEdit":{"newText":"Xthal_mmu_asid_bits","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_mmu_max_pte_page_size","insertText":"Xthal_mmu_max_pte_page_size","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_max_pte_page_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_mmu_max_pte_page_size","textEdit":{"newText":"Xthal_mmu_max_pte_page_size","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_mmu_sr_bits","insertText":"Xthal_mmu_sr_bits","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_sr_bits","score":1.2690916061401367,"sortText":"405d8e68Xthal_mmu_sr_bits","textEdit":{"newText":"Xthal_mmu_sr_bits","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nthe number of interrupt levels"},"filterText":"Xthal_num_intlevels","insertText":"Xthal_num_intlevels","insertTextFormat":2,"kind":6,"label":"•Xthal_num_intlevels","score":1.2690916061401367,"sortText":"405d8e68Xthal_num_intlevels","textEdit":{"newText":"Xthal_num_intlevels","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const char *const","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_release_name","insertText":"Xthal_release_name","insertTextFormat":2,"kind":6,"label":"•Xthal_release_name","score":1.2690916061401367,"sortText":"405d8e68Xthal_release_name","textEdit":{"newText":"Xthal_release_name","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nBitmask of interrupts configured for sync trampolining:"},"filterText":"Xthal_tram_sync","insertText":"Xthal_tram_sync","insertTextFormat":2,"kind":6,"label":"•Xthal_tram_sync","score":1.2690916061401367,"sortText":"405d8e68Xthal_tram_sync","textEdit":{"newText":"Xthal_tram_sync","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_xlmi_paddr","insertText":"Xthal_xlmi_paddr","insertTextFormat":2,"kind":6,"label":"•Xthal_xlmi_paddr","score":1.2690916061401367,"sortText":"405d8e68Xthal_xlmi_paddr","textEdit":{"newText":"Xthal_xlmi_paddr","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/portable.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"freertos/portable.h\"`  \nGet tick rate per second"},"filterText":"xPortGetTickRateHz","insertText":"xPortGetTickRateHz()","insertTextFormat":2,"kind":3,"label":"•xPortGetTickRateHz()","score":1.2690916061401367,"sortText":"405d8e68xPortGetTickRateHz","textEdit":{"newText":"xPortGetTickRateHz()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"@cond  \nxQueueAltGenericSend() is an alternative version of xQueueGenericSend().  \nLikewise xQueueAltGenericReceive() is an alternative version of xQueueGenericReceive().  \nThe source code that implements the alternative (Alt) API is much simpler because it executes everything from within a critical section.  \nThis is the approach taken by many other RTOSes, but FreeRTOS.org has the preferred fully featured API too. The fully featured API has more complex code that takes longer to execute, but makes much less use of critical sections. Therefore the alternative API sacrifices interrupt responsiveness to gain execution speed, whereas the fully featured API sacrifices execution speed to ensure better interrupt responsiveness."},"filterText":"xQueueAltGenericSend","insertText":"xQueueAltGenericSend(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:TickType_t xTicksToWait}, ${4:BaseType_t xCopyPosition})","insertTextFormat":2,"kind":3,"label":" xQueueAltGenericSend(QueueHandle_t xQueue, const void *const pvItemToQueue, TickType_t xTicksToWait, BaseType_t xCopyPosition)","score":1.2690916061401367,"sortText":"405d8e68xQueueAltGenericSend","textEdit":{"newText":"xQueueAltGenericSend(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:TickType_t xTicksToWait}, ${4:BaseType_t xCopyPosition})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","filterText":"xQueueCRSend","insertText":"xQueueCRSend(${1:QueueHandle_t xQueue}, ${2:const void *pvItemToQueue}, ${3:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xQueueCRSend(QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait)","score":1.2690916061401367,"sortText":"405d8e68xQueueCRSend","textEdit":{"newText":"xQueueCRSend(${1:QueueHandle_t xQueue}, ${2:const void *pvItemToQueue}, ${3:TickType_t xTicksToWait})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"The functions defined above are for passing data to and from tasks. The functions below are the equivalents for passing data to and from co-routines.  \nThese functions are called from the co-routine macro implementation and should not be called directly from application code. Instead use the macro wrappers defined within croutine.h."},"filterText":"xQueueCRSendFromISR","insertText":"xQueueCRSendFromISR(${1:QueueHandle_t xQueue}, ${2:const void *pvItemToQueue}, ${3:BaseType_t xCoRoutinePreviouslyWoken})","insertTextFormat":2,"kind":3,"label":" xQueueCRSendFromISR(QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken)","score":1.2690916061401367,"sortText":"405d8e68xQueueCRSendFromISR","textEdit":{"newText":"xQueueCRSendFromISR(${1:QueueHandle_t xQueue}, ${2:const void *pvItemToQueue}, ${3:BaseType_t xCoRoutinePreviouslyWoken})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"QueueHandle_t","documentation":{"kind":"markdown","value":"For internal use only. Use xSemaphoreCreateMutex(),  \nxSemaphoreCreateCounting() or xSemaphoreGetMutexHolder() instead of calling these functions directly."},"filterText":"xQueueCreateMutex","insertText":"xQueueCreateMutex(${1:const uint8_t ucQueueType})","insertTextFormat":2,"kind":3,"label":" xQueueCreateMutex(const uint8_t ucQueueType)","score":1.2690916061401367,"sortText":"405d8e68xQueueCreateMutex","textEdit":{"newText":"xQueueCreateMutex(${1:const uint8_t ucQueueType})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"QueueHandle_t","filterText":"xQueueCreateMutexStatic","insertText":"xQueueCreateMutexStatic(${1:const uint8_t ucQueueType}, ${2:StaticQueue_t *pxStaticQueue})","insertTextFormat":2,"kind":3,"label":" xQueueCreateMutexStatic(const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue)","score":1.2690916061401367,"sortText":"405d8e68xQueueCreateMutexStatic","textEdit":{"newText":"xQueueCreateMutexStatic(${1:const uint8_t ucQueueType}, ${2:StaticQueue_t *pxStaticQueue})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","filterText":"xQueueGiveMutexRecursive","insertText":"xQueueGiveMutexRecursive(${1:QueueHandle_t pxMutex})","insertTextFormat":2,"kind":3,"label":" xQueueGiveMutexRecursive(QueueHandle_t pxMutex)","score":1.2690916061401367,"sortText":"405d8e68xQueueGiveMutexRecursive","textEdit":{"newText":"xQueueGiveMutexRecursive(${1:QueueHandle_t pxMutex})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","filterText":"xQueueIsQueueFullFromISR","insertText":"xQueueIsQueueFullFromISR(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" xQueueIsQueueFullFromISR(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68xQueueIsQueueFullFromISR","textEdit":{"newText":"xQueueIsQueueFullFromISR(${1:const QueueHandle_t xQueue})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"QueueSetMemberHandle_t","documentation":{"kind":"markdown","value":"xQueueSelectFromSet() selects from the members of a queue set a queue or semaphore that either contains data (in the case of a queue) or is available to take (in the case of a semaphore). xQueueSelectFromSet() effectively allows a task to block (pend) on a read operation on all the queues and semaphores in a queue set simultaneously.  \nSee FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this function.  \nNote 1: See the documentation on http://wwwFreeRTOS.org/RTOS-queue-sets.html for reasons why queue sets are very rarely needed in practice as there are simpler methods of blocking on multiple objects.  \nNote 2: Blocking on a queue set that contains a mutex will not cause the mutex holder to inherit the priority of the blocked task.  \nNote 3: A receive (in the case of a queue) or take (in the case of a semaphore) operation must not be performed on a member of a queue set unless a call to xQueueSelectFromSet() has first returned a handle to that set member.  \n@param xQueueSet The queue set on which the task will (potentially) block.  \n@param xTicksToWait The maximum time, in ticks, that the calling task will remain in the Blocked state (with other tasks executing) to wait for a member of the queue set to be ready for a successful queue read or semaphore take operation.  \n@return xQueueSelectFromSet() will return the handle of a queue (cast to a QueueSetMemberHandle_t type) contained in the queue set that contains data,  \nor the handle of a semaphore (cast to a QueueSetMemberHandle_t type) contained in the queue set that is available, or NULL if no such queue or semaphore exists before before the specified block time expires."},"filterText":"xQueueSelectFromSet","insertText":"xQueueSelectFromSet(${1:QueueSetHandle_t xQueueSet}, ${2:const TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xQueueSelectFromSet(QueueSetHandle_t xQueueSet, const TickType_t xTicksToWait)","score":1.2690916061401367,"sortText":"405d8e68xQueueSelectFromSet","textEdit":{"newText":"xQueueSelectFromSet(${1:QueueSetHandle_t xQueueSet}, ${2:const TickType_t xTicksToWait})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"QueueSetMemberHandle_t","documentation":{"kind":"markdown","value":"A version of xQueueSelectFromSet() that can be used from an ISR."},"filterText":"xQueueSelectFromSetFromISR","insertText":"xQueueSelectFromSetFromISR(${1:QueueSetHandle_t xQueueSet})","insertTextFormat":2,"kind":3,"label":" xQueueSelectFromSetFromISR(QueueSetHandle_t xQueueSet)","score":1.2690916061401367,"sortText":"405d8e68xQueueSelectFromSetFromISR","textEdit":{"newText":"xQueueSelectFromSetFromISR(${1:QueueSetHandle_t xQueueSet})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"For internal use only. Use xSemaphoreTakeMutexRecursive() or xSemaphoreGiveMutexRecursive() instead of calling these functions directly."},"filterText":"xQueueTakeMutexRecursive","insertText":"xQueueTakeMutexRecursive(${1:QueueHandle_t xMutex}, ${2:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xQueueTakeMutexRecursive(QueueHandle_t xMutex, TickType_t xTicksToWait)","score":1.2690916061401367,"sortText":"405d8e68xQueueTakeMutexRecursive","textEdit":{"newText":"xQueueTakeMutexRecursive(${1:QueueHandle_t xMutex}, ${2:TickType_t xTicksToWait})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_cache_coherence_optout","insertText":"xthal_cache_coherence_optout()","insertTextFormat":2,"kind":3,"label":"•xthal_cache_coherence_optout()","score":1.2690916061401367,"sortText":"405d8e68xthal_cache_coherence_optout","textEdit":{"newText":"xthal_cache_coherence_optout()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- MP Synchronization  \n\\----------------------------------------------------------------------"},"filterText":"xthal_compare_and_set","insertText":"xthal_compare_and_set(${1:int *addr}, ${2:int test_val}, ${3:int compare_val})","insertTextFormat":2,"kind":3,"label":"•xthal_compare_and_set(int *addr, int test_val, int compare_val)","score":1.2690916061401367,"sortText":"405d8e68xthal_compare_and_set","textEdit":{"newText":"xthal_compare_and_set(${1:int *addr}, ${2:int test_val}, ${3:int compare_val})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nwrite dirty data back"},"filterText":"xthal_dcache_all_writeback","insertText":"xthal_dcache_all_writeback()","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_all_writeback()","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_all_writeback","textEdit":{"newText":"xthal_dcache_all_writeback()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nget number of dcache ways enabled"},"filterText":"xthal_dcache_get_ways","insertText":"xthal_dcache_get_ways()","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_get_ways()","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_get_ways","textEdit":{"newText":"xthal_dcache_get_ways()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_dcache_line_unlock","insertText":"xthal_dcache_line_unlock(${1:void *addr})","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_line_unlock(void *addr)","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_line_unlock","textEdit":{"newText":"xthal_dcache_line_unlock(${1:void *addr})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_dcache_region_lock","insertText":"xthal_dcache_region_lock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_region_lock(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_region_lock","textEdit":{"newText":"xthal_dcache_region_lock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_dcache_region_unlock","insertText":"xthal_dcache_region_unlock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_region_unlock(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_region_unlock","textEdit":{"newText":"xthal_dcache_region_unlock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nroutine to get a string for the disassembled instruction"},"filterText":"xthal_disassemble","insertText":"xthal_disassemble(${1:unsigned char *instr_buf}, ${2:void *tgt_addr}, ${3:char *buffer}, ${4:unsigned int buflen}, ${5:unsigned int options})","insertTextFormat":2,"kind":3,"label":"•xthal_disassemble(unsigned char *instr_buf, void *tgt_addr, char *buffer, unsigned int buflen, unsigned int options)","score":1.2690916061401367,"sortText":"405d8e68xthal_disassemble","textEdit":{"newText":"xthal_disassemble(${1:unsigned char *instr_buf}, ${2:void *tgt_addr}, ${3:char *buffer}, ${4:unsigned int buflen}, ${5:unsigned int options})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nroutine to get the size of the next instruction. Returns 0 for illegal instruction"},"filterText":"xthal_disassemble_size","insertText":"xthal_disassemble_size(${1:unsigned char *instr_buf})","insertTextFormat":2,"kind":3,"label":"•xthal_disassemble_size(unsigned char *instr_buf)","score":1.2690916061401367,"sortText":"405d8e68xthal_disassemble_size","textEdit":{"newText":"xthal_disassemble_size(${1:unsigned char *instr_buf})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \ncache attribute register control (used by other HAL routines)"},"filterText":"xthal_get_cacheattr","insertText":"xthal_get_cacheattr()","insertTextFormat":2,"kind":3,"label":"•xthal_get_cacheattr()","score":1.2690916061401367,"sortText":"405d8e68xthal_get_cacheattr","textEdit":{"newText":"xthal_get_cacheattr()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nget CCOUNT register (if not present return 0)"},"filterText":"xthal_get_ccount","insertText":"xthal_get_ccount()","insertTextFormat":2,"kind":3,"label":"•xthal_get_ccount()","score":1.2690916061401367,"sortText":"405d8e68xthal_get_ccount","textEdit":{"newText":"xthal_get_ccount()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_get_icacheattr","insertText":"xthal_get_icacheattr()","insertTextFormat":2,"kind":3,"label":"•xthal_get_icacheattr()","score":1.2690916061401367,"sortText":"405d8e68xthal_get_icacheattr","textEdit":{"newText":"xthal_get_icacheattr()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nenable caches"},"filterText":"xthal_icache_enable","insertText":"xthal_icache_enable()","insertTextFormat":2,"kind":3,"label":"•xthal_icache_enable()","score":1.2690916061401367,"sortText":"405d8e68xthal_icache_enable","textEdit":{"newText":"xthal_icache_enable()","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \ninvalidate the caches"},"filterText":"xthal_icache_region_invalidate","insertText":"xthal_icache_region_invalidate(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_icache_region_invalidate(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_icache_region_invalidate","textEdit":{"newText":"xthal_icache_region_invalidate(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nprefetch and lock specified memory range into cache"},"filterText":"xthal_icache_region_lock","insertText":"xthal_icache_region_lock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_icache_region_lock(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_icache_region_lock","textEdit":{"newText":"xthal_icache_region_lock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_icache_region_unlock","insertText":"xthal_icache_region_unlock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_icache_region_unlock(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_icache_region_unlock","textEdit":{"newText":"xthal_icache_region_unlock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nEnables/disables given set (mask) of interrupts; returns previous enabled-mask of all ints:"},"filterText":"xthal_int_enable","insertText":"xthal_int_enable(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_int_enable(unsigned int)","score":1.2690916061401367,"sortText":"405d8e68xthal_int_enable","textEdit":{"newText":"xthal_int_enable(${1:unsigned int})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_intlevel_to_vpri","insertText":"xthal_intlevel_to_vpri(${1:unsigned int intlevel})","insertTextFormat":2,"kind":3,"label":"•xthal_intlevel_to_vpri(unsigned int intlevel)","score":1.2690916061401367,"sortText":"405d8e68xthal_intlevel_to_vpri","textEdit":{"newText":"xthal_intlevel_to_vpri(${1:unsigned int intlevel})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_invalidate_region","insertText":"xthal_invalidate_region(${1:void *addr})","insertTextFormat":2,"kind":3,"label":"•xthal_invalidate_region(void *addr)","score":1.2690916061401367,"sortText":"405d8e68xthal_invalidate_region","textEdit":{"newText":"xthal_invalidate_region(${1:void *addr})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cp2","insertText":"xthal_restore_cp2(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cp2(void *base)","score":1.2690916061401367,"sortText":"405d8e68xthal_restore_cp2","textEdit":{"newText":"xthal_restore_cp2(${1:void *base})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cp5","insertText":"xthal_restore_cp5(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cp5(void *base)","score":1.2690916061401367,"sortText":"405d8e68xthal_restore_cp5","textEdit":{"newText":"xthal_restore_cp5(${1:void *base})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cpregs","insertText":"xthal_restore_cpregs(${1:void *base}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cpregs(void *base, int)","score":1.2690916061401367,"sortText":"405d8e68xthal_restore_cpregs","textEdit":{"newText":"xthal_restore_cpregs(${1:void *base}, ${2:int})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_extra","insertText":"xthal_restore_extra(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_extra(void *base)","score":1.2690916061401367,"sortText":"405d8e68xthal_restore_extra","textEdit":{"newText":"xthal_restore_extra(${1:void *base})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_save_cp1","insertText":"xthal_save_cp1(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_save_cp1(void *base)","score":1.2690916061401367,"sortText":"405d8e68xthal_save_cp1","textEdit":{"newText":"xthal_save_cp1(${1:void *base})","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}}}}]}}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":167,"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":18},"end":{"line":273,"character":18}},"context":{"diagnostics":[]}},"id":168,"jsonrpc":"2.0"}
<<<
Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1801

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'x'","range":{"end":{"character":18,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":203}}Content-Length: 11744

{"id":167,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":281},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":311},"start":{"character":0,"line":283}},"selectionRange":{"end":{"character":10,"line":283},"start":{"character":5,"line":283}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":317},"start":{"character":0,"line":315}},"selectionRange":{"end":{"character":9,"line":315},"start":{"character":5,"line":315}}}]}Content-Length: 38

{"id":168,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":204},"contentChanges":[{"range":{"start":{"line":273,"character":18},"end":{"line":273,"character":18}},"text":"P"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":135},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":19},"end":{"line":273,"character":19}},"context":{"diagnostics":[]}},"id":169,"jsonrpc":"2.0"}Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":170,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":169,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":205},"contentChanges":[{"range":{"start":{"line":273,"character":19},"end":{"line":273,"character":19}},"text":"o"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":136},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":206},"contentChanges":[{"range":{"start":{"line":273,"character":20},"end":{"line":273,"character":20}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":207},"contentChanges":[{"range":{"start":{"line":273,"character":21},"end":{"line":273,"character":21}},"text":"t"}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":22},"end":{"line":273,"character":22}},"context":{"diagnostics":[]}},"id":171,"jsonrpc":"2.0"}
<<<
Content-Length: 1802

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xP'","range":{"end":{"character":19,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":204}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":170,"jsonrpc":"2.0"}Content-Length: 38

{"id":171,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":172,"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":208},"contentChanges":[{"range":{"start":{"line":273,"character":22},"end":{"line":273,"character":22}},"text":"G"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":137},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":23},"end":{"line":273,"character":23}},"context":{"diagnostics":[]}},"id":173,"jsonrpc":"2.0"}
<<<
Content-Length: 1805

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xPort'","range":{"end":{"character":22,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":207}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":172,"jsonrpc":"2.0"}Content-Length: 38

{"id":173,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":209},"contentChanges":[{"range":{"start":{"line":273,"character":23},"end":{"line":273,"character":23}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":138},"jsonrpc":"2.0"}Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":174,"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":210},"contentChanges":[{"range":{"start":{"line":273,"character":24},"end":{"line":273,"character":24}},"text":"t"}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":25},"end":{"line":273,"character":25}},"context":{"diagnostics":[]}},"id":175,"jsonrpc":"2.0"}
<<<
Content-Length: 1806

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xPortG'","range":{"end":{"character":23,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":208}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":174,"jsonrpc":"2.0"}Content-Length: 38

{"id":175,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":176,"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":211},"contentChanges":[{"range":{"start":{"line":273,"character":25},"end":{"line":273,"character":25}},"text":"F"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":139},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":26},"end":{"line":273,"character":26}},"context":{"diagnostics":[]}},"id":177,"jsonrpc":"2.0"}
<<<
Content-Length: 1808

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xPortGet'","range":{"end":{"character":25,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":210}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":176,"jsonrpc":"2.0"}Content-Length: 38

{"id":177,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":178,"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":212},"contentChanges":[{"range":{"start":{"line":273,"character":26},"end":{"line":273,"character":26}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":140},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":213},"contentChanges":[{"range":{"start":{"line":273,"character":27},"end":{"line":273,"character":27}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":28},"end":{"line":273,"character":28}},"context":{"diagnostics":[]}},"id":179,"jsonrpc":"2.0"}
<<<
Content-Length: 1809

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xPortGetF'","range":{"end":{"character":26,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":211}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":178,"jsonrpc":"2.0"}Content-Length: 38

{"id":179,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":180,"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":214},"contentChanges":[{"range":{"start":{"line":273,"character":28},"end":{"line":273,"character":28}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":141},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":29},"end":{"line":273,"character":29}},"context":{"diagnostics":[]}},"id":181,"jsonrpc":"2.0"}
<<<
Content-Length: 1811

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xPortGetFre'","range":{"end":{"character":28,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":213}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":180,"jsonrpc":"2.0"}Content-Length: 38

{"id":181,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":215},"contentChanges":[{"range":{"start":{"line":273,"character":29},"end":{"line":273,"character":29}},"text":"H"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":142},"jsonrpc":"2.0"}Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":182,"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":216},"contentChanges":[{"range":{"start":{"line":273,"character":30},"end":{"line":273,"character":30}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":217},"contentChanges":[{"range":{"start":{"line":273,"character":31},"end":{"line":273,"character":31}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":218},"contentChanges":[{"range":{"start":{"line":273,"character":32},"end":{"line":273,"character":32}},"text":"p"}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":33},"end":{"line":273,"character":33}},"context":{"diagnostics":[]}},"id":183,"jsonrpc":"2.0"}
<<<
Content-Length: 1812

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xPortGetFree'","range":{"end":{"character":29,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":214}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":182,"jsonrpc":"2.0"}Content-Length: 38

{"id":183,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":219},"contentChanges":[{"range":{"start":{"line":273,"character":33},"end":{"line":273,"character":33}},"text":"S"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":143},"jsonrpc":"2.0"}Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":184,"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":34},"end":{"line":273,"character":34}},"context":{"diagnostics":[]}},"id":185,"jsonrpc":"2.0"}
<<<
Content-Length: 1816

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xPortGetFreeHeap'","range":{"end":{"character":33,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":218}}Content-Length: 11744

{"id":184,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":281},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":311},"start":{"character":0,"line":283}},"selectionRange":{"end":{"character":10,"line":283},"start":{"character":5,"line":283}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":317},"start":{"character":0,"line":315}},"selectionRange":{"end":{"character":9,"line":315},"start":{"character":5,"line":315}}}]}Content-Length: 1817

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'xPortGetFreeHeapS'","range":{"end":{"character":34,"line":273},"start":{"character":17,"line":273}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":219}}Content-Length: 38

{"id":185,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":220},"contentChanges":[{"range":{"start":{"line":273,"character":34},"end":{"line":273,"character":34}},"text":"i"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":144},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":221},"contentChanges":[{"range":{"start":{"line":273,"character":35},"end":{"line":273,"character":35}},"text":"z"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":222},"contentChanges":[{"range":{"start":{"line":273,"character":36},"end":{"line":273,"character":36}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":223},"contentChanges":[{"range":{"start":{"line":273,"character":37},"end":{"line":273,"character":37}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":224},"contentChanges":[{"range":{"start":{"line":273,"character":38},"end":{"line":273,"character":39}},"rangeLength":1,"text":")"}]},"jsonrpc":"2.0"}Content-Length: 210

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":39}},"id":186,"jsonrpc":"2.0"}Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":187,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":187,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":281},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":311},"start":{"character":0,"line":283}},"selectionRange":{"end":{"character":10,"line":283},"start":{"character":5,"line":283}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":317},"start":{"character":0,"line":315}},"selectionRange":{"end":{"character":9,"line":315},"start":{"character":5,"line":315}}}]}Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":224}}Content-Length: 1405

{"id":186,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"print(char) -> size_t","parameters":[{"label":[6,10]}]},{"label":"print(const char *) -> size_t","parameters":[{"label":[6,18]}]},{"label":"print(const String &) -> size_t","parameters":[{"label":[6,20]}]},{"label":"print(const Printable &) -> size_t","parameters":[{"label":[6,23]}]},{"label":"print(const __FlashStringHelper *) -> size_t","parameters":[{"label":[6,33]}]},{"label":"print(int, int = DEC) -> size_t","parameters":[{"label":[6,9]},{"label":[11,20]}]},{"label":"print(double, int = 2) -> size_t","parameters":[{"label":[6,12]},{"label":[14,21]}]},{"label":"print(long, int = DEC) -> size_t","parameters":[{"label":[6,10]},{"label":[12,21]}]},{"label":"print(long long, int = DEC) -> size_t","parameters":[{"label":[6,15]},{"label":[17,26]}]},{"label":"print(unsigned int, int = DEC) -> size_t","parameters":[{"label":[6,18]},{"label":[20,29]}]},{"label":"print(unsigned char, int = DEC) -> size_t","parameters":[{"label":[6,19]},{"label":[21,30]}]},{"label":"print(unsigned long, int = DEC) -> size_t","parameters":[{"label":[6,19]},{"label":[21,30]}]},{"label":"print(unsigned long long, int = DEC) -> size_t","parameters":[{"label":[6,24]},{"label":[26,35]}]},{"label":"print(struct tm *timeinfo, const char *format = NULL) -> size_t","parameters":[{"label":[6,25]},{"label":[27,52]}]}]}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":39},"end":{"line":273,"character":39}},"context":{"diagnostics":[]}},"id":188,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":188,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":134},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":145},"jsonrpc":"2.0"}Content-Length: 210

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":40}},"id":189,"jsonrpc":"2.0"}
<<<
Content-Length: 93

{"id":189,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[]}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":40},"end":{"line":273,"character":40}},"context":{"diagnostics":[]}},"id":190,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":190,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":146},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":225},"contentChanges":[{"range":{"start":{"line":273,"character":40},"end":{"line":273,"character":40}},"text":";"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":148},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":147},"jsonrpc":"2.0"}Content-Length: 210

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":41}},"id":191,"jsonrpc":"2.0"}
<<<
Content-Length: 93

{"id":191,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[]}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":41},"end":{"line":273,"character":41}},"context":{"diagnostics":[]}},"id":192,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":192,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":41},"end":{"line":273,"character":41}},"context":{"diagnostics":[]}},"id":193,"jsonrpc":"2.0"}
<<<
Content-Length: 1414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":225}}Content-Length: 38

{"id":193,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":150},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":41},"end":{"line":273,"character":41}},"context":{"diagnostics":[]}},"id":194,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":194,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":151},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":41},"end":{"line":273,"character":41}},"context":{"diagnostics":[]}},"id":195,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":195,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":41},"end":{"line":273,"character":41}},"context":{"diagnostics":[]}},"id":196,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":196,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":268,"character":7}},"id":197,"jsonrpc":"2.0"}
<<<
Content-Length: 247

{"id":197,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `checkAlarms`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid checkAlarms()\n```"},"range":{"end":{"character":15,"line":268},"start":{"character":4,"line":268}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":279,"character":6}},"id":198,"jsonrpc":"2.0"}
<<<
Content-Length: 1892

{"id":198,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `vTaskDelay`  \n\n---\n→ `void`  \nParameters:  \n- `const TickType_t xTicksToDelay`\n\nDelay a task for a given number of ticks.  \nThe actual time that the task remains blocked depends on the tick rate.  \nThe constant portTICK_PERIOD_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.  \nINCLUDE_vTaskDelay must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \nvTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method of controlling the frequency of a periodic task as the path taken through the code, as well as other task and interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the calling task should unblock.  \n@param xTicksToDelay The amount of time, in tick periods, that the calling task should block.  \nExample usage:  \n@code{c} void vTaskFunction( void * pvParameters ) { // Block for 500ms.  \nconst TickType_t xDelay = 500 / portTICK_PERIOD_MS;  \nfor( ;; ) { // Simply toggle the LED every 500ms, blocking between each toggle.  \nvToggleLED();  \nvTaskDelay( xDelay );  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl  \n\n---\n```cpp\nvoid vTaskDelay(const TickType_t xTicksToDelay)\n```"},"range":{"end":{"character":14,"line":279},"start":{"character":4,"line":279}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":270,"character":15}},"id":199,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":199,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t print(const char[])\n```"},"range":{"end":{"character":16,"line":270},"start":{"character":11,"line":270}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":141,"character":11}},"id":200,"jsonrpc":"2.0"}
<<<
Content-Length: 247

{"id":200,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `serialPrint`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid serialPrint()\n```"},"range":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":139,"character":1},"end":{"line":139,"character":1}},"context":{"diagnostics":[]}},"id":201,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":201,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":148,"character":5}},"id":202,"jsonrpc":"2.0"}
<<<
Content-Length: 257

{"id":202,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `itch`  \n\n---\nType: `int`  \n\n---\n```cpp\n// In serialPrint\npublic: int itch\n```"},"range":{"end":{"character":8,"line":148},"start":{"character":4,"line":148}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":148,"character":5}},"id":203,"jsonrpc":"2.0"}
<<<
Content-Length: 126

{"id":203,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":8,"line":148},"start":{"character":4,"line":148}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":5},"end":{"line":148,"character":5}},"context":{"diagnostics":[]}},"id":204,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":204,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":148,"character":2}},"id":205,"jsonrpc":"2.0"}
<<<
Content-Length: 257

{"id":205,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `itch`  \n\n---\nType: `int`  \n\n---\n```cpp\n// In serialPrint\npublic: int itch\n```"},"range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":148,"character":2}},"id":206,"jsonrpc":"2.0"}
<<<
Content-Length: 126

{"id":206,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":8,"line":148},"start":{"character":4,"line":148}}}]}
>>>
Content-Length: 444

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":2},"end":{"line":148,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":148,"character":2},"end":{"line":148,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'v'"}]}},"id":207,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":207,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 444

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":3},"end":{"line":148,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":148,"character":2},"end":{"line":148,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'v'"}]}},"id":208,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":208,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":148,"character":3}},"id":209,"jsonrpc":"2.0"}
<<<
Content-Length: 257

{"id":209,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `itch`  \n\n---\nType: `int`  \n\n---\n```cpp\n// In serialPrint\npublic: int itch\n```"},"range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":150,"character":0}},"id":210,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":210,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":149,"character":6}},"id":211,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":211,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":149},"start":{"character":2,"line":149}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":149,"character":12}},"id":212,"jsonrpc":"2.0"}
<<<
Content-Length: 312

{"id":212,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t print(const char[])\n```"},"range":{"end":{"character":14,"line":149},"start":{"character":9,"line":149}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":147,"character":8}},"id":213,"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"id":213,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `double`\n- `int = 2`\n\n---\n```cpp\n// In Print\npublic: size_t print(double, int = 2)\n```"},"range":{"end":{"character":8,"line":147},"start":{"character":2,"line":147}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":147,"character":1}},"id":214,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":214,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":4},"end":{"line":148,"character":4}},"context":{"diagnostics":[]}},"id":215,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":215,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":5},"end":{"line":148,"character":5}},"context":{"diagnostics":[]}},"id":216,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":216,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":147,"character":3}},"id":217,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":217,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":147},"start":{"character":2,"line":147}}}}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":147,"character":4}},"id":218,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":218,"jsonrpc":"2.0","result":[{"range":{"end":{"character":28,"line":115},"start":{"character":22,"line":115}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}]}
>>>
Content-Length: 4134

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n HardwareSerial.h - Hardware serial library for Wiring\n Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 28 September 2010 by Mark Sproul\n Modified 14 August 2012 by Alarus\n Modified 3 December 2013 by Matthijs Kooijman\n Modified 18 December 2014 by Ivan Grokhotkov (esp8266 platform support)\n Modified 31 March 2015 by Markus Sattler (rewrite the code for UART0 + UART1 support in ESP8266)\n Modified 25 April 2015 by Thomas Flayols (add configuration different from 8N1 in ESP8266)\n Modified 13 October 2018 by Jeroen Döll (add baudrate detection)\n Baudrate detection example usage (detection on Serial1):\n   void setup() {\n     Serial.begin(115200);\n     delay(100);\n     Serial.println();\n\n     Serial1.begin(0, SERIAL_8N1, -1, -1, true, 11000UL);  // Passing 0 for baudrate to detect it, the last parameter is a timeout in ms\n\n     unsigned long detectedBaudRate = Serial1.baudRate();\n     if(detectedBaudRate) {\n       Serial.printf(\"Detected baudrate is %lu\\n\", detectedBaudRate);\n     } else {\n       Serial.println(\"No baudrate detected, Serial1 will not work!\");\n     }\n   }\n\n Pay attention: the baudrate returned by baudRate() may be rounded, eg 115200 returns 115201\n */\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n#include \"esp32-hal.h\"\n\nclass HardwareSerial: public Stream\n{\npublic:\n    HardwareSerial(int uart_nr);\n\n    void begin(unsigned long baud, uint32_t config=SERIAL_8N1, int8_t rxPin=-1, int8_t txPin=-1, bool invert=false, unsigned long timeout_ms = 20000UL);\n    void end();\n    void updateBaudRate(unsigned long baud);\n    int available(void);\n    int availableForWrite(void);\n    int peek(void);\n    int read(void);\n    size_t read(uint8_t *buffer, size_t size);\n    inline size_t read(char * buffer, size_t size)\n    {\n        return read((uint8_t*) buffer, size);\n    }\n    void flush(void);\n    void flush( bool txOnly);\n    size_t write(uint8_t);\n    size_t write(const uint8_t *buffer, size_t size);\n    inline size_t write(const char * buffer, size_t size)\n    {\n        return write((uint8_t*) buffer, size);\n    }\n    inline size_t write(const char * s)\n    {\n        return write((uint8_t*) s, strlen(s));\n    }\n    inline size_t write(unsigned long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(unsigned int n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(int n)\n    {\n        return write((uint8_t) n);\n    }\n    uint32_t baudRate();\n    operator bool() const;\n\n    size_t setRxBufferSize(size_t);\n    void setDebugOutput(bool);\n    \n    void setRxInvert(bool);\n\nprotected:\n    int _uart_nr;\n    uart_t* _uart;\n    uint8_t _tx_pin;\n    uint8_t _rx_pin;\n};\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#if !defined(NO_GLOBAL_INSTANCES) \u0026\u0026 !defined(NO_GLOBAL_SERIAL)\nextern HardwareSerial Serial;\nextern HardwareSerial Serial1;\nextern HardwareSerial Serial2;\n#endif\n\n#endif // HardwareSerial_h\n"}},"jsonrpc":"2.0"}Content-Length: 181

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":147,"character":3}},"id":219,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":219,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":147},"start":{"character":2,"line":147}}}}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":147,"character":4}},"id":220,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":220,"jsonrpc":"2.0","result":[{"range":{"end":{"character":28,"line":115},"start":{"character":22,"line":115}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}]}
>>>
Content-Length: 4134

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n HardwareSerial.h - Hardware serial library for Wiring\n Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 28 September 2010 by Mark Sproul\n Modified 14 August 2012 by Alarus\n Modified 3 December 2013 by Matthijs Kooijman\n Modified 18 December 2014 by Ivan Grokhotkov (esp8266 platform support)\n Modified 31 March 2015 by Markus Sattler (rewrite the code for UART0 + UART1 support in ESP8266)\n Modified 25 April 2015 by Thomas Flayols (add configuration different from 8N1 in ESP8266)\n Modified 13 October 2018 by Jeroen Döll (add baudrate detection)\n Baudrate detection example usage (detection on Serial1):\n   void setup() {\n     Serial.begin(115200);\n     delay(100);\n     Serial.println();\n\n     Serial1.begin(0, SERIAL_8N1, -1, -1, true, 11000UL);  // Passing 0 for baudrate to detect it, the last parameter is a timeout in ms\n\n     unsigned long detectedBaudRate = Serial1.baudRate();\n     if(detectedBaudRate) {\n       Serial.printf(\"Detected baudrate is %lu\\n\", detectedBaudRate);\n     } else {\n       Serial.println(\"No baudrate detected, Serial1 will not work!\");\n     }\n   }\n\n Pay attention: the baudrate returned by baudRate() may be rounded, eg 115200 returns 115201\n */\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n#include \"esp32-hal.h\"\n\nclass HardwareSerial: public Stream\n{\npublic:\n    HardwareSerial(int uart_nr);\n\n    void begin(unsigned long baud, uint32_t config=SERIAL_8N1, int8_t rxPin=-1, int8_t txPin=-1, bool invert=false, unsigned long timeout_ms = 20000UL);\n    void end();\n    void updateBaudRate(unsigned long baud);\n    int available(void);\n    int availableForWrite(void);\n    int peek(void);\n    int read(void);\n    size_t read(uint8_t *buffer, size_t size);\n    inline size_t read(char * buffer, size_t size)\n    {\n        return read((uint8_t*) buffer, size);\n    }\n    void flush(void);\n    void flush( bool txOnly);\n    size_t write(uint8_t);\n    size_t write(const uint8_t *buffer, size_t size);\n    inline size_t write(const char * buffer, size_t size)\n    {\n        return write((uint8_t*) buffer, size);\n    }\n    inline size_t write(const char * s)\n    {\n        return write((uint8_t*) s, strlen(s));\n    }\n    inline size_t write(unsigned long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(unsigned int n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(int n)\n    {\n        return write((uint8_t) n);\n    }\n    uint32_t baudRate();\n    operator bool() const;\n\n    size_t setRxBufferSize(size_t);\n    void setDebugOutput(bool);\n    \n    void setRxInvert(bool);\n\nprotected:\n    int _uart_nr;\n    uart_t* _uart;\n    uint8_t _tx_pin;\n    uint8_t _rx_pin;\n};\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#if !defined(NO_GLOBAL_INSTANCES) \u0026\u0026 !defined(NO_GLOBAL_SERIAL)\nextern HardwareSerial Serial;\nextern HardwareSerial Serial1;\nextern HardwareSerial Serial2;\n#endif\n\n#endif // HardwareSerial_h\n"}},"jsonrpc":"2.0"}Content-Length: 181

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":147,"character":3}},"id":221,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":221,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":147},"start":{"character":2,"line":147}}}}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":226},"contentChanges":[{"range":{"start":{"line":273,"character":40},"end":{"line":273,"character":41}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":40},"end":{"line":273,"character":40}},"context":{"diagnostics":[]}},"id":222,"jsonrpc":"2.0"}
<<<
Content-Length: 1616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":226}}Content-Length: 38

{"id":222,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 408

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":228},"contentChanges":[{"range":{"start":{"line":273,"character":38},"end":{"line":273,"character":39}},"rangeLength":1,"text":")"},{"range":{"start":{"line":273,"character":37},"end":{"line":273,"character":39}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 2351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":248},"contentChanges":[{"range":{"start":{"line":273,"character":36},"end":{"line":273,"character":37}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":35},"end":{"line":273,"character":36}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":34},"end":{"line":273,"character":35}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":33},"end":{"line":273,"character":34}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":32},"end":{"line":273,"character":33}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":31},"end":{"line":273,"character":32}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":30},"end":{"line":273,"character":31}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":29},"end":{"line":273,"character":30}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":28},"end":{"line":273,"character":29}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":27},"end":{"line":273,"character":28}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":26},"end":{"line":273,"character":27}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":25},"end":{"line":273,"character":26}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":24},"end":{"line":273,"character":25}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":23},"end":{"line":273,"character":24}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":22},"end":{"line":273,"character":23}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":21},"end":{"line":273,"character":22}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":20},"end":{"line":273,"character":21}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":19},"end":{"line":273,"character":20}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":18},"end":{"line":273,"character":19}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":17},"end":{"line":273,"character":18}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 301

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":249},"contentChanges":[{"range":{"start":{"line":273,"character":11},"end":{"line":273,"character":18}},"rangeLength":7,"text":"pr"}]},"jsonrpc":"2.0"}Content-Length: 1259

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":259},"contentChanges":[{"range":{"start":{"line":273,"character":12},"end":{"line":273,"character":13}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":11},"end":{"line":273,"character":12}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":10},"end":{"line":273,"character":11}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":9},"end":{"line":273,"character":10}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":8},"end":{"line":273,"character":9}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":7},"end":{"line":273,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":6},"end":{"line":273,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":5},"end":{"line":273,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":273,"character":4},"end":{"line":273,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":50},"end":{"line":273,"character":4}},"rangeLength":5,"text":""}]},"jsonrpc":"2.0"}Content-Length: 623

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":263},"contentChanges":[{"range":{"start":{"line":272,"character":49},"end":{"line":272,"character":50}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":48},"end":{"line":272,"character":49}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":47},"end":{"line":272,"character":48}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":47}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":264},"contentChanges":[{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":46}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 564

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":268},"contentChanges":[{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":45}},"text":"L"},{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":46}},"text":" "},{"range":{"start":{"line":272,"character":47},"end":{"line":272,"character":47}},"text":"\""},{"range":{"start":{"line":272,"character":48},"end":{"line":272,"character":48}},"text":")"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1800

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'pr' in 'HardwareSerial'","range":{"end":{"character":13,"line":273},"start":{"character":11,"line":273}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":274}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":249}}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":269},"contentChanges":[{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":47}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":270},"contentChanges":[{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":46}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":271},"contentChanges":[{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":272},"contentChanges":[{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":43}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 377

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":274},"contentChanges":[{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":42}},"text":"r"},{"range":{"start":{"line":272,"character":43},"end":{"line":272,"character":43}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":275},"contentChanges":[{"range":{"start":{"line":272,"character":43},"end":{"line":272,"character":44}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 731

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":280},"contentChanges":[{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":43}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":41},"end":{"line":272,"character":42}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":40},"end":{"line":272,"character":41}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":39},"end":{"line":272,"character":40}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":38},"end":{"line":272,"character":39}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 515

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":283},"contentChanges":[{"range":{"start":{"line":272,"character":38},"end":{"line":272,"character":39}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":37},"end":{"line":272,"character":38}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":36},"end":{"line":272,"character":37}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 947

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":290},"contentChanges":[{"range":{"start":{"line":272,"character":35},"end":{"line":272,"character":36}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":34},"end":{"line":272,"character":35}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":33},"end":{"line":272,"character":34}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":32},"end":{"line":272,"character":33}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":31},"end":{"line":272,"character":32}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":30},"end":{"line":272,"character":31}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":29},"end":{"line":272,"character":30}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 947

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":297},"contentChanges":[{"range":{"start":{"line":272,"character":28},"end":{"line":272,"character":29}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":27},"end":{"line":272,"character":28}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":26},"end":{"line":272,"character":27}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":25},"end":{"line":272,"character":26}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":24},"end":{"line":272,"character":25}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":23},"end":{"line":272,"character":24}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":22},"end":{"line":272,"character":23}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 623

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":301},"contentChanges":[{"range":{"start":{"line":272,"character":21},"end":{"line":272,"character":22}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":20},"end":{"line":272,"character":21}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":19},"end":{"line":272,"character":20}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 409

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":303},"contentChanges":[{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":19}},"rangeLength":1,"text":"\""},{"range":{"start":{"line":272,"character":17},"end":{"line":272,"character":19}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 408

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":305},"contentChanges":[{"range":{"start":{"line":272,"character":17},"end":{"line":272,"character":18}},"rangeLength":1,"text":")"},{"range":{"start":{"line":272,"character":16},"end":{"line":272,"character":18}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 1583

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":318},"contentChanges":[{"range":{"start":{"line":272,"character":15},"end":{"line":272,"character":16}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":14},"end":{"line":272,"character":15}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":13},"end":{"line":272,"character":14}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":12},"end":{"line":272,"character":13}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":11},"end":{"line":272,"character":12}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":10},"end":{"line":272,"character":11}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":9},"end":{"line":272,"character":10}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":8},"end":{"line":272,"character":9}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":7},"end":{"line":272,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":6},"end":{"line":272,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":5},"end":{"line":272,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":4},"end":{"line":272,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":54},"end":{"line":272,"character":4}},"rangeLength":5,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":319},"contentChanges":[{"range":{"start":{"line":270,"character":37},"end":{"line":270,"character":38}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":320},"contentChanges":[{"range":{"start":{"line":271,"character":53},"end":{"line":271,"character":54}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 641

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":324},"contentChanges":[{"range":{"start":{"line":271,"character":50},"end":{"line":271,"character":51}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":49},"end":{"line":271,"character":50}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":48},"end":{"line":271,"character":49}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":47},"end":{"line":271,"character":48}},"rangeLength":1,"text":"TaskHandle_t xTask"}]},"jsonrpc":"2.0"}Content-Length: 310

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":325},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":66}},"rangeLength":47,"text":"uxTaskGetS"}]},"jsonrpc":"2.0"}Content-Length: 1271

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":335},"contentChanges":[{"range":{"start":{"line":271,"character":28},"end":{"line":271,"character":29}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":27},"end":{"line":271,"character":28}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":26},"end":{"line":271,"character":27}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":25},"end":{"line":271,"character":26}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":24},"end":{"line":271,"character":25}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":23},"end":{"line":271,"character":24}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":22},"end":{"line":271,"character":23}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":21},"end":{"line":271,"character":22}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":20},"end":{"line":271,"character":21}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":20}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 408

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":337},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":20}},"rangeLength":1,"text":")"},{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":20}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 378

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":339},"contentChanges":[{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":18}},"text":"*"},{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":19}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":340},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":21}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":341},"contentChanges":[{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 407

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":343},"contentChanges":[{"range":{"start":{"line":270,"character":34},"end":{"line":270,"character":35}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":33},"end":{"line":270,"character":34}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":344},"contentChanges":[{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 839

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":350},"contentChanges":[{"range":{"start":{"line":270,"character":31},"end":{"line":270,"character":32}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":30},"end":{"line":270,"character":31}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":29},"end":{"line":270,"character":30}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":28},"end":{"line":270,"character":29}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":27},"end":{"line":270,"character":28}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":26},"end":{"line":270,"character":27}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 1055

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":358},"contentChanges":[{"range":{"start":{"line":270,"character":25},"end":{"line":270,"character":26}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":24},"end":{"line":270,"character":25}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":23},"end":{"line":270,"character":24}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":22},"end":{"line":270,"character":23}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":21},"end":{"line":270,"character":22}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":20},"end":{"line":270,"character":21}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":19},"end":{"line":270,"character":20}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 409

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":360},"contentChanges":[{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":19}},"rangeLength":1,"text":"\""},{"range":{"start":{"line":270,"character":17},"end":{"line":270,"character":19}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":361},"contentChanges":[{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":18}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":362},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 378

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":364},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":"r"},{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":365},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":366},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":"g"}]},"jsonrpc":"2.0"}Content-Length: 407

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":368},"contentChanges":[{"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":12}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":369},"contentChanges":[{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":10}},"text":"P"}]},"jsonrpc":"2.0"}Content-Length: 408

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":371},"contentChanges":[{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":17}},"rangeLength":1,"text":")"},{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":17}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":372},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":":"}]},"jsonrpc":"2.0"}Content-Length: 1370

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":383},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":14},"end":{"line":270,"character":15}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":13},"end":{"line":270,"character":14}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":12},"end":{"line":270,"character":13}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":12}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":11}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":9},"end":{"line":270,"character":10}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":8},"end":{"line":270,"character":9}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":7},"end":{"line":270,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":6},"end":{"line":270,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":384},"contentChanges":[{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":5}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 403

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":386},"contentChanges":[{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":387},"contentChanges":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":4}},"text":"/"}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":388},"contentChanges":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":389},"contentChanges":[{"range":{"start":{"line":270,"character":2},"end":{"line":270,"character":4}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":390},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 1692

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":404},"contentChanges":[{"range":{"start":{"line":271,"character":17},"end":{"line":271,"character":18}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":16},"end":{"line":271,"character":17}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":15},"end":{"line":271,"character":16}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":14},"end":{"line":271,"character":15}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":13},"end":{"line":271,"character":14}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":12},"end":{"line":271,"character":13}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":12}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":11}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":10}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":9}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":405},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":4}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":406},"contentChanges":[{"range":{"start":{"line":249,"character":2},"end":{"line":249,"character":5}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":407},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":0}},"text":"}"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":408},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2410

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":30,"line":274},"start":{"character":29,"line":274}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":13,"line":281},"start":{"character":12,"line":281}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":12,"line":313},"start":{"character":11,"line":313}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:249:30: note: to match this '{'","range":{"end":{"character":0,"line":317},"start":{"character":0,"line":317}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:318:1: error: expected '}'","range":{"end":{"character":30,"line":248},"start":{"character":29,"line":248}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":406}}
>>>
Content-Length: 1105

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":418},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"S"},{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":3}},"text":"e"},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"r"},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":5}},"text":"i"},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":6}},"text":"a"},{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":7}},"text":"l"},{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":8}},"text":"."},{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":9}},"text":"p"},{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":10}},"text":"r"},{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":11}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 1044

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":426},"contentChanges":[{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":12}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":11}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":10}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":9}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":427},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"i"}]},"jsonrpc":"2.0"}Content-Length: 509

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":430},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":4}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":408}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":431},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"A"}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":432},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 737

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":438},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"s"},{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":3}},"text":"e"},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"r"},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":5}},"text":"i"},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":6}},"text":"l"},{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":7}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 933

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":445},"contentChanges":[{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":4}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""},{"range":{"start":{"line":270,"character":3},"end":{"line":271,"character":2}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":446},"contentChanges":[{"range":{"start":{"line":148,"character":3},"end":{"line":148,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 419

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":447},"contentChanges":[{"range":{"start":{"line":148,"character":2},"end":{"line":148,"character":3}},"rangeLength":1,"text":"Serial.print(\"  Roll: \");\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"  Pitch: \");\n  Serial.print(msgToSlave.p"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":447}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":2},"end":{"line":151,"character":27}},"context":{"diagnostics":[]}},"id":223,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":223,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":152,"character":27},"end":{"line":152,"character":27}},"context":{"diagnostics":[]}},"id":224,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":224,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":152,"character":27},"end":{"line":152,"character":27}},"context":{"diagnostics":[]}},"id":225,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":225,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":160,"character":3}},"id":226,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":226,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":158,"character":9}},"id":227,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":227,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `serialPlotter`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid serialPlotter()\n```"},"range":{"end":{"character":18,"line":158},"start":{"character":5,"line":158}}}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":15},"end":{"line":154,"character":19}},"context":{"diagnostics":[]}},"id":228,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":228,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":142,"character":2},"end":{"line":154,"character":19}},"context":{"diagnostics":[]}},"id":229,"jsonrpc":"2.0"}
<<<
Content-Length: 366

{"id":229,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":19,"line":154},"start":{"character":2,"line":142}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":142,"character":2}},"id":230,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":230,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":142},"start":{"character":2,"line":142}}}}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":142,"character":2}},"id":231,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":231,"jsonrpc":"2.0","result":[{"range":{"end":{"character":28,"line":115},"start":{"character":22,"line":115}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}]}
>>>
Content-Length: 4134

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n HardwareSerial.h - Hardware serial library for Wiring\n Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 28 September 2010 by Mark Sproul\n Modified 14 August 2012 by Alarus\n Modified 3 December 2013 by Matthijs Kooijman\n Modified 18 December 2014 by Ivan Grokhotkov (esp8266 platform support)\n Modified 31 March 2015 by Markus Sattler (rewrite the code for UART0 + UART1 support in ESP8266)\n Modified 25 April 2015 by Thomas Flayols (add configuration different from 8N1 in ESP8266)\n Modified 13 October 2018 by Jeroen Döll (add baudrate detection)\n Baudrate detection example usage (detection on Serial1):\n   void setup() {\n     Serial.begin(115200);\n     delay(100);\n     Serial.println();\n\n     Serial1.begin(0, SERIAL_8N1, -1, -1, true, 11000UL);  // Passing 0 for baudrate to detect it, the last parameter is a timeout in ms\n\n     unsigned long detectedBaudRate = Serial1.baudRate();\n     if(detectedBaudRate) {\n       Serial.printf(\"Detected baudrate is %lu\\n\", detectedBaudRate);\n     } else {\n       Serial.println(\"No baudrate detected, Serial1 will not work!\");\n     }\n   }\n\n Pay attention: the baudrate returned by baudRate() may be rounded, eg 115200 returns 115201\n */\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n#include \"esp32-hal.h\"\n\nclass HardwareSerial: public Stream\n{\npublic:\n    HardwareSerial(int uart_nr);\n\n    void begin(unsigned long baud, uint32_t config=SERIAL_8N1, int8_t rxPin=-1, int8_t txPin=-1, bool invert=false, unsigned long timeout_ms = 20000UL);\n    void end();\n    void updateBaudRate(unsigned long baud);\n    int available(void);\n    int availableForWrite(void);\n    int peek(void);\n    int read(void);\n    size_t read(uint8_t *buffer, size_t size);\n    inline size_t read(char * buffer, size_t size)\n    {\n        return read((uint8_t*) buffer, size);\n    }\n    void flush(void);\n    void flush( bool txOnly);\n    size_t write(uint8_t);\n    size_t write(const uint8_t *buffer, size_t size);\n    inline size_t write(const char * buffer, size_t size)\n    {\n        return write((uint8_t*) buffer, size);\n    }\n    inline size_t write(const char * s)\n    {\n        return write((uint8_t*) s, strlen(s));\n    }\n    inline size_t write(unsigned long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(unsigned int n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(int n)\n    {\n        return write((uint8_t) n);\n    }\n    uint32_t baudRate();\n    operator bool() const;\n\n    size_t setRxBufferSize(size_t);\n    void setDebugOutput(bool);\n    \n    void setRxInvert(bool);\n\nprotected:\n    int _uart_nr;\n    uart_t* _uart;\n    uint8_t _tx_pin;\n    uint8_t _rx_pin;\n};\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#if !defined(NO_GLOBAL_INSTANCES) \u0026\u0026 !defined(NO_GLOBAL_SERIAL)\nextern HardwareSerial Serial;\nextern HardwareSerial Serial1;\nextern HardwareSerial Serial2;\n#endif\n\n#endif // HardwareSerial_h\n"}},"jsonrpc":"2.0"}Content-Length: 181

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":142,"character":2}},"id":232,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":232,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":142},"start":{"character":2,"line":142}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":142,"character":2}},"id":233,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":233,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":142},"start":{"character":2,"line":142}}}}
>>>
Content-Length: 301

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":448},"contentChanges":[{"range":{"start":{"line":148,"character":2},"end":{"line":151,"character":27}},"rangeLength":115,"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1229

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'vitch'","range":{"end":{"character":7,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":448}}
>>>
Content-Length: 461

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":148,"character":3},"end":{"line":148,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":148,"character":2},"end":{"line":148,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'vitch'"}]}},"id":234,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":234,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":235,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":235,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":271},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":278},"start":{"character":0,"line":273}},"selectionRange":{"end":{"character":10,"line":273},"start":{"character":5,"line":273}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":308},"start":{"character":0,"line":280}},"selectionRange":{"end":{"character":10,"line":280},"start":{"character":5,"line":280}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":314},"start":{"character":0,"line":312}},"selectionRange":{"end":{"character":9,"line":312},"start":{"character":5,"line":312}}}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":142,"character":2}},"id":236,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":236,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":142},"start":{"character":2,"line":142}}}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":449},"contentChanges":[{"range":{"start":{"line":148,"character":3},"end":{"line":148,"character":3}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 831

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":456},"contentChanges":[{"range":{"start":{"line":270,"character":3},"end":{"line":270,"character":3}},"text":"\n  "},{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"s"},{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":3}},"text":"e"},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"r"},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":5}},"text":"i"},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":6}},"text":"l"},{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":7}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 827

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":462},"contentChanges":[{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":4}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":463},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"A"}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":464},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1602

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'serila'","range":{"end":{"character":8,"line":271},"start":{"character":2,"line":271}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":456}}
>>>
Content-Length: 464

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":467},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"S"},{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":3}},"text":"e"},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"i"}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":468},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 923

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":476},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"r"},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":5}},"text":"i"},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":6}},"text":"a"},{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":7}},"text":"l"},{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":8}},"text":"."},{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":9}},"text":"p"},{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":10}},"text":"r"},{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":11}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 1256

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":486},"contentChanges":[{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":12}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":11}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":10}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":9}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":3},"end":{"line":271,"character":4}},"rangeLength":1,"text":""},{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":487},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":464}}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":488},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":1}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":489},"contentChanges":[{"range":{"start":{"line":249,"character":2},"end":{"line":249,"character":2}},"text":"// "}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":490},"contentChanges":[{"range":{"start":{"line":271,"character":2},"end":{"line":271,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}Content-Length: 1481

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":504},"contentChanges":[{"range":{"start":{"line":271,"character":4},"end":{"line":271,"character":4}},"text":"S"},{"range":{"start":{"line":271,"character":5},"end":{"line":271,"character":5}},"text":"e"},{"range":{"start":{"line":271,"character":6},"end":{"line":271,"character":6}},"text":"r"},{"range":{"start":{"line":271,"character":7},"end":{"line":271,"character":7}},"text":"i"},{"range":{"start":{"line":271,"character":8},"end":{"line":271,"character":8}},"text":"a"},{"range":{"start":{"line":271,"character":9},"end":{"line":271,"character":9}},"text":"l"},{"range":{"start":{"line":271,"character":10},"end":{"line":271,"character":10}},"text":"."},{"range":{"start":{"line":271,"character":11},"end":{"line":271,"character":11}},"text":"p"},{"range":{"start":{"line":271,"character":12},"end":{"line":271,"character":12}},"text":"r"},{"range":{"start":{"line":271,"character":13},"end":{"line":271,"character":13}},"text":"i"},{"range":{"start":{"line":271,"character":14},"end":{"line":271,"character":14}},"text":"n"},{"range":{"start":{"line":271,"character":15},"end":{"line":271,"character":15}},"text":"t"},{"range":{"start":{"line":271,"character":16},"end":{"line":271,"character":16}},"text":"l"},{"range":{"start":{"line":271,"character":17},"end":{"line":271,"character":17}},"text":"n"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":505},"contentChanges":[{"range":{"start":{"line":270,"character":0},"end":{"line":270,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":506},"contentChanges":[{"range":{"start":{"line":270,"character":2},"end":{"line":270,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":507},"contentChanges":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":4}},"text":"/"}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":508},"contentChanges":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 373

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":510},"contentChanges":[{"range":{"start":{"line":270,"character":4},"end":{"line":270,"character":4}},"text":"S"},{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":5}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":511},"contentChanges":[{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 1204

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":522},"contentChanges":[{"range":{"start":{"line":270,"character":5},"end":{"line":270,"character":5}},"text":"e"},{"range":{"start":{"line":270,"character":6},"end":{"line":270,"character":6}},"text":"r"},{"range":{"start":{"line":270,"character":7},"end":{"line":270,"character":7}},"text":"i"},{"range":{"start":{"line":270,"character":8},"end":{"line":270,"character":8}},"text":"a"},{"range":{"start":{"line":270,"character":9},"end":{"line":270,"character":9}},"text":"l"},{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":10}},"text":"P"},{"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":11}},"text":"r"},{"range":{"start":{"line":270,"character":12},"end":{"line":270,"character":12}},"text":"i"},{"range":{"start":{"line":270,"character":13},"end":{"line":270,"character":13}},"text":"n"},{"range":{"start":{"line":270,"character":14},"end":{"line":270,"character":14}},"text":"g"},{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":":"}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":523},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 394

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":525},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":"()"},{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":17}},"rangeLength":1,"text":")"}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":526},"contentChanges":[{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 377

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":528},"contentChanges":[{"range":{"start":{"line":270,"character":10},"end":{"line":270,"character":10}},"text":"."},{"range":{"start":{"line":270,"character":11},"end":{"line":270,"character":11}},"text":"p"}]},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":529},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":530},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 407

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":532},"contentChanges":[{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":18}},"rangeLength":2,"text":""},{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":533},"contentChanges":[{"range":{"start":{"line":270,"character":15},"end":{"line":270,"character":15}},"text":"t"}]},"jsonrpc":"2.0"}Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":534},"contentChanges":[{"range":{"start":{"line":270,"character":16},"end":{"line":270,"character":16}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 397

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":536},"contentChanges":[{"range":{"start":{"line":270,"character":17},"end":{"line":270,"character":17}},"text":"\"\""},{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":19}},"rangeLength":1,"text":"\""}]},"jsonrpc":"2.0"}Content-Length: 935

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":544},"contentChanges":[{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":18}},"text":"O"},{"range":{"start":{"line":270,"character":19},"end":{"line":270,"character":19}},"text":"v"},{"range":{"start":{"line":270,"character":20},"end":{"line":270,"character":20}},"text":"e"},{"range":{"start":{"line":270,"character":21},"end":{"line":270,"character":21}},"text":"r"},{"range":{"start":{"line":270,"character":22},"end":{"line":270,"character":22}},"text":"f"},{"range":{"start":{"line":270,"character":23},"end":{"line":270,"character":23}},"text":"l"},{"range":{"start":{"line":270,"character":24},"end":{"line":270,"character":24}},"text":"o"},{"range":{"start":{"line":270,"character":25},"end":{"line":270,"character":25}},"text":"w"}]},"jsonrpc":"2.0"}Content-Length: 749

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":550},"contentChanges":[{"range":{"start":{"line":270,"character":26},"end":{"line":270,"character":26}},"text":" "},{"range":{"start":{"line":270,"character":27},"end":{"line":270,"character":27}},"text":"S"},{"range":{"start":{"line":270,"character":28},"end":{"line":270,"character":28}},"text":"t"},{"range":{"start":{"line":270,"character":29},"end":{"line":270,"character":29}},"text":"a"},{"range":{"start":{"line":270,"character":30},"end":{"line":270,"character":30}},"text":"c"},{"range":{"start":{"line":270,"character":31},"end":{"line":270,"character":31}},"text":"k"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":551},"contentChanges":[{"range":{"start":{"line":270,"character":18},"end":{"line":270,"character":18}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 377

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":553},"contentChanges":[{"range":{"start":{"line":270,"character":33},"end":{"line":270,"character":33}},"text":" "},{"range":{"start":{"line":270,"character":34},"end":{"line":270,"character":34}},"text":":"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":554},"contentChanges":[{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":18}},"text":"*"}]},"jsonrpc":"2.0"}Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":555},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":19}},"text":"()"}]},"jsonrpc":"2.0"}Content-Length: 407

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":557},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":21}},"rangeLength":2,"text":""},{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 394

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":559},"contentChanges":[{"range":{"start":{"line":271,"character":18},"end":{"line":271,"character":18}},"text":"()"},{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":20}},"rangeLength":1,"text":")"}]},"jsonrpc":"2.0"}Content-Length: 1121

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":569},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":19}},"text":"u"},{"range":{"start":{"line":271,"character":20},"end":{"line":271,"character":20}},"text":"x"},{"range":{"start":{"line":271,"character":21},"end":{"line":271,"character":21}},"text":"T"},{"range":{"start":{"line":271,"character":22},"end":{"line":271,"character":22}},"text":"a"},{"range":{"start":{"line":271,"character":23},"end":{"line":271,"character":23}},"text":"s"},{"range":{"start":{"line":271,"character":24},"end":{"line":271,"character":24}},"text":"k"},{"range":{"start":{"line":271,"character":25},"end":{"line":271,"character":25}},"text":"G"},{"range":{"start":{"line":271,"character":26},"end":{"line":271,"character":26}},"text":"e"},{"range":{"start":{"line":271,"character":27},"end":{"line":271,"character":27}},"text":"t"},{"range":{"start":{"line":271,"character":28},"end":{"line":271,"character":28}},"text":"S"}]},"jsonrpc":"2.0"}Content-Length: 347

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":570},"contentChanges":[{"range":{"start":{"line":271,"character":19},"end":{"line":271,"character":29}},"rangeLength":10,"text":"uxTaskGetStackHighWaterMark(TaskHandle_t xTask)"}]},"jsonrpc":"2.0"}Content-Length: 580

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":574},"contentChanges":[{"range":{"start":{"line":271,"character":47},"end":{"line":271,"character":65}},"rangeLength":18,"text":"N"},{"range":{"start":{"line":271,"character":48},"end":{"line":271,"character":48}},"text":"U"},{"range":{"start":{"line":271,"character":49},"end":{"line":271,"character":49}},"text":"L"},{"range":{"start":{"line":271,"character":50},"end":{"line":271,"character":50}},"text":"L"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":575},"contentChanges":[{"range":{"start":{"line":271,"character":53},"end":{"line":271,"character":53}},"text":";"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":576},"contentChanges":[{"range":{"start":{"line":270,"character":37},"end":{"line":270,"character":37}},"text":";"}]},"jsonrpc":"2.0"}Content-Length: 1393

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":589},"contentChanges":[{"range":{"start":{"line":271,"character":54},"end":{"line":271,"character":54}},"text":"\n    "},{"range":{"start":{"line":272,"character":4},"end":{"line":272,"character":4}},"text":"S"},{"range":{"start":{"line":272,"character":5},"end":{"line":272,"character":5}},"text":"e"},{"range":{"start":{"line":272,"character":6},"end":{"line":272,"character":6}},"text":"r"},{"range":{"start":{"line":272,"character":7},"end":{"line":272,"character":7}},"text":"i"},{"range":{"start":{"line":272,"character":8},"end":{"line":272,"character":8}},"text":"a"},{"range":{"start":{"line":272,"character":9},"end":{"line":272,"character":9}},"text":"l"},{"range":{"start":{"line":272,"character":10},"end":{"line":272,"character":10}},"text":"."},{"range":{"start":{"line":272,"character":11},"end":{"line":272,"character":11}},"text":"p"},{"range":{"start":{"line":272,"character":12},"end":{"line":272,"character":12}},"text":"r"},{"range":{"start":{"line":272,"character":13},"end":{"line":272,"character":13}},"text":"i"},{"range":{"start":{"line":272,"character":14},"end":{"line":272,"character":14}},"text":"n"},{"range":{"start":{"line":272,"character":15},"end":{"line":272,"character":15}},"text":"t"}]},"jsonrpc":"2.0"}Content-Length: 394

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":591},"contentChanges":[{"range":{"start":{"line":272,"character":16},"end":{"line":272,"character":16}},"text":"()"},{"range":{"start":{"line":272,"character":17},"end":{"line":272,"character":18}},"rangeLength":1,"text":")"}]},"jsonrpc":"2.0"}Content-Length: 397

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":593},"contentChanges":[{"range":{"start":{"line":272,"character":17},"end":{"line":272,"character":17}},"text":"\"\""},{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":19}},"rangeLength":1,"text":"\""}]},"jsonrpc":"2.0"}Content-Length: 563

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":597},"contentChanges":[{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":18}},"text":"H"},{"range":{"start":{"line":272,"character":19},"end":{"line":272,"character":19}},"text":"e"},{"range":{"start":{"line":272,"character":20},"end":{"line":272,"character":20}},"text":"a"},{"range":{"start":{"line":272,"character":21},"end":{"line":272,"character":21}},"text":"p"}]},"jsonrpc":"2.0"}Content-Length: 842

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":604},"contentChanges":[{"range":{"start":{"line":272,"character":22},"end":{"line":272,"character":22}},"text":" "},{"range":{"start":{"line":272,"character":23},"end":{"line":272,"character":23}},"text":"b"},{"range":{"start":{"line":272,"character":24},"end":{"line":272,"character":24}},"text":"e"},{"range":{"start":{"line":272,"character":25},"end":{"line":272,"character":25}},"text":"f"},{"range":{"start":{"line":272,"character":26},"end":{"line":272,"character":26}},"text":"o"},{"range":{"start":{"line":272,"character":27},"end":{"line":272,"character":27}},"text":"r"},{"range":{"start":{"line":272,"character":28},"end":{"line":272,"character":28}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 842

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":611},"contentChanges":[{"range":{"start":{"line":272,"character":29},"end":{"line":272,"character":29}},"text":" "},{"range":{"start":{"line":272,"character":30},"end":{"line":272,"character":30}},"text":"m"},{"range":{"start":{"line":272,"character":31},"end":{"line":272,"character":31}},"text":"a"},{"range":{"start":{"line":272,"character":32},"end":{"line":272,"character":32}},"text":"l"},{"range":{"start":{"line":272,"character":33},"end":{"line":272,"character":33}},"text":"l"},{"range":{"start":{"line":272,"character":34},"end":{"line":272,"character":34}},"text":"o"},{"range":{"start":{"line":272,"character":35},"end":{"line":272,"character":35}},"text":"c"}]},"jsonrpc":"2.0"}Content-Length: 470

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":614},"contentChanges":[{"range":{"start":{"line":272,"character":36},"end":{"line":272,"character":36}},"text":" "},{"range":{"start":{"line":272,"character":37},"end":{"line":272,"character":37}},"text":"("},{"range":{"start":{"line":272,"character":38},"end":{"line":272,"character":38}},"text":")"}]},"jsonrpc":"2.0"}Content-Length: 656

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":619},"contentChanges":[{"range":{"start":{"line":272,"character":38},"end":{"line":272,"character":38}},"text":"B"},{"range":{"start":{"line":272,"character":39},"end":{"line":272,"character":39}},"text":"y"},{"range":{"start":{"line":272,"character":40},"end":{"line":272,"character":40}},"text":"t"},{"range":{"start":{"line":272,"character":41},"end":{"line":272,"character":41}},"text":"e"},{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":42}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":620},"contentChanges":[{"range":{"start":{"line":272,"character":43},"end":{"line":272,"character":43}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 407

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":622},"contentChanges":[{"range":{"start":{"line":272,"character":43},"end":{"line":272,"character":44}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":43}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":623},"contentChanges":[{"range":{"start":{"line":272,"character":42},"end":{"line":272,"character":42}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":624},"contentChanges":[{"range":{"start":{"line":272,"character":18},"end":{"line":272,"character":18}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":625},"contentChanges":[{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":45}},"text":"L"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":626},"contentChanges":[{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":46}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 623

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":630},"contentChanges":[{"range":{"start":{"line":272,"character":48},"end":{"line":272,"character":49}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":47},"end":{"line":272,"character":48}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":47}},"rangeLength":1,"text":""},{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":46}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":631},"contentChanges":[{"range":{"start":{"line":272,"character":45},"end":{"line":272,"character":45}},"text":":"}]},"jsonrpc":"2.0"}Content-Length: 564

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":635},"contentChanges":[{"range":{"start":{"line":272,"character":46},"end":{"line":272,"character":46}},"text":" "},{"range":{"start":{"line":272,"character":47},"end":{"line":272,"character":47}},"text":"\""},{"range":{"start":{"line":272,"character":48},"end":{"line":272,"character":48}},"text":")"},{"range":{"start":{"line":272,"character":49},"end":{"line":272,"character":49}},"text":";"}]},"jsonrpc":"2.0"}Content-Length: 1114

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":645},"contentChanges":[{"range":{"start":{"line":272,"character":50},"end":{"line":272,"character":50}},"text":"\n    "},{"range":{"start":{"line":273,"character":4},"end":{"line":273,"character":4}},"text":"S"},{"range":{"start":{"line":273,"character":5},"end":{"line":273,"character":5}},"text":"e"},{"range":{"start":{"line":273,"character":6},"end":{"line":273,"character":6}},"text":"r"},{"range":{"start":{"line":273,"character":7},"end":{"line":273,"character":7}},"text":"i"},{"range":{"start":{"line":273,"character":8},"end":{"line":273,"character":8}},"text":"a"},{"range":{"start":{"line":273,"character":9},"end":{"line":273,"character":9}},"text":"l"},{"range":{"start":{"line":273,"character":10},"end":{"line":273,"character":10}},"text":"."},{"range":{"start":{"line":273,"character":11},"end":{"line":273,"character":11}},"text":"p"},{"range":{"start":{"line":273,"character":12},"end":{"line":273,"character":12}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 306

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":646},"contentChanges":[{"range":{"start":{"line":273,"character":11},"end":{"line":273,"character":13}},"rangeLength":2,"text":"print()"}]},"jsonrpc":"2.0"}Content-Length: 2051

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":666},"contentChanges":[{"range":{"start":{"line":273,"character":17},"end":{"line":273,"character":17}},"text":"x"},{"range":{"start":{"line":273,"character":18},"end":{"line":273,"character":18}},"text":"P"},{"range":{"start":{"line":273,"character":19},"end":{"line":273,"character":19}},"text":"o"},{"range":{"start":{"line":273,"character":20},"end":{"line":273,"character":20}},"text":"r"},{"range":{"start":{"line":273,"character":21},"end":{"line":273,"character":21}},"text":"t"},{"range":{"start":{"line":273,"character":22},"end":{"line":273,"character":22}},"text":"G"},{"range":{"start":{"line":273,"character":23},"end":{"line":273,"character":23}},"text":"e"},{"range":{"start":{"line":273,"character":24},"end":{"line":273,"character":24}},"text":"t"},{"range":{"start":{"line":273,"character":25},"end":{"line":273,"character":25}},"text":"F"},{"range":{"start":{"line":273,"character":26},"end":{"line":273,"character":26}},"text":"r"},{"range":{"start":{"line":273,"character":27},"end":{"line":273,"character":27}},"text":"e"},{"range":{"start":{"line":273,"character":28},"end":{"line":273,"character":28}},"text":"e"},{"range":{"start":{"line":273,"character":29},"end":{"line":273,"character":29}},"text":"H"},{"range":{"start":{"line":273,"character":30},"end":{"line":273,"character":30}},"text":"e"},{"range":{"start":{"line":273,"character":31},"end":{"line":273,"character":31}},"text":"a"},{"range":{"start":{"line":273,"character":32},"end":{"line":273,"character":32}},"text":"p"},{"range":{"start":{"line":273,"character":33},"end":{"line":273,"character":33}},"text":"S"},{"range":{"start":{"line":273,"character":34},"end":{"line":273,"character":34}},"text":"i"},{"range":{"start":{"line":273,"character":35},"end":{"line":273,"character":35}},"text":"z"},{"range":{"start":{"line":273,"character":36},"end":{"line":273,"character":36}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 394

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":668},"contentChanges":[{"range":{"start":{"line":273,"character":37},"end":{"line":273,"character":37}},"text":"()"},{"range":{"start":{"line":273,"character":38},"end":{"line":273,"character":39}},"rangeLength":1,"text":")"}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":669},"contentChanges":[{"range":{"start":{"line":273,"character":40},"end":{"line":273,"character":40}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'v'","range":{"end":{"character":3,"line":148},"start":{"character":2,"line":148}},"severity":1,"source":"clang"},{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":669}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":41},"end":{"line":273,"character":41}},"context":{"diagnostics":[]}},"id":237,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":237,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":238,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":238,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":281},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":311},"start":{"character":0,"line":283}},"selectionRange":{"end":{"character":10,"line":283},"start":{"character":5,"line":283}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":317},"start":{"character":0,"line":315}},"selectionRange":{"end":{"character":9,"line":315},"start":{"character":5,"line":315}}}]}
>>>
Content-Length: 9432

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":670},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\n//#include \u003cArduino.h\u003e\n// For IMU\n#include \u003cAdafruit_LSM6DS33.h\u003e\n#include \u003cAdafruit_Sensor.h\u003e\n\n//For WiFi and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\n//  Create sensor object\nAdafruit_LSM6DS33 imu;\n\n//  Create sensor object\nsensors_event_t a,g,temp;\nfloat accX, accY, accZ,\n      accRoll,      accPitch,     accYaw;            // units degrees (roll and pitch noisy, yaw not possible)\n\n\n// LDR sensor pin\nconst int ldrPin=34;\n// Flashed pins\nconst int rightPin=13;\nconst int leftPin=14;\nconst int lightPin=12;\nint lightInit; // initial value\n//Receiver MAC Address\n//C4:4F:33:6B:0F:E1\nuint8_t broadcastAddress[] = {0xC4, 0x4F, 0x33, 0x6B, 0x0F, 0xE1};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct masterMessage {\n  float roll;\n  float pitch;\n  int lightSensor;\n} masterMessage;\n\ntypedef struct receivedMessage{\n  bool imuUsage;\n  //String rec_message;\n}receivedMessage;\n\n// Define the masterMessage\nmasterMessage msgToSlave;\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nreceivedMessage messageFromSlave;\n\n// String receivedString; \n// Variable to store if sending data was successful\nString success;\n// Should be global ... ( TODO -\u003e Check why ???)\nesp_now_peer_info_t peerInfo;\n\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW();\n#line 83 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initIMU();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initLDRSensor();\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPrint();\n#line 121 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPlotter();\n#line 136 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 147 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 157 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getAccReadings();\n#line 166 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getLDRReadings();\n#line 172 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid doCalculations();\n#line 180 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid blinking(int pin);\n#line 195 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid checkAlarms();\n#line 214 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task1(void * parameters);\n#line 242 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task2(void * parameters);\n#line 249 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid setup();\n#line 281 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid loop();\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  //esp_now_peer_info_t peerInfo;\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\nvoid initIMU(){\n  while (!Serial)\n    delay(10); // will pause Zero, Leonardo, etc until serial console opens\n\n  Serial.println(\"Adafruit LSM6DS33 test!\");\n\n  if (!imu.begin_I2C()) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS)) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS, LSM_SCK, LSM_MISO, LSM_MOSI)) {\n    Serial.println(\"Failed to find LSM6DS33 chip\");\n    while (1) {\n      delay(10);\n    }\n  }  \n  Serial.println(\"Adafruit LSM6DS33 FOUND!\");\n}\n\nvoid initLDRSensor(){\n  //we will take a single reading from the light sensor and store it in the lightCal        \n  //variable. This will give us a prelinary value to compare against in the loop\n  pinMode(ldrPin, INPUT);\n  // lightInit=analogRead(ldrPin);\n}\n\nvoid serialPrint(){\n  Serial.print(\"X: \");\n  Serial.print(accX);\n  Serial.print(\"  Y: \");\n  Serial.print(accY);\n  Serial.print(\"  Z: \");\n  Serial.print(accZ);\n  v itch);\n  Serial.print(\"  Light: \");\n  Serial.print(msgToSlave.lightSensor);\n  Serial.println();\n\n}\n\nvoid serialPlotter(){\n  // Serial.print(accX);\n  // Serial.print(accY);\n  // Serial.print(accZ);\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"\\t\");\n  Serial.println(msgToSlave.pitch);\n  \n  // Serial.print(\"  Light: \");\n  // Serial.print(msgToSlave.lightSensor);\n  // Serial.println();\n\n}\n\n// Callback Function that sents message\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  //Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  //Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    success = \"Delivery Success :)\";\n  }\n  else{\n    success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026messageFromSlave,incomingData, sizeof(messageFromSlave));\n  //Just for debug\n  //Serial.print(\"Bytes received: \");\n  //Serial.println(len);\n\n  // Write the data that have been sent\n  // receivedString = messageFromSlave.rec_message;\n  \n}\nvoid getAccReadings(){\n  imu.getEvent(\u0026a, \u0026g, \u0026temp);\n  // Get current acceleration values\n  accX = a.acceleration.x;\n  accY = a.acceleration.y;\n  accZ = a.acceleration.z;\n}\n\n\nvoid getLDRReadings(){\n  // Read the current light Levels\n  // lightInit=\n  msgToSlave.lightSensor=analogRead(ldrPin);\n}\n\nvoid doCalculations() {\n  /*\n  Calculate Roll and pitch and save them into the structure message\n  */\n  msgToSlave.roll = atan2(accY, accZ) * 180/M_PI;\n  msgToSlave.pitch = atan2(-accX, sqrt(accY*accY + accZ*accZ)) * 180/M_PI;\n}\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (msgToSlave.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n  if (msgToSlave.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (msgToSlave.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  \n}\n\n\nvoid task1(void * parameters){\n  // for(;;){\n    Serial.print(\"Task 1\");\n    //Get accelation readings\n    getAccReadings();\n    getLDRReadings();\n    doCalculations();\n    \n    // Send message via ESP-NOW\n    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) \u0026msgToSlave, sizeof(msgToSlave));\n    \n    if (result == ESP_OK) {\n      // Serial.println(\"Sent with success\");\n    }\n    else {\n      // Serial.println(\"Error sending the data\");\n    }\n    // Delay should be reduced ? \n    // serialPrint();\n    serialPlotter();\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n    Serial.print(\" Overflow Stack :\");\n    Serial.println(uxTaskGetStackHighWaterMark(NULL));\n    Serial.print(\" Heap before malloc (Bytes): \");\n    Serial.print(xPortGetFreeHeapSize());\n}\n\nvoid task2(void * parameters){\n  for(;;){\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n}\n\nvoid setup(){\n  Serial.begin(115200);\n  initIMU();\n  initLDRSensor();\n  initESPNOW();\n\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n\n  xTaskCreate(\n    task1, // function name\n    \"Task1\", // task name\n    2000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n  delay(500);\n  xTaskCreate(\n    task2, // function name\n    \"Task2\", // task name\n    1000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n}\n\n\n\nvoid loop(){\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":41},"end":{"line":273,"character":41}},"context":{"diagnostics":[]}},"id":239,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":3,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":3,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 38

{"id":239,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 647

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":142,"character":1},"end":{"line":151,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":148,"character":2},"end":{"line":148,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'v'"},{"range":{"start":{"line":148,"character":8},"end":{"line":148,"character":9}},"severity":1,"code":"extraneous_token_before_semi","source":"clang","message":"Extraneous ')' before ';' (fix available)"}]}},"id":240,"jsonrpc":"2.0"}Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":241,"jsonrpc":"2.0"}
<<<
Content-Length: 833

{"id":240,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp":[{"newText":"","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}}}]}},"isPreferred":true,"kind":"quickfix","title":"remove ')'"},{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":19,"line":151},"start":{"character":1,"line":142}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":195},"jsonrpc":"2.0"}Content-Length: 647

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":142,"character":2},"end":{"line":151,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":148,"character":2},"end":{"line":148,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'v'"},{"range":{"start":{"line":148,"character":8},"end":{"line":148,"character":9}},"severity":1,"code":"extraneous_token_before_semi","source":"clang","message":"Extraneous ')' before ';' (fix available)"}]}},"id":242,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":241,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":179},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":15,"line":170},"start":{"character":5,"line":170}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":181}},"selectionRange":{"end":{"character":15,"line":181},"start":{"character":5,"line":181}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":197},"start":{"character":0,"line":191}},"selectionRange":{"end":{"character":19,"line":191},"start":{"character":5,"line":191}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":204},"start":{"character":0,"line":200}},"selectionRange":{"end":{"character":19,"line":200},"start":{"character":5,"line":200}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":212},"start":{"character":0,"line":206}},"selectionRange":{"end":{"character":19,"line":206},"start":{"character":5,"line":206}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":227},"start":{"character":0,"line":214}},"selectionRange":{"end":{"character":13,"line":214},"start":{"character":5,"line":214}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":245},"start":{"character":0,"line":229}},"selectionRange":{"end":{"character":16,"line":229},"start":{"character":5,"line":229}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":248}},"selectionRange":{"end":{"character":10,"line":248},"start":{"character":5,"line":248}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":281},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":311},"start":{"character":0,"line":283}},"selectionRange":{"end":{"character":10,"line":283},"start":{"character":5,"line":283}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":317},"start":{"character":0,"line":315}},"selectionRange":{"end":{"character":9,"line":315},"start":{"character":5,"line":315}}}]}Content-Length: 833

{"id":242,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"extraneous_token_before_semi","message":"Extraneous ')' before ';' (fix available)","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp":[{"newText":"","range":{"end":{"character":9,"line":148},"start":{"character":8,"line":148}}}]}},"isPreferred":true,"kind":"quickfix","title":"remove ')'"},{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":19,"line":151},"start":{"character":2,"line":142}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":196},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":142,"character":2}},"id":243,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":243,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":142},"start":{"character":2,"line":142}}}}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":142,"character":2}},"id":244,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":244,"jsonrpc":"2.0","result":[{"range":{"end":{"character":28,"line":115},"start":{"character":22,"line":115}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}]}
>>>
Content-Length: 673

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":671},"contentChanges":[{"range":{"start":{"line":142,"character":2},"end":{"line":151,"character":19}},"rangeLength":236,"text":"Serial.print(\"X: \");\n  Serial.print(accX);\n  Serial.print(\"  Y: \");\n  Serial.print(accY);\n  Serial.print(\"  Z: \");\n  Serial.print(accZ);\n  Serial.print(\"  Roll: \");\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"  Pitch: \");\n  Serial.print(msgToSlave.pitch);\n  Serial.print(\"  Light: \");\n  Serial.print(msgToSlave.lightSensor);\n  Serial.println();"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":197},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":154,"character":19},"end":{"line":154,"character":19}},"context":{"diagnostics":[]}},"id":245,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":245,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":198},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":671}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":154,"character":19},"end":{"line":154,"character":19}},"context":{"diagnostics":[]}},"id":246,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":246,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":20}},"id":247,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":247,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":21}},"id":248,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":248,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":21},"end":{"line":275,"character":21}},"context":{"diagnostics":[]}},"id":249,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":249,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":276,"character":21}},"id":250,"jsonrpc":"2.0"}
<<<
Content-Length: 128

{"id":250,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":37,"line":276},"start":{"character":17,"line":276}}}]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":276,"character":21},"end":{"line":276,"character":21}},"context":{"diagnostics":[]}},"id":251,"jsonrpc":"2.0"}
<<<
Content-Length: 395

{"id":251,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":21,"line":276},"start":{"character":21,"line":276}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'xPortGetFreeHeapSize'"},"kind":"refactor","title":"Expand macro 'xPortGetFreeHeapSize'"}]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":672},"contentChanges":[{"range":{"start":{"line":276,"character":4},"end":{"line":276,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":672}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":276,"character":24},"end":{"line":276,"character":24}},"context":{"diagnostics":[]}},"id":252,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":252,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":24}},"id":253,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":253,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":24},"end":{"line":275,"character":24}},"context":{"diagnostics":[]}},"id":254,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":254,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":673},"contentChanges":[{"range":{"start":{"line":275,"character":4},"end":{"line":275,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":673}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":27},"end":{"line":275,"character":27}},"context":{"diagnostics":[]}},"id":255,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":255,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":15}},"id":256,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":256,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t print(const char[])\n```"},"range":{"end":{"character":16,"line":273},"start":{"character":11,"line":273}}}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":15}},"id":257,"jsonrpc":"2.0"}
<<<
Content-Length: 849

{"id":257,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":142},"start":{"character":9,"line":142}}},{"kind":1,"range":{"end":{"character":14,"line":144},"start":{"character":9,"line":144}}},{"kind":1,"range":{"end":{"character":14,"line":146},"start":{"character":9,"line":146}}},{"kind":1,"range":{"end":{"character":14,"line":148},"start":{"character":9,"line":148}}},{"kind":1,"range":{"end":{"character":14,"line":150},"start":{"character":9,"line":150}}},{"kind":1,"range":{"end":{"character":14,"line":152},"start":{"character":9,"line":152}}},{"kind":1,"range":{"end":{"character":14,"line":163},"start":{"character":9,"line":163}}},{"kind":1,"range":{"end":{"character":16,"line":253},"start":{"character":11,"line":253}}},{"kind":1,"range":{"end":{"character":16,"line":273},"start":{"character":11,"line":273}}}]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":15}},"id":258,"jsonrpc":"2.0"}
<<<
Content-Length: 128

{"id":258,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":18,"line":274},"start":{"character":11,"line":274}}}]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":15},"end":{"line":274,"character":15}},"context":{"diagnostics":[]}},"id":259,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":259,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":15}},"id":260,"jsonrpc":"2.0"}
<<<
Content-Length: 213

{"id":260,"jsonrpc":"2.0","result":[{"range":{"end":{"character":19,"line":86},"start":{"character":14,"line":86}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}]}
>>>
Content-Length: 8545

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 23 November 2006 by David A. Mellis\n Modified December 2014 by Ivan Grokhotkov\n Modified May 2015 by Michael C. Miller - ESP31B progmem support\n */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n#include \"Arduino.h\"\n\n#include \"Print.h\"\nextern \"C\" {\n    #include \"time.h\"\n}\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n    size_t n = 0;\n    while(size--) {\n        n += write(*buffer++);\n    }\n    return n;\n}\n\nsize_t Print::printf(const char *format, ...)\n{\n    char loc_buf[64];\n    char * temp = loc_buf;\n    va_list arg;\n    va_list copy;\n    va_start(arg, format);\n    va_copy(copy, arg);\n    int len = vsnprintf(temp, sizeof(loc_buf), format, copy);\n    va_end(copy);\n    if(len \u003c 0) {\n        va_end(arg);\n        return 0;\n    };\n    if(len \u003e= sizeof(loc_buf)){\n        temp = (char*) malloc(len+1);\n        if(temp == NULL) {\n            va_end(arg);\n            return 0;\n        }\n        len = vsnprintf(temp, len+1, format, arg);\n    }\n    va_end(arg);\n    len = write((uint8_t*)temp, len);\n    if(temp != loc_buf){\n        free(temp);\n    }\n    return len;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n    return print(reinterpret_cast\u003cconst char *\u003e(ifsh));\n}\n\nsize_t Print::print(const String \u0026s)\n{\n    return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n    return write(str);\n}\n\nsize_t Print::print(char c)\n{\n    return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n    return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n    return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n    return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n    int t = 0;\n    if (base == 10 \u0026\u0026 n \u003c 0) {\n        t = print('-');\n        n = -n;\n    }\n    return printNumber(static_cast\u003cunsigned long\u003e(n), base) + t;\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n    if(base == 0) {\n        return write(n);\n    } else {\n        return printNumber(n, base);\n    }\n}\n\nsize_t Print::print(long long n, int base)\n{\n    int t = 0;\n    if (base == 10 \u0026\u0026 n \u003c 0) {\n        t = print('-');\n        n = -n;\n    }\n    return printNumber(static_cast\u003cunsigned long long\u003e(n), base) + t;\n}\n\nsize_t Print::print(unsigned long long n, int base)\n{\n    if (base == 0) {\n        return write(n);\n    } else {\n        return printNumber(n, base);\n    }\n}\n\nsize_t Print::print(double n, int digits)\n{\n    return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n    size_t n = print(ifsh);\n    n += println();\n    return n;\n}\n\nsize_t Print::print(const Printable\u0026 x)\n{\n    return x.printTo(*this);\n}\n\nsize_t Print::print(struct tm * timeinfo, const char * format)\n{\n    const char * f = format;\n    if(!f){\n        f = \"%c\";\n    }\n    char buf[64];\n    size_t written = strftime(buf, 64, f, timeinfo);\n    if(written == 0){\n        return written;\n    }\n    return print(buf);\n}\n\nsize_t Print::println(void)\n{\n    return print(\"\\r\\n\");\n}\n\nsize_t Print::println(const String \u0026s)\n{\n    size_t n = print(s);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(const char c[])\n{\n    size_t n = print(c);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(char c)\n{\n    size_t n = print(c);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n    size_t n = print(b, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(long long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned long long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n    size_t n = print(num, digits);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(const Printable\u0026 x)\n{\n    size_t n = print(x);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(struct tm * timeinfo, const char * format)\n{\n    size_t n = print(timeinfo, format);\n    n += println();\n    return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n    char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.\n    char *str = \u0026buf[sizeof(buf) - 1];\n\n    *str = '\\0';\n\n    // prevent crash if called with base == 1\n    if(base \u003c 2) {\n        base = 10;\n    }\n\n    do {\n        char c = n % base;\n        n /= base;\n\n        *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n    } while (n);\n\n    return write(str);\n}\n\nsize_t Print::printNumber(unsigned long long n, uint8_t base)\n{\n    char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.\n    char* str = \u0026buf[sizeof(buf) - 1];\n\n    *str = '\\0';\n\n    // prevent crash if called with base == 1\n    if (base \u003c 2) {\n        base = 10;\n    }\n\n    do {\n        auto m = n;\n        n /= base;\n        char c = m - base * n;\n\n        *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n    } while (n);\n\n    return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits)\n{\n    size_t n = 0;\n\n    if(isnan(number)) {\n        return print(\"nan\");\n    }\n    if(isinf(number)) {\n        return print(\"inf\");\n    }\n    if(number \u003e 4294967040.0) {\n        return print(\"ovf\");    // constant determined empirically\n    }\n    if(number \u003c -4294967040.0) {\n        return print(\"ovf\");    // constant determined empirically\n    }\n\n    // Handle negative numbers\n    if(number \u003c 0.0) {\n        n += print('-');\n        number = -number;\n    }\n\n    // Round correctly so that print(1.999, 2) prints as \"2.00\"\n    double rounding = 0.5;\n    for(uint8_t i = 0; i \u003c digits; ++i) {\n        rounding /= 10.0;\n    }\n\n    number += rounding;\n\n    // Extract the integer part of the number and print it\n    unsigned long int_part = (unsigned long) number;\n    double remainder = number - (double) int_part;\n    n += print(int_part);\n\n    // Print the decimal point, but only if there are digits beyond\n    if(digits \u003e 0) {\n        n += print(\".\");\n    }\n\n    // Extract digits from the remainder one at a time\n    while(digits-- \u003e 0) {\n        remainder *= 10.0;\n        int toPrint = int(remainder);\n        n += print(toPrint);\n        remainder -= toPrint;\n    }\n\n    return n;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":674},"contentChanges":[{"range":{"start":{"line":274,"character":4},"end":{"line":274,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}}
>>>
Content-Length: 174

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":674}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":18},"end":{"line":273,"character":18}},"context":{"diagnostics":[]}},"id":261,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":261,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":675},"contentChanges":[{"range":{"start":{"line":273,"character":4},"end":{"line":273,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":675}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":21},"end":{"line":273,"character":21}},"context":{"diagnostics":[]}},"id":262,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":262,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":27}},"id":263,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":263,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":17}},"id":264,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":264,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":5}},"id":265,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":265,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":6}},"id":266,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":266,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":309,"character":6},"end":{"line":309,"character":6}},"context":{"diagnostics":[]}},"id":267,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":267,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":5}},"id":268,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":268,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":303},"start":{"character":4,"line":303}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":301,"character":5}},"id":269,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":269,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":301},"start":{"character":4,"line":301}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":5}},"id":270,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":270,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":5}},"id":271,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":271,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":272,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":272,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":300},"start":{"character":4,"line":300}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":302,"character":7}},"id":273,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":273,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":676},"contentChanges":[{"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"rangeLength":4,"text":"3"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":676}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":5},"end":{"line":300,"character":5}},"context":{"diagnostics":[]}},"id":274,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":274,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":677},"contentChanges":[{"range":{"start":{"line":300,"character":5},"end":{"line":300,"character":5}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":677}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":678},"contentChanges":[{"range":{"start":{"line":300,"character":6},"end":{"line":300,"character":6}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":678}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":679},"contentChanges":[{"range":{"start":{"line":300,"character":7},"end":{"line":300,"character":7}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":679}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":8},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":275,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":275,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":302,"character":12}},"id":276,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":276,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":17}},"id":277,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":277,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":17}},"id":278,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":278,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":17},"end":{"line":273,"character":17}},"context":{"diagnostics":[]}},"id":279,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":279,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":17}},"id":280,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":280,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":680},"contentChanges":[{"range":{"start":{"line":273,"character":4},"end":{"line":273,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":680}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":14},"end":{"line":273,"character":14}},"context":{"diagnostics":[]}},"id":281,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":281,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":14}},"id":282,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":282,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":681},"contentChanges":[{"range":{"start":{"line":274,"character":4},"end":{"line":274,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":681}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":11},"end":{"line":274,"character":11}},"context":{"diagnostics":[]}},"id":283,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":283,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":682},"contentChanges":[{"range":{"start":{"line":274,"character":4},"end":{"line":274,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":682}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":14},"end":{"line":274,"character":14}},"context":{"diagnostics":[]}},"id":284,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":284,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":683},"contentChanges":[{"range":{"start":{"line":274,"character":4},"end":{"line":274,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":683}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":11}},"id":285,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":285,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":11},"end":{"line":275,"character":11}},"context":{"diagnostics":[]}},"id":286,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":286,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":684},"contentChanges":[{"range":{"start":{"line":275,"character":4},"end":{"line":275,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":684}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":8},"end":{"line":275,"character":8}},"context":{"diagnostics":[]}},"id":287,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":287,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":276,"character":8}},"id":288,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":288,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":276,"character":8},"end":{"line":276,"character":8}},"context":{"diagnostics":[]}},"id":289,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":289,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":685},"contentChanges":[{"range":{"start":{"line":276,"character":4},"end":{"line":276,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":685}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":276,"character":5},"end":{"line":276,"character":5}},"context":{"diagnostics":[]}},"id":290,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":290,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 9552

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":686},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\n//#include \u003cArduino.h\u003e\n// For IMU\n#include \u003cAdafruit_LSM6DS33.h\u003e\n#include \u003cAdafruit_Sensor.h\u003e\n\n//For WiFi and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\n//  Create sensor object\nAdafruit_LSM6DS33 imu;\n\n//  Create sensor object\nsensors_event_t a,g,temp;\nfloat accX, accY, accZ,\n      accRoll,      accPitch,     accYaw;            // units degrees (roll and pitch noisy, yaw not possible)\n\n\n// LDR sensor pin\nconst int ldrPin=34;\n// Flashed pins\nconst int rightPin=13;\nconst int leftPin=14;\nconst int lightPin=12;\nint lightInit; // initial value\n//Receiver MAC Address\n//C4:4F:33:6B:0F:E1\nuint8_t broadcastAddress[] = {0xC4, 0x4F, 0x33, 0x6B, 0x0F, 0xE1};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct masterMessage {\n  float roll;\n  float pitch;\n  int lightSensor;\n} masterMessage;\n\ntypedef struct receivedMessage{\n  bool imuUsage;\n  //String rec_message;\n}receivedMessage;\n\n// Define the masterMessage\nmasterMessage msgToSlave;\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nreceivedMessage messageFromSlave;\n\n// String receivedString; \n// Variable to store if sending data was successful\nString success;\n// Should be global ... ( TODO -\u003e Check why ???)\nesp_now_peer_info_t peerInfo;\n\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW();\n#line 83 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initIMU();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initLDRSensor();\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPrint();\n#line 124 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPlotter();\n#line 139 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 150 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 160 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getAccReadings();\n#line 169 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getLDRReadings();\n#line 175 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid doCalculations();\n#line 183 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid blinking(int pin);\n#line 198 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid checkAlarms();\n#line 217 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task1(void * parameters);\n#line 245 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task2(void * parameters);\n#line 252 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid setup();\n#line 284 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid loop();\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  //esp_now_peer_info_t peerInfo;\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\nvoid initIMU(){\n  while (!Serial)\n    delay(10); // will pause Zero, Leonardo, etc until serial console opens\n\n  Serial.println(\"Adafruit LSM6DS33 test!\");\n\n  if (!imu.begin_I2C()) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS)) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS, LSM_SCK, LSM_MISO, LSM_MOSI)) {\n    Serial.println(\"Failed to find LSM6DS33 chip\");\n    while (1) {\n      delay(10);\n    }\n  }  \n  Serial.println(\"Adafruit LSM6DS33 FOUND!\");\n}\n\nvoid initLDRSensor(){\n  //we will take a single reading from the light sensor and store it in the lightCal        \n  //variable. This will give us a prelinary value to compare against in the loop\n  pinMode(ldrPin, INPUT);\n  // lightInit=analogRead(ldrPin);\n}\n\nvoid serialPrint(){\n  Serial.print(\"X: \");\n  Serial.print(accX);\n  Serial.print(\"  Y: \");\n  Serial.print(accY);\n  Serial.print(\"  Z: \");\n  Serial.print(accZ);\n  Serial.print(\"  Roll: \");\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"  Pitch: \");\n  Serial.print(msgToSlave.pitch);\n  Serial.print(\"  Light: \");\n  Serial.print(msgToSlave.lightSensor);\n  Serial.println();\n\n}\n\nvoid serialPlotter(){\n  // Serial.print(accX);\n  // Serial.print(accY);\n  // Serial.print(accZ);\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"\\t\");\n  Serial.println(msgToSlave.pitch);\n  \n  // Serial.print(\"  Light: \");\n  // Serial.print(msgToSlave.lightSensor);\n  // Serial.println();\n\n}\n\n// Callback Function that sents message\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  //Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  //Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    success = \"Delivery Success :)\";\n  }\n  else{\n    success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026messageFromSlave,incomingData, sizeof(messageFromSlave));\n  //Just for debug\n  //Serial.print(\"Bytes received: \");\n  //Serial.println(len);\n\n  // Write the data that have been sent\n  // receivedString = messageFromSlave.rec_message;\n  \n}\nvoid getAccReadings(){\n  imu.getEvent(\u0026a, \u0026g, \u0026temp);\n  // Get current acceleration values\n  accX = a.acceleration.x;\n  accY = a.acceleration.y;\n  accZ = a.acceleration.z;\n}\n\n\nvoid getLDRReadings(){\n  // Read the current light Levels\n  // lightInit=\n  msgToSlave.lightSensor=analogRead(ldrPin);\n}\n\nvoid doCalculations() {\n  /*\n  Calculate Roll and pitch and save them into the structure message\n  */\n  msgToSlave.roll = atan2(accY, accZ) * 180/M_PI;\n  msgToSlave.pitch = atan2(-accX, sqrt(accY*accY + accZ*accZ)) * 180/M_PI;\n}\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (msgToSlave.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n  if (msgToSlave.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (msgToSlave.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  \n}\n\n\nvoid task1(void * parameters){\n  // for(;;){\n    Serial.print(\"Task 1\");\n    //Get accelation readings\n    getAccReadings();\n    getLDRReadings();\n    doCalculations();\n    \n    // Send message via ESP-NOW\n    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) \u0026msgToSlave, sizeof(msgToSlave));\n    \n    if (result == ESP_OK) {\n      // Serial.println(\"Sent with success\");\n    }\n    else {\n      // Serial.println(\"Error sending the data\");\n    }\n    // Delay should be reduced ? \n    // serialPrint();\n    serialPlotter();\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n    Serial.print(\" Overflow Stack :\");\n    Serial.println(uxTaskGetStackHighWaterMark(NULL));\n    Serial.print(\" Heap before malloc (Bytes): \");\n    Serial.print(xPortGetFreeHeapSize());\n}\n\nvoid task2(void * parameters){\n  for(;;){\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n}\n\nvoid setup(){\n  Serial.begin(115200);\n  initIMU();\n  initLDRSensor();\n  initESPNOW();\n\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n\n  xTaskCreate(\n    task1, // function name\n    \"Task1\", // task name\n    3000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n  delay(500);\n  xTaskCreate(\n    task2, // function name\n    \"Task2\", // task name\n    1000, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n}\n\n\n\nvoid loop(){\n\n}\n\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":4,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":4,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":686}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":13}},"id":291,"jsonrpc":"2.0"}
<<<
Content-Length: 1892

{"id":291,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `vTaskDelay`  \n\n---\n→ `void`  \nParameters:  \n- `const TickType_t xTicksToDelay`\n\nDelay a task for a given number of ticks.  \nThe actual time that the task remains blocked depends on the tick rate.  \nThe constant portTICK_PERIOD_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.  \nINCLUDE_vTaskDelay must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \nvTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method of controlling the frequency of a periodic task as the path taken through the code, as well as other task and interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the calling task should unblock.  \n@param xTicksToDelay The amount of time, in tick periods, that the calling task should block.  \nExample usage:  \n@code{c} void vTaskFunction( void * pvParameters ) { // Block for 500ms.  \nconst TickType_t xDelay = 500 / portTICK_PERIOD_MS;  \nfor( ;; ) { // Simply toggle the LED every 500ms, blocking between each toggle.  \nvToggleLED();  \nvTaskDelay( xDelay );  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl  \n\n---\n```cpp\nvoid vTaskDelay(const TickType_t xTicksToDelay)\n```"},"range":{"end":{"character":14,"line":272},"start":{"character":4,"line":272}}}}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":292,"jsonrpc":"2.0"}
<<<
Content-Length: 11744

{"id":292,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":156},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":170},"start":{"character":0,"line":158}},"selectionRange":{"end":{"character":18,"line":158},"start":{"character":5,"line":158}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":182},"start":{"character":0,"line":173}},"selectionRange":{"end":{"character":15,"line":173},"start":{"character":5,"line":173}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":193},"start":{"character":0,"line":184}},"selectionRange":{"end":{"character":15,"line":184},"start":{"character":5,"line":184}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":200},"start":{"character":0,"line":194}},"selectionRange":{"end":{"character":19,"line":194},"start":{"character":5,"line":194}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":207},"start":{"character":0,"line":203}},"selectionRange":{"end":{"character":19,"line":203},"start":{"character":5,"line":203}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":215},"start":{"character":0,"line":209}},"selectionRange":{"end":{"character":19,"line":209},"start":{"character":5,"line":209}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":230},"start":{"character":0,"line":217}},"selectionRange":{"end":{"character":13,"line":217},"start":{"character":5,"line":217}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":248},"start":{"character":0,"line":232}},"selectionRange":{"end":{"character":16,"line":232},"start":{"character":5,"line":232}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":277},"start":{"character":0,"line":251}},"selectionRange":{"end":{"character":10,"line":251},"start":{"character":5,"line":251}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":284},"start":{"character":0,"line":279}},"selectionRange":{"end":{"character":10,"line":279},"start":{"character":5,"line":279}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":314},"start":{"character":0,"line":286}},"selectionRange":{"end":{"character":10,"line":286},"start":{"character":5,"line":286}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":320},"start":{"character":0,"line":318}},"selectionRange":{"end":{"character":9,"line":318},"start":{"character":5,"line":318}}}]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":36}},"id":293,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":293,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":36}},"id":294,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":294,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":36}},"id":295,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":295,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":36},"end":{"line":275,"character":36}},"context":{"diagnostics":[]}},"id":296,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":296,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":687},"contentChanges":[{"range":{"start":{"line":275,"character":4},"end":{"line":275,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":687}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":39},"end":{"line":275,"character":39}},"context":{"diagnostics":[]}},"id":297,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":297,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":276,"character":39},"end":{"line":276,"character":39}},"context":{"diagnostics":[]}},"id":298,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":298,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":688},"contentChanges":[{"range":{"start":{"line":276,"character":4},"end":{"line":276,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":688}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":276,"character":42},"end":{"line":276,"character":42}},"context":{"diagnostics":[]}},"id":299,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":299,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":264,"character":2}},"id":300,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":300,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":30}},"id":301,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":301,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":30},"end":{"line":273,"character":30}},"context":{"diagnostics":[]}},"id":302,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":302,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":33}},"id":303,"jsonrpc":"2.0"}
<<<
Content-Length: 1078

{"id":303,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `uxTaskGetStackHighWaterMark`  \n\n---\n→ `UBaseType_t`  \nParameters:  \n- `TaskHandle_t xTask`\n\nReturns the high water mark of the stack associated with xTask.  \nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for this function to be available.  \nHigh water mark is the minimum free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task started.  \nThe smaller the returned number the closer the task has come to overflowing its stack.  \n@param xTask Handle of the task associated with the stack to be checked.  \nSet xTask to NULL to check the stack of the calling task.  \n@return The smallest amount of free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task referenced by xTask was created.  \n\n---\n```cpp\nUBaseType_t uxTaskGetStackHighWaterMark(TaskHandle_t xTask)\n```"},"range":{"end":{"character":46,"line":274},"start":{"character":19,"line":274}}}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":33}},"id":304,"jsonrpc":"2.0"}
<<<
Content-Length: 128

{"id":304,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":46,"line":274},"start":{"character":19,"line":274}}}]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":33}},"id":305,"jsonrpc":"2.0"}
<<<
Content-Length: 1078

{"id":305,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `uxTaskGetStackHighWaterMark`  \n\n---\n→ `UBaseType_t`  \nParameters:  \n- `TaskHandle_t xTask`\n\nReturns the high water mark of the stack associated with xTask.  \nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for this function to be available.  \nHigh water mark is the minimum free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task started.  \nThe smaller the returned number the closer the task has come to overflowing its stack.  \n@param xTask Handle of the task associated with the stack to be checked.  \nSet xTask to NULL to check the stack of the calling task.  \n@return The smallest amount of free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task referenced by xTask was created.  \n\n---\n```cpp\nUBaseType_t uxTaskGetStackHighWaterMark(TaskHandle_t xTask)\n```"},"range":{"end":{"character":46,"line":274},"start":{"character":19,"line":274}}}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":33},"end":{"line":274,"character":33}},"context":{"diagnostics":[]}},"id":306,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":306,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":279,"character":14}},"id":307,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":307,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":308,"character":9}},"id":308,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":308,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":11}},"id":309,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":309,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":7}},"id":310,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":310,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":7}},"id":311,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":311,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":7},"end":{"line":300,"character":7}},"context":{"diagnostics":[]}},"id":312,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":312,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":8}},"id":313,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":313,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":303},"start":{"character":4,"line":303}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":8},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":314,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":314,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":8}},"id":315,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":315,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":303},"start":{"character":4,"line":303}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":316,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":316,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":300},"start":{"character":4,"line":300}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":689},"contentChanges":[{"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"rangeLength":4,"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":689}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":5},"end":{"line":300,"character":5}},"context":{"diagnostics":[]}},"id":317,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":317,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":690},"contentChanges":[{"range":{"start":{"line":300,"character":5},"end":{"line":300,"character":5}},"text":"9"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":690}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":691},"contentChanges":[{"range":{"start":{"line":300,"character":6},"end":{"line":300,"character":6}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":691}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":692},"contentChanges":[{"range":{"start":{"line":300,"character":7},"end":{"line":300,"character":7}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":692}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":8},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":318,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":318,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":301,"character":8}},"id":319,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":319,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":13,"line":297},"start":{"character":2,"line":297}}},{"kind":1,"range":{"end":{"character":13,"line":306},"start":{"character":2,"line":306}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":301,"character":8},"end":{"line":301,"character":8}},"context":{"diagnostics":[]}},"id":320,"jsonrpc":"2.0"}
<<<
Content-Length: 361

{"id":320,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":301},"start":{"character":8,"line":301}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":13}},"id":321,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":321,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":7}},"id":322,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":322,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":6}},"id":323,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":323,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":309,"character":9},"end":{"line":309,"character":9}},"context":{"diagnostics":[]}},"id":324,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":324,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":8}},"id":325,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":325,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":13,"line":297},"start":{"character":2,"line":297}}},{"kind":1,"range":{"end":{"character":13,"line":306},"start":{"character":2,"line":306}}}]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":693},"contentChanges":[{"range":{"start":{"line":309,"character":7},"end":{"line":309,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":693}}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":694},"contentChanges":[{"range":{"start":{"line":309,"character":6},"end":{"line":309,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":694}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":695},"contentChanges":[{"range":{"start":{"line":309,"character":6},"end":{"line":309,"character":6}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":695}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":309,"character":7},"end":{"line":309,"character":7}},"context":{"diagnostics":[]}},"id":326,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":326,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":696},"contentChanges":[{"range":{"start":{"line":309,"character":7},"end":{"line":309,"character":7}},"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":696}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":309,"character":8},"end":{"line":309,"character":8}},"context":{"diagnostics":[]}},"id":327,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":327,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":23}},"id":328,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":328,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":23}},"id":329,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":329,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":310,"character":6}},"id":330,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":330,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":310},"start":{"character":4,"line":310}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":10}},"id":331,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":331,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":15}},"id":332,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":332,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":308,"character":12}},"id":333,"jsonrpc":"2.0"}
<<<
Content-Length: 672

{"id":333,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":12,"line":308},"start":{"character":11,"line":308}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":9}},"id":334,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":334,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":9,"line":300},"start":{"character":8,"line":300}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":8}},"id":335,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":335,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":13,"line":297},"start":{"character":2,"line":297}}},{"kind":1,"range":{"end":{"character":13,"line":306},"start":{"character":2,"line":306}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":8},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":336,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":336,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":308,"character":3}},"id":337,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":337,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":338,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":338,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":300},"start":{"character":4,"line":300}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":697},"contentChanges":[{"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"rangeLength":4,"text":"8"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":697}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":698},"contentChanges":[{"range":{"start":{"line":300,"character":5},"end":{"line":300,"character":5}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":698}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":699},"contentChanges":[{"range":{"start":{"line":300,"character":6},"end":{"line":300,"character":6}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":699}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":700},"contentChanges":[{"range":{"start":{"line":300,"character":7},"end":{"line":300,"character":7}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":700}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":8},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":339,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":339,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":8}},"id":340,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":340,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":303},"start":{"character":4,"line":303}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":6}},"id":341,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":341,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":342,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":342,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":300},"start":{"character":4,"line":300}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":307,"character":9}},"id":343,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":343,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":9,"line":307},"start":{"character":4,"line":307}}}}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":701},"contentChanges":[{"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"rangeLength":4,"text":"1"}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":702},"contentChanges":[{"range":{"start":{"line":300,"character":5},"end":{"line":300,"character":5}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":701}}Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":702}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":6},"end":{"line":300,"character":6}},"context":{"diagnostics":[]}},"id":344,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":344,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":703},"contentChanges":[{"range":{"start":{"line":300,"character":6},"end":{"line":300,"character":6}},"text":"1"}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":704},"contentChanges":[{"range":{"start":{"line":300,"character":7},"end":{"line":300,"character":7}},"text":"6"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":703}}Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":704}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":8},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":345,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":345,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":299,"character":2}},"id":346,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":346,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":276,"character":36}},"id":347,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":347,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":50}},"id":348,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":348,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":289,"character":10}},"id":349,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":349,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":1,"range":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":1,"range":{"end":{"character":15,"line":289},"start":{"character":2,"line":289}}}]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":289,"character":10},"end":{"line":289,"character":10}},"context":{"diagnostics":[]}},"id":350,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":350,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":16}},"id":351,"jsonrpc":"2.0"}
<<<
Content-Length: 128

{"id":351,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":18,"line":274},"start":{"character":11,"line":274}}}]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":16},"end":{"line":274,"character":16}},"context":{"diagnostics":[]}},"id":352,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":352,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":15}},"id":353,"jsonrpc":"2.0"}
<<<
Content-Length: 341

{"id":353,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\n→ `size_t`  \nParameters:  \n- `unsigned int`\n- `int = 10`\n\n---\n```cpp\n// In Print\npublic: size_t println(unsigned int, int = 10)\n```"},"range":{"end":{"character":18,"line":274},"start":{"character":11,"line":274}}}}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":16}},"id":354,"jsonrpc":"2.0"}
<<<
Content-Length: 215

{"id":354,"jsonrpc":"2.0","result":[{"range":{"end":{"character":21,"line":220},"start":{"character":14,"line":220}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":705},"contentChanges":[{"range":{"start":{"line":274,"character":4},"end":{"line":274,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":705}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":19}},"id":355,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":355,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":706},"contentChanges":[{"range":{"start":{"line":273,"character":4},"end":{"line":273,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":706}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":22},"end":{"line":273,"character":22}},"context":{"diagnostics":[]}},"id":356,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":356,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":13}},"id":357,"jsonrpc":"2.0"}
<<<
Content-Length: 247

{"id":357,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `checkAlarms`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid checkAlarms()\n```"},"range":{"end":{"character":15,"line":271},"start":{"character":4,"line":271}}}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":279,"character":16},"end":{"line":279,"character":16}},"context":{"diagnostics":[]}},"id":358,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":358,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":301,"character":4}},"id":359,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":359,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":301},"start":{"character":4,"line":301}}}}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":313},"jsonrpc":"2.0"}Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":5}},"id":360,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":360,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":6},"end":{"line":300,"character":6}},"context":{"diagnostics":[]}},"id":361,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":361,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":311,"character":5}},"id":362,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":362,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":6,"line":311},"start":{"character":5,"line":311}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":299,"character":4}},"id":363,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":363,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":8},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":364,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":364,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":299,"character":5}},"id":365,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":365,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":366,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":366,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":300},"start":{"character":4,"line":300}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":707},"contentChanges":[{"range":{"start":{"line":300,"character":4},"end":{"line":300,"character":8}},"rangeLength":4,"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":707}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":708},"contentChanges":[{"range":{"start":{"line":300,"character":5},"end":{"line":300,"character":5}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":708}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":709},"contentChanges":[{"range":{"start":{"line":300,"character":6},"end":{"line":300,"character":6}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":709}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":7},"end":{"line":300,"character":7}},"context":{"diagnostics":[]}},"id":367,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":367,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":710},"contentChanges":[{"range":{"start":{"line":300,"character":7},"end":{"line":300,"character":7}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":710}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":300,"character":8},"end":{"line":300,"character":8}},"context":{"diagnostics":[]}},"id":368,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":368,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":300,"character":1}},"id":369,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":369,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":99,"character":39},"end":{"line":99,"character":39}},"context":{"diagnostics":[]}},"id":370,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":370,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":251,"character":5},"end":{"line":251,"character":10}},"context":{"diagnostics":[]}},"id":371,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":371,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":256,"character":21},"end":{"line":256,"character":21}},"context":{"diagnostics":[]}},"id":372,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":372,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":252,"character":13},"end":{"line":252,"character":13}},"context":{"diagnostics":[]}},"id":373,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":373,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":257,"character":10}},"id":374,"jsonrpc":"2.0"}
<<<
Content-Length: 253

{"id":374,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `doCalculations`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid doCalculations()\n```"},"range":{"end":{"character":18,"line":257},"start":{"character":4,"line":257}}}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":27},"end":{"line":253,"character":27}},"context":{"diagnostics":[]}},"id":375,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":375,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":252,"character":13},"end":{"line":252,"character":13}},"context":{"diagnostics":[]}},"id":376,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":376,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":711},"contentChanges":[{"range":{"start":{"line":252,"character":2},"end":{"line":252,"character":5}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2038

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":30,"line":279},"start":{"character":29,"line":279}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":13,"line":286},"start":{"character":12,"line":286}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":12,"line":318},"start":{"character":11,"line":318}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:252:30: note: to match this '{'","range":{"end":{"character":0,"line":322},"start":{"character":0,"line":322}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:323:1: error: expected '}'","range":{"end":{"character":30,"line":251},"start":{"character":29,"line":251}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":711}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":252,"character":10},"end":{"line":252,"character":10}},"context":{"diagnostics":[]}},"id":377,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":377,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":252,"character":10},"end":{"line":252,"character":10}},"context":{"diagnostics":[]}},"id":378,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":378,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":17}},"id":379,"jsonrpc":"2.0"}
<<<
Content-Length: 248

{"id":379,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `checkAlarms`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid checkAlarms()\n```"},"range":{"end":{"character":18,"line":271},"start":{"character":17,"line":271}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":37}},"id":380,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":380,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":39},"end":{"line":272,"character":39}},"context":{"diagnostics":[]}},"id":381,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":381,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 289

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":712},"contentChanges":[{"range":{"start":{"line":272,"character":39},"end":{"line":272,"character":39}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2038

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":30,"line":280},"start":{"character":29,"line":280}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":13,"line":287},"start":{"character":12,"line":287}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":12,"line":319},"start":{"character":11,"line":319}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:252:30: note: to match this '{'","range":{"end":{"character":0,"line":323},"start":{"character":0,"line":323}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:324:1: error: expected '}'","range":{"end":{"character":30,"line":251},"start":{"character":29,"line":251}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":712}}
>>>
Content-Length: 303

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":713},"contentChanges":[{"range":{"start":{"line":273,"character":0},"end":{"line":273,"character":4}},"rangeLength":4,"text":"      "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2038

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":30,"line":280},"start":{"character":29,"line":280}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":13,"line":287},"start":{"character":12,"line":287}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":12,"line":319},"start":{"character":11,"line":319}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:252:30: note: to match this '{'","range":{"end":{"character":0,"line":323},"start":{"character":0,"line":323}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:324:1: error: expected '}'","range":{"end":{"character":30,"line":251},"start":{"character":29,"line":251}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":713}}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":714},"contentChanges":[{"range":{"start":{"line":273,"character":4},"end":{"line":273,"character":6}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2038

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":30,"line":280},"start":{"character":29,"line":280}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":13,"line":287},"start":{"character":12,"line":287}},"severity":1,"source":"clang"},{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":12,"line":319},"start":{"character":11,"line":319}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:252:30: note: to match this '{'","range":{"end":{"character":0,"line":323},"start":{"character":0,"line":323}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:324:1: error: expected '}'","range":{"end":{"character":30,"line":251},"start":{"character":29,"line":251}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":714}}
>>>
Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":715},"contentChanges":[{"range":{"start":{"line":273,"character":0},"end":{"line":273,"character":4}},"rangeLength":4,"text":"  }"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":715}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":3},"end":{"line":273,"character":3}},"context":{"diagnostics":[]}},"id":382,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":382,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":37}},"id":383,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":383,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":38}},"id":384,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":384,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":38},"end":{"line":275,"character":38}},"context":{"diagnostics":[]}},"id":385,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":385,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":38}},"id":386,"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"id":386,"jsonrpc":"2.0","result":[{"range":{"end":{"character":39,"line":1346},"start":{"character":12,"line":1346}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}]}
>>>
Content-Length: 98727

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h","languageId":"cpp","version":1,"text":"/*\n    FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.\n    All rights reserved\n\n    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.\n\n    This file is part of the FreeRTOS distribution.\n\n    FreeRTOS is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License (version 2) as published by the\n    Free Software Foundation \u003e\u003e!AND MODIFIED BY!\u003c\u003c the FreeRTOS exception.\n\n\t***************************************************************************\n    \u003e\u003e!   NOTE: The modification to the GPL is included to allow you to     !\u003c\u003c\n    \u003e\u003e!   distribute a combined work that includes FreeRTOS without being   !\u003c\u003c\n    \u003e\u003e!   obliged to provide the source code for proprietary components     !\u003c\u003c\n    \u003e\u003e!   outside of the FreeRTOS kernel.                                   !\u003c\u003c\n\t***************************************************************************\n\n    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY\n    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n    FOR A PARTICULAR PURPOSE.  Full license text is available on the following\n    link: http://www.freertos.org/a00114.html\n\n    ***************************************************************************\n     *                                                                       *\n     *    FreeRTOS provides completely free yet professionally developed,    *\n     *    robust, strictly quality controlled, supported, and cross          *\n     *    platform software that is more than just the market leader, it     *\n     *    is the industry's de facto standard.                               *\n     *                                                                       *\n     *    Help yourself get started quickly while simultaneously helping     *\n     *    to support the FreeRTOS project by purchasing a FreeRTOS           *\n     *    tutorial book, reference manual, or both:                          *\n     *    http://www.FreeRTOS.org/Documentation                              *\n     *                                                                       *\n    ***************************************************************************\n\n    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading\n\tthe FAQ page \"My application does not run, what could be wrong?\".  Have you\n\tdefined configASSERT()?\n\n\thttp://www.FreeRTOS.org/support - In return for receiving this top quality\n\tembedded software for free we request you assist our global community by\n\tparticipating in the support forum.\n\n\thttp://www.FreeRTOS.org/training - Investing in training allows your team to\n\tbe as productive as possible as early as possible.  Now you can receive\n\tFreeRTOS training directly from Richard Barry, CEO of Real Time Engineers\n\tLtd, and the world's leading authority on the world's leading RTOS.\n\n    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,\n    including FreeRTOS+Trace - an indispensable productivity tool, a DOS\n    compatible FAT file system, and our tiny thread aware UDP/IP stack.\n\n    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.\n    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.\n\n    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High\n    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS\n    licenses offer ticketed support, indemnification and commercial middleware.\n\n    http://www.SafeRTOS.com - High Integrity Systems also provide a safety\n    engineered and independently SIL3 certified version for use in safety and\n    mission critical applications that require provable dependability.\n\n    1 tab == 4 spaces!\n*/\n\n\n#ifndef INC_TASK_H\n#define INC_TASK_H\n\n#ifndef INC_FREERTOS_H\n\t#error \"include FreeRTOS.h must appear in source files before include task.h\"\n#endif\n\n#include \u003climits.h\u003e\n\n#include \"list.h\"\n#include \"portmacro.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*-----------------------------------------------------------\n * MACROS AND DEFINITIONS\n *----------------------------------------------------------*/\n\n#define tskKERNEL_VERSION_NUMBER \"V8.2.0\"\n#define tskKERNEL_VERSION_MAJOR 8\n#define tskKERNEL_VERSION_MINOR 2\n#define tskKERNEL_VERSION_BUILD 0\n\n/**\n * @brief Argument of xTaskCreatePinnedToCore indicating that task has no affinity\n */\n#define tskNO_AFFINITY INT_MAX\n\n/**\n * task. h\n *\n * Type by which tasks are referenced.  For example, a call to xTaskCreate\n * returns (via a pointer parameter) an TaskHandle_t variable that can then\n * be used as a parameter to vTaskDelete to delete the task.\n *\n * \\ingroup Tasks\n */\ntypedef void * TaskHandle_t;\n\n/**\n * Defines the prototype to which the application task hook function must\n * conform.\n */\ntypedef BaseType_t (*TaskHookFunction_t)( void * );\n\n/** Task states returned by eTaskGetState. */\ntypedef enum\n{\n\teRunning = 0,\t/*!\u003c A task is querying the state of itself, so must be running. */\n\teReady,\t\t\t/*!\u003c The task being queried is in a read or pending ready list. */\n\teBlocked,\t\t/*!\u003c The task being queried is in the Blocked state. */\n\teSuspended,\t\t/*!\u003c The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */\n\teDeleted\t\t/*!\u003c The task being queried has been deleted, but its TCB has not yet been freed. */\n} eTaskState;\n\n/** Actions that can be performed when vTaskNotify() is called. */\ntypedef enum\n{\n\teNoAction = 0,\t\t\t\t/*!\u003c Notify the task without updating its notify value. */\n\teSetBits,\t\t\t\t\t/*!\u003c Set bits in the task's notification value. */\n\teIncrement,\t\t\t\t\t/*!\u003c Increment the task's notification value. */\n\teSetValueWithOverwrite,\t\t/*!\u003c Set the task's notification value to a specific value even if the previous value has not yet been read by the task. */\n\teSetValueWithoutOverwrite\t/*!\u003c Set the task's notification value if the previous value has been read by the task. */\n} eNotifyAction;\n\n/** @cond */\n/**\n * Used internally only.\n */\ntypedef struct xTIME_OUT\n{\n\tBaseType_t xOverflowCount;\n\tTickType_t xTimeOnEntering;\n} TimeOut_t;\n\n/**\n * Defines the memory ranges allocated to the task when an MPU is used.\n */\ntypedef struct xMEMORY_REGION\n{\n\tvoid *pvBaseAddress;\n\tuint32_t ulLengthInBytes;\n\tuint32_t ulParameters;\n} MemoryRegion_t;\n\n/**\n * Parameters required to create an MPU protected task.\n */\ntypedef struct xTASK_PARAMETERS\n{\n\tTaskFunction_t pvTaskCode;\n\tconst char * const pcName;\t/*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tuint32_t usStackDepth;\n\tvoid *pvParameters;\n\tUBaseType_t uxPriority;\n\tStackType_t *puxStackBuffer;\n\tMemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];\n} TaskParameters_t;\n/** @endcond */\n\n/**\n *  Used with the uxTaskGetSystemState() function to return the state of each task in the system.\n*/\ntypedef struct xTASK_STATUS\n{\n\tTaskHandle_t xHandle;\t\t\t/*!\u003c The handle of the task to which the rest of the information in the structure relates. */\n\tconst char *pcTaskName;\t\t\t/*!\u003c A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tUBaseType_t xTaskNumber;\t\t/*!\u003c A number unique to the task. */\n\teTaskState eCurrentState;\t\t/*!\u003c The state in which the task existed when the structure was populated. */\n\tUBaseType_t uxCurrentPriority;\t/*!\u003c The priority at which the task was running (may be inherited) when the structure was populated. */\n\tUBaseType_t uxBasePriority;\t\t/*!\u003c The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. */\n\tuint32_t ulRunTimeCounter;\t\t/*!\u003c The total run time allocated to the task so far, as defined by the run time stats clock.  See http://www.freertos.org/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. */\n\tStackType_t *pxStackBase;\t\t/*!\u003c Points to the lowest address of the task's stack area. */\n\tuint32_t usStackHighWaterMark;\t/*!\u003c The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. */\n#if configTASKLIST_INCLUDE_COREID\n\tBaseType_t xCoreID;\t\t\t\t/*!\u003c Core this task is pinned to. This field is present if CONFIG_FREERTOS_VTASKLIST_INCLUDE_COREID is set. */\n#endif\n} TaskStatus_t;\n\n/**\n * Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.\n * We need this struct because TCB_t is defined (hidden) in tasks.c.\n */\ntypedef struct xTASK_SNAPSHOT\n{\n\tvoid        *pxTCB;         /*!\u003c Address of task control block. */\n\tStackType_t *pxTopOfStack;  /*!\u003c Points to the location of the last item placed on the tasks stack. */\n\tStackType_t *pxEndOfStack;  /*!\u003c Points to the end of the stack. pxTopOfStack \u003c pxEndOfStack, stack grows hi2lo\n\t\t\t\t\t\t\t\t\tpxTopOfStack \u003e pxEndOfStack, stack grows lo2hi*/\n} TaskSnapshot_t;\n\n/**\n * Possible return values for eTaskConfirmSleepModeStatus().\n */\ntypedef enum\n{\n\teAbortSleep = 0,\t\t/*!\u003c A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */\n\teStandardSleep,\t\t\t/*!\u003c Enter a sleep mode that will not last any longer than the expected idle time. */\n\teNoTasksWaitingTimeout\t/*!\u003c No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */\n} eSleepModeStatus;\n\n\n/**\n * Defines the priority used by the idle task.  This must not be modified.\n *\n * \\ingroup TaskUtils\n */\n#define tskIDLE_PRIORITY\t\t\t( ( UBaseType_t ) 0U )\n\n/**\n * task. h\n *\n * Macro for forcing a context switch.\n *\n * \\ingroup SchedulerControl\n */\n#define taskYIELD()\t\t\t\t\tportYIELD()\n\n/**\n * task. h\n *\n * Macro to mark the start of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskENTER_CRITICAL(mux)\t\tportENTER_CRITICAL(mux)\n#else\n#define taskENTER_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskENTER_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portENTER_CRITICAL(mux)'\\\"\") portENTER_CRITICAL(mux)\n#endif\n#define taskENTER_CRITICAL_ISR(mux)\t\tportENTER_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to mark the end of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskEXIT_CRITICAL(mux)\t\t\tportEXIT_CRITICAL(mux)\n#else\n#define taskEXIT_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskEXIT_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portEXIT_CRITICAL(mux)'\\\"\") portEXIT_CRITICAL(mux)\n#endif\n#define taskEXIT_CRITICAL_ISR(mux)\t\tportEXIT_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to disable all maskable interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskDISABLE_INTERRUPTS()\tportDISABLE_INTERRUPTS()\n\n/**\n * task. h\n *\n * Macro to enable microcontroller interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskENABLE_INTERRUPTS()\t\tportENABLE_INTERRUPTS()\n\n/* Definitions returned by xTaskGetSchedulerState().  taskSCHEDULER_SUSPENDED is\n0 to generate more optimal code when configASSERT() is defined as the constant\nis used in assert() statements. */\n#define taskSCHEDULER_SUSPENDED\t\t( ( BaseType_t ) 0 )\n#define taskSCHEDULER_NOT_STARTED\t( ( BaseType_t ) 1 )\n#define taskSCHEDULER_RUNNING\t\t( ( BaseType_t ) 2 )\n\n\n/*-----------------------------------------------------------\n * TASK CREATION API\n *----------------------------------------------------------*/\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreate, but allows setting task affinity\n * in SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\tBaseType_t xTaskCreatePinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\tconst uint32_t usStackDepth,\n\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\tTaskHandle_t * const pvCreatedTask,\n\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID);\n\n#endif\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * See xTaskCreateStatic() for a version that does not use any dynamic memory\n * allocation.\n *\n * xTaskCreate() can only be used to create a task that has unrestricted\n * access to the entire microcontroller memory map.  Systems that include MPU\n * support can alternatively create an MPU constrained task using\n * xTaskCreateRestricted().\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *  // Task to be created.\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *   }\n *  }\n *\n *  // Function that creates a task.\n *  void vOtherFunction( void )\n *  {\n *  static uint8_t ucParameterToPass;\n *  TaskHandle_t xHandle = NULL;\n *\n *   // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass\n *   // must exist for the lifetime of the task, so in this case is declared static.  If it was just an\n *   // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time\n *   // the new task attempts to access it.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, \u0026ucParameterToPass, tskIDLE_PRIORITY, \u0026xHandle );\n *      configASSERT( xHandle );\n *\n *   // Use the handle to delete the task.\n *      if( xHandle != NULL )\n *      {\n *       vTaskDelete( xHandle );\n *      }\n *  }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\n\tstatic inline IRAM_ATTR BaseType_t xTaskCreate(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t usStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tTaskHandle_t * const pvCreatedTask)\n\t{\n\t\treturn xTaskCreatePinnedToCore( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pvCreatedTask, tskNO_AFFINITY );\n\t}\n\n#endif\n\n\n\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreateStatic, but allows specifying\n * task affinity in an SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tTaskHandle_t xTaskCreateStaticPinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\t\t\tconst uint32_t ulStackDepth,\n\t\t\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\t\t\tStackType_t * const pxStackBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tStaticTask_t * const pxTaskBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID );\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *\n *     // Dimensions the buffer that the task being created will use as its stack.\n *     // NOTE:  This is the number of bytes the stack will hold, not the number of\n *     // words as found in vanilla FreeRTOS.\n *     #define STACK_SIZE 200\n *\n *     // Structure that will hold the TCB of the task being created.\n *     StaticTask_t xTaskBuffer;\n *\n *     // Buffer that the task being created will use as its stack.  Note this is\n *     // an array of StackType_t variables.  The size of StackType_t is dependent on\n *     // the RTOS port.\n *     StackType_t xStack[ STACK_SIZE ];\n *\n *     // Function that implements the task being created.\n *     void vTaskCode( void * pvParameters )\n *     {\n *         // The parameter value is expected to be 1 as 1 is passed in the\n *         // pvParameters value in the call to xTaskCreateStatic().\n *         configASSERT( ( uint32_t ) pvParameters == 1UL );\n *\n *         for( ;; )\n *         {\n *             // Task code goes here.\n *         }\n *     }\n *\n *     // Function that creates a task.\n *     void vOtherFunction( void )\n *     {\n *         TaskHandle_t xHandle = NULL;\n *\n *         // Create the task without using any dynamic memory allocation.\n *         xHandle = xTaskCreateStatic(\n *                       vTaskCode,       // Function that implements the task.\n *                       \"NAME\",          // Text name for the task.\n *                       STACK_SIZE,      // Stack size in bytes, not words.\n *                       ( void * ) 1,    // Parameter passed into the task.\n *                       tskIDLE_PRIORITY,// Priority at which the task is created.\n *                       xStack,          // Array to use as the task's stack.\n *                       \u0026xTaskBuffer );  // Variable to hold the task's data structure.\n *\n *         // puxStackBuffer and pxTaskBuffer were not NULL, so the task will have\n *         // been created, and xHandle will be the task's handle.  Use the handle\n *         // to suspend the task.\n *         vTaskSuspend( xHandle );\n *     }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tstatic inline IRAM_ATTR TaskHandle_t xTaskCreateStatic(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t ulStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tStackType_t * const pxStackBuffer,\n\t\t\tStaticTask_t * const pxTaskBuffer)\n\t{\n\t\treturn xTaskCreateStaticPinnedToCore( pvTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, pxStackBuffer, pxTaskBuffer, tskNO_AFFINITY );\n\t}\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/** @cond */\n/**\n * xTaskCreateRestricted() should only be used in systems that include an MPU\n * implementation.\n *\n * Create a new task and add it to the list of tasks that are ready to run.\n * The function parameters define the memory regions and associated access\n * permissions allocated to the task.\n *\n * @param pxTaskDefinition Pointer to a structure that contains a member\n * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API\n * documentation) plus an optional stack buffer and the memory region\n * definitions.\n *\n * @param pxCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * Example usage:\n * @code{c}\n * // Create an TaskParameters_t structure that defines the task to be created.\n * static const TaskParameters_t xCheckTaskParameters =\n * {\n * \tvATask,\t\t// pvTaskCode - the function that implements the task.\n * \t\"ATask\",\t// pcName - just a text name for the task to assist debugging.\n * \t100,\t\t// usStackDepth\t- the stack size DEFINED IN BYTES.\n * \tNULL,\t\t// pvParameters - passed into the task function as the function parameters.\n * \t( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.\n * \tcStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.\n *\n * \t// xRegions - Allocate up to three separate memory regions for access by\n * \t// the task, with appropriate access permissions.  Different processors have\n * \t// different memory alignment requirements - refer to the FreeRTOS documentation\n * \t// for full information.\n * \t{\n * \t\t// Base address\t\t\t\t\tLength\tParameters\n *         { cReadWriteArray,\t\t\t\t32,\t\tportMPU_REGION_READ_WRITE },\n *         { cReadOnlyArray,\t\t\t\t32,\t\tportMPU_REGION_READ_ONLY },\n *         { cPrivilegedOnlyAccessArray,\t128,\tportMPU_REGION_PRIVILEGED_READ_WRITE }\n * \t}\n * };\n *\n * int main( void )\n * {\n * TaskHandle_t xHandle;\n *\n * \t// Create a task from the const structure defined above.  The task handle\n * \t// is requested (the second parameter is not NULL) but in this case just for\n * \t// demonstration purposes as its not actually used.\n * \txTaskCreateRestricted( \u0026xRegTest1Parameters, \u0026xHandle );\n *\n * \t// Start the scheduler.\n * \tvTaskStartScheduler();\n *\n * \t// Will only get here if there was insufficient memory to create the idle\n * \t// and/or timer task.\n * \tfor( ;; );\n * }\n * @endcode\n * \\ingroup Tasks\n */\n#if( portUSING_MPU_WRAPPERS == 1 )\n\tBaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask ) PRIVILEGED_FUNCTION;\n#endif\n\n\n/**\n * Memory regions are assigned to a restricted task when the task is created by\n * a call to xTaskCreateRestricted().  These regions can be redefined using\n * vTaskAllocateMPURegions().\n *\n * @param xTask The handle of the task being updated.\n *\n * @param xRegions A pointer to an MemoryRegion_t structure that contains the\n * new memory region definitions.\n *\n * Example usage:\n *\n * @code{c}\n * // Define an array of MemoryRegion_t structures that configures an MPU region\n * // allowing read/write access for 1024 bytes starting at the beginning of the\n * // ucOneKByte array.  The other two of the maximum 3 definable regions are\n * // unused so set to zero.\n * static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =\n * {\n * \t// Base address\t\tLength\t\tParameters\n * \t{ ucOneKByte,\t\t1024,\t\tportMPU_REGION_READ_WRITE },\n * \t{ 0,\t\t\t\t0,\t\t\t0 },\n * \t{ 0,\t\t\t\t0,\t\t\t0 }\n * };\n *\n * void vATask( void *pvParameters )\n * {\n * \t// This task was created such that it has access to certain regions of\n * \t// memory as defined by the MPU configuration.  At some point it is\n * \t// desired that these MPU regions are replaced with that defined in the\n * \t// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()\n * \t// for this purpose.  NULL is used as the task handle to indicate that this\n * \t// function should modify the MPU regions of the calling task.\n * \tvTaskAllocateMPURegions( NULL, xAltRegions );\n *\n * \t// Now the task can continue its function, but from this point on can only\n * \t// access its stack and the ucOneKByte array (unless any other statically\n * \t// defined or shared regions have been declared elsewhere).\n * }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Remove a task from the RTOS real time kernel's management.\n *\n * The task being deleted will be removed from all ready, blocked, suspended\n * and event lists.\n *\n * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @note The idle task is responsible for freeing the kernel allocated\n * memory from tasks that have been deleted.  It is therefore important that\n * the idle task is not starved of microcontroller processing time if your\n * application makes any calls to vTaskDelete ().  Memory allocated by the\n * task code is not automatically freed, and should be freed before the task\n * is deleted.\n *\n * See the demo application file death.c for sample code that utilises\n * vTaskDelete ().\n *\n * @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will\n * cause the calling task to be deleted.\n *\n * Example usage:\n * @code{c}\n *  void vOtherFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n * \t // Create the task, storing the handle.\n * \t xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n * \t // Use the handle to delete the task.\n * \t vTaskDelete( xHandle );\n *  }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskDelete( TaskHandle_t xTaskToDelete ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK CONTROL API\n *----------------------------------------------------------*/\n\n/**\n * Delay a task for a given number of ticks.\n *\n * The actual time that the task remains blocked depends on the tick rate.\n * The constant portTICK_PERIOD_MS can be used to calculate real time from\n * the tick rate - with the resolution of one tick period.\n *\n * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * vTaskDelay() specifies a time at which the task wishes to unblock relative to\n * the time at which vTaskDelay() is called.  For example, specifying a block\n * period of 100 ticks will cause the task to unblock 100 ticks after\n * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method\n * of controlling the frequency of a periodic task as the path taken through the\n * code, as well as other task and interrupt activity, will effect the frequency\n * at which vTaskDelay() gets called and therefore the time at which the task\n * next executes.  See vTaskDelayUntil() for an alternative API function designed\n * to facilitate fixed frequency execution.  It does this by specifying an\n * absolute time (rather than a relative time) at which the calling task should\n * unblock.\n *\n * @param xTicksToDelay The amount of time, in tick periods, that\n * the calling task should block.\n *\n * Example usage:\n * @code{c}\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  // Block for 500ms.\n *  const TickType_t xDelay = 500 / portTICK_PERIOD_MS;\n *\n * \t for( ;; )\n * \t {\n * \t\t // Simply toggle the LED every 500ms, blocking between each toggle.\n * \t\t vToggleLED();\n * \t\t vTaskDelay( xDelay );\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelay( const TickType_t xTicksToDelay ) PRIVILEGED_FUNCTION;\n\n/**\n * Delay a task until a specified time.\n *\n * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * This function can be used by periodic tasks to ensure a constant execution frequency.\n *\n * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will\n * cause a task to block for the specified number of ticks from the time vTaskDelay () is\n * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed\n * execution frequency as the time between a task starting to execute and that task\n * calling vTaskDelay () may not be fixed [the task may take a different path though the\n * code between calls, or may get interrupted or preempted a different number of times\n * each time it executes].\n *\n * Whereas vTaskDelay () specifies a wake time relative to the time at which the function\n * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to\n * unblock.\n *\n * The constant portTICK_PERIOD_MS can be used to calculate real time from the tick\n * rate - with the resolution of one tick period.\n *\n * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the\n * task was last unblocked.  The variable must be initialised with the current time\n * prior to its first use (see the example below).  Following this the variable is\n * automatically updated within vTaskDelayUntil ().\n *\n * @param xTimeIncrement The cycle time period.  The task will be unblocked at\n * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the\n * same xTimeIncrement parameter value will cause the task to execute with\n * a fixed interface period.\n *\n * Example usage:\n * @code{c}\n *  // Perform an action every 10 ticks.\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  TickType_t xLastWakeTime;\n *  const TickType_t xFrequency = 10;\n *\n * \t // Initialise the xLastWakeTime variable with the current time.\n * \t xLastWakeTime = xTaskGetTickCount ();\n * \t for( ;; )\n * \t {\n * \t\t // Wait for the next cycle.\n * \t\t vTaskDelayUntil( \u0026xLastWakeTime, xFrequency );\n *\n * \t\t // Perform action here.\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the priority of any task.\n *\n * INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to obtain the priority of the created task.\n *   // It was created with tskIDLE_PRIORITY, but may have changed\n *   // it itself.\n *   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )\n *   {\n *       // The task has changed it's priority.\n *   }\n *\n *   // ...\n *\n *   // Is our priority higher than the created task?\n *   if( uxTaskPriorityGet( xHandle ) \u003c uxTaskPriorityGet( NULL ) )\n *   {\n *       // Our priority (obtained using NULL handle) is higher.\n *   }\n * }\n * @endcode\n * \\ingroup TaskCtrl\n */\nUBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * A version of uxTaskPriorityGet() that can be used from an ISR.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n */\nUBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the state of any task.\n *\n * States are encoded by the eTaskState enumerated type.\n *\n * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.\n *\n * @return The state of xTask at the time the function was called.  Note the\n * state of the task might change between the function being called, and the\n * functions return value being tested by the calling task.\n */\neTaskState eTaskGetState( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Set the priority of any task.\n *\n * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A context switch will occur before the function returns if the priority\n * being set is higher than the currently executing task.\n *\n * @param xTask Handle to the task for which the priority is being set.\n * Passing a NULL handle results in the priority of the calling task being set.\n *\n * @param uxNewPriority The priority to which the task will be set.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to raise the priority of the created task.\n *   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );\n *\n *   // ...\n *\n *   // Use a NULL handle to raise our priority to the same value.\n *   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) PRIVILEGED_FUNCTION;\n\n/**\n * Suspend a task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * When suspended, a task will never get any microcontroller processing time,\n * no matter what its priority.\n *\n * Calls to vTaskSuspend are not accumulative -\n * i.e. calling vTaskSuspend () twice on the same task still only requires one\n * call to vTaskResume () to ready the suspended task.\n *\n * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL\n * handle will cause the calling task to be suspended.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Suspend ourselves.\n *   vTaskSuspend( NULL );\n *\n *   // We cannot get here unless another task calls vTaskResume\n *   // with our handle as the parameter.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskSuspend( TaskHandle_t xTaskToSuspend ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes a suspended task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * vTaskResume ().\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Resume the suspended task ourselves.\n *   vTaskResume( xHandle );\n *\n *   // The created task will once again get microcontroller processing\n *   // time in accordance with its priority within the system.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskResume( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/**\n * An implementation of vTaskResume() that can be called from within an ISR.\n *\n * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be\n * available.  See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * xTaskResumeFromISR ().\n *\n * xTaskResumeFromISR() should not be used to synchronise a task with an\n * interrupt if there is a chance that the interrupt could arrive prior to the\n * task being suspended - as this can lead to interrupts being missed. Use of a\n * semaphore as a synchronisation mechanism would avoid this eventuality.\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * @return pdTRUE if resuming the task should result in a context switch,\n * otherwise pdFALSE. This is used by the ISR to determine if a context switch\n * may be required following the ISR.\n *\n * \\ingroup TaskCtrl\n */\nBaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * SCHEDULER CONTROL\n *----------------------------------------------------------*/\n/** @cond */\n/**\n * Starts the real time kernel tick processing.\n *\n * After calling the kernel has control over which tasks are executed and when.\n *\n * See the demo application file main.c for an example of creating\n * tasks and starting the kernel.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will not get here unless a task calls vTaskEndScheduler ()\n *  }\n * @endcode\n *\n * \\ingroup SchedulerControl\n */\nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Stops the real time kernel tick.\n *\n * @note At the time of writing only the x86 real mode port, which runs on a PC\n * in place of DOS, implements this function.\n *\n * All created tasks will be automatically deleted and multitasking\n * (either preemptive or cooperative) will stop.\n * Execution then resumes from the point where vTaskStartScheduler ()\n * was called, as if vTaskStartScheduler () had just returned.\n *\n * See the demo application file main. c in the demo/PC directory for an\n * example that uses vTaskEndScheduler ().\n *\n * vTaskEndScheduler () requires an exit function to be defined within the\n * portable layer (see vPortEndScheduler () in port. c for the PC port).  This\n * performs hardware specific operations such as stopping the kernel tick.\n *\n * vTaskEndScheduler () will cause all of the resources allocated by the\n * kernel to be freed - but will not free resources allocated by application\n * tasks.\n *\n * Example usage:\n * @code{c}\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // At some point we want to end the real time kernel processing\n *       // so call ...\n *       vTaskEndScheduler ();\n *   }\n *  }\n *\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will only get here when the vTaskCode () task has called\n *   // vTaskEndScheduler ().  When we get here we are back to single task\n *   // execution.\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Suspends the scheduler without disabling interrupts.\n *\n * Context switches will not occur while the scheduler is suspended.\n *\n * After calling vTaskSuspendAll () the calling task will continue to execute\n * without risk of being swapped out until a call to xTaskResumeAll () has been\n * made.\n *\n * API functions that have the potential to cause a context switch (for example,\n * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler\n * is suspended.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the kernel\n *       // tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.\n *       xTaskResumeAll ();\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes scheduler activity after it was suspended by a call to\n * vTaskSuspendAll().\n *\n * xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks\n * that were previously suspended by a call to vTaskSuspend().\n *\n * @return If resuming the scheduler caused a context switch then pdTRUE is\n *\t\t  returned, otherwise pdFALSE is returned.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the real\n *       // time kernel tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.  We want to force\n *       // a context switch - but there is no point if resuming the scheduler\n *       // caused a context switch already.\n *       if( !xTaskResumeAll () )\n *       {\n *            taskYIELD ();\n *       }\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nBaseType_t xTaskResumeAll( void ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK UTILITIES\n *----------------------------------------------------------*/\n\n/**\n * Get tick count\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get tick count from ISR\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * This is a version of xTaskGetTickCount() that is safe to be called from an\n * ISR - provided that TickType_t is the natural word size of the\n * microcontroller being used or interrupt nesting is either not supported or\n * not being used.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get current number of tasks\n *\n * @return The number of tasks that the real time kernel is currently managing.\n * This includes all ready, blocked and suspended tasks.  A task that\n * has been deleted but not yet freed by the idle task will also be\n * included in the count.\n *\n * \\ingroup TaskUtils\n */\nUBaseType_t uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get task name\n *\n * @return The text (human readable) name of the task referenced by the handle\n * xTaskToQuery.  A task can query its own name by either passing in its own\n * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be\n * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.\n *\n * \\ingroup TaskUtils\n */\nchar *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Returns the high water mark of the stack associated with xTask.\n *\n * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * High water mark is the minimum free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task started.\n * The smaller the returned number the closer the task has come to overflowing its stack.\n *\n * @param xTask Handle of the task associated with the stack to be checked.\n * Set xTask to NULL to check the stack of the calling task.\n *\n * @return The smallest amount of free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task referenced by\n * xTask was created.\n */\nUBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Returns the start of the stack associated with xTask.\n *\n * INCLUDE_pxTaskGetStackStart must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * Returns the highest stack memory address on architectures where the stack grows down\n * from high memory, and the lowest memory address on architectures where the\n * stack grows up from low memory.\n *\n * @param xTask Handle of the task associated with the stack returned.\n * Set xTask to NULL to return the stack of the calling task.\n *\n * @return A pointer to the start of the stack.\n */\nuint8_t* pxTaskGetStackStart( TaskHandle_t xTask) PRIVILEGED_FUNCTION;\n\n/* When using trace macros it is sometimes necessary to include task.h before\nFreeRTOS.h.  When this is done TaskHookFunction_t will not yet have been defined,\nso the following two prototypes will cause a compilation error.  This can be\nfixed by simply guarding against the inclusion of these two prototypes unless\nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration\nconstant. */\n#ifdef configUSE_APPLICATION_TASK_TAG\n\t#if configUSE_APPLICATION_TASK_TAG == 1\n\t\t/**\n\t\t * Sets pxHookFunction to be the task hook function used by the task xTask.\n\t\t * @param xTask Handle of the task to set the hook function for\n\t\t *              Passing xTask as NULL has the effect of setting the calling\n\t\t *              tasks hook function.\n\t\t * @param pxHookFunction  Pointer to the hook function.\n\t\t */\n\t\tvoid vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction ) PRIVILEGED_FUNCTION;\n\n\t\t/**\n\t\t * Get the hook function assigned to given task.\n\t\t * @param xTask Handle of the task to get the hook function for\n\t\t *              Passing xTask as NULL has the effect of getting the calling\n\t\t *              tasks hook function.\n\t\t * @return The pxHookFunction value assigned to the task xTask.\n\t\t */\n\t\tTaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\t#endif /* configUSE_APPLICATION_TASK_TAG ==1 */\n#endif /* ifdef configUSE_APPLICATION_TASK_TAG */\n#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS \u003e 0 )\n\n\t/**\n\t * Set local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t * @param xIndex The index of the pointer to set, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @param pvValue  Pointer value to set.\n\t */\n\tvoid vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue ) PRIVILEGED_FUNCTION;\n\n\n\t/**\n\t * Get local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToQuery  Task to get thread local storage pointer for\n\t * @param xIndex The index of the pointer to get, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @return  Pointer value\n\t */\n\tvoid *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) PRIVILEGED_FUNCTION;\n\n\t#if ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS )\n\n\t\t/**\n\t\t * Prototype of local storage pointer deletion callback.\n\t\t */\n\t\ttypedef void (*TlsDeleteCallbackFunction_t)( int, void * );\n\n\t\t/**\n\t\t * Set local storage pointer and deletion callback.\n\t\t *\n\t\t * Each task contains an array of pointers that is dimensioned by the\n\t\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t\t * The kernel does not use the pointers itself, so the application writer\n\t\t * can use the pointers for any purpose they wish.\n\t\t *\n\t\t * Local storage pointers set for a task can reference dynamically\n\t\t * allocated resources. This function is similar to\n\t\t * vTaskSetThreadLocalStoragePointer, but provides a way to release\n\t\t * these resources when the task gets deleted. For each pointer,\n\t\t * a callback function can be set. This function will be called\n\t\t * when task is deleted, with the local storage pointer index\n\t\t * and value as arguments.\n\t\t *\n\t\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t\t * @param xIndex The index of the pointer to set, from 0 to\n\t\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t\t * @param pvValue  Pointer value to set.\n\t\t * @param pvDelCallback  Function to call to dispose of the local\n\t\t *                       storage pointer when the task is deleted.\n\t\t */\n\t\tvoid vTaskSetThreadLocalStoragePointerAndDelCallback( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue, TlsDeleteCallbackFunction_t pvDelCallback);\n\t#endif\n\n#endif\n\n/**\n * Calls the hook function associated with xTask. Passing xTask as NULL has\n * the effect of calling the Running tasks (the calling task) hook function.\n *\n * @param xTask  Handle of the task to call the hook for.\n * @param pvParameter  Parameter passed to the hook function for the task to interpret as it\n * wants.  The return value is the value returned by the task hook function\n * registered by the user.\n */\nBaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) PRIVILEGED_FUNCTION;\n\n/**\n * Get the handle of idle task for the current CPU.\n *\n * xTaskGetIdleTaskHandle() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @return The handle of the idle task.  It is not valid to call\n * xTaskGetIdleTaskHandle() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandle( void );\n\n/**\n * Get the handle of idle task for the given CPU.\n *\n * xTaskGetIdleTaskHandleForCPU() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @param cpuid The CPU to get the handle for\n *\n * @return Idle task handle of a given cpu. It is not valid to call\n * xTaskGetIdleTaskHandleForCPU() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandleForCPU( UBaseType_t cpuid );\n\n/**\n * Get the state of tasks in the system.\n *\n * configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for\n * uxTaskGetSystemState() to be available.\n *\n * uxTaskGetSystemState() populates an TaskStatus_t structure for each task in\n * the system.  TaskStatus_t structures contain, among other things, members\n * for the task handle, task name, task priority, task state, and total amount\n * of run time consumed by the task.  See the TaskStatus_t structure\n * definition in this file for the full member list.\n *\n * @note  This function is intended for debugging use only as its use results in\n * the scheduler remaining suspended for an extended period.\n *\n * @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.\n * The array must contain at least one TaskStatus_t structure for each task\n * that is under the control of the RTOS.  The number of tasks under the control\n * of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.\n *\n * @param uxArraySize The size of the array pointed to by the pxTaskStatusArray\n * parameter.  The size is specified as the number of indexes in the array, or\n * the number of TaskStatus_t structures contained in the array, not by the\n * number of bytes in the array.\n *\n * @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in\n * FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the\n * total run time (as defined by the run time stats clock, see\n * http://www.freertos.org/rtos-run-time-stats.html) since the target booted.\n * pulTotalRunTime can be set to NULL to omit the total run time information.\n *\n * @return The number of TaskStatus_t structures that were populated by\n * uxTaskGetSystemState().  This should equal the number returned by the\n * uxTaskGetNumberOfTasks() API function, but will be zero if the value passed\n * in the uxArraySize parameter was too small.\n *\n * Example usage:\n * @code{c}\n * // This example demonstrates how a human readable table of run time stats\n * // information is generated from raw data provided by uxTaskGetSystemState().\n * // The human readable table is written to pcWriteBuffer\n * void vTaskGetRunTimeStats( char *pcWriteBuffer )\n * {\n * TaskStatus_t *pxTaskStatusArray;\n * volatile UBaseType_t uxArraySize, x;\n * uint32_t ulTotalRunTime, ulStatsAsPercentage;\n *\n *  // Make sure the write buffer does not contain a string.\n *  *pcWriteBuffer = 0x00;\n *\n *  // Take a snapshot of the number of tasks in case it changes while this\n *  // function is executing.\n *  uxArraySize = uxTaskGetNumberOfTasks();\n *\n *  // Allocate a TaskStatus_t structure for each task.  An array could be\n *  // allocated statically at compile time.\n *  pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );\n *\n *  if( pxTaskStatusArray != NULL )\n *  {\n *      // Generate raw status information about each task.\n *      uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, \u0026ulTotalRunTime );\n *\n *      // For percentage calculations.\n *      ulTotalRunTime /= 100UL;\n *\n *      // Avoid divide by zero errors.\n *      if( ulTotalRunTime \u003e 0 )\n *      {\n *          // For each populated position in the pxTaskStatusArray array,\n *          // format the raw data as human readable ASCII data\n *          for( x = 0; x \u003c uxArraySize; x++ )\n *          {\n *              // What percentage of the total run time has the task used?\n *              // This will always be rounded down to the nearest integer.\n *              // ulTotalRunTimeDiv100 has already been divided by 100.\n *              ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;\n *\n *              if( ulStatsAsPercentage \u003e 0UL )\n *              {\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );\n *              }\n *              else\n *              {\n *                  // If the percentage is zero here then the task has\n *                  // consumed less than 1% of the total run time.\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t\u003c1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );\n *              }\n *\n *              pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );\n *          }\n *      }\n *\n *      // The array is no longer needed, free the memory it consumes.\n *      vPortFree( pxTaskStatusArray );\n *  }\n * }\n * @endcode\n */\nUBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime );\n\n/**\n * List all the current tasks.\n *\n * configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must\n * both be defined as 1 for this function to be available.  See the\n * configuration section of the FreeRTOS.org website for more information.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Lists all the current tasks, along with their current state and stack\n * usage high water mark.\n *\n * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or\n * suspended ('S').\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskList() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays task\n * names, states and stack usage.\n *\n * vTaskList() has a dependency on the sprintf() C library function that might\n * bloat the code size, use a lot of stack, and provide different results on\n * different platforms.  An alternative, tiny, third party, and limited\n * functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState()\n * directly to get access to raw stats data, rather than indirectly through a\n * call to vTaskList().\n *\n * @param pcWriteBuffer A buffer into which the above mentioned details\n * will be written, in ASCII form.  This buffer is assumed to be large\n * enough to contain the generated report.  Approximately 40 bytes per\n * task should be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskList( char * pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Get the state of running tasks as a string\n *\n * configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS\n * must both be defined as 1 for this function to be available.  The application\n * must also then provide definitions for\n * portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()\n * to configure a peripheral timer/counter and return the timers current count\n * value respectively.  The counter should be at least 10 times the frequency of\n * the tick count.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total\n * accumulated execution time being stored for each task.  The resolution\n * of the accumulated time value depends on the frequency of the timer\n * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.\n * Calling vTaskGetRunTimeStats() writes the total execution time of each\n * task into a buffer, both as an absolute count value and as a percentage\n * of the total system execution time.\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays the\n * amount of time each task has spent in the Running state in both absolute and\n * percentage terms.\n *\n * vTaskGetRunTimeStats() has a dependency on the sprintf() C library function\n * that might bloat the code size, use a lot of stack, and provide different\n * results on different platforms.  An alternative, tiny, third party, and\n * limited functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState() directly\n * to get access to raw stats data, rather than indirectly through a call to\n * vTaskGetRunTimeStats().\n *\n * @param pcWriteBuffer A buffer into which the execution times will be\n * written, in ASCII form.  This buffer is assumed to be large enough to\n * contain the generated report.  Approximately 40 bytes per task should\n * be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskGetRunTimeStats( char *pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Send task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );\n\n/**\n * Send task notification from an ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotify() that can be used from an interrupt service routine\n * (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should\n * be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Wait for task notification\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value\n * will be cleared in the calling task's notification value before the task\n * checks to see if any notifications are pending, and optionally blocks if no\n * notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if\n * limits.h is included) or 0xffffffffUL (if limits.h is not included) will have\n * the effect of resetting the task's notification value to 0.  Setting\n * ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.\n *\n * @param ulBitsToClearOnExit If a notification is pending or received before\n * the calling task exits the xTaskNotifyWait() function then the task's\n * notification value (see the xTaskNotify() API function) is passed out using\n * the pulNotificationValue parameter.  Then any bits that are set in\n * ulBitsToClearOnExit will be cleared in the task's notification value (note\n * *pulNotificationValue is set before any bits are cleared).  Setting\n * ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL\n * (if limits.h is not included) will have the effect of resetting the task's\n * notification value to 0 before the function exits.  Setting\n * ulBitsToClearOnExit to 0 will leave the task's notification value unchanged\n * when the function exits (in which case the value passed out in\n * pulNotificationValue will match the task's notification value).\n *\n * @param pulNotificationValue Used to pass the task's notification value out\n * of the function.  Note the value passed out will not be effected by the\n * clearing of any bits caused by ulBitsToClearOnExit being non-zero.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for a notification to be received, should a notification\n * not already be pending when xTaskNotifyWait() was called.  The task\n * will not consume any processing time while it is in the Blocked state.  This\n * is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be\n * used to convert a time specified in milliseconds to a time specified in\n * ticks.\n *\n * @return If a notification was received (including notifications that were\n * already pending when xTaskNotifyWait was called) then pdPASS is\n * returned.  Otherwise pdFAIL is returned.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );\n\n/**\n * Simplified macro for sending task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * xTaskNotifyGive() is a helper macro intended for use when task notifications\n * are used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given using the xSemaphoreGive() API function,\n * the equivalent action that instead uses a task notification is\n * xTaskNotifyGive().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @return xTaskNotifyGive() is a macro that calls xTaskNotify() with the\n * eAction parameter set to eIncrement - so pdPASS is always returned.\n *\n * \\ingroup TaskNotifications\n */\n#define xTaskNotifyGive( xTaskToNotify ) xTaskNotify( ( xTaskToNotify ), 0, eIncrement )\n\n/**\n * Simplified macro for sending task notification from ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotifyGive() that can be called from an interrupt service\n * routine (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * vTaskNotifyGiveFromISR() is intended for use when task notifications are\n * used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given from an ISR using the\n * xSemaphoreGiveFromISR() API function, the equivalent action that instead uses\n * a task notification is vTaskNotifyGiveFromISR().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch\n * should be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * \\ingroup TaskNotifications\n */\nvoid vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Simplified macro for receiving task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * ulTaskNotifyTake() is intended for use when a task notification is used as a\n * faster and lighter weight binary or counting semaphore alternative.  Actual\n * FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the\n * equivalent action that instead uses a task notification is\n * ulTaskNotifyTake().\n *\n * When a task is using its notification value as a binary or counting semaphore\n * other tasks should send notifications to it using the xTaskNotifyGive()\n * macro, or xTaskNotify() function with the eAction parameter set to\n * eIncrement.\n *\n * ulTaskNotifyTake() can either clear the task's notification value to\n * zero on exit, in which case the notification value acts like a binary\n * semaphore, or decrement the task's notification value on exit, in which case\n * the notification value acts like a counting semaphore.\n *\n * A task can use ulTaskNotifyTake() to [optionally] block to wait for a\n * the task's notification value to be non-zero.  The task does not consume any\n * CPU time while it is in the Blocked state.\n *\n * Where as xTaskNotifyWait() will return when a notification is pending,\n * ulTaskNotifyTake() will return when the task's notification value is\n * not zero.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's\n * notification value is decremented when the function exits.  In this way the\n * notification value acts like a counting semaphore.  If xClearCountOnExit is\n * not pdFALSE then the task's notification value is cleared to zero when the\n * function exits.  In this way the notification value acts like a binary\n * semaphore.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for the task's notification value to be greater than zero,\n * should the count not already be greater than zero when\n * ulTaskNotifyTake() was called.  The task will not consume any processing\n * time while it is in the Blocked state.  This is specified in kernel ticks,\n * the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time\n * specified in milliseconds to a time specified in ticks.\n *\n * @return The task's notification count before it is either cleared to zero or\n * decremented (see the xClearCountOnExit parameter).\n *\n * \\ingroup TaskNotifications\n */\nuint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );\n\n/*-----------------------------------------------------------\n * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES\n *----------------------------------------------------------*/\n/** @cond */\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Called from the real time kernel tick (either preemptive or cooperative),\n * this increments the tick count and checks if any tasks that are blocked\n * for a finite period required removing from a blocked list and placing on\n * a ready list.  If a non-zero value is returned then a context switch is\n * required because either:\n *   + A task was removed from a blocked list because its timeout had expired,\n *     or\n *   + Time slicing is in use and there is a task of equal priority to the\n *     currently running task.\n */\nBaseType_t xTaskIncrementTick( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes the calling task from the ready list and places it both\n * on the list of tasks waiting for a particular event, and the\n * list of delayed tasks.  The task will be removed from both lists\n * and replaced on the ready list should either the event occur (and\n * there be no higher priority tasks waiting on the same event) or\n * the delay period expires.\n *\n * The 'unordered' version replaces the event list item value with the\n * xItemValue value, and inserts the list item at the end of the list.\n *\n * The 'ordered' version uses the existing event list item value (which is the\n * owning tasks priority) to insert the list item into the event list is task\n * priority order.\n *\n * @param pxEventList The list containing tasks that are blocked waiting\n * for the event to occur.\n *\n * @param xItemValue The item value to use for the event list item when the\n * event list is not ordered by task priority.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait\n * for the event to occur.  This is specified in kernel ticks,the constant\n * portTICK_PERIOD_MS can be used to convert kernel ticks into a real time\n * period.\n */\nvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\nvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * This function performs nearly the same function as vTaskPlaceOnEventList().\n * The difference being that this function does not permit tasks to block\n * indefinitely, whereas vTaskPlaceOnEventList() does.\n *\n */\nvoid vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes a task from both the specified event list and the list of blocked\n * tasks, and places it on a ready queue.\n *\n * xTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called\n * if either an event occurs to unblock a task, or the block timeout period\n * expires.\n *\n * xTaskRemoveFromEventList() is used when the event list is in task priority\n * order.  It removes the list item from the head of the event list as that will\n * have the highest priority owning task of all the tasks on the event list.\n * xTaskRemoveFromUnorderedEventList() is used when the event list is not\n * ordered and the event list items hold something other than the owning tasks\n * priority.  In this case the event list item value is updated to the value\n * passed in the xItemValue parameter.\n *\n * @return pdTRUE if the task being removed has a higher priority than the task\n * making the call, otherwise pdFALSE.\n */\nBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) PRIVILEGED_FUNCTION;\nBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Sets the pointer to the current TCB to the TCB of the highest priority task\n * that is ready to run.\n */\nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE.  THEY ARE USED BY\n * THE EVENT BITS MODULE.\n */\nTickType_t uxTaskResetEventItemValue( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Return the handle of the calling task.\n */\nTaskHandle_t xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;\n\n\n\n/*\n * Return the handle of the task running on a certain CPU. Because of\n * the nature of SMP processing, there is no guarantee that this\n * value will still be valid on return and should only be used for\n * debugging purposes.\n */\nTaskHandle_t xTaskGetCurrentTaskHandleForCPU( BaseType_t cpuid );\n\n\n/*\n * Capture the current time status for future reference.\n */\nvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) PRIVILEGED_FUNCTION;\n\n/*\n * Compare the time status now with that previously captured to see if the\n * timeout has expired.\n */\nBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * Shortcut used by the queue implementation to prevent unnecessary call to\n * taskYIELD();\n */\nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Returns the scheduler state as taskSCHEDULER_RUNNING,\n * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.\n */\nBaseType_t xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Raises the priority of the mutex holder to that of the calling task should\n * the mutex holder have a priority less than the calling task.\n */\nvoid vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the priority of a task back to its proper priority in the case that it\n * inherited a higher priority while it was holding a semaphore.\n */\nBaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.\n */\nUBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n\n/*\n * Get the current core affinity of a task\n */\nBaseType_t xTaskGetAffinity( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the uxTaskNumber of the task referenced by the xTask parameter to\n * uxHandle.\n */\nvoid vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) PRIVILEGED_FUNCTION;\n\n/*\n * Only available when configUSE_TICKLESS_IDLE is set to 1.\n * If tickless mode is being used, or a low power mode is implemented, then\n * the tick interrupt will not execute during idle periods.  When this is the\n * case, the tick count value maintained by the scheduler needs to be kept up\n * to date with the actual execution time by being skipped forward by a time\n * equal to the idle period.\n */\nvoid vTaskStepTick( const TickType_t xTicksToJump ) PRIVILEGED_FUNCTION;\n\n/*\n * Only avilable when configUSE_TICKLESS_IDLE is set to 1.\n * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port\n * specific sleep function to determine if it is ok to proceed with the sleep,\n * and if it is ok to proceed, if it is ok to sleep indefinitely.\n *\n * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only\n * called with the scheduler suspended, not from within a critical section.  It\n * is therefore possible for an interrupt to request a context switch between\n * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being\n * entered.  eTaskConfirmSleepModeStatus() should be called from a short\n * critical section between the timer being stopped and the sleep mode being\n * entered to ensure it is ok to proceed into the sleep mode.\n */\neSleepModeStatus eTaskConfirmSleepModeStatus( void ) PRIVILEGED_FUNCTION;\n\n/*\n * For internal use only.  Increment the mutex held count when a mutex is\n * taken and return the handle of the task that has taken the mutex.\n */\nvoid *pvTaskIncrementMutexHeldCount( void );\n\n/*\n * This function fills array with TaskSnapshot_t structures for every task in the system.\n * Used by core dump facility to get snapshots of all tasks in the system.\n * Only available when configENABLE_TASK_SNAPSHOT is set to 1.\n * @param pxTaskSnapshotArray Pointer to array of TaskSnapshot_t structures to store tasks snapshot data.\n * @param uxArraySize Size of tasks snapshots array.\n * @param pxTcbSz Pointer to store size of TCB.\n * @return Number of elements stored in array.\n */\nUBaseType_t uxTaskGetSnapshotAll( TaskSnapshot_t * const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t * const pxTcbSz );\n\n/** @endcond */\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* INC_TASK_H */\n\n\n\n"}},"jsonrpc":"2.0"}Content-Length: 195

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":38},"end":{"line":274,"character":38}},"context":{"diagnostics":[]}},"id":387,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":387,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":716},"contentChanges":[{"range":{"start":{"line":274,"character":4},"end":{"line":274,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":716}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":35},"end":{"line":274,"character":35}},"context":{"diagnostics":[]}},"id":388,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":388,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":35}},"id":389,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":389,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":35},"end":{"line":275,"character":35}},"context":{"diagnostics":[]}},"id":390,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":390,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":717},"contentChanges":[{"range":{"start":{"line":275,"character":4},"end":{"line":275,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":717}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":32},"end":{"line":275,"character":32}},"context":{"diagnostics":[]}},"id":391,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":391,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":0}},"id":392,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":392,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":269,"character":11}},"id":393,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":393,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":259,"character":10}},"id":394,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":394,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":254,"character":10}},"id":395,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":395,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":253,"character":23}},"id":396,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":396,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":253,"character":24}},"id":397,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":397,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":24},"end":{"line":253,"character":24}},"context":{"diagnostics":[]}},"id":398,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":398,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":263,"character":13}},"id":399,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":399,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":718},"contentChanges":[{"range":{"start":{"line":253,"character":24},"end":{"line":253,"character":24}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":718}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":25},"end":{"line":253,"character":25}},"context":{"diagnostics":[]}},"id":400,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":400,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":719},"contentChanges":[{"range":{"start":{"line":253,"character":25},"end":{"line":253,"character":25}},"text":":"}]},"jsonrpc":"2.0"}Content-Length: 258

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":253,"character":26},"context":{"triggerKind":2,"triggerCharacter":":"}},"id":401,"jsonrpc":"2.0"}
<<<
Content-Length: 69

{"id":401,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":719}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":26},"end":{"line":253,"character":26}},"context":{"diagnostics":[]}},"id":402,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":402,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":720},"contentChanges":[{"range":{"start":{"line":253,"character":26},"end":{"line":253,"character":26}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":720}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":27},"end":{"line":253,"character":27}},"context":{"diagnostics":[]}},"id":403,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":403,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":25},"end":{"line":253,"character":25}},"context":{"diagnostics":[]}},"id":404,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":404,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":721},"contentChanges":[{"range":{"start":{"line":253,"character":24},"end":{"line":253,"character":25}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":721}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":24},"end":{"line":253,"character":24}},"context":{"diagnostics":[]}},"id":405,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":405,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":260,"character":13}},"id":406,"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"id":406,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### type-alias `esp_err_t`  \n\n---\n```cpp\ntypedef int32_t esp_err_t\n```"},"range":{"end":{"character":13,"line":260},"start":{"character":4,"line":260}}}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":19}},"id":407,"jsonrpc":"2.0"}
<<<
Content-Length: 128

{"id":407,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":46,"line":275},"start":{"character":19,"line":275}}}]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":19},"end":{"line":275,"character":19}},"context":{"diagnostics":[]}},"id":408,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":408,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":30}},"id":409,"jsonrpc":"2.0"}
<<<
Content-Length: 1078

{"id":409,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `uxTaskGetStackHighWaterMark`  \n\n---\n→ `UBaseType_t`  \nParameters:  \n- `TaskHandle_t xTask`\n\nReturns the high water mark of the stack associated with xTask.  \nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for this function to be available.  \nHigh water mark is the minimum free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task started.  \nThe smaller the returned number the closer the task has come to overflowing its stack.  \n@param xTask Handle of the task associated with the stack to be checked.  \nSet xTask to NULL to check the stack of the calling task.  \n@return The smallest amount of free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task referenced by xTask was created.  \n\n---\n```cpp\nUBaseType_t uxTaskGetStackHighWaterMark(TaskHandle_t xTask)\n```"},"range":{"end":{"character":46,"line":275},"start":{"character":19,"line":275}}}}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":31}},"id":410,"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"id":410,"jsonrpc":"2.0","result":[{"range":{"end":{"character":39,"line":1346},"start":{"character":12,"line":1346}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":722},"contentChanges":[{"range":{"start":{"line":275,"character":0},"end":{"line":276,"character":0}},"rangeLength":55,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":722}}
>>>
Content-Length: 98727

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h","languageId":"cpp","version":1,"text":"/*\n    FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.\n    All rights reserved\n\n    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.\n\n    This file is part of the FreeRTOS distribution.\n\n    FreeRTOS is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License (version 2) as published by the\n    Free Software Foundation \u003e\u003e!AND MODIFIED BY!\u003c\u003c the FreeRTOS exception.\n\n\t***************************************************************************\n    \u003e\u003e!   NOTE: The modification to the GPL is included to allow you to     !\u003c\u003c\n    \u003e\u003e!   distribute a combined work that includes FreeRTOS without being   !\u003c\u003c\n    \u003e\u003e!   obliged to provide the source code for proprietary components     !\u003c\u003c\n    \u003e\u003e!   outside of the FreeRTOS kernel.                                   !\u003c\u003c\n\t***************************************************************************\n\n    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY\n    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n    FOR A PARTICULAR PURPOSE.  Full license text is available on the following\n    link: http://www.freertos.org/a00114.html\n\n    ***************************************************************************\n     *                                                                       *\n     *    FreeRTOS provides completely free yet professionally developed,    *\n     *    robust, strictly quality controlled, supported, and cross          *\n     *    platform software that is more than just the market leader, it     *\n     *    is the industry's de facto standard.                               *\n     *                                                                       *\n     *    Help yourself get started quickly while simultaneously helping     *\n     *    to support the FreeRTOS project by purchasing a FreeRTOS           *\n     *    tutorial book, reference manual, or both:                          *\n     *    http://www.FreeRTOS.org/Documentation                              *\n     *                                                                       *\n    ***************************************************************************\n\n    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading\n\tthe FAQ page \"My application does not run, what could be wrong?\".  Have you\n\tdefined configASSERT()?\n\n\thttp://www.FreeRTOS.org/support - In return for receiving this top quality\n\tembedded software for free we request you assist our global community by\n\tparticipating in the support forum.\n\n\thttp://www.FreeRTOS.org/training - Investing in training allows your team to\n\tbe as productive as possible as early as possible.  Now you can receive\n\tFreeRTOS training directly from Richard Barry, CEO of Real Time Engineers\n\tLtd, and the world's leading authority on the world's leading RTOS.\n\n    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,\n    including FreeRTOS+Trace - an indispensable productivity tool, a DOS\n    compatible FAT file system, and our tiny thread aware UDP/IP stack.\n\n    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.\n    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.\n\n    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High\n    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS\n    licenses offer ticketed support, indemnification and commercial middleware.\n\n    http://www.SafeRTOS.com - High Integrity Systems also provide a safety\n    engineered and independently SIL3 certified version for use in safety and\n    mission critical applications that require provable dependability.\n\n    1 tab == 4 spaces!\n*/\n\n\n#ifndef INC_TASK_H\n#define INC_TASK_H\n\n#ifndef INC_FREERTOS_H\n\t#error \"include FreeRTOS.h must appear in source files before include task.h\"\n#endif\n\n#include \u003climits.h\u003e\n\n#include \"list.h\"\n#include \"portmacro.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*-----------------------------------------------------------\n * MACROS AND DEFINITIONS\n *----------------------------------------------------------*/\n\n#define tskKERNEL_VERSION_NUMBER \"V8.2.0\"\n#define tskKERNEL_VERSION_MAJOR 8\n#define tskKERNEL_VERSION_MINOR 2\n#define tskKERNEL_VERSION_BUILD 0\n\n/**\n * @brief Argument of xTaskCreatePinnedToCore indicating that task has no affinity\n */\n#define tskNO_AFFINITY INT_MAX\n\n/**\n * task. h\n *\n * Type by which tasks are referenced.  For example, a call to xTaskCreate\n * returns (via a pointer parameter) an TaskHandle_t variable that can then\n * be used as a parameter to vTaskDelete to delete the task.\n *\n * \\ingroup Tasks\n */\ntypedef void * TaskHandle_t;\n\n/**\n * Defines the prototype to which the application task hook function must\n * conform.\n */\ntypedef BaseType_t (*TaskHookFunction_t)( void * );\n\n/** Task states returned by eTaskGetState. */\ntypedef enum\n{\n\teRunning = 0,\t/*!\u003c A task is querying the state of itself, so must be running. */\n\teReady,\t\t\t/*!\u003c The task being queried is in a read or pending ready list. */\n\teBlocked,\t\t/*!\u003c The task being queried is in the Blocked state. */\n\teSuspended,\t\t/*!\u003c The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */\n\teDeleted\t\t/*!\u003c The task being queried has been deleted, but its TCB has not yet been freed. */\n} eTaskState;\n\n/** Actions that can be performed when vTaskNotify() is called. */\ntypedef enum\n{\n\teNoAction = 0,\t\t\t\t/*!\u003c Notify the task without updating its notify value. */\n\teSetBits,\t\t\t\t\t/*!\u003c Set bits in the task's notification value. */\n\teIncrement,\t\t\t\t\t/*!\u003c Increment the task's notification value. */\n\teSetValueWithOverwrite,\t\t/*!\u003c Set the task's notification value to a specific value even if the previous value has not yet been read by the task. */\n\teSetValueWithoutOverwrite\t/*!\u003c Set the task's notification value if the previous value has been read by the task. */\n} eNotifyAction;\n\n/** @cond */\n/**\n * Used internally only.\n */\ntypedef struct xTIME_OUT\n{\n\tBaseType_t xOverflowCount;\n\tTickType_t xTimeOnEntering;\n} TimeOut_t;\n\n/**\n * Defines the memory ranges allocated to the task when an MPU is used.\n */\ntypedef struct xMEMORY_REGION\n{\n\tvoid *pvBaseAddress;\n\tuint32_t ulLengthInBytes;\n\tuint32_t ulParameters;\n} MemoryRegion_t;\n\n/**\n * Parameters required to create an MPU protected task.\n */\ntypedef struct xTASK_PARAMETERS\n{\n\tTaskFunction_t pvTaskCode;\n\tconst char * const pcName;\t/*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tuint32_t usStackDepth;\n\tvoid *pvParameters;\n\tUBaseType_t uxPriority;\n\tStackType_t *puxStackBuffer;\n\tMemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];\n} TaskParameters_t;\n/** @endcond */\n\n/**\n *  Used with the uxTaskGetSystemState() function to return the state of each task in the system.\n*/\ntypedef struct xTASK_STATUS\n{\n\tTaskHandle_t xHandle;\t\t\t/*!\u003c The handle of the task to which the rest of the information in the structure relates. */\n\tconst char *pcTaskName;\t\t\t/*!\u003c A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tUBaseType_t xTaskNumber;\t\t/*!\u003c A number unique to the task. */\n\teTaskState eCurrentState;\t\t/*!\u003c The state in which the task existed when the structure was populated. */\n\tUBaseType_t uxCurrentPriority;\t/*!\u003c The priority at which the task was running (may be inherited) when the structure was populated. */\n\tUBaseType_t uxBasePriority;\t\t/*!\u003c The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. */\n\tuint32_t ulRunTimeCounter;\t\t/*!\u003c The total run time allocated to the task so far, as defined by the run time stats clock.  See http://www.freertos.org/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. */\n\tStackType_t *pxStackBase;\t\t/*!\u003c Points to the lowest address of the task's stack area. */\n\tuint32_t usStackHighWaterMark;\t/*!\u003c The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. */\n#if configTASKLIST_INCLUDE_COREID\n\tBaseType_t xCoreID;\t\t\t\t/*!\u003c Core this task is pinned to. This field is present if CONFIG_FREERTOS_VTASKLIST_INCLUDE_COREID is set. */\n#endif\n} TaskStatus_t;\n\n/**\n * Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.\n * We need this struct because TCB_t is defined (hidden) in tasks.c.\n */\ntypedef struct xTASK_SNAPSHOT\n{\n\tvoid        *pxTCB;         /*!\u003c Address of task control block. */\n\tStackType_t *pxTopOfStack;  /*!\u003c Points to the location of the last item placed on the tasks stack. */\n\tStackType_t *pxEndOfStack;  /*!\u003c Points to the end of the stack. pxTopOfStack \u003c pxEndOfStack, stack grows hi2lo\n\t\t\t\t\t\t\t\t\tpxTopOfStack \u003e pxEndOfStack, stack grows lo2hi*/\n} TaskSnapshot_t;\n\n/**\n * Possible return values for eTaskConfirmSleepModeStatus().\n */\ntypedef enum\n{\n\teAbortSleep = 0,\t\t/*!\u003c A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */\n\teStandardSleep,\t\t\t/*!\u003c Enter a sleep mode that will not last any longer than the expected idle time. */\n\teNoTasksWaitingTimeout\t/*!\u003c No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */\n} eSleepModeStatus;\n\n\n/**\n * Defines the priority used by the idle task.  This must not be modified.\n *\n * \\ingroup TaskUtils\n */\n#define tskIDLE_PRIORITY\t\t\t( ( UBaseType_t ) 0U )\n\n/**\n * task. h\n *\n * Macro for forcing a context switch.\n *\n * \\ingroup SchedulerControl\n */\n#define taskYIELD()\t\t\t\t\tportYIELD()\n\n/**\n * task. h\n *\n * Macro to mark the start of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskENTER_CRITICAL(mux)\t\tportENTER_CRITICAL(mux)\n#else\n#define taskENTER_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskENTER_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portENTER_CRITICAL(mux)'\\\"\") portENTER_CRITICAL(mux)\n#endif\n#define taskENTER_CRITICAL_ISR(mux)\t\tportENTER_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to mark the end of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskEXIT_CRITICAL(mux)\t\t\tportEXIT_CRITICAL(mux)\n#else\n#define taskEXIT_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskEXIT_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portEXIT_CRITICAL(mux)'\\\"\") portEXIT_CRITICAL(mux)\n#endif\n#define taskEXIT_CRITICAL_ISR(mux)\t\tportEXIT_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to disable all maskable interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskDISABLE_INTERRUPTS()\tportDISABLE_INTERRUPTS()\n\n/**\n * task. h\n *\n * Macro to enable microcontroller interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskENABLE_INTERRUPTS()\t\tportENABLE_INTERRUPTS()\n\n/* Definitions returned by xTaskGetSchedulerState().  taskSCHEDULER_SUSPENDED is\n0 to generate more optimal code when configASSERT() is defined as the constant\nis used in assert() statements. */\n#define taskSCHEDULER_SUSPENDED\t\t( ( BaseType_t ) 0 )\n#define taskSCHEDULER_NOT_STARTED\t( ( BaseType_t ) 1 )\n#define taskSCHEDULER_RUNNING\t\t( ( BaseType_t ) 2 )\n\n\n/*-----------------------------------------------------------\n * TASK CREATION API\n *----------------------------------------------------------*/\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreate, but allows setting task affinity\n * in SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\tBaseType_t xTaskCreatePinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\tconst uint32_t usStackDepth,\n\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\tTaskHandle_t * const pvCreatedTask,\n\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID);\n\n#endif\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * See xTaskCreateStatic() for a version that does not use any dynamic memory\n * allocation.\n *\n * xTaskCreate() can only be used to create a task that has unrestricted\n * access to the entire microcontroller memory map.  Systems that include MPU\n * support can alternatively create an MPU constrained task using\n * xTaskCreateRestricted().\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *  // Task to be created.\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *   }\n *  }\n *\n *  // Function that creates a task.\n *  void vOtherFunction( void )\n *  {\n *  static uint8_t ucParameterToPass;\n *  TaskHandle_t xHandle = NULL;\n *\n *   // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass\n *   // must exist for the lifetime of the task, so in this case is declared static.  If it was just an\n *   // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time\n *   // the new task attempts to access it.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, \u0026ucParameterToPass, tskIDLE_PRIORITY, \u0026xHandle );\n *      configASSERT( xHandle );\n *\n *   // Use the handle to delete the task.\n *      if( xHandle != NULL )\n *      {\n *       vTaskDelete( xHandle );\n *      }\n *  }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\n\tstatic inline IRAM_ATTR BaseType_t xTaskCreate(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t usStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tTaskHandle_t * const pvCreatedTask)\n\t{\n\t\treturn xTaskCreatePinnedToCore( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pvCreatedTask, tskNO_AFFINITY );\n\t}\n\n#endif\n\n\n\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreateStatic, but allows specifying\n * task affinity in an SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tTaskHandle_t xTaskCreateStaticPinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\t\t\tconst uint32_t ulStackDepth,\n\t\t\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\t\t\tStackType_t * const pxStackBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tStaticTask_t * const pxTaskBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID );\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *\n *     // Dimensions the buffer that the task being created will use as its stack.\n *     // NOTE:  This is the number of bytes the stack will hold, not the number of\n *     // words as found in vanilla FreeRTOS.\n *     #define STACK_SIZE 200\n *\n *     // Structure that will hold the TCB of the task being created.\n *     StaticTask_t xTaskBuffer;\n *\n *     // Buffer that the task being created will use as its stack.  Note this is\n *     // an array of StackType_t variables.  The size of StackType_t is dependent on\n *     // the RTOS port.\n *     StackType_t xStack[ STACK_SIZE ];\n *\n *     // Function that implements the task being created.\n *     void vTaskCode( void * pvParameters )\n *     {\n *         // The parameter value is expected to be 1 as 1 is passed in the\n *         // pvParameters value in the call to xTaskCreateStatic().\n *         configASSERT( ( uint32_t ) pvParameters == 1UL );\n *\n *         for( ;; )\n *         {\n *             // Task code goes here.\n *         }\n *     }\n *\n *     // Function that creates a task.\n *     void vOtherFunction( void )\n *     {\n *         TaskHandle_t xHandle = NULL;\n *\n *         // Create the task without using any dynamic memory allocation.\n *         xHandle = xTaskCreateStatic(\n *                       vTaskCode,       // Function that implements the task.\n *                       \"NAME\",          // Text name for the task.\n *                       STACK_SIZE,      // Stack size in bytes, not words.\n *                       ( void * ) 1,    // Parameter passed into the task.\n *                       tskIDLE_PRIORITY,// Priority at which the task is created.\n *                       xStack,          // Array to use as the task's stack.\n *                       \u0026xTaskBuffer );  // Variable to hold the task's data structure.\n *\n *         // puxStackBuffer and pxTaskBuffer were not NULL, so the task will have\n *         // been created, and xHandle will be the task's handle.  Use the handle\n *         // to suspend the task.\n *         vTaskSuspend( xHandle );\n *     }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tstatic inline IRAM_ATTR TaskHandle_t xTaskCreateStatic(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t ulStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tStackType_t * const pxStackBuffer,\n\t\t\tStaticTask_t * const pxTaskBuffer)\n\t{\n\t\treturn xTaskCreateStaticPinnedToCore( pvTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, pxStackBuffer, pxTaskBuffer, tskNO_AFFINITY );\n\t}\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/** @cond */\n/**\n * xTaskCreateRestricted() should only be used in systems that include an MPU\n * implementation.\n *\n * Create a new task and add it to the list of tasks that are ready to run.\n * The function parameters define the memory regions and associated access\n * permissions allocated to the task.\n *\n * @param pxTaskDefinition Pointer to a structure that contains a member\n * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API\n * documentation) plus an optional stack buffer and the memory region\n * definitions.\n *\n * @param pxCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * Example usage:\n * @code{c}\n * // Create an TaskParameters_t structure that defines the task to be created.\n * static const TaskParameters_t xCheckTaskParameters =\n * {\n * \tvATask,\t\t// pvTaskCode - the function that implements the task.\n * \t\"ATask\",\t// pcName - just a text name for the task to assist debugging.\n * \t100,\t\t// usStackDepth\t- the stack size DEFINED IN BYTES.\n * \tNULL,\t\t// pvParameters - passed into the task function as the function parameters.\n * \t( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.\n * \tcStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.\n *\n * \t// xRegions - Allocate up to three separate memory regions for access by\n * \t// the task, with appropriate access permissions.  Different processors have\n * \t// different memory alignment requirements - refer to the FreeRTOS documentation\n * \t// for full information.\n * \t{\n * \t\t// Base address\t\t\t\t\tLength\tParameters\n *         { cReadWriteArray,\t\t\t\t32,\t\tportMPU_REGION_READ_WRITE },\n *         { cReadOnlyArray,\t\t\t\t32,\t\tportMPU_REGION_READ_ONLY },\n *         { cPrivilegedOnlyAccessArray,\t128,\tportMPU_REGION_PRIVILEGED_READ_WRITE }\n * \t}\n * };\n *\n * int main( void )\n * {\n * TaskHandle_t xHandle;\n *\n * \t// Create a task from the const structure defined above.  The task handle\n * \t// is requested (the second parameter is not NULL) but in this case just for\n * \t// demonstration purposes as its not actually used.\n * \txTaskCreateRestricted( \u0026xRegTest1Parameters, \u0026xHandle );\n *\n * \t// Start the scheduler.\n * \tvTaskStartScheduler();\n *\n * \t// Will only get here if there was insufficient memory to create the idle\n * \t// and/or timer task.\n * \tfor( ;; );\n * }\n * @endcode\n * \\ingroup Tasks\n */\n#if( portUSING_MPU_WRAPPERS == 1 )\n\tBaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask ) PRIVILEGED_FUNCTION;\n#endif\n\n\n/**\n * Memory regions are assigned to a restricted task when the task is created by\n * a call to xTaskCreateRestricted().  These regions can be redefined using\n * vTaskAllocateMPURegions().\n *\n * @param xTask The handle of the task being updated.\n *\n * @param xRegions A pointer to an MemoryRegion_t structure that contains the\n * new memory region definitions.\n *\n * Example usage:\n *\n * @code{c}\n * // Define an array of MemoryRegion_t structures that configures an MPU region\n * // allowing read/write access for 1024 bytes starting at the beginning of the\n * // ucOneKByte array.  The other two of the maximum 3 definable regions are\n * // unused so set to zero.\n * static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =\n * {\n * \t// Base address\t\tLength\t\tParameters\n * \t{ ucOneKByte,\t\t1024,\t\tportMPU_REGION_READ_WRITE },\n * \t{ 0,\t\t\t\t0,\t\t\t0 },\n * \t{ 0,\t\t\t\t0,\t\t\t0 }\n * };\n *\n * void vATask( void *pvParameters )\n * {\n * \t// This task was created such that it has access to certain regions of\n * \t// memory as defined by the MPU configuration.  At some point it is\n * \t// desired that these MPU regions are replaced with that defined in the\n * \t// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()\n * \t// for this purpose.  NULL is used as the task handle to indicate that this\n * \t// function should modify the MPU regions of the calling task.\n * \tvTaskAllocateMPURegions( NULL, xAltRegions );\n *\n * \t// Now the task can continue its function, but from this point on can only\n * \t// access its stack and the ucOneKByte array (unless any other statically\n * \t// defined or shared regions have been declared elsewhere).\n * }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Remove a task from the RTOS real time kernel's management.\n *\n * The task being deleted will be removed from all ready, blocked, suspended\n * and event lists.\n *\n * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @note The idle task is responsible for freeing the kernel allocated\n * memory from tasks that have been deleted.  It is therefore important that\n * the idle task is not starved of microcontroller processing time if your\n * application makes any calls to vTaskDelete ().  Memory allocated by the\n * task code is not automatically freed, and should be freed before the task\n * is deleted.\n *\n * See the demo application file death.c for sample code that utilises\n * vTaskDelete ().\n *\n * @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will\n * cause the calling task to be deleted.\n *\n * Example usage:\n * @code{c}\n *  void vOtherFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n * \t // Create the task, storing the handle.\n * \t xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n * \t // Use the handle to delete the task.\n * \t vTaskDelete( xHandle );\n *  }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskDelete( TaskHandle_t xTaskToDelete ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK CONTROL API\n *----------------------------------------------------------*/\n\n/**\n * Delay a task for a given number of ticks.\n *\n * The actual time that the task remains blocked depends on the tick rate.\n * The constant portTICK_PERIOD_MS can be used to calculate real time from\n * the tick rate - with the resolution of one tick period.\n *\n * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * vTaskDelay() specifies a time at which the task wishes to unblock relative to\n * the time at which vTaskDelay() is called.  For example, specifying a block\n * period of 100 ticks will cause the task to unblock 100 ticks after\n * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method\n * of controlling the frequency of a periodic task as the path taken through the\n * code, as well as other task and interrupt activity, will effect the frequency\n * at which vTaskDelay() gets called and therefore the time at which the task\n * next executes.  See vTaskDelayUntil() for an alternative API function designed\n * to facilitate fixed frequency execution.  It does this by specifying an\n * absolute time (rather than a relative time) at which the calling task should\n * unblock.\n *\n * @param xTicksToDelay The amount of time, in tick periods, that\n * the calling task should block.\n *\n * Example usage:\n * @code{c}\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  // Block for 500ms.\n *  const TickType_t xDelay = 500 / portTICK_PERIOD_MS;\n *\n * \t for( ;; )\n * \t {\n * \t\t // Simply toggle the LED every 500ms, blocking between each toggle.\n * \t\t vToggleLED();\n * \t\t vTaskDelay( xDelay );\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelay( const TickType_t xTicksToDelay ) PRIVILEGED_FUNCTION;\n\n/**\n * Delay a task until a specified time.\n *\n * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * This function can be used by periodic tasks to ensure a constant execution frequency.\n *\n * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will\n * cause a task to block for the specified number of ticks from the time vTaskDelay () is\n * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed\n * execution frequency as the time between a task starting to execute and that task\n * calling vTaskDelay () may not be fixed [the task may take a different path though the\n * code between calls, or may get interrupted or preempted a different number of times\n * each time it executes].\n *\n * Whereas vTaskDelay () specifies a wake time relative to the time at which the function\n * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to\n * unblock.\n *\n * The constant portTICK_PERIOD_MS can be used to calculate real time from the tick\n * rate - with the resolution of one tick period.\n *\n * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the\n * task was last unblocked.  The variable must be initialised with the current time\n * prior to its first use (see the example below).  Following this the variable is\n * automatically updated within vTaskDelayUntil ().\n *\n * @param xTimeIncrement The cycle time period.  The task will be unblocked at\n * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the\n * same xTimeIncrement parameter value will cause the task to execute with\n * a fixed interface period.\n *\n * Example usage:\n * @code{c}\n *  // Perform an action every 10 ticks.\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  TickType_t xLastWakeTime;\n *  const TickType_t xFrequency = 10;\n *\n * \t // Initialise the xLastWakeTime variable with the current time.\n * \t xLastWakeTime = xTaskGetTickCount ();\n * \t for( ;; )\n * \t {\n * \t\t // Wait for the next cycle.\n * \t\t vTaskDelayUntil( \u0026xLastWakeTime, xFrequency );\n *\n * \t\t // Perform action here.\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the priority of any task.\n *\n * INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to obtain the priority of the created task.\n *   // It was created with tskIDLE_PRIORITY, but may have changed\n *   // it itself.\n *   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )\n *   {\n *       // The task has changed it's priority.\n *   }\n *\n *   // ...\n *\n *   // Is our priority higher than the created task?\n *   if( uxTaskPriorityGet( xHandle ) \u003c uxTaskPriorityGet( NULL ) )\n *   {\n *       // Our priority (obtained using NULL handle) is higher.\n *   }\n * }\n * @endcode\n * \\ingroup TaskCtrl\n */\nUBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * A version of uxTaskPriorityGet() that can be used from an ISR.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n */\nUBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the state of any task.\n *\n * States are encoded by the eTaskState enumerated type.\n *\n * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.\n *\n * @return The state of xTask at the time the function was called.  Note the\n * state of the task might change between the function being called, and the\n * functions return value being tested by the calling task.\n */\neTaskState eTaskGetState( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Set the priority of any task.\n *\n * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A context switch will occur before the function returns if the priority\n * being set is higher than the currently executing task.\n *\n * @param xTask Handle to the task for which the priority is being set.\n * Passing a NULL handle results in the priority of the calling task being set.\n *\n * @param uxNewPriority The priority to which the task will be set.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to raise the priority of the created task.\n *   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );\n *\n *   // ...\n *\n *   // Use a NULL handle to raise our priority to the same value.\n *   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) PRIVILEGED_FUNCTION;\n\n/**\n * Suspend a task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * When suspended, a task will never get any microcontroller processing time,\n * no matter what its priority.\n *\n * Calls to vTaskSuspend are not accumulative -\n * i.e. calling vTaskSuspend () twice on the same task still only requires one\n * call to vTaskResume () to ready the suspended task.\n *\n * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL\n * handle will cause the calling task to be suspended.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Suspend ourselves.\n *   vTaskSuspend( NULL );\n *\n *   // We cannot get here unless another task calls vTaskResume\n *   // with our handle as the parameter.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskSuspend( TaskHandle_t xTaskToSuspend ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes a suspended task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * vTaskResume ().\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Resume the suspended task ourselves.\n *   vTaskResume( xHandle );\n *\n *   // The created task will once again get microcontroller processing\n *   // time in accordance with its priority within the system.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskResume( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/**\n * An implementation of vTaskResume() that can be called from within an ISR.\n *\n * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be\n * available.  See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * xTaskResumeFromISR ().\n *\n * xTaskResumeFromISR() should not be used to synchronise a task with an\n * interrupt if there is a chance that the interrupt could arrive prior to the\n * task being suspended - as this can lead to interrupts being missed. Use of a\n * semaphore as a synchronisation mechanism would avoid this eventuality.\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * @return pdTRUE if resuming the task should result in a context switch,\n * otherwise pdFALSE. This is used by the ISR to determine if a context switch\n * may be required following the ISR.\n *\n * \\ingroup TaskCtrl\n */\nBaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * SCHEDULER CONTROL\n *----------------------------------------------------------*/\n/** @cond */\n/**\n * Starts the real time kernel tick processing.\n *\n * After calling the kernel has control over which tasks are executed and when.\n *\n * See the demo application file main.c for an example of creating\n * tasks and starting the kernel.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will not get here unless a task calls vTaskEndScheduler ()\n *  }\n * @endcode\n *\n * \\ingroup SchedulerControl\n */\nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Stops the real time kernel tick.\n *\n * @note At the time of writing only the x86 real mode port, which runs on a PC\n * in place of DOS, implements this function.\n *\n * All created tasks will be automatically deleted and multitasking\n * (either preemptive or cooperative) will stop.\n * Execution then resumes from the point where vTaskStartScheduler ()\n * was called, as if vTaskStartScheduler () had just returned.\n *\n * See the demo application file main. c in the demo/PC directory for an\n * example that uses vTaskEndScheduler ().\n *\n * vTaskEndScheduler () requires an exit function to be defined within the\n * portable layer (see vPortEndScheduler () in port. c for the PC port).  This\n * performs hardware specific operations such as stopping the kernel tick.\n *\n * vTaskEndScheduler () will cause all of the resources allocated by the\n * kernel to be freed - but will not free resources allocated by application\n * tasks.\n *\n * Example usage:\n * @code{c}\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // At some point we want to end the real time kernel processing\n *       // so call ...\n *       vTaskEndScheduler ();\n *   }\n *  }\n *\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will only get here when the vTaskCode () task has called\n *   // vTaskEndScheduler ().  When we get here we are back to single task\n *   // execution.\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Suspends the scheduler without disabling interrupts.\n *\n * Context switches will not occur while the scheduler is suspended.\n *\n * After calling vTaskSuspendAll () the calling task will continue to execute\n * without risk of being swapped out until a call to xTaskResumeAll () has been\n * made.\n *\n * API functions that have the potential to cause a context switch (for example,\n * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler\n * is suspended.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the kernel\n *       // tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.\n *       xTaskResumeAll ();\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes scheduler activity after it was suspended by a call to\n * vTaskSuspendAll().\n *\n * xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks\n * that were previously suspended by a call to vTaskSuspend().\n *\n * @return If resuming the scheduler caused a context switch then pdTRUE is\n *\t\t  returned, otherwise pdFALSE is returned.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the real\n *       // time kernel tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.  We want to force\n *       // a context switch - but there is no point if resuming the scheduler\n *       // caused a context switch already.\n *       if( !xTaskResumeAll () )\n *       {\n *            taskYIELD ();\n *       }\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nBaseType_t xTaskResumeAll( void ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK UTILITIES\n *----------------------------------------------------------*/\n\n/**\n * Get tick count\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get tick count from ISR\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * This is a version of xTaskGetTickCount() that is safe to be called from an\n * ISR - provided that TickType_t is the natural word size of the\n * microcontroller being used or interrupt nesting is either not supported or\n * not being used.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get current number of tasks\n *\n * @return The number of tasks that the real time kernel is currently managing.\n * This includes all ready, blocked and suspended tasks.  A task that\n * has been deleted but not yet freed by the idle task will also be\n * included in the count.\n *\n * \\ingroup TaskUtils\n */\nUBaseType_t uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get task name\n *\n * @return The text (human readable) name of the task referenced by the handle\n * xTaskToQuery.  A task can query its own name by either passing in its own\n * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be\n * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.\n *\n * \\ingroup TaskUtils\n */\nchar *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Returns the high water mark of the stack associated with xTask.\n *\n * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * High water mark is the minimum free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task started.\n * The smaller the returned number the closer the task has come to overflowing its stack.\n *\n * @param xTask Handle of the task associated with the stack to be checked.\n * Set xTask to NULL to check the stack of the calling task.\n *\n * @return The smallest amount of free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task referenced by\n * xTask was created.\n */\nUBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Returns the start of the stack associated with xTask.\n *\n * INCLUDE_pxTaskGetStackStart must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * Returns the highest stack memory address on architectures where the stack grows down\n * from high memory, and the lowest memory address on architectures where the\n * stack grows up from low memory.\n *\n * @param xTask Handle of the task associated with the stack returned.\n * Set xTask to NULL to return the stack of the calling task.\n *\n * @return A pointer to the start of the stack.\n */\nuint8_t* pxTaskGetStackStart( TaskHandle_t xTask) PRIVILEGED_FUNCTION;\n\n/* When using trace macros it is sometimes necessary to include task.h before\nFreeRTOS.h.  When this is done TaskHookFunction_t will not yet have been defined,\nso the following two prototypes will cause a compilation error.  This can be\nfixed by simply guarding against the inclusion of these two prototypes unless\nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration\nconstant. */\n#ifdef configUSE_APPLICATION_TASK_TAG\n\t#if configUSE_APPLICATION_TASK_TAG == 1\n\t\t/**\n\t\t * Sets pxHookFunction to be the task hook function used by the task xTask.\n\t\t * @param xTask Handle of the task to set the hook function for\n\t\t *              Passing xTask as NULL has the effect of setting the calling\n\t\t *              tasks hook function.\n\t\t * @param pxHookFunction  Pointer to the hook function.\n\t\t */\n\t\tvoid vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction ) PRIVILEGED_FUNCTION;\n\n\t\t/**\n\t\t * Get the hook function assigned to given task.\n\t\t * @param xTask Handle of the task to get the hook function for\n\t\t *              Passing xTask as NULL has the effect of getting the calling\n\t\t *              tasks hook function.\n\t\t * @return The pxHookFunction value assigned to the task xTask.\n\t\t */\n\t\tTaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\t#endif /* configUSE_APPLICATION_TASK_TAG ==1 */\n#endif /* ifdef configUSE_APPLICATION_TASK_TAG */\n#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS \u003e 0 )\n\n\t/**\n\t * Set local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t * @param xIndex The index of the pointer to set, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @param pvValue  Pointer value to set.\n\t */\n\tvoid vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue ) PRIVILEGED_FUNCTION;\n\n\n\t/**\n\t * Get local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToQuery  Task to get thread local storage pointer for\n\t * @param xIndex The index of the pointer to get, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @return  Pointer value\n\t */\n\tvoid *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) PRIVILEGED_FUNCTION;\n\n\t#if ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS )\n\n\t\t/**\n\t\t * Prototype of local storage pointer deletion callback.\n\t\t */\n\t\ttypedef void (*TlsDeleteCallbackFunction_t)( int, void * );\n\n\t\t/**\n\t\t * Set local storage pointer and deletion callback.\n\t\t *\n\t\t * Each task contains an array of pointers that is dimensioned by the\n\t\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t\t * The kernel does not use the pointers itself, so the application writer\n\t\t * can use the pointers for any purpose they wish.\n\t\t *\n\t\t * Local storage pointers set for a task can reference dynamically\n\t\t * allocated resources. This function is similar to\n\t\t * vTaskSetThreadLocalStoragePointer, but provides a way to release\n\t\t * these resources when the task gets deleted. For each pointer,\n\t\t * a callback function can be set. This function will be called\n\t\t * when task is deleted, with the local storage pointer index\n\t\t * and value as arguments.\n\t\t *\n\t\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t\t * @param xIndex The index of the pointer to set, from 0 to\n\t\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t\t * @param pvValue  Pointer value to set.\n\t\t * @param pvDelCallback  Function to call to dispose of the local\n\t\t *                       storage pointer when the task is deleted.\n\t\t */\n\t\tvoid vTaskSetThreadLocalStoragePointerAndDelCallback( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue, TlsDeleteCallbackFunction_t pvDelCallback);\n\t#endif\n\n#endif\n\n/**\n * Calls the hook function associated with xTask. Passing xTask as NULL has\n * the effect of calling the Running tasks (the calling task) hook function.\n *\n * @param xTask  Handle of the task to call the hook for.\n * @param pvParameter  Parameter passed to the hook function for the task to interpret as it\n * wants.  The return value is the value returned by the task hook function\n * registered by the user.\n */\nBaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) PRIVILEGED_FUNCTION;\n\n/**\n * Get the handle of idle task for the current CPU.\n *\n * xTaskGetIdleTaskHandle() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @return The handle of the idle task.  It is not valid to call\n * xTaskGetIdleTaskHandle() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandle( void );\n\n/**\n * Get the handle of idle task for the given CPU.\n *\n * xTaskGetIdleTaskHandleForCPU() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @param cpuid The CPU to get the handle for\n *\n * @return Idle task handle of a given cpu. It is not valid to call\n * xTaskGetIdleTaskHandleForCPU() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandleForCPU( UBaseType_t cpuid );\n\n/**\n * Get the state of tasks in the system.\n *\n * configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for\n * uxTaskGetSystemState() to be available.\n *\n * uxTaskGetSystemState() populates an TaskStatus_t structure for each task in\n * the system.  TaskStatus_t structures contain, among other things, members\n * for the task handle, task name, task priority, task state, and total amount\n * of run time consumed by the task.  See the TaskStatus_t structure\n * definition in this file for the full member list.\n *\n * @note  This function is intended for debugging use only as its use results in\n * the scheduler remaining suspended for an extended period.\n *\n * @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.\n * The array must contain at least one TaskStatus_t structure for each task\n * that is under the control of the RTOS.  The number of tasks under the control\n * of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.\n *\n * @param uxArraySize The size of the array pointed to by the pxTaskStatusArray\n * parameter.  The size is specified as the number of indexes in the array, or\n * the number of TaskStatus_t structures contained in the array, not by the\n * number of bytes in the array.\n *\n * @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in\n * FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the\n * total run time (as defined by the run time stats clock, see\n * http://www.freertos.org/rtos-run-time-stats.html) since the target booted.\n * pulTotalRunTime can be set to NULL to omit the total run time information.\n *\n * @return The number of TaskStatus_t structures that were populated by\n * uxTaskGetSystemState().  This should equal the number returned by the\n * uxTaskGetNumberOfTasks() API function, but will be zero if the value passed\n * in the uxArraySize parameter was too small.\n *\n * Example usage:\n * @code{c}\n * // This example demonstrates how a human readable table of run time stats\n * // information is generated from raw data provided by uxTaskGetSystemState().\n * // The human readable table is written to pcWriteBuffer\n * void vTaskGetRunTimeStats( char *pcWriteBuffer )\n * {\n * TaskStatus_t *pxTaskStatusArray;\n * volatile UBaseType_t uxArraySize, x;\n * uint32_t ulTotalRunTime, ulStatsAsPercentage;\n *\n *  // Make sure the write buffer does not contain a string.\n *  *pcWriteBuffer = 0x00;\n *\n *  // Take a snapshot of the number of tasks in case it changes while this\n *  // function is executing.\n *  uxArraySize = uxTaskGetNumberOfTasks();\n *\n *  // Allocate a TaskStatus_t structure for each task.  An array could be\n *  // allocated statically at compile time.\n *  pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );\n *\n *  if( pxTaskStatusArray != NULL )\n *  {\n *      // Generate raw status information about each task.\n *      uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, \u0026ulTotalRunTime );\n *\n *      // For percentage calculations.\n *      ulTotalRunTime /= 100UL;\n *\n *      // Avoid divide by zero errors.\n *      if( ulTotalRunTime \u003e 0 )\n *      {\n *          // For each populated position in the pxTaskStatusArray array,\n *          // format the raw data as human readable ASCII data\n *          for( x = 0; x \u003c uxArraySize; x++ )\n *          {\n *              // What percentage of the total run time has the task used?\n *              // This will always be rounded down to the nearest integer.\n *              // ulTotalRunTimeDiv100 has already been divided by 100.\n *              ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;\n *\n *              if( ulStatsAsPercentage \u003e 0UL )\n *              {\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );\n *              }\n *              else\n *              {\n *                  // If the percentage is zero here then the task has\n *                  // consumed less than 1% of the total run time.\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t\u003c1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );\n *              }\n *\n *              pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );\n *          }\n *      }\n *\n *      // The array is no longer needed, free the memory it consumes.\n *      vPortFree( pxTaskStatusArray );\n *  }\n * }\n * @endcode\n */\nUBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime );\n\n/**\n * List all the current tasks.\n *\n * configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must\n * both be defined as 1 for this function to be available.  See the\n * configuration section of the FreeRTOS.org website for more information.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Lists all the current tasks, along with their current state and stack\n * usage high water mark.\n *\n * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or\n * suspended ('S').\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskList() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays task\n * names, states and stack usage.\n *\n * vTaskList() has a dependency on the sprintf() C library function that might\n * bloat the code size, use a lot of stack, and provide different results on\n * different platforms.  An alternative, tiny, third party, and limited\n * functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState()\n * directly to get access to raw stats data, rather than indirectly through a\n * call to vTaskList().\n *\n * @param pcWriteBuffer A buffer into which the above mentioned details\n * will be written, in ASCII form.  This buffer is assumed to be large\n * enough to contain the generated report.  Approximately 40 bytes per\n * task should be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskList( char * pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Get the state of running tasks as a string\n *\n * configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS\n * must both be defined as 1 for this function to be available.  The application\n * must also then provide definitions for\n * portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()\n * to configure a peripheral timer/counter and return the timers current count\n * value respectively.  The counter should be at least 10 times the frequency of\n * the tick count.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total\n * accumulated execution time being stored for each task.  The resolution\n * of the accumulated time value depends on the frequency of the timer\n * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.\n * Calling vTaskGetRunTimeStats() writes the total execution time of each\n * task into a buffer, both as an absolute count value and as a percentage\n * of the total system execution time.\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays the\n * amount of time each task has spent in the Running state in both absolute and\n * percentage terms.\n *\n * vTaskGetRunTimeStats() has a dependency on the sprintf() C library function\n * that might bloat the code size, use a lot of stack, and provide different\n * results on different platforms.  An alternative, tiny, third party, and\n * limited functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState() directly\n * to get access to raw stats data, rather than indirectly through a call to\n * vTaskGetRunTimeStats().\n *\n * @param pcWriteBuffer A buffer into which the execution times will be\n * written, in ASCII form.  This buffer is assumed to be large enough to\n * contain the generated report.  Approximately 40 bytes per task should\n * be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskGetRunTimeStats( char *pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Send task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );\n\n/**\n * Send task notification from an ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotify() that can be used from an interrupt service routine\n * (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should\n * be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Wait for task notification\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value\n * will be cleared in the calling task's notification value before the task\n * checks to see if any notifications are pending, and optionally blocks if no\n * notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if\n * limits.h is included) or 0xffffffffUL (if limits.h is not included) will have\n * the effect of resetting the task's notification value to 0.  Setting\n * ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.\n *\n * @param ulBitsToClearOnExit If a notification is pending or received before\n * the calling task exits the xTaskNotifyWait() function then the task's\n * notification value (see the xTaskNotify() API function) is passed out using\n * the pulNotificationValue parameter.  Then any bits that are set in\n * ulBitsToClearOnExit will be cleared in the task's notification value (note\n * *pulNotificationValue is set before any bits are cleared).  Setting\n * ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL\n * (if limits.h is not included) will have the effect of resetting the task's\n * notification value to 0 before the function exits.  Setting\n * ulBitsToClearOnExit to 0 will leave the task's notification value unchanged\n * when the function exits (in which case the value passed out in\n * pulNotificationValue will match the task's notification value).\n *\n * @param pulNotificationValue Used to pass the task's notification value out\n * of the function.  Note the value passed out will not be effected by the\n * clearing of any bits caused by ulBitsToClearOnExit being non-zero.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for a notification to be received, should a notification\n * not already be pending when xTaskNotifyWait() was called.  The task\n * will not consume any processing time while it is in the Blocked state.  This\n * is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be\n * used to convert a time specified in milliseconds to a time specified in\n * ticks.\n *\n * @return If a notification was received (including notifications that were\n * already pending when xTaskNotifyWait was called) then pdPASS is\n * returned.  Otherwise pdFAIL is returned.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );\n\n/**\n * Simplified macro for sending task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * xTaskNotifyGive() is a helper macro intended for use when task notifications\n * are used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given using the xSemaphoreGive() API function,\n * the equivalent action that instead uses a task notification is\n * xTaskNotifyGive().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @return xTaskNotifyGive() is a macro that calls xTaskNotify() with the\n * eAction parameter set to eIncrement - so pdPASS is always returned.\n *\n * \\ingroup TaskNotifications\n */\n#define xTaskNotifyGive( xTaskToNotify ) xTaskNotify( ( xTaskToNotify ), 0, eIncrement )\n\n/**\n * Simplified macro for sending task notification from ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotifyGive() that can be called from an interrupt service\n * routine (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * vTaskNotifyGiveFromISR() is intended for use when task notifications are\n * used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given from an ISR using the\n * xSemaphoreGiveFromISR() API function, the equivalent action that instead uses\n * a task notification is vTaskNotifyGiveFromISR().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch\n * should be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * \\ingroup TaskNotifications\n */\nvoid vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Simplified macro for receiving task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * ulTaskNotifyTake() is intended for use when a task notification is used as a\n * faster and lighter weight binary or counting semaphore alternative.  Actual\n * FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the\n * equivalent action that instead uses a task notification is\n * ulTaskNotifyTake().\n *\n * When a task is using its notification value as a binary or counting semaphore\n * other tasks should send notifications to it using the xTaskNotifyGive()\n * macro, or xTaskNotify() function with the eAction parameter set to\n * eIncrement.\n *\n * ulTaskNotifyTake() can either clear the task's notification value to\n * zero on exit, in which case the notification value acts like a binary\n * semaphore, or decrement the task's notification value on exit, in which case\n * the notification value acts like a counting semaphore.\n *\n * A task can use ulTaskNotifyTake() to [optionally] block to wait for a\n * the task's notification value to be non-zero.  The task does not consume any\n * CPU time while it is in the Blocked state.\n *\n * Where as xTaskNotifyWait() will return when a notification is pending,\n * ulTaskNotifyTake() will return when the task's notification value is\n * not zero.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's\n * notification value is decremented when the function exits.  In this way the\n * notification value acts like a counting semaphore.  If xClearCountOnExit is\n * not pdFALSE then the task's notification value is cleared to zero when the\n * function exits.  In this way the notification value acts like a binary\n * semaphore.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for the task's notification value to be greater than zero,\n * should the count not already be greater than zero when\n * ulTaskNotifyTake() was called.  The task will not consume any processing\n * time while it is in the Blocked state.  This is specified in kernel ticks,\n * the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time\n * specified in milliseconds to a time specified in ticks.\n *\n * @return The task's notification count before it is either cleared to zero or\n * decremented (see the xClearCountOnExit parameter).\n *\n * \\ingroup TaskNotifications\n */\nuint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );\n\n/*-----------------------------------------------------------\n * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES\n *----------------------------------------------------------*/\n/** @cond */\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Called from the real time kernel tick (either preemptive or cooperative),\n * this increments the tick count and checks if any tasks that are blocked\n * for a finite period required removing from a blocked list and placing on\n * a ready list.  If a non-zero value is returned then a context switch is\n * required because either:\n *   + A task was removed from a blocked list because its timeout had expired,\n *     or\n *   + Time slicing is in use and there is a task of equal priority to the\n *     currently running task.\n */\nBaseType_t xTaskIncrementTick( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes the calling task from the ready list and places it both\n * on the list of tasks waiting for a particular event, and the\n * list of delayed tasks.  The task will be removed from both lists\n * and replaced on the ready list should either the event occur (and\n * there be no higher priority tasks waiting on the same event) or\n * the delay period expires.\n *\n * The 'unordered' version replaces the event list item value with the\n * xItemValue value, and inserts the list item at the end of the list.\n *\n * The 'ordered' version uses the existing event list item value (which is the\n * owning tasks priority) to insert the list item into the event list is task\n * priority order.\n *\n * @param pxEventList The list containing tasks that are blocked waiting\n * for the event to occur.\n *\n * @param xItemValue The item value to use for the event list item when the\n * event list is not ordered by task priority.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait\n * for the event to occur.  This is specified in kernel ticks,the constant\n * portTICK_PERIOD_MS can be used to convert kernel ticks into a real time\n * period.\n */\nvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\nvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * This function performs nearly the same function as vTaskPlaceOnEventList().\n * The difference being that this function does not permit tasks to block\n * indefinitely, whereas vTaskPlaceOnEventList() does.\n *\n */\nvoid vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes a task from both the specified event list and the list of blocked\n * tasks, and places it on a ready queue.\n *\n * xTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called\n * if either an event occurs to unblock a task, or the block timeout period\n * expires.\n *\n * xTaskRemoveFromEventList() is used when the event list is in task priority\n * order.  It removes the list item from the head of the event list as that will\n * have the highest priority owning task of all the tasks on the event list.\n * xTaskRemoveFromUnorderedEventList() is used when the event list is not\n * ordered and the event list items hold something other than the owning tasks\n * priority.  In this case the event list item value is updated to the value\n * passed in the xItemValue parameter.\n *\n * @return pdTRUE if the task being removed has a higher priority than the task\n * making the call, otherwise pdFALSE.\n */\nBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) PRIVILEGED_FUNCTION;\nBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Sets the pointer to the current TCB to the TCB of the highest priority task\n * that is ready to run.\n */\nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE.  THEY ARE USED BY\n * THE EVENT BITS MODULE.\n */\nTickType_t uxTaskResetEventItemValue( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Return the handle of the calling task.\n */\nTaskHandle_t xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;\n\n\n\n/*\n * Return the handle of the task running on a certain CPU. Because of\n * the nature of SMP processing, there is no guarantee that this\n * value will still be valid on return and should only be used for\n * debugging purposes.\n */\nTaskHandle_t xTaskGetCurrentTaskHandleForCPU( BaseType_t cpuid );\n\n\n/*\n * Capture the current time status for future reference.\n */\nvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) PRIVILEGED_FUNCTION;\n\n/*\n * Compare the time status now with that previously captured to see if the\n * timeout has expired.\n */\nBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * Shortcut used by the queue implementation to prevent unnecessary call to\n * taskYIELD();\n */\nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Returns the scheduler state as taskSCHEDULER_RUNNING,\n * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.\n */\nBaseType_t xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Raises the priority of the mutex holder to that of the calling task should\n * the mutex holder have a priority less than the calling task.\n */\nvoid vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the priority of a task back to its proper priority in the case that it\n * inherited a higher priority while it was holding a semaphore.\n */\nBaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.\n */\nUBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n\n/*\n * Get the current core affinity of a task\n */\nBaseType_t xTaskGetAffinity( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the uxTaskNumber of the task referenced by the xTask parameter to\n * uxHandle.\n */\nvoid vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) PRIVILEGED_FUNCTION;\n\n/*\n * Only available when configUSE_TICKLESS_IDLE is set to 1.\n * If tickless mode is being used, or a low power mode is implemented, then\n * the tick interrupt will not execute during idle periods.  When this is the\n * case, the tick count value maintained by the scheduler needs to be kept up\n * to date with the actual execution time by being skipped forward by a time\n * equal to the idle period.\n */\nvoid vTaskStepTick( const TickType_t xTicksToJump ) PRIVILEGED_FUNCTION;\n\n/*\n * Only avilable when configUSE_TICKLESS_IDLE is set to 1.\n * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port\n * specific sleep function to determine if it is ok to proceed with the sleep,\n * and if it is ok to proceed, if it is ok to sleep indefinitely.\n *\n * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only\n * called with the scheduler suspended, not from within a critical section.  It\n * is therefore possible for an interrupt to request a context switch between\n * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being\n * entered.  eTaskConfirmSleepModeStatus() should be called from a short\n * critical section between the timer being stopped and the sleep mode being\n * entered to ensure it is ok to proceed into the sleep mode.\n */\neSleepModeStatus eTaskConfirmSleepModeStatus( void ) PRIVILEGED_FUNCTION;\n\n/*\n * For internal use only.  Increment the mutex held count when a mutex is\n * taken and return the handle of the task that has taken the mutex.\n */\nvoid *pvTaskIncrementMutexHeldCount( void );\n\n/*\n * This function fills array with TaskSnapshot_t structures for every task in the system.\n * Used by core dump facility to get snapshots of all tasks in the system.\n * Only available when configENABLE_TASK_SNAPSHOT is set to 1.\n * @param pxTaskSnapshotArray Pointer to array of TaskSnapshot_t structures to store tasks snapshot data.\n * @param uxArraySize Size of tasks snapshots array.\n * @param pxTcbSz Pointer to store size of TCB.\n * @return Number of elements stored in array.\n */\nUBaseType_t uxTaskGetSnapshotAll( TaskSnapshot_t * const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t * const pxTcbSz );\n\n/** @endcond */\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* INC_TASK_H */\n\n\n\n"}},"jsonrpc":"2.0"}Content-Length: 195

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":30}},"id":411,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":411,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":723},"contentChanges":[{"range":{"start":{"line":275,"character":0},"end":{"line":275,"character":0}},"text":"    Serial.println(uxTaskGetStackHighWaterMark(NULL));\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":723}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":19},"end":{"line":275,"character":19}},"context":{"diagnostics":[]}},"id":412,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":412,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":19},"end":{"line":275,"character":19}},"context":{"diagnostics":[]}},"id":413,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":413,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":724},"contentChanges":[{"range":{"start":{"line":274,"character":19},"end":{"line":275,"character":19}},"rangeLength":39,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1596

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":54,"line":274},"start":{"character":17,"line":274}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nEsp_Master.ino.cpp:252:30: note: to match this '{'","range":{"end":{"character":0,"line":322},"start":{"character":0,"line":322}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nEsp_Master.ino.cpp:323:1: error: expected '}'","range":{"end":{"character":30,"line":251},"start":{"character":29,"line":251}},"severity":3}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":724}}
>>>
Content-Length: 449

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":19},"end":{"line":274,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":274,"character":17},"end":{"line":274,"character":54}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":414,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":414,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 324

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":725},"contentChanges":[{"range":{"start":{"line":274,"character":19},"end":{"line":274,"character":19}},"text":"Overflow Stack :\");\n    Serial.println("}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":725}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":19},"end":{"line":275,"character":19}},"context":{"diagnostics":[]}},"id":415,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":415,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":19}},"id":416,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":416,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":19},"end":{"line":274,"character":19}},"context":{"diagnostics":[]}},"id":417,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":417,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":16},"end":{"line":274,"character":16}},"context":{"diagnostics":[]}},"id":418,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":418,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":16}},"id":419,"jsonrpc":"2.0"}
<<<
Content-Length: 849

{"id":419,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":142},"start":{"character":9,"line":142}}},{"kind":1,"range":{"end":{"character":14,"line":144},"start":{"character":9,"line":144}}},{"kind":1,"range":{"end":{"character":14,"line":146},"start":{"character":9,"line":146}}},{"kind":1,"range":{"end":{"character":14,"line":148},"start":{"character":9,"line":148}}},{"kind":1,"range":{"end":{"character":14,"line":150},"start":{"character":9,"line":150}}},{"kind":1,"range":{"end":{"character":14,"line":152},"start":{"character":9,"line":152}}},{"kind":1,"range":{"end":{"character":14,"line":163},"start":{"character":9,"line":163}}},{"kind":1,"range":{"end":{"character":16,"line":253},"start":{"character":11,"line":253}}},{"kind":1,"range":{"end":{"character":16,"line":274},"start":{"character":11,"line":274}}}]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":16},"end":{"line":274,"character":16}},"context":{"diagnostics":[]}},"id":420,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":420,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":726},"contentChanges":[{"range":{"start":{"line":253,"character":24},"end":{"line":253,"character":24}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":726}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":25},"end":{"line":253,"character":25}},"context":{"diagnostics":[]}},"id":421,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":421,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":727},"contentChanges":[{"range":{"start":{"line":253,"character":24},"end":{"line":253,"character":25}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":727}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":253,"character":24},"end":{"line":253,"character":24}},"context":{"diagnostics":[]}},"id":422,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":422,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":25}},"id":423,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"id":423,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `portTICK_PERIOD_MS`  \n\n---\n```cpp\n#define portTICK_PERIOD_MS ((TickType_t)1000 / configTICK_RATE_HZ)\n```"},"range":{"end":{"character":37,"line":272},"start":{"character":19,"line":272}}}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":26}},"id":424,"jsonrpc":"2.0"}
<<<
Content-Length: 128

{"id":424,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":46,"line":275},"start":{"character":19,"line":275}}}]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":26}},"id":425,"jsonrpc":"2.0"}
<<<
Content-Length: 1078

{"id":425,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `uxTaskGetStackHighWaterMark`  \n\n---\n→ `UBaseType_t`  \nParameters:  \n- `TaskHandle_t xTask`\n\nReturns the high water mark of the stack associated with xTask.  \nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for this function to be available.  \nHigh water mark is the minimum free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task started.  \nThe smaller the returned number the closer the task has come to overflowing its stack.  \n@param xTask Handle of the task associated with the stack to be checked.  \nSet xTask to NULL to check the stack of the calling task.  \n@return The smallest amount of free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task referenced by xTask was created.  \n\n---\n```cpp\nUBaseType_t uxTaskGetStackHighWaterMark(TaskHandle_t xTask)\n```"},"range":{"end":{"character":46,"line":275},"start":{"character":19,"line":275}}}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":26},"end":{"line":275,"character":26}},"context":{"diagnostics":[]}},"id":426,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":426,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":26}},"id":427,"jsonrpc":"2.0"}
<<<
Content-Length: 238

{"id":427,"jsonrpc":"2.0","result":[{"range":{"end":{"character":39,"line":1346},"start":{"character":12,"line":1346}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}]}
>>>
Content-Length: 98727

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h","languageId":"cpp","version":1,"text":"/*\n    FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.\n    All rights reserved\n\n    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.\n\n    This file is part of the FreeRTOS distribution.\n\n    FreeRTOS is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License (version 2) as published by the\n    Free Software Foundation \u003e\u003e!AND MODIFIED BY!\u003c\u003c the FreeRTOS exception.\n\n\t***************************************************************************\n    \u003e\u003e!   NOTE: The modification to the GPL is included to allow you to     !\u003c\u003c\n    \u003e\u003e!   distribute a combined work that includes FreeRTOS without being   !\u003c\u003c\n    \u003e\u003e!   obliged to provide the source code for proprietary components     !\u003c\u003c\n    \u003e\u003e!   outside of the FreeRTOS kernel.                                   !\u003c\u003c\n\t***************************************************************************\n\n    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY\n    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n    FOR A PARTICULAR PURPOSE.  Full license text is available on the following\n    link: http://www.freertos.org/a00114.html\n\n    ***************************************************************************\n     *                                                                       *\n     *    FreeRTOS provides completely free yet professionally developed,    *\n     *    robust, strictly quality controlled, supported, and cross          *\n     *    platform software that is more than just the market leader, it     *\n     *    is the industry's de facto standard.                               *\n     *                                                                       *\n     *    Help yourself get started quickly while simultaneously helping     *\n     *    to support the FreeRTOS project by purchasing a FreeRTOS           *\n     *    tutorial book, reference manual, or both:                          *\n     *    http://www.FreeRTOS.org/Documentation                              *\n     *                                                                       *\n    ***************************************************************************\n\n    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading\n\tthe FAQ page \"My application does not run, what could be wrong?\".  Have you\n\tdefined configASSERT()?\n\n\thttp://www.FreeRTOS.org/support - In return for receiving this top quality\n\tembedded software for free we request you assist our global community by\n\tparticipating in the support forum.\n\n\thttp://www.FreeRTOS.org/training - Investing in training allows your team to\n\tbe as productive as possible as early as possible.  Now you can receive\n\tFreeRTOS training directly from Richard Barry, CEO of Real Time Engineers\n\tLtd, and the world's leading authority on the world's leading RTOS.\n\n    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,\n    including FreeRTOS+Trace - an indispensable productivity tool, a DOS\n    compatible FAT file system, and our tiny thread aware UDP/IP stack.\n\n    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.\n    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.\n\n    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High\n    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS\n    licenses offer ticketed support, indemnification and commercial middleware.\n\n    http://www.SafeRTOS.com - High Integrity Systems also provide a safety\n    engineered and independently SIL3 certified version for use in safety and\n    mission critical applications that require provable dependability.\n\n    1 tab == 4 spaces!\n*/\n\n\n#ifndef INC_TASK_H\n#define INC_TASK_H\n\n#ifndef INC_FREERTOS_H\n\t#error \"include FreeRTOS.h must appear in source files before include task.h\"\n#endif\n\n#include \u003climits.h\u003e\n\n#include \"list.h\"\n#include \"portmacro.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*-----------------------------------------------------------\n * MACROS AND DEFINITIONS\n *----------------------------------------------------------*/\n\n#define tskKERNEL_VERSION_NUMBER \"V8.2.0\"\n#define tskKERNEL_VERSION_MAJOR 8\n#define tskKERNEL_VERSION_MINOR 2\n#define tskKERNEL_VERSION_BUILD 0\n\n/**\n * @brief Argument of xTaskCreatePinnedToCore indicating that task has no affinity\n */\n#define tskNO_AFFINITY INT_MAX\n\n/**\n * task. h\n *\n * Type by which tasks are referenced.  For example, a call to xTaskCreate\n * returns (via a pointer parameter) an TaskHandle_t variable that can then\n * be used as a parameter to vTaskDelete to delete the task.\n *\n * \\ingroup Tasks\n */\ntypedef void * TaskHandle_t;\n\n/**\n * Defines the prototype to which the application task hook function must\n * conform.\n */\ntypedef BaseType_t (*TaskHookFunction_t)( void * );\n\n/** Task states returned by eTaskGetState. */\ntypedef enum\n{\n\teRunning = 0,\t/*!\u003c A task is querying the state of itself, so must be running. */\n\teReady,\t\t\t/*!\u003c The task being queried is in a read or pending ready list. */\n\teBlocked,\t\t/*!\u003c The task being queried is in the Blocked state. */\n\teSuspended,\t\t/*!\u003c The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */\n\teDeleted\t\t/*!\u003c The task being queried has been deleted, but its TCB has not yet been freed. */\n} eTaskState;\n\n/** Actions that can be performed when vTaskNotify() is called. */\ntypedef enum\n{\n\teNoAction = 0,\t\t\t\t/*!\u003c Notify the task without updating its notify value. */\n\teSetBits,\t\t\t\t\t/*!\u003c Set bits in the task's notification value. */\n\teIncrement,\t\t\t\t\t/*!\u003c Increment the task's notification value. */\n\teSetValueWithOverwrite,\t\t/*!\u003c Set the task's notification value to a specific value even if the previous value has not yet been read by the task. */\n\teSetValueWithoutOverwrite\t/*!\u003c Set the task's notification value if the previous value has been read by the task. */\n} eNotifyAction;\n\n/** @cond */\n/**\n * Used internally only.\n */\ntypedef struct xTIME_OUT\n{\n\tBaseType_t xOverflowCount;\n\tTickType_t xTimeOnEntering;\n} TimeOut_t;\n\n/**\n * Defines the memory ranges allocated to the task when an MPU is used.\n */\ntypedef struct xMEMORY_REGION\n{\n\tvoid *pvBaseAddress;\n\tuint32_t ulLengthInBytes;\n\tuint32_t ulParameters;\n} MemoryRegion_t;\n\n/**\n * Parameters required to create an MPU protected task.\n */\ntypedef struct xTASK_PARAMETERS\n{\n\tTaskFunction_t pvTaskCode;\n\tconst char * const pcName;\t/*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tuint32_t usStackDepth;\n\tvoid *pvParameters;\n\tUBaseType_t uxPriority;\n\tStackType_t *puxStackBuffer;\n\tMemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];\n} TaskParameters_t;\n/** @endcond */\n\n/**\n *  Used with the uxTaskGetSystemState() function to return the state of each task in the system.\n*/\ntypedef struct xTASK_STATUS\n{\n\tTaskHandle_t xHandle;\t\t\t/*!\u003c The handle of the task to which the rest of the information in the structure relates. */\n\tconst char *pcTaskName;\t\t\t/*!\u003c A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tUBaseType_t xTaskNumber;\t\t/*!\u003c A number unique to the task. */\n\teTaskState eCurrentState;\t\t/*!\u003c The state in which the task existed when the structure was populated. */\n\tUBaseType_t uxCurrentPriority;\t/*!\u003c The priority at which the task was running (may be inherited) when the structure was populated. */\n\tUBaseType_t uxBasePriority;\t\t/*!\u003c The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. */\n\tuint32_t ulRunTimeCounter;\t\t/*!\u003c The total run time allocated to the task so far, as defined by the run time stats clock.  See http://www.freertos.org/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. */\n\tStackType_t *pxStackBase;\t\t/*!\u003c Points to the lowest address of the task's stack area. */\n\tuint32_t usStackHighWaterMark;\t/*!\u003c The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. */\n#if configTASKLIST_INCLUDE_COREID\n\tBaseType_t xCoreID;\t\t\t\t/*!\u003c Core this task is pinned to. This field is present if CONFIG_FREERTOS_VTASKLIST_INCLUDE_COREID is set. */\n#endif\n} TaskStatus_t;\n\n/**\n * Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.\n * We need this struct because TCB_t is defined (hidden) in tasks.c.\n */\ntypedef struct xTASK_SNAPSHOT\n{\n\tvoid        *pxTCB;         /*!\u003c Address of task control block. */\n\tStackType_t *pxTopOfStack;  /*!\u003c Points to the location of the last item placed on the tasks stack. */\n\tStackType_t *pxEndOfStack;  /*!\u003c Points to the end of the stack. pxTopOfStack \u003c pxEndOfStack, stack grows hi2lo\n\t\t\t\t\t\t\t\t\tpxTopOfStack \u003e pxEndOfStack, stack grows lo2hi*/\n} TaskSnapshot_t;\n\n/**\n * Possible return values for eTaskConfirmSleepModeStatus().\n */\ntypedef enum\n{\n\teAbortSleep = 0,\t\t/*!\u003c A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */\n\teStandardSleep,\t\t\t/*!\u003c Enter a sleep mode that will not last any longer than the expected idle time. */\n\teNoTasksWaitingTimeout\t/*!\u003c No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */\n} eSleepModeStatus;\n\n\n/**\n * Defines the priority used by the idle task.  This must not be modified.\n *\n * \\ingroup TaskUtils\n */\n#define tskIDLE_PRIORITY\t\t\t( ( UBaseType_t ) 0U )\n\n/**\n * task. h\n *\n * Macro for forcing a context switch.\n *\n * \\ingroup SchedulerControl\n */\n#define taskYIELD()\t\t\t\t\tportYIELD()\n\n/**\n * task. h\n *\n * Macro to mark the start of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskENTER_CRITICAL(mux)\t\tportENTER_CRITICAL(mux)\n#else\n#define taskENTER_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskENTER_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portENTER_CRITICAL(mux)'\\\"\") portENTER_CRITICAL(mux)\n#endif\n#define taskENTER_CRITICAL_ISR(mux)\t\tportENTER_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to mark the end of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskEXIT_CRITICAL(mux)\t\t\tportEXIT_CRITICAL(mux)\n#else\n#define taskEXIT_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskEXIT_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portEXIT_CRITICAL(mux)'\\\"\") portEXIT_CRITICAL(mux)\n#endif\n#define taskEXIT_CRITICAL_ISR(mux)\t\tportEXIT_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to disable all maskable interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskDISABLE_INTERRUPTS()\tportDISABLE_INTERRUPTS()\n\n/**\n * task. h\n *\n * Macro to enable microcontroller interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskENABLE_INTERRUPTS()\t\tportENABLE_INTERRUPTS()\n\n/* Definitions returned by xTaskGetSchedulerState().  taskSCHEDULER_SUSPENDED is\n0 to generate more optimal code when configASSERT() is defined as the constant\nis used in assert() statements. */\n#define taskSCHEDULER_SUSPENDED\t\t( ( BaseType_t ) 0 )\n#define taskSCHEDULER_NOT_STARTED\t( ( BaseType_t ) 1 )\n#define taskSCHEDULER_RUNNING\t\t( ( BaseType_t ) 2 )\n\n\n/*-----------------------------------------------------------\n * TASK CREATION API\n *----------------------------------------------------------*/\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreate, but allows setting task affinity\n * in SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\tBaseType_t xTaskCreatePinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\tconst uint32_t usStackDepth,\n\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\tTaskHandle_t * const pvCreatedTask,\n\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID);\n\n#endif\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * See xTaskCreateStatic() for a version that does not use any dynamic memory\n * allocation.\n *\n * xTaskCreate() can only be used to create a task that has unrestricted\n * access to the entire microcontroller memory map.  Systems that include MPU\n * support can alternatively create an MPU constrained task using\n * xTaskCreateRestricted().\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *  // Task to be created.\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *   }\n *  }\n *\n *  // Function that creates a task.\n *  void vOtherFunction( void )\n *  {\n *  static uint8_t ucParameterToPass;\n *  TaskHandle_t xHandle = NULL;\n *\n *   // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass\n *   // must exist for the lifetime of the task, so in this case is declared static.  If it was just an\n *   // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time\n *   // the new task attempts to access it.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, \u0026ucParameterToPass, tskIDLE_PRIORITY, \u0026xHandle );\n *      configASSERT( xHandle );\n *\n *   // Use the handle to delete the task.\n *      if( xHandle != NULL )\n *      {\n *       vTaskDelete( xHandle );\n *      }\n *  }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\n\tstatic inline IRAM_ATTR BaseType_t xTaskCreate(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t usStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tTaskHandle_t * const pvCreatedTask)\n\t{\n\t\treturn xTaskCreatePinnedToCore( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pvCreatedTask, tskNO_AFFINITY );\n\t}\n\n#endif\n\n\n\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreateStatic, but allows specifying\n * task affinity in an SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tTaskHandle_t xTaskCreateStaticPinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\t\t\tconst uint32_t ulStackDepth,\n\t\t\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\t\t\tStackType_t * const pxStackBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tStaticTask_t * const pxTaskBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID );\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *\n *     // Dimensions the buffer that the task being created will use as its stack.\n *     // NOTE:  This is the number of bytes the stack will hold, not the number of\n *     // words as found in vanilla FreeRTOS.\n *     #define STACK_SIZE 200\n *\n *     // Structure that will hold the TCB of the task being created.\n *     StaticTask_t xTaskBuffer;\n *\n *     // Buffer that the task being created will use as its stack.  Note this is\n *     // an array of StackType_t variables.  The size of StackType_t is dependent on\n *     // the RTOS port.\n *     StackType_t xStack[ STACK_SIZE ];\n *\n *     // Function that implements the task being created.\n *     void vTaskCode( void * pvParameters )\n *     {\n *         // The parameter value is expected to be 1 as 1 is passed in the\n *         // pvParameters value in the call to xTaskCreateStatic().\n *         configASSERT( ( uint32_t ) pvParameters == 1UL );\n *\n *         for( ;; )\n *         {\n *             // Task code goes here.\n *         }\n *     }\n *\n *     // Function that creates a task.\n *     void vOtherFunction( void )\n *     {\n *         TaskHandle_t xHandle = NULL;\n *\n *         // Create the task without using any dynamic memory allocation.\n *         xHandle = xTaskCreateStatic(\n *                       vTaskCode,       // Function that implements the task.\n *                       \"NAME\",          // Text name for the task.\n *                       STACK_SIZE,      // Stack size in bytes, not words.\n *                       ( void * ) 1,    // Parameter passed into the task.\n *                       tskIDLE_PRIORITY,// Priority at which the task is created.\n *                       xStack,          // Array to use as the task's stack.\n *                       \u0026xTaskBuffer );  // Variable to hold the task's data structure.\n *\n *         // puxStackBuffer and pxTaskBuffer were not NULL, so the task will have\n *         // been created, and xHandle will be the task's handle.  Use the handle\n *         // to suspend the task.\n *         vTaskSuspend( xHandle );\n *     }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tstatic inline IRAM_ATTR TaskHandle_t xTaskCreateStatic(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t ulStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tStackType_t * const pxStackBuffer,\n\t\t\tStaticTask_t * const pxTaskBuffer)\n\t{\n\t\treturn xTaskCreateStaticPinnedToCore( pvTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, pxStackBuffer, pxTaskBuffer, tskNO_AFFINITY );\n\t}\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/** @cond */\n/**\n * xTaskCreateRestricted() should only be used in systems that include an MPU\n * implementation.\n *\n * Create a new task and add it to the list of tasks that are ready to run.\n * The function parameters define the memory regions and associated access\n * permissions allocated to the task.\n *\n * @param pxTaskDefinition Pointer to a structure that contains a member\n * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API\n * documentation) plus an optional stack buffer and the memory region\n * definitions.\n *\n * @param pxCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * Example usage:\n * @code{c}\n * // Create an TaskParameters_t structure that defines the task to be created.\n * static const TaskParameters_t xCheckTaskParameters =\n * {\n * \tvATask,\t\t// pvTaskCode - the function that implements the task.\n * \t\"ATask\",\t// pcName - just a text name for the task to assist debugging.\n * \t100,\t\t// usStackDepth\t- the stack size DEFINED IN BYTES.\n * \tNULL,\t\t// pvParameters - passed into the task function as the function parameters.\n * \t( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.\n * \tcStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.\n *\n * \t// xRegions - Allocate up to three separate memory regions for access by\n * \t// the task, with appropriate access permissions.  Different processors have\n * \t// different memory alignment requirements - refer to the FreeRTOS documentation\n * \t// for full information.\n * \t{\n * \t\t// Base address\t\t\t\t\tLength\tParameters\n *         { cReadWriteArray,\t\t\t\t32,\t\tportMPU_REGION_READ_WRITE },\n *         { cReadOnlyArray,\t\t\t\t32,\t\tportMPU_REGION_READ_ONLY },\n *         { cPrivilegedOnlyAccessArray,\t128,\tportMPU_REGION_PRIVILEGED_READ_WRITE }\n * \t}\n * };\n *\n * int main( void )\n * {\n * TaskHandle_t xHandle;\n *\n * \t// Create a task from the const structure defined above.  The task handle\n * \t// is requested (the second parameter is not NULL) but in this case just for\n * \t// demonstration purposes as its not actually used.\n * \txTaskCreateRestricted( \u0026xRegTest1Parameters, \u0026xHandle );\n *\n * \t// Start the scheduler.\n * \tvTaskStartScheduler();\n *\n * \t// Will only get here if there was insufficient memory to create the idle\n * \t// and/or timer task.\n * \tfor( ;; );\n * }\n * @endcode\n * \\ingroup Tasks\n */\n#if( portUSING_MPU_WRAPPERS == 1 )\n\tBaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask ) PRIVILEGED_FUNCTION;\n#endif\n\n\n/**\n * Memory regions are assigned to a restricted task when the task is created by\n * a call to xTaskCreateRestricted().  These regions can be redefined using\n * vTaskAllocateMPURegions().\n *\n * @param xTask The handle of the task being updated.\n *\n * @param xRegions A pointer to an MemoryRegion_t structure that contains the\n * new memory region definitions.\n *\n * Example usage:\n *\n * @code{c}\n * // Define an array of MemoryRegion_t structures that configures an MPU region\n * // allowing read/write access for 1024 bytes starting at the beginning of the\n * // ucOneKByte array.  The other two of the maximum 3 definable regions are\n * // unused so set to zero.\n * static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =\n * {\n * \t// Base address\t\tLength\t\tParameters\n * \t{ ucOneKByte,\t\t1024,\t\tportMPU_REGION_READ_WRITE },\n * \t{ 0,\t\t\t\t0,\t\t\t0 },\n * \t{ 0,\t\t\t\t0,\t\t\t0 }\n * };\n *\n * void vATask( void *pvParameters )\n * {\n * \t// This task was created such that it has access to certain regions of\n * \t// memory as defined by the MPU configuration.  At some point it is\n * \t// desired that these MPU regions are replaced with that defined in the\n * \t// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()\n * \t// for this purpose.  NULL is used as the task handle to indicate that this\n * \t// function should modify the MPU regions of the calling task.\n * \tvTaskAllocateMPURegions( NULL, xAltRegions );\n *\n * \t// Now the task can continue its function, but from this point on can only\n * \t// access its stack and the ucOneKByte array (unless any other statically\n * \t// defined or shared regions have been declared elsewhere).\n * }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Remove a task from the RTOS real time kernel's management.\n *\n * The task being deleted will be removed from all ready, blocked, suspended\n * and event lists.\n *\n * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @note The idle task is responsible for freeing the kernel allocated\n * memory from tasks that have been deleted.  It is therefore important that\n * the idle task is not starved of microcontroller processing time if your\n * application makes any calls to vTaskDelete ().  Memory allocated by the\n * task code is not automatically freed, and should be freed before the task\n * is deleted.\n *\n * See the demo application file death.c for sample code that utilises\n * vTaskDelete ().\n *\n * @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will\n * cause the calling task to be deleted.\n *\n * Example usage:\n * @code{c}\n *  void vOtherFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n * \t // Create the task, storing the handle.\n * \t xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n * \t // Use the handle to delete the task.\n * \t vTaskDelete( xHandle );\n *  }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskDelete( TaskHandle_t xTaskToDelete ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK CONTROL API\n *----------------------------------------------------------*/\n\n/**\n * Delay a task for a given number of ticks.\n *\n * The actual time that the task remains blocked depends on the tick rate.\n * The constant portTICK_PERIOD_MS can be used to calculate real time from\n * the tick rate - with the resolution of one tick period.\n *\n * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * vTaskDelay() specifies a time at which the task wishes to unblock relative to\n * the time at which vTaskDelay() is called.  For example, specifying a block\n * period of 100 ticks will cause the task to unblock 100 ticks after\n * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method\n * of controlling the frequency of a periodic task as the path taken through the\n * code, as well as other task and interrupt activity, will effect the frequency\n * at which vTaskDelay() gets called and therefore the time at which the task\n * next executes.  See vTaskDelayUntil() for an alternative API function designed\n * to facilitate fixed frequency execution.  It does this by specifying an\n * absolute time (rather than a relative time) at which the calling task should\n * unblock.\n *\n * @param xTicksToDelay The amount of time, in tick periods, that\n * the calling task should block.\n *\n * Example usage:\n * @code{c}\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  // Block for 500ms.\n *  const TickType_t xDelay = 500 / portTICK_PERIOD_MS;\n *\n * \t for( ;; )\n * \t {\n * \t\t // Simply toggle the LED every 500ms, blocking between each toggle.\n * \t\t vToggleLED();\n * \t\t vTaskDelay( xDelay );\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelay( const TickType_t xTicksToDelay ) PRIVILEGED_FUNCTION;\n\n/**\n * Delay a task until a specified time.\n *\n * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * This function can be used by periodic tasks to ensure a constant execution frequency.\n *\n * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will\n * cause a task to block for the specified number of ticks from the time vTaskDelay () is\n * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed\n * execution frequency as the time between a task starting to execute and that task\n * calling vTaskDelay () may not be fixed [the task may take a different path though the\n * code between calls, or may get interrupted or preempted a different number of times\n * each time it executes].\n *\n * Whereas vTaskDelay () specifies a wake time relative to the time at which the function\n * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to\n * unblock.\n *\n * The constant portTICK_PERIOD_MS can be used to calculate real time from the tick\n * rate - with the resolution of one tick period.\n *\n * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the\n * task was last unblocked.  The variable must be initialised with the current time\n * prior to its first use (see the example below).  Following this the variable is\n * automatically updated within vTaskDelayUntil ().\n *\n * @param xTimeIncrement The cycle time period.  The task will be unblocked at\n * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the\n * same xTimeIncrement parameter value will cause the task to execute with\n * a fixed interface period.\n *\n * Example usage:\n * @code{c}\n *  // Perform an action every 10 ticks.\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  TickType_t xLastWakeTime;\n *  const TickType_t xFrequency = 10;\n *\n * \t // Initialise the xLastWakeTime variable with the current time.\n * \t xLastWakeTime = xTaskGetTickCount ();\n * \t for( ;; )\n * \t {\n * \t\t // Wait for the next cycle.\n * \t\t vTaskDelayUntil( \u0026xLastWakeTime, xFrequency );\n *\n * \t\t // Perform action here.\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the priority of any task.\n *\n * INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to obtain the priority of the created task.\n *   // It was created with tskIDLE_PRIORITY, but may have changed\n *   // it itself.\n *   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )\n *   {\n *       // The task has changed it's priority.\n *   }\n *\n *   // ...\n *\n *   // Is our priority higher than the created task?\n *   if( uxTaskPriorityGet( xHandle ) \u003c uxTaskPriorityGet( NULL ) )\n *   {\n *       // Our priority (obtained using NULL handle) is higher.\n *   }\n * }\n * @endcode\n * \\ingroup TaskCtrl\n */\nUBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * A version of uxTaskPriorityGet() that can be used from an ISR.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n */\nUBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the state of any task.\n *\n * States are encoded by the eTaskState enumerated type.\n *\n * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.\n *\n * @return The state of xTask at the time the function was called.  Note the\n * state of the task might change between the function being called, and the\n * functions return value being tested by the calling task.\n */\neTaskState eTaskGetState( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Set the priority of any task.\n *\n * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A context switch will occur before the function returns if the priority\n * being set is higher than the currently executing task.\n *\n * @param xTask Handle to the task for which the priority is being set.\n * Passing a NULL handle results in the priority of the calling task being set.\n *\n * @param uxNewPriority The priority to which the task will be set.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to raise the priority of the created task.\n *   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );\n *\n *   // ...\n *\n *   // Use a NULL handle to raise our priority to the same value.\n *   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) PRIVILEGED_FUNCTION;\n\n/**\n * Suspend a task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * When suspended, a task will never get any microcontroller processing time,\n * no matter what its priority.\n *\n * Calls to vTaskSuspend are not accumulative -\n * i.e. calling vTaskSuspend () twice on the same task still only requires one\n * call to vTaskResume () to ready the suspended task.\n *\n * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL\n * handle will cause the calling task to be suspended.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Suspend ourselves.\n *   vTaskSuspend( NULL );\n *\n *   // We cannot get here unless another task calls vTaskResume\n *   // with our handle as the parameter.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskSuspend( TaskHandle_t xTaskToSuspend ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes a suspended task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * vTaskResume ().\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Resume the suspended task ourselves.\n *   vTaskResume( xHandle );\n *\n *   // The created task will once again get microcontroller processing\n *   // time in accordance with its priority within the system.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskResume( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/**\n * An implementation of vTaskResume() that can be called from within an ISR.\n *\n * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be\n * available.  See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * xTaskResumeFromISR ().\n *\n * xTaskResumeFromISR() should not be used to synchronise a task with an\n * interrupt if there is a chance that the interrupt could arrive prior to the\n * task being suspended - as this can lead to interrupts being missed. Use of a\n * semaphore as a synchronisation mechanism would avoid this eventuality.\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * @return pdTRUE if resuming the task should result in a context switch,\n * otherwise pdFALSE. This is used by the ISR to determine if a context switch\n * may be required following the ISR.\n *\n * \\ingroup TaskCtrl\n */\nBaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * SCHEDULER CONTROL\n *----------------------------------------------------------*/\n/** @cond */\n/**\n * Starts the real time kernel tick processing.\n *\n * After calling the kernel has control over which tasks are executed and when.\n *\n * See the demo application file main.c for an example of creating\n * tasks and starting the kernel.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will not get here unless a task calls vTaskEndScheduler ()\n *  }\n * @endcode\n *\n * \\ingroup SchedulerControl\n */\nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Stops the real time kernel tick.\n *\n * @note At the time of writing only the x86 real mode port, which runs on a PC\n * in place of DOS, implements this function.\n *\n * All created tasks will be automatically deleted and multitasking\n * (either preemptive or cooperative) will stop.\n * Execution then resumes from the point where vTaskStartScheduler ()\n * was called, as if vTaskStartScheduler () had just returned.\n *\n * See the demo application file main. c in the demo/PC directory for an\n * example that uses vTaskEndScheduler ().\n *\n * vTaskEndScheduler () requires an exit function to be defined within the\n * portable layer (see vPortEndScheduler () in port. c for the PC port).  This\n * performs hardware specific operations such as stopping the kernel tick.\n *\n * vTaskEndScheduler () will cause all of the resources allocated by the\n * kernel to be freed - but will not free resources allocated by application\n * tasks.\n *\n * Example usage:\n * @code{c}\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // At some point we want to end the real time kernel processing\n *       // so call ...\n *       vTaskEndScheduler ();\n *   }\n *  }\n *\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will only get here when the vTaskCode () task has called\n *   // vTaskEndScheduler ().  When we get here we are back to single task\n *   // execution.\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Suspends the scheduler without disabling interrupts.\n *\n * Context switches will not occur while the scheduler is suspended.\n *\n * After calling vTaskSuspendAll () the calling task will continue to execute\n * without risk of being swapped out until a call to xTaskResumeAll () has been\n * made.\n *\n * API functions that have the potential to cause a context switch (for example,\n * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler\n * is suspended.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the kernel\n *       // tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.\n *       xTaskResumeAll ();\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes scheduler activity after it was suspended by a call to\n * vTaskSuspendAll().\n *\n * xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks\n * that were previously suspended by a call to vTaskSuspend().\n *\n * @return If resuming the scheduler caused a context switch then pdTRUE is\n *\t\t  returned, otherwise pdFALSE is returned.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the real\n *       // time kernel tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.  We want to force\n *       // a context switch - but there is no point if resuming the scheduler\n *       // caused a context switch already.\n *       if( !xTaskResumeAll () )\n *       {\n *            taskYIELD ();\n *       }\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nBaseType_t xTaskResumeAll( void ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK UTILITIES\n *----------------------------------------------------------*/\n\n/**\n * Get tick count\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get tick count from ISR\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * This is a version of xTaskGetTickCount() that is safe to be called from an\n * ISR - provided that TickType_t is the natural word size of the\n * microcontroller being used or interrupt nesting is either not supported or\n * not being used.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get current number of tasks\n *\n * @return The number of tasks that the real time kernel is currently managing.\n * This includes all ready, blocked and suspended tasks.  A task that\n * has been deleted but not yet freed by the idle task will also be\n * included in the count.\n *\n * \\ingroup TaskUtils\n */\nUBaseType_t uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get task name\n *\n * @return The text (human readable) name of the task referenced by the handle\n * xTaskToQuery.  A task can query its own name by either passing in its own\n * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be\n * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.\n *\n * \\ingroup TaskUtils\n */\nchar *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Returns the high water mark of the stack associated with xTask.\n *\n * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * High water mark is the minimum free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task started.\n * The smaller the returned number the closer the task has come to overflowing its stack.\n *\n * @param xTask Handle of the task associated with the stack to be checked.\n * Set xTask to NULL to check the stack of the calling task.\n *\n * @return The smallest amount of free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task referenced by\n * xTask was created.\n */\nUBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Returns the start of the stack associated with xTask.\n *\n * INCLUDE_pxTaskGetStackStart must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * Returns the highest stack memory address on architectures where the stack grows down\n * from high memory, and the lowest memory address on architectures where the\n * stack grows up from low memory.\n *\n * @param xTask Handle of the task associated with the stack returned.\n * Set xTask to NULL to return the stack of the calling task.\n *\n * @return A pointer to the start of the stack.\n */\nuint8_t* pxTaskGetStackStart( TaskHandle_t xTask) PRIVILEGED_FUNCTION;\n\n/* When using trace macros it is sometimes necessary to include task.h before\nFreeRTOS.h.  When this is done TaskHookFunction_t will not yet have been defined,\nso the following two prototypes will cause a compilation error.  This can be\nfixed by simply guarding against the inclusion of these two prototypes unless\nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration\nconstant. */\n#ifdef configUSE_APPLICATION_TASK_TAG\n\t#if configUSE_APPLICATION_TASK_TAG == 1\n\t\t/**\n\t\t * Sets pxHookFunction to be the task hook function used by the task xTask.\n\t\t * @param xTask Handle of the task to set the hook function for\n\t\t *              Passing xTask as NULL has the effect of setting the calling\n\t\t *              tasks hook function.\n\t\t * @param pxHookFunction  Pointer to the hook function.\n\t\t */\n\t\tvoid vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction ) PRIVILEGED_FUNCTION;\n\n\t\t/**\n\t\t * Get the hook function assigned to given task.\n\t\t * @param xTask Handle of the task to get the hook function for\n\t\t *              Passing xTask as NULL has the effect of getting the calling\n\t\t *              tasks hook function.\n\t\t * @return The pxHookFunction value assigned to the task xTask.\n\t\t */\n\t\tTaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\t#endif /* configUSE_APPLICATION_TASK_TAG ==1 */\n#endif /* ifdef configUSE_APPLICATION_TASK_TAG */\n#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS \u003e 0 )\n\n\t/**\n\t * Set local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t * @param xIndex The index of the pointer to set, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @param pvValue  Pointer value to set.\n\t */\n\tvoid vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue ) PRIVILEGED_FUNCTION;\n\n\n\t/**\n\t * Get local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToQuery  Task to get thread local storage pointer for\n\t * @param xIndex The index of the pointer to get, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @return  Pointer value\n\t */\n\tvoid *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) PRIVILEGED_FUNCTION;\n\n\t#if ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS )\n\n\t\t/**\n\t\t * Prototype of local storage pointer deletion callback.\n\t\t */\n\t\ttypedef void (*TlsDeleteCallbackFunction_t)( int, void * );\n\n\t\t/**\n\t\t * Set local storage pointer and deletion callback.\n\t\t *\n\t\t * Each task contains an array of pointers that is dimensioned by the\n\t\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t\t * The kernel does not use the pointers itself, so the application writer\n\t\t * can use the pointers for any purpose they wish.\n\t\t *\n\t\t * Local storage pointers set for a task can reference dynamically\n\t\t * allocated resources. This function is similar to\n\t\t * vTaskSetThreadLocalStoragePointer, but provides a way to release\n\t\t * these resources when the task gets deleted. For each pointer,\n\t\t * a callback function can be set. This function will be called\n\t\t * when task is deleted, with the local storage pointer index\n\t\t * and value as arguments.\n\t\t *\n\t\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t\t * @param xIndex The index of the pointer to set, from 0 to\n\t\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t\t * @param pvValue  Pointer value to set.\n\t\t * @param pvDelCallback  Function to call to dispose of the local\n\t\t *                       storage pointer when the task is deleted.\n\t\t */\n\t\tvoid vTaskSetThreadLocalStoragePointerAndDelCallback( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue, TlsDeleteCallbackFunction_t pvDelCallback);\n\t#endif\n\n#endif\n\n/**\n * Calls the hook function associated with xTask. Passing xTask as NULL has\n * the effect of calling the Running tasks (the calling task) hook function.\n *\n * @param xTask  Handle of the task to call the hook for.\n * @param pvParameter  Parameter passed to the hook function for the task to interpret as it\n * wants.  The return value is the value returned by the task hook function\n * registered by the user.\n */\nBaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) PRIVILEGED_FUNCTION;\n\n/**\n * Get the handle of idle task for the current CPU.\n *\n * xTaskGetIdleTaskHandle() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @return The handle of the idle task.  It is not valid to call\n * xTaskGetIdleTaskHandle() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandle( void );\n\n/**\n * Get the handle of idle task for the given CPU.\n *\n * xTaskGetIdleTaskHandleForCPU() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @param cpuid The CPU to get the handle for\n *\n * @return Idle task handle of a given cpu. It is not valid to call\n * xTaskGetIdleTaskHandleForCPU() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandleForCPU( UBaseType_t cpuid );\n\n/**\n * Get the state of tasks in the system.\n *\n * configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for\n * uxTaskGetSystemState() to be available.\n *\n * uxTaskGetSystemState() populates an TaskStatus_t structure for each task in\n * the system.  TaskStatus_t structures contain, among other things, members\n * for the task handle, task name, task priority, task state, and total amount\n * of run time consumed by the task.  See the TaskStatus_t structure\n * definition in this file for the full member list.\n *\n * @note  This function is intended for debugging use only as its use results in\n * the scheduler remaining suspended for an extended period.\n *\n * @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.\n * The array must contain at least one TaskStatus_t structure for each task\n * that is under the control of the RTOS.  The number of tasks under the control\n * of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.\n *\n * @param uxArraySize The size of the array pointed to by the pxTaskStatusArray\n * parameter.  The size is specified as the number of indexes in the array, or\n * the number of TaskStatus_t structures contained in the array, not by the\n * number of bytes in the array.\n *\n * @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in\n * FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the\n * total run time (as defined by the run time stats clock, see\n * http://www.freertos.org/rtos-run-time-stats.html) since the target booted.\n * pulTotalRunTime can be set to NULL to omit the total run time information.\n *\n * @return The number of TaskStatus_t structures that were populated by\n * uxTaskGetSystemState().  This should equal the number returned by the\n * uxTaskGetNumberOfTasks() API function, but will be zero if the value passed\n * in the uxArraySize parameter was too small.\n *\n * Example usage:\n * @code{c}\n * // This example demonstrates how a human readable table of run time stats\n * // information is generated from raw data provided by uxTaskGetSystemState().\n * // The human readable table is written to pcWriteBuffer\n * void vTaskGetRunTimeStats( char *pcWriteBuffer )\n * {\n * TaskStatus_t *pxTaskStatusArray;\n * volatile UBaseType_t uxArraySize, x;\n * uint32_t ulTotalRunTime, ulStatsAsPercentage;\n *\n *  // Make sure the write buffer does not contain a string.\n *  *pcWriteBuffer = 0x00;\n *\n *  // Take a snapshot of the number of tasks in case it changes while this\n *  // function is executing.\n *  uxArraySize = uxTaskGetNumberOfTasks();\n *\n *  // Allocate a TaskStatus_t structure for each task.  An array could be\n *  // allocated statically at compile time.\n *  pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );\n *\n *  if( pxTaskStatusArray != NULL )\n *  {\n *      // Generate raw status information about each task.\n *      uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, \u0026ulTotalRunTime );\n *\n *      // For percentage calculations.\n *      ulTotalRunTime /= 100UL;\n *\n *      // Avoid divide by zero errors.\n *      if( ulTotalRunTime \u003e 0 )\n *      {\n *          // For each populated position in the pxTaskStatusArray array,\n *          // format the raw data as human readable ASCII data\n *          for( x = 0; x \u003c uxArraySize; x++ )\n *          {\n *              // What percentage of the total run time has the task used?\n *              // This will always be rounded down to the nearest integer.\n *              // ulTotalRunTimeDiv100 has already been divided by 100.\n *              ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;\n *\n *              if( ulStatsAsPercentage \u003e 0UL )\n *              {\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );\n *              }\n *              else\n *              {\n *                  // If the percentage is zero here then the task has\n *                  // consumed less than 1% of the total run time.\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t\u003c1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );\n *              }\n *\n *              pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );\n *          }\n *      }\n *\n *      // The array is no longer needed, free the memory it consumes.\n *      vPortFree( pxTaskStatusArray );\n *  }\n * }\n * @endcode\n */\nUBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime );\n\n/**\n * List all the current tasks.\n *\n * configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must\n * both be defined as 1 for this function to be available.  See the\n * configuration section of the FreeRTOS.org website for more information.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Lists all the current tasks, along with their current state and stack\n * usage high water mark.\n *\n * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or\n * suspended ('S').\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskList() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays task\n * names, states and stack usage.\n *\n * vTaskList() has a dependency on the sprintf() C library function that might\n * bloat the code size, use a lot of stack, and provide different results on\n * different platforms.  An alternative, tiny, third party, and limited\n * functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState()\n * directly to get access to raw stats data, rather than indirectly through a\n * call to vTaskList().\n *\n * @param pcWriteBuffer A buffer into which the above mentioned details\n * will be written, in ASCII form.  This buffer is assumed to be large\n * enough to contain the generated report.  Approximately 40 bytes per\n * task should be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskList( char * pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Get the state of running tasks as a string\n *\n * configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS\n * must both be defined as 1 for this function to be available.  The application\n * must also then provide definitions for\n * portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()\n * to configure a peripheral timer/counter and return the timers current count\n * value respectively.  The counter should be at least 10 times the frequency of\n * the tick count.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total\n * accumulated execution time being stored for each task.  The resolution\n * of the accumulated time value depends on the frequency of the timer\n * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.\n * Calling vTaskGetRunTimeStats() writes the total execution time of each\n * task into a buffer, both as an absolute count value and as a percentage\n * of the total system execution time.\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays the\n * amount of time each task has spent in the Running state in both absolute and\n * percentage terms.\n *\n * vTaskGetRunTimeStats() has a dependency on the sprintf() C library function\n * that might bloat the code size, use a lot of stack, and provide different\n * results on different platforms.  An alternative, tiny, third party, and\n * limited functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState() directly\n * to get access to raw stats data, rather than indirectly through a call to\n * vTaskGetRunTimeStats().\n *\n * @param pcWriteBuffer A buffer into which the execution times will be\n * written, in ASCII form.  This buffer is assumed to be large enough to\n * contain the generated report.  Approximately 40 bytes per task should\n * be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskGetRunTimeStats( char *pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Send task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );\n\n/**\n * Send task notification from an ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotify() that can be used from an interrupt service routine\n * (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should\n * be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Wait for task notification\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value\n * will be cleared in the calling task's notification value before the task\n * checks to see if any notifications are pending, and optionally blocks if no\n * notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if\n * limits.h is included) or 0xffffffffUL (if limits.h is not included) will have\n * the effect of resetting the task's notification value to 0.  Setting\n * ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.\n *\n * @param ulBitsToClearOnExit If a notification is pending or received before\n * the calling task exits the xTaskNotifyWait() function then the task's\n * notification value (see the xTaskNotify() API function) is passed out using\n * the pulNotificationValue parameter.  Then any bits that are set in\n * ulBitsToClearOnExit will be cleared in the task's notification value (note\n * *pulNotificationValue is set before any bits are cleared).  Setting\n * ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL\n * (if limits.h is not included) will have the effect of resetting the task's\n * notification value to 0 before the function exits.  Setting\n * ulBitsToClearOnExit to 0 will leave the task's notification value unchanged\n * when the function exits (in which case the value passed out in\n * pulNotificationValue will match the task's notification value).\n *\n * @param pulNotificationValue Used to pass the task's notification value out\n * of the function.  Note the value passed out will not be effected by the\n * clearing of any bits caused by ulBitsToClearOnExit being non-zero.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for a notification to be received, should a notification\n * not already be pending when xTaskNotifyWait() was called.  The task\n * will not consume any processing time while it is in the Blocked state.  This\n * is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be\n * used to convert a time specified in milliseconds to a time specified in\n * ticks.\n *\n * @return If a notification was received (including notifications that were\n * already pending when xTaskNotifyWait was called) then pdPASS is\n * returned.  Otherwise pdFAIL is returned.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );\n\n/**\n * Simplified macro for sending task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * xTaskNotifyGive() is a helper macro intended for use when task notifications\n * are used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given using the xSemaphoreGive() API function,\n * the equivalent action that instead uses a task notification is\n * xTaskNotifyGive().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @return xTaskNotifyGive() is a macro that calls xTaskNotify() with the\n * eAction parameter set to eIncrement - so pdPASS is always returned.\n *\n * \\ingroup TaskNotifications\n */\n#define xTaskNotifyGive( xTaskToNotify ) xTaskNotify( ( xTaskToNotify ), 0, eIncrement )\n\n/**\n * Simplified macro for sending task notification from ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotifyGive() that can be called from an interrupt service\n * routine (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * vTaskNotifyGiveFromISR() is intended for use when task notifications are\n * used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given from an ISR using the\n * xSemaphoreGiveFromISR() API function, the equivalent action that instead uses\n * a task notification is vTaskNotifyGiveFromISR().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch\n * should be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * \\ingroup TaskNotifications\n */\nvoid vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Simplified macro for receiving task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * ulTaskNotifyTake() is intended for use when a task notification is used as a\n * faster and lighter weight binary or counting semaphore alternative.  Actual\n * FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the\n * equivalent action that instead uses a task notification is\n * ulTaskNotifyTake().\n *\n * When a task is using its notification value as a binary or counting semaphore\n * other tasks should send notifications to it using the xTaskNotifyGive()\n * macro, or xTaskNotify() function with the eAction parameter set to\n * eIncrement.\n *\n * ulTaskNotifyTake() can either clear the task's notification value to\n * zero on exit, in which case the notification value acts like a binary\n * semaphore, or decrement the task's notification value on exit, in which case\n * the notification value acts like a counting semaphore.\n *\n * A task can use ulTaskNotifyTake() to [optionally] block to wait for a\n * the task's notification value to be non-zero.  The task does not consume any\n * CPU time while it is in the Blocked state.\n *\n * Where as xTaskNotifyWait() will return when a notification is pending,\n * ulTaskNotifyTake() will return when the task's notification value is\n * not zero.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's\n * notification value is decremented when the function exits.  In this way the\n * notification value acts like a counting semaphore.  If xClearCountOnExit is\n * not pdFALSE then the task's notification value is cleared to zero when the\n * function exits.  In this way the notification value acts like a binary\n * semaphore.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for the task's notification value to be greater than zero,\n * should the count not already be greater than zero when\n * ulTaskNotifyTake() was called.  The task will not consume any processing\n * time while it is in the Blocked state.  This is specified in kernel ticks,\n * the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time\n * specified in milliseconds to a time specified in ticks.\n *\n * @return The task's notification count before it is either cleared to zero or\n * decremented (see the xClearCountOnExit parameter).\n *\n * \\ingroup TaskNotifications\n */\nuint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );\n\n/*-----------------------------------------------------------\n * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES\n *----------------------------------------------------------*/\n/** @cond */\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Called from the real time kernel tick (either preemptive or cooperative),\n * this increments the tick count and checks if any tasks that are blocked\n * for a finite period required removing from a blocked list and placing on\n * a ready list.  If a non-zero value is returned then a context switch is\n * required because either:\n *   + A task was removed from a blocked list because its timeout had expired,\n *     or\n *   + Time slicing is in use and there is a task of equal priority to the\n *     currently running task.\n */\nBaseType_t xTaskIncrementTick( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes the calling task from the ready list and places it both\n * on the list of tasks waiting for a particular event, and the\n * list of delayed tasks.  The task will be removed from both lists\n * and replaced on the ready list should either the event occur (and\n * there be no higher priority tasks waiting on the same event) or\n * the delay period expires.\n *\n * The 'unordered' version replaces the event list item value with the\n * xItemValue value, and inserts the list item at the end of the list.\n *\n * The 'ordered' version uses the existing event list item value (which is the\n * owning tasks priority) to insert the list item into the event list is task\n * priority order.\n *\n * @param pxEventList The list containing tasks that are blocked waiting\n * for the event to occur.\n *\n * @param xItemValue The item value to use for the event list item when the\n * event list is not ordered by task priority.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait\n * for the event to occur.  This is specified in kernel ticks,the constant\n * portTICK_PERIOD_MS can be used to convert kernel ticks into a real time\n * period.\n */\nvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\nvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * This function performs nearly the same function as vTaskPlaceOnEventList().\n * The difference being that this function does not permit tasks to block\n * indefinitely, whereas vTaskPlaceOnEventList() does.\n *\n */\nvoid vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes a task from both the specified event list and the list of blocked\n * tasks, and places it on a ready queue.\n *\n * xTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called\n * if either an event occurs to unblock a task, or the block timeout period\n * expires.\n *\n * xTaskRemoveFromEventList() is used when the event list is in task priority\n * order.  It removes the list item from the head of the event list as that will\n * have the highest priority owning task of all the tasks on the event list.\n * xTaskRemoveFromUnorderedEventList() is used when the event list is not\n * ordered and the event list items hold something other than the owning tasks\n * priority.  In this case the event list item value is updated to the value\n * passed in the xItemValue parameter.\n *\n * @return pdTRUE if the task being removed has a higher priority than the task\n * making the call, otherwise pdFALSE.\n */\nBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) PRIVILEGED_FUNCTION;\nBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Sets the pointer to the current TCB to the TCB of the highest priority task\n * that is ready to run.\n */\nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE.  THEY ARE USED BY\n * THE EVENT BITS MODULE.\n */\nTickType_t uxTaskResetEventItemValue( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Return the handle of the calling task.\n */\nTaskHandle_t xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;\n\n\n\n/*\n * Return the handle of the task running on a certain CPU. Because of\n * the nature of SMP processing, there is no guarantee that this\n * value will still be valid on return and should only be used for\n * debugging purposes.\n */\nTaskHandle_t xTaskGetCurrentTaskHandleForCPU( BaseType_t cpuid );\n\n\n/*\n * Capture the current time status for future reference.\n */\nvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) PRIVILEGED_FUNCTION;\n\n/*\n * Compare the time status now with that previously captured to see if the\n * timeout has expired.\n */\nBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * Shortcut used by the queue implementation to prevent unnecessary call to\n * taskYIELD();\n */\nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Returns the scheduler state as taskSCHEDULER_RUNNING,\n * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.\n */\nBaseType_t xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Raises the priority of the mutex holder to that of the calling task should\n * the mutex holder have a priority less than the calling task.\n */\nvoid vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the priority of a task back to its proper priority in the case that it\n * inherited a higher priority while it was holding a semaphore.\n */\nBaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.\n */\nUBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n\n/*\n * Get the current core affinity of a task\n */\nBaseType_t xTaskGetAffinity( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the uxTaskNumber of the task referenced by the xTask parameter to\n * uxHandle.\n */\nvoid vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) PRIVILEGED_FUNCTION;\n\n/*\n * Only available when configUSE_TICKLESS_IDLE is set to 1.\n * If tickless mode is being used, or a low power mode is implemented, then\n * the tick interrupt will not execute during idle periods.  When this is the\n * case, the tick count value maintained by the scheduler needs to be kept up\n * to date with the actual execution time by being skipped forward by a time\n * equal to the idle period.\n */\nvoid vTaskStepTick( const TickType_t xTicksToJump ) PRIVILEGED_FUNCTION;\n\n/*\n * Only avilable when configUSE_TICKLESS_IDLE is set to 1.\n * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port\n * specific sleep function to determine if it is ok to proceed with the sleep,\n * and if it is ok to proceed, if it is ok to sleep indefinitely.\n *\n * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only\n * called with the scheduler suspended, not from within a critical section.  It\n * is therefore possible for an interrupt to request a context switch between\n * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being\n * entered.  eTaskConfirmSleepModeStatus() should be called from a short\n * critical section between the timer being stopped and the sleep mode being\n * entered to ensure it is ok to proceed into the sleep mode.\n */\neSleepModeStatus eTaskConfirmSleepModeStatus( void ) PRIVILEGED_FUNCTION;\n\n/*\n * For internal use only.  Increment the mutex held count when a mutex is\n * taken and return the handle of the task that has taken the mutex.\n */\nvoid *pvTaskIncrementMutexHeldCount( void );\n\n/*\n * This function fills array with TaskSnapshot_t structures for every task in the system.\n * Used by core dump facility to get snapshots of all tasks in the system.\n * Only available when configENABLE_TASK_SNAPSHOT is set to 1.\n * @param pxTaskSnapshotArray Pointer to array of TaskSnapshot_t structures to store tasks snapshot data.\n * @param uxArraySize Size of tasks snapshots array.\n * @param pxTcbSz Pointer to store size of TCB.\n * @return Number of elements stored in array.\n */\nUBaseType_t uxTaskGetSnapshotAll( TaskSnapshot_t * const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t * const pxTcbSz );\n\n/** @endcond */\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* INC_TASK_H */\n\n\n\n"}},"jsonrpc":"2.0"}Content-Length: 195

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":26}},"id":428,"jsonrpc":"2.0"}
<<<
Content-Length: 1078

{"id":428,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `uxTaskGetStackHighWaterMark`  \n\n---\n→ `UBaseType_t`  \nParameters:  \n- `TaskHandle_t xTask`\n\nReturns the high water mark of the stack associated with xTask.  \nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for this function to be available.  \nHigh water mark is the minimum free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task started.  \nThe smaller the returned number the closer the task has come to overflowing its stack.  \n@param xTask Handle of the task associated with the stack to be checked.  \nSet xTask to NULL to check the stack of the calling task.  \n@return The smallest amount of free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task referenced by xTask was created.  \n\n---\n```cpp\nUBaseType_t uxTaskGetStackHighWaterMark(TaskHandle_t xTask)\n```"},"range":{"end":{"character":46,"line":275},"start":{"character":19,"line":275}}}}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":16}},"id":429,"jsonrpc":"2.0"}
<<<
Content-Length: 213

{"id":429,"jsonrpc":"2.0","result":[{"range":{"end":{"character":19,"line":86},"start":{"character":14,"line":86}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}]}
>>>
Content-Length: 8545

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 23 November 2006 by David A. Mellis\n Modified December 2014 by Ivan Grokhotkov\n Modified May 2015 by Michael C. Miller - ESP31B progmem support\n */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n#include \"Arduino.h\"\n\n#include \"Print.h\"\nextern \"C\" {\n    #include \"time.h\"\n}\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n    size_t n = 0;\n    while(size--) {\n        n += write(*buffer++);\n    }\n    return n;\n}\n\nsize_t Print::printf(const char *format, ...)\n{\n    char loc_buf[64];\n    char * temp = loc_buf;\n    va_list arg;\n    va_list copy;\n    va_start(arg, format);\n    va_copy(copy, arg);\n    int len = vsnprintf(temp, sizeof(loc_buf), format, copy);\n    va_end(copy);\n    if(len \u003c 0) {\n        va_end(arg);\n        return 0;\n    };\n    if(len \u003e= sizeof(loc_buf)){\n        temp = (char*) malloc(len+1);\n        if(temp == NULL) {\n            va_end(arg);\n            return 0;\n        }\n        len = vsnprintf(temp, len+1, format, arg);\n    }\n    va_end(arg);\n    len = write((uint8_t*)temp, len);\n    if(temp != loc_buf){\n        free(temp);\n    }\n    return len;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n    return print(reinterpret_cast\u003cconst char *\u003e(ifsh));\n}\n\nsize_t Print::print(const String \u0026s)\n{\n    return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n    return write(str);\n}\n\nsize_t Print::print(char c)\n{\n    return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n    return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n    return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n    return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n    int t = 0;\n    if (base == 10 \u0026\u0026 n \u003c 0) {\n        t = print('-');\n        n = -n;\n    }\n    return printNumber(static_cast\u003cunsigned long\u003e(n), base) + t;\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n    if(base == 0) {\n        return write(n);\n    } else {\n        return printNumber(n, base);\n    }\n}\n\nsize_t Print::print(long long n, int base)\n{\n    int t = 0;\n    if (base == 10 \u0026\u0026 n \u003c 0) {\n        t = print('-');\n        n = -n;\n    }\n    return printNumber(static_cast\u003cunsigned long long\u003e(n), base) + t;\n}\n\nsize_t Print::print(unsigned long long n, int base)\n{\n    if (base == 0) {\n        return write(n);\n    } else {\n        return printNumber(n, base);\n    }\n}\n\nsize_t Print::print(double n, int digits)\n{\n    return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n    size_t n = print(ifsh);\n    n += println();\n    return n;\n}\n\nsize_t Print::print(const Printable\u0026 x)\n{\n    return x.printTo(*this);\n}\n\nsize_t Print::print(struct tm * timeinfo, const char * format)\n{\n    const char * f = format;\n    if(!f){\n        f = \"%c\";\n    }\n    char buf[64];\n    size_t written = strftime(buf, 64, f, timeinfo);\n    if(written == 0){\n        return written;\n    }\n    return print(buf);\n}\n\nsize_t Print::println(void)\n{\n    return print(\"\\r\\n\");\n}\n\nsize_t Print::println(const String \u0026s)\n{\n    size_t n = print(s);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(const char c[])\n{\n    size_t n = print(c);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(char c)\n{\n    size_t n = print(c);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n    size_t n = print(b, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(long long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned long long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n    size_t n = print(num, digits);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(const Printable\u0026 x)\n{\n    size_t n = print(x);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(struct tm * timeinfo, const char * format)\n{\n    size_t n = print(timeinfo, format);\n    n += println();\n    return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n    char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.\n    char *str = \u0026buf[sizeof(buf) - 1];\n\n    *str = '\\0';\n\n    // prevent crash if called with base == 1\n    if(base \u003c 2) {\n        base = 10;\n    }\n\n    do {\n        char c = n % base;\n        n /= base;\n\n        *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n    } while (n);\n\n    return write(str);\n}\n\nsize_t Print::printNumber(unsigned long long n, uint8_t base)\n{\n    char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.\n    char* str = \u0026buf[sizeof(buf) - 1];\n\n    *str = '\\0';\n\n    // prevent crash if called with base == 1\n    if (base \u003c 2) {\n        base = 10;\n    }\n\n    do {\n        auto m = n;\n        n /= base;\n        char c = m - base * n;\n\n        *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n    } while (n);\n\n    return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits)\n{\n    size_t n = 0;\n\n    if(isnan(number)) {\n        return print(\"nan\");\n    }\n    if(isinf(number)) {\n        return print(\"inf\");\n    }\n    if(number \u003e 4294967040.0) {\n        return print(\"ovf\");    // constant determined empirically\n    }\n    if(number \u003c -4294967040.0) {\n        return print(\"ovf\");    // constant determined empirically\n    }\n\n    // Handle negative numbers\n    if(number \u003c 0.0) {\n        n += print('-');\n        number = -number;\n    }\n\n    // Round correctly so that print(1.999, 2) prints as \"2.00\"\n    double rounding = 0.5;\n    for(uint8_t i = 0; i \u003c digits; ++i) {\n        rounding /= 10.0;\n    }\n\n    number += rounding;\n\n    // Extract the integer part of the number and print it\n    unsigned long int_part = (unsigned long) number;\n    double remainder = number - (double) int_part;\n    n += print(int_part);\n\n    // Print the decimal point, but only if there are digits beyond\n    if(digits \u003e 0) {\n        n += print(\".\");\n    }\n\n    // Extract digits from the remainder one at a time\n    while(digits-- \u003e 0) {\n        remainder *= 10.0;\n        int toPrint = int(remainder);\n        n += print(toPrint);\n        remainder -= toPrint;\n    }\n\n    return n;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 174

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":15}},"id":430,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":430,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t print(const char[])\n```"},"range":{"end":{"character":16,"line":274},"start":{"character":11,"line":274}}}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":15}},"id":431,"jsonrpc":"2.0"}
<<<
Content-Length: 849

{"id":431,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":142},"start":{"character":9,"line":142}}},{"kind":1,"range":{"end":{"character":14,"line":144},"start":{"character":9,"line":144}}},{"kind":1,"range":{"end":{"character":14,"line":146},"start":{"character":9,"line":146}}},{"kind":1,"range":{"end":{"character":14,"line":148},"start":{"character":9,"line":148}}},{"kind":1,"range":{"end":{"character":14,"line":150},"start":{"character":9,"line":150}}},{"kind":1,"range":{"end":{"character":14,"line":152},"start":{"character":9,"line":152}}},{"kind":1,"range":{"end":{"character":14,"line":163},"start":{"character":9,"line":163}}},{"kind":1,"range":{"end":{"character":16,"line":253},"start":{"character":11,"line":253}}},{"kind":1,"range":{"end":{"character":16,"line":274},"start":{"character":11,"line":274}}}]}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":15}},"id":432,"jsonrpc":"2.0"}
<<<
Content-Length: 213

{"id":432,"jsonrpc":"2.0","result":[{"range":{"end":{"character":19,"line":86},"start":{"character":14,"line":86}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":15},"end":{"line":274,"character":15}},"context":{"diagnostics":[]}},"id":433,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":433,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 8545

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 23 November 2006 by David A. Mellis\n Modified December 2014 by Ivan Grokhotkov\n Modified May 2015 by Michael C. Miller - ESP31B progmem support\n */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n#include \"Arduino.h\"\n\n#include \"Print.h\"\nextern \"C\" {\n    #include \"time.h\"\n}\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n    size_t n = 0;\n    while(size--) {\n        n += write(*buffer++);\n    }\n    return n;\n}\n\nsize_t Print::printf(const char *format, ...)\n{\n    char loc_buf[64];\n    char * temp = loc_buf;\n    va_list arg;\n    va_list copy;\n    va_start(arg, format);\n    va_copy(copy, arg);\n    int len = vsnprintf(temp, sizeof(loc_buf), format, copy);\n    va_end(copy);\n    if(len \u003c 0) {\n        va_end(arg);\n        return 0;\n    };\n    if(len \u003e= sizeof(loc_buf)){\n        temp = (char*) malloc(len+1);\n        if(temp == NULL) {\n            va_end(arg);\n            return 0;\n        }\n        len = vsnprintf(temp, len+1, format, arg);\n    }\n    va_end(arg);\n    len = write((uint8_t*)temp, len);\n    if(temp != loc_buf){\n        free(temp);\n    }\n    return len;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n    return print(reinterpret_cast\u003cconst char *\u003e(ifsh));\n}\n\nsize_t Print::print(const String \u0026s)\n{\n    return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n    return write(str);\n}\n\nsize_t Print::print(char c)\n{\n    return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n    return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n    return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n    return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n    int t = 0;\n    if (base == 10 \u0026\u0026 n \u003c 0) {\n        t = print('-');\n        n = -n;\n    }\n    return printNumber(static_cast\u003cunsigned long\u003e(n), base) + t;\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n    if(base == 0) {\n        return write(n);\n    } else {\n        return printNumber(n, base);\n    }\n}\n\nsize_t Print::print(long long n, int base)\n{\n    int t = 0;\n    if (base == 10 \u0026\u0026 n \u003c 0) {\n        t = print('-');\n        n = -n;\n    }\n    return printNumber(static_cast\u003cunsigned long long\u003e(n), base) + t;\n}\n\nsize_t Print::print(unsigned long long n, int base)\n{\n    if (base == 0) {\n        return write(n);\n    } else {\n        return printNumber(n, base);\n    }\n}\n\nsize_t Print::print(double n, int digits)\n{\n    return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n    size_t n = print(ifsh);\n    n += println();\n    return n;\n}\n\nsize_t Print::print(const Printable\u0026 x)\n{\n    return x.printTo(*this);\n}\n\nsize_t Print::print(struct tm * timeinfo, const char * format)\n{\n    const char * f = format;\n    if(!f){\n        f = \"%c\";\n    }\n    char buf[64];\n    size_t written = strftime(buf, 64, f, timeinfo);\n    if(written == 0){\n        return written;\n    }\n    return print(buf);\n}\n\nsize_t Print::println(void)\n{\n    return print(\"\\r\\n\");\n}\n\nsize_t Print::println(const String \u0026s)\n{\n    size_t n = print(s);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(const char c[])\n{\n    size_t n = print(c);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(char c)\n{\n    size_t n = print(c);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n    size_t n = print(b, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(long long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(unsigned long long num, int base)\n{\n    size_t n = print(num, base);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n    size_t n = print(num, digits);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(const Printable\u0026 x)\n{\n    size_t n = print(x);\n    n += println();\n    return n;\n}\n\nsize_t Print::println(struct tm * timeinfo, const char * format)\n{\n    size_t n = print(timeinfo, format);\n    n += println();\n    return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n    char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.\n    char *str = \u0026buf[sizeof(buf) - 1];\n\n    *str = '\\0';\n\n    // prevent crash if called with base == 1\n    if(base \u003c 2) {\n        base = 10;\n    }\n\n    do {\n        char c = n % base;\n        n /= base;\n\n        *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n    } while (n);\n\n    return write(str);\n}\n\nsize_t Print::printNumber(unsigned long long n, uint8_t base)\n{\n    char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.\n    char* str = \u0026buf[sizeof(buf) - 1];\n\n    *str = '\\0';\n\n    // prevent crash if called with base == 1\n    if (base \u003c 2) {\n        base = 10;\n    }\n\n    do {\n        auto m = n;\n        n /= base;\n        char c = m - base * n;\n\n        *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n    } while (n);\n\n    return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits)\n{\n    size_t n = 0;\n\n    if(isnan(number)) {\n        return print(\"nan\");\n    }\n    if(isinf(number)) {\n        return print(\"inf\");\n    }\n    if(number \u003e 4294967040.0) {\n        return print(\"ovf\");    // constant determined empirically\n    }\n    if(number \u003c -4294967040.0) {\n        return print(\"ovf\");    // constant determined empirically\n    }\n\n    // Handle negative numbers\n    if(number \u003c 0.0) {\n        n += print('-');\n        number = -number;\n    }\n\n    // Round correctly so that print(1.999, 2) prints as \"2.00\"\n    double rounding = 0.5;\n    for(uint8_t i = 0; i \u003c digits; ++i) {\n        rounding /= 10.0;\n    }\n\n    number += rounding;\n\n    // Extract the integer part of the number and print it\n    unsigned long int_part = (unsigned long) number;\n    double remainder = number - (double) int_part;\n    n += print(int_part);\n\n    // Print the decimal point, but only if there are digits beyond\n    if(digits \u003e 0) {\n        n += print(\".\");\n    }\n\n    // Extract digits from the remainder one at a time\n    while(digits-- \u003e 0) {\n        remainder *= 10.0;\n        int toPrint = int(remainder);\n        n += print(toPrint);\n        remainder -= toPrint;\n    }\n\n    return n;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 224

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"},"position":{"line":108,"character":18}},"id":434,"jsonrpc":"2.0"}
<<<
Content-Length: 1059

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":20,"line":27},"start":{"character":9,"line":27}},"severity":1,"source":"clang"}],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp","version":1}}Content-Length: 38

{"id":434,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 219

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"},"position":{"line":108,"character":18}},"id":435,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":435,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":389},"jsonrpc":"2.0"}Content-Length: 174

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/Print.cpp"}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":271,"character":10}},"id":436,"jsonrpc":"2.0"}
<<<
Content-Length: 247

{"id":436,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `checkAlarms`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid checkAlarms()\n```"},"range":{"end":{"character":15,"line":271},"start":{"character":4,"line":271}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":276,"character":9}},"id":437,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":437,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":12}},"id":438,"jsonrpc":"2.0"}
<<<
Content-Length: 341

{"id":438,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\n→ `size_t`  \nParameters:  \n- `unsigned int`\n- `int = 10`\n\n---\n```cpp\n// In Print\npublic: size_t println(unsigned int, int = 10)\n```"},"range":{"end":{"character":18,"line":275},"start":{"character":11,"line":275}}}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":15},"end":{"line":274,"character":15}},"context":{"diagnostics":[]}},"id":439,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":439,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":12}},"id":440,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":440,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t print(const char[])\n```"},"range":{"end":{"character":16,"line":274},"start":{"character":11,"line":274}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":13}},"id":441,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":441,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t print(const char[])\n```"},"range":{"end":{"character":16,"line":274},"start":{"character":11,"line":274}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":275,"character":14}},"id":442,"jsonrpc":"2.0"}
<<<
Content-Length: 341

{"id":442,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\n→ `size_t`  \nParameters:  \n- `unsigned int`\n- `int = 10`\n\n---\n```cpp\n// In Print\npublic: size_t println(unsigned int, int = 10)\n```"},"range":{"end":{"character":18,"line":275},"start":{"character":11,"line":275}}}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":4},"end":{"line":275,"character":54}},"context":{"diagnostics":[]}},"id":443,"jsonrpc":"2.0"}
<<<
Content-Length: 366

{"id":443,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":54,"line":275},"start":{"character":4,"line":274}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":4}},"id":444,"jsonrpc":"2.0"}
<<<
Content-Length: 270

{"id":444,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":10,"line":274},"start":{"character":4,"line":274}}}}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":4}},"id":445,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":445,"jsonrpc":"2.0","result":[{"range":{"end":{"character":28,"line":115},"start":{"character":22,"line":115}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}]}
>>>
Content-Length: 4134

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n HardwareSerial.h - Hardware serial library for Wiring\n Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 28 September 2010 by Mark Sproul\n Modified 14 August 2012 by Alarus\n Modified 3 December 2013 by Matthijs Kooijman\n Modified 18 December 2014 by Ivan Grokhotkov (esp8266 platform support)\n Modified 31 March 2015 by Markus Sattler (rewrite the code for UART0 + UART1 support in ESP8266)\n Modified 25 April 2015 by Thomas Flayols (add configuration different from 8N1 in ESP8266)\n Modified 13 October 2018 by Jeroen Döll (add baudrate detection)\n Baudrate detection example usage (detection on Serial1):\n   void setup() {\n     Serial.begin(115200);\n     delay(100);\n     Serial.println();\n\n     Serial1.begin(0, SERIAL_8N1, -1, -1, true, 11000UL);  // Passing 0 for baudrate to detect it, the last parameter is a timeout in ms\n\n     unsigned long detectedBaudRate = Serial1.baudRate();\n     if(detectedBaudRate) {\n       Serial.printf(\"Detected baudrate is %lu\\n\", detectedBaudRate);\n     } else {\n       Serial.println(\"No baudrate detected, Serial1 will not work!\");\n     }\n   }\n\n Pay attention: the baudrate returned by baudRate() may be rounded, eg 115200 returns 115201\n */\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n#include \"esp32-hal.h\"\n\nclass HardwareSerial: public Stream\n{\npublic:\n    HardwareSerial(int uart_nr);\n\n    void begin(unsigned long baud, uint32_t config=SERIAL_8N1, int8_t rxPin=-1, int8_t txPin=-1, bool invert=false, unsigned long timeout_ms = 20000UL);\n    void end();\n    void updateBaudRate(unsigned long baud);\n    int available(void);\n    int availableForWrite(void);\n    int peek(void);\n    int read(void);\n    size_t read(uint8_t *buffer, size_t size);\n    inline size_t read(char * buffer, size_t size)\n    {\n        return read((uint8_t*) buffer, size);\n    }\n    void flush(void);\n    void flush( bool txOnly);\n    size_t write(uint8_t);\n    size_t write(const uint8_t *buffer, size_t size);\n    inline size_t write(const char * buffer, size_t size)\n    {\n        return write((uint8_t*) buffer, size);\n    }\n    inline size_t write(const char * s)\n    {\n        return write((uint8_t*) s, strlen(s));\n    }\n    inline size_t write(unsigned long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(unsigned int n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(int n)\n    {\n        return write((uint8_t) n);\n    }\n    uint32_t baudRate();\n    operator bool() const;\n\n    size_t setRxBufferSize(size_t);\n    void setDebugOutput(bool);\n    \n    void setRxInvert(bool);\n\nprotected:\n    int _uart_nr;\n    uart_t* _uart;\n    uint8_t _tx_pin;\n    uint8_t _rx_pin;\n};\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#if !defined(NO_GLOBAL_INSTANCES) \u0026\u0026 !defined(NO_GLOBAL_SERIAL)\nextern HardwareSerial Serial;\nextern HardwareSerial Serial1;\nextern HardwareSerial Serial2;\n#endif\n\n#endif // HardwareSerial_h\n"}},"jsonrpc":"2.0"}Content-Length: 181

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":728},"contentChanges":[{"range":{"start":{"line":274,"character":4},"end":{"line":275,"character":54}},"rangeLength":89,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":728}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":4}},"id":446,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":446,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":400},"jsonrpc":"2.0"}Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":4}},"id":447,"jsonrpc":"2.0"}
<<<
Content-Length: 397

{"id":447,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":223},"start":{"character":4,"line":223}}},{"kind":1,"range":{"end":{"character":14,"line":227},"start":{"character":4,"line":227}}},{"kind":1,"range":{"end":{"character":14,"line":272},"start":{"character":4,"line":272}}},{"kind":1,"range":{"end":{"character":14,"line":282},"start":{"character":4,"line":282}}}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":4}},"id":448,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":448,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":4}},"id":449,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":449,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":4},"end":{"line":272,"character":4}},"context":{"diagnostics":[]}},"id":450,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":450,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":4}},"id":451,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":451,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":2},"end":{"line":273,"character":2}},"context":{"diagnostics":[]}},"id":452,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":452,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":729},"contentChanges":[{"range":{"start":{"line":273,"character":2},"end":{"line":273,"character":2}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":729}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":2},"end":{"line":274,"character":2}},"context":{"diagnostics":[]}},"id":453,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":453,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":730},"contentChanges":[{"range":{"start":{"line":272,"character":2},"end":{"line":272,"character":2}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":730}}
>>>
Content-Length: 373

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":731},"contentChanges":[{"range":{"start":{"line":272,"character":2},"end":{"line":272,"character":2}},"text":"Serial.print(\" Overflow Stack :\");\n    Serial.println(uxTaskGetStackHighWaterMark(NULL));"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":731}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":54},"end":{"line":273,"character":54}},"context":{"diagnostics":[]}},"id":454,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":454,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":36},"end":{"line":272,"character":36}},"context":{"diagnostics":[]}},"id":455,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":455,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":9},"end":{"line":272,"character":9}},"context":{"diagnostics":[]}},"id":456,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":456,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":8},"end":{"line":272,"character":8}},"context":{"diagnostics":[]}},"id":457,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":457,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":2},"end":{"line":272,"character":2}},"context":{"diagnostics":[]}},"id":458,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":458,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":732},"contentChanges":[{"range":{"start":{"line":272,"character":2},"end":{"line":272,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":732}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":4},"end":{"line":272,"character":4}},"context":{"diagnostics":[]}},"id":459,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":459,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":22}},"id":460,"jsonrpc":"2.0"}
<<<
Content-Length: 1078

{"id":460,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `uxTaskGetStackHighWaterMark`  \n\n---\n→ `UBaseType_t`  \nParameters:  \n- `TaskHandle_t xTask`\n\nReturns the high water mark of the stack associated with xTask.  \nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for this function to be available.  \nHigh water mark is the minimum free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task started.  \nThe smaller the returned number the closer the task has come to overflowing its stack.  \n@param xTask Handle of the task associated with the stack to be checked.  \nSet xTask to NULL to check the stack of the calling task.  \n@return The smallest amount of free stack space there has been (in bytes rather than words as found in vanilla FreeRTOS) since the task referenced by xTask was created.  \n\n---\n```cpp\nUBaseType_t uxTaskGetStackHighWaterMark(TaskHandle_t xTask)\n```"},"range":{"end":{"character":46,"line":273},"start":{"character":19,"line":273}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":8}},"id":461,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":461,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":304,"character":6}},"id":462,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":462,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":304},"start":{"character":4,"line":304}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":304,"character":6}},"id":463,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":463,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":304},"start":{"character":4,"line":304}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":6}},"id":464,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":464,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"context":{"diagnostics":[]}},"id":465,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":465,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":5}},"id":466,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":466,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":5}},"id":467,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":467,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":7}},"id":468,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":468,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":8}},"id":469,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":469,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":9,"line":312},"start":{"character":8,"line":312}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":470,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":470,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":8}},"id":471,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":471,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":9,"line":312},"start":{"character":8,"line":312}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":8},"end":{"line":303,"character":8}},"context":{"diagnostics":[]}},"id":472,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":472,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":8}},"id":473,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"id":473,"jsonrpc":"2.0","result":[{"range":{"end":{"character":47,"line":431},"start":{"character":36,"line":431}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}]}
>>>
Content-Length: 98727

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h","languageId":"cpp","version":1,"text":"/*\n    FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.\n    All rights reserved\n\n    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.\n\n    This file is part of the FreeRTOS distribution.\n\n    FreeRTOS is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License (version 2) as published by the\n    Free Software Foundation \u003e\u003e!AND MODIFIED BY!\u003c\u003c the FreeRTOS exception.\n\n\t***************************************************************************\n    \u003e\u003e!   NOTE: The modification to the GPL is included to allow you to     !\u003c\u003c\n    \u003e\u003e!   distribute a combined work that includes FreeRTOS without being   !\u003c\u003c\n    \u003e\u003e!   obliged to provide the source code for proprietary components     !\u003c\u003c\n    \u003e\u003e!   outside of the FreeRTOS kernel.                                   !\u003c\u003c\n\t***************************************************************************\n\n    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY\n    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n    FOR A PARTICULAR PURPOSE.  Full license text is available on the following\n    link: http://www.freertos.org/a00114.html\n\n    ***************************************************************************\n     *                                                                       *\n     *    FreeRTOS provides completely free yet professionally developed,    *\n     *    robust, strictly quality controlled, supported, and cross          *\n     *    platform software that is more than just the market leader, it     *\n     *    is the industry's de facto standard.                               *\n     *                                                                       *\n     *    Help yourself get started quickly while simultaneously helping     *\n     *    to support the FreeRTOS project by purchasing a FreeRTOS           *\n     *    tutorial book, reference manual, or both:                          *\n     *    http://www.FreeRTOS.org/Documentation                              *\n     *                                                                       *\n    ***************************************************************************\n\n    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading\n\tthe FAQ page \"My application does not run, what could be wrong?\".  Have you\n\tdefined configASSERT()?\n\n\thttp://www.FreeRTOS.org/support - In return for receiving this top quality\n\tembedded software for free we request you assist our global community by\n\tparticipating in the support forum.\n\n\thttp://www.FreeRTOS.org/training - Investing in training allows your team to\n\tbe as productive as possible as early as possible.  Now you can receive\n\tFreeRTOS training directly from Richard Barry, CEO of Real Time Engineers\n\tLtd, and the world's leading authority on the world's leading RTOS.\n\n    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,\n    including FreeRTOS+Trace - an indispensable productivity tool, a DOS\n    compatible FAT file system, and our tiny thread aware UDP/IP stack.\n\n    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.\n    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.\n\n    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High\n    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS\n    licenses offer ticketed support, indemnification and commercial middleware.\n\n    http://www.SafeRTOS.com - High Integrity Systems also provide a safety\n    engineered and independently SIL3 certified version for use in safety and\n    mission critical applications that require provable dependability.\n\n    1 tab == 4 spaces!\n*/\n\n\n#ifndef INC_TASK_H\n#define INC_TASK_H\n\n#ifndef INC_FREERTOS_H\n\t#error \"include FreeRTOS.h must appear in source files before include task.h\"\n#endif\n\n#include \u003climits.h\u003e\n\n#include \"list.h\"\n#include \"portmacro.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*-----------------------------------------------------------\n * MACROS AND DEFINITIONS\n *----------------------------------------------------------*/\n\n#define tskKERNEL_VERSION_NUMBER \"V8.2.0\"\n#define tskKERNEL_VERSION_MAJOR 8\n#define tskKERNEL_VERSION_MINOR 2\n#define tskKERNEL_VERSION_BUILD 0\n\n/**\n * @brief Argument of xTaskCreatePinnedToCore indicating that task has no affinity\n */\n#define tskNO_AFFINITY INT_MAX\n\n/**\n * task. h\n *\n * Type by which tasks are referenced.  For example, a call to xTaskCreate\n * returns (via a pointer parameter) an TaskHandle_t variable that can then\n * be used as a parameter to vTaskDelete to delete the task.\n *\n * \\ingroup Tasks\n */\ntypedef void * TaskHandle_t;\n\n/**\n * Defines the prototype to which the application task hook function must\n * conform.\n */\ntypedef BaseType_t (*TaskHookFunction_t)( void * );\n\n/** Task states returned by eTaskGetState. */\ntypedef enum\n{\n\teRunning = 0,\t/*!\u003c A task is querying the state of itself, so must be running. */\n\teReady,\t\t\t/*!\u003c The task being queried is in a read or pending ready list. */\n\teBlocked,\t\t/*!\u003c The task being queried is in the Blocked state. */\n\teSuspended,\t\t/*!\u003c The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */\n\teDeleted\t\t/*!\u003c The task being queried has been deleted, but its TCB has not yet been freed. */\n} eTaskState;\n\n/** Actions that can be performed when vTaskNotify() is called. */\ntypedef enum\n{\n\teNoAction = 0,\t\t\t\t/*!\u003c Notify the task without updating its notify value. */\n\teSetBits,\t\t\t\t\t/*!\u003c Set bits in the task's notification value. */\n\teIncrement,\t\t\t\t\t/*!\u003c Increment the task's notification value. */\n\teSetValueWithOverwrite,\t\t/*!\u003c Set the task's notification value to a specific value even if the previous value has not yet been read by the task. */\n\teSetValueWithoutOverwrite\t/*!\u003c Set the task's notification value if the previous value has been read by the task. */\n} eNotifyAction;\n\n/** @cond */\n/**\n * Used internally only.\n */\ntypedef struct xTIME_OUT\n{\n\tBaseType_t xOverflowCount;\n\tTickType_t xTimeOnEntering;\n} TimeOut_t;\n\n/**\n * Defines the memory ranges allocated to the task when an MPU is used.\n */\ntypedef struct xMEMORY_REGION\n{\n\tvoid *pvBaseAddress;\n\tuint32_t ulLengthInBytes;\n\tuint32_t ulParameters;\n} MemoryRegion_t;\n\n/**\n * Parameters required to create an MPU protected task.\n */\ntypedef struct xTASK_PARAMETERS\n{\n\tTaskFunction_t pvTaskCode;\n\tconst char * const pcName;\t/*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tuint32_t usStackDepth;\n\tvoid *pvParameters;\n\tUBaseType_t uxPriority;\n\tStackType_t *puxStackBuffer;\n\tMemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];\n} TaskParameters_t;\n/** @endcond */\n\n/**\n *  Used with the uxTaskGetSystemState() function to return the state of each task in the system.\n*/\ntypedef struct xTASK_STATUS\n{\n\tTaskHandle_t xHandle;\t\t\t/*!\u003c The handle of the task to which the rest of the information in the structure relates. */\n\tconst char *pcTaskName;\t\t\t/*!\u003c A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tUBaseType_t xTaskNumber;\t\t/*!\u003c A number unique to the task. */\n\teTaskState eCurrentState;\t\t/*!\u003c The state in which the task existed when the structure was populated. */\n\tUBaseType_t uxCurrentPriority;\t/*!\u003c The priority at which the task was running (may be inherited) when the structure was populated. */\n\tUBaseType_t uxBasePriority;\t\t/*!\u003c The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. */\n\tuint32_t ulRunTimeCounter;\t\t/*!\u003c The total run time allocated to the task so far, as defined by the run time stats clock.  See http://www.freertos.org/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. */\n\tStackType_t *pxStackBase;\t\t/*!\u003c Points to the lowest address of the task's stack area. */\n\tuint32_t usStackHighWaterMark;\t/*!\u003c The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. */\n#if configTASKLIST_INCLUDE_COREID\n\tBaseType_t xCoreID;\t\t\t\t/*!\u003c Core this task is pinned to. This field is present if CONFIG_FREERTOS_VTASKLIST_INCLUDE_COREID is set. */\n#endif\n} TaskStatus_t;\n\n/**\n * Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.\n * We need this struct because TCB_t is defined (hidden) in tasks.c.\n */\ntypedef struct xTASK_SNAPSHOT\n{\n\tvoid        *pxTCB;         /*!\u003c Address of task control block. */\n\tStackType_t *pxTopOfStack;  /*!\u003c Points to the location of the last item placed on the tasks stack. */\n\tStackType_t *pxEndOfStack;  /*!\u003c Points to the end of the stack. pxTopOfStack \u003c pxEndOfStack, stack grows hi2lo\n\t\t\t\t\t\t\t\t\tpxTopOfStack \u003e pxEndOfStack, stack grows lo2hi*/\n} TaskSnapshot_t;\n\n/**\n * Possible return values for eTaskConfirmSleepModeStatus().\n */\ntypedef enum\n{\n\teAbortSleep = 0,\t\t/*!\u003c A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */\n\teStandardSleep,\t\t\t/*!\u003c Enter a sleep mode that will not last any longer than the expected idle time. */\n\teNoTasksWaitingTimeout\t/*!\u003c No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */\n} eSleepModeStatus;\n\n\n/**\n * Defines the priority used by the idle task.  This must not be modified.\n *\n * \\ingroup TaskUtils\n */\n#define tskIDLE_PRIORITY\t\t\t( ( UBaseType_t ) 0U )\n\n/**\n * task. h\n *\n * Macro for forcing a context switch.\n *\n * \\ingroup SchedulerControl\n */\n#define taskYIELD()\t\t\t\t\tportYIELD()\n\n/**\n * task. h\n *\n * Macro to mark the start of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskENTER_CRITICAL(mux)\t\tportENTER_CRITICAL(mux)\n#else\n#define taskENTER_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskENTER_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portENTER_CRITICAL(mux)'\\\"\") portENTER_CRITICAL(mux)\n#endif\n#define taskENTER_CRITICAL_ISR(mux)\t\tportENTER_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to mark the end of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskEXIT_CRITICAL(mux)\t\t\tportEXIT_CRITICAL(mux)\n#else\n#define taskEXIT_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskEXIT_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portEXIT_CRITICAL(mux)'\\\"\") portEXIT_CRITICAL(mux)\n#endif\n#define taskEXIT_CRITICAL_ISR(mux)\t\tportEXIT_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to disable all maskable interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskDISABLE_INTERRUPTS()\tportDISABLE_INTERRUPTS()\n\n/**\n * task. h\n *\n * Macro to enable microcontroller interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskENABLE_INTERRUPTS()\t\tportENABLE_INTERRUPTS()\n\n/* Definitions returned by xTaskGetSchedulerState().  taskSCHEDULER_SUSPENDED is\n0 to generate more optimal code when configASSERT() is defined as the constant\nis used in assert() statements. */\n#define taskSCHEDULER_SUSPENDED\t\t( ( BaseType_t ) 0 )\n#define taskSCHEDULER_NOT_STARTED\t( ( BaseType_t ) 1 )\n#define taskSCHEDULER_RUNNING\t\t( ( BaseType_t ) 2 )\n\n\n/*-----------------------------------------------------------\n * TASK CREATION API\n *----------------------------------------------------------*/\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreate, but allows setting task affinity\n * in SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\tBaseType_t xTaskCreatePinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\tconst uint32_t usStackDepth,\n\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\tTaskHandle_t * const pvCreatedTask,\n\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID);\n\n#endif\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * See xTaskCreateStatic() for a version that does not use any dynamic memory\n * allocation.\n *\n * xTaskCreate() can only be used to create a task that has unrestricted\n * access to the entire microcontroller memory map.  Systems that include MPU\n * support can alternatively create an MPU constrained task using\n * xTaskCreateRestricted().\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *  // Task to be created.\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *   }\n *  }\n *\n *  // Function that creates a task.\n *  void vOtherFunction( void )\n *  {\n *  static uint8_t ucParameterToPass;\n *  TaskHandle_t xHandle = NULL;\n *\n *   // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass\n *   // must exist for the lifetime of the task, so in this case is declared static.  If it was just an\n *   // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time\n *   // the new task attempts to access it.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, \u0026ucParameterToPass, tskIDLE_PRIORITY, \u0026xHandle );\n *      configASSERT( xHandle );\n *\n *   // Use the handle to delete the task.\n *      if( xHandle != NULL )\n *      {\n *       vTaskDelete( xHandle );\n *      }\n *  }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\n\tstatic inline IRAM_ATTR BaseType_t xTaskCreate(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t usStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tTaskHandle_t * const pvCreatedTask)\n\t{\n\t\treturn xTaskCreatePinnedToCore( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pvCreatedTask, tskNO_AFFINITY );\n\t}\n\n#endif\n\n\n\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreateStatic, but allows specifying\n * task affinity in an SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tTaskHandle_t xTaskCreateStaticPinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\t\t\tconst uint32_t ulStackDepth,\n\t\t\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\t\t\tStackType_t * const pxStackBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tStaticTask_t * const pxTaskBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID );\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *\n *     // Dimensions the buffer that the task being created will use as its stack.\n *     // NOTE:  This is the number of bytes the stack will hold, not the number of\n *     // words as found in vanilla FreeRTOS.\n *     #define STACK_SIZE 200\n *\n *     // Structure that will hold the TCB of the task being created.\n *     StaticTask_t xTaskBuffer;\n *\n *     // Buffer that the task being created will use as its stack.  Note this is\n *     // an array of StackType_t variables.  The size of StackType_t is dependent on\n *     // the RTOS port.\n *     StackType_t xStack[ STACK_SIZE ];\n *\n *     // Function that implements the task being created.\n *     void vTaskCode( void * pvParameters )\n *     {\n *         // The parameter value is expected to be 1 as 1 is passed in the\n *         // pvParameters value in the call to xTaskCreateStatic().\n *         configASSERT( ( uint32_t ) pvParameters == 1UL );\n *\n *         for( ;; )\n *         {\n *             // Task code goes here.\n *         }\n *     }\n *\n *     // Function that creates a task.\n *     void vOtherFunction( void )\n *     {\n *         TaskHandle_t xHandle = NULL;\n *\n *         // Create the task without using any dynamic memory allocation.\n *         xHandle = xTaskCreateStatic(\n *                       vTaskCode,       // Function that implements the task.\n *                       \"NAME\",          // Text name for the task.\n *                       STACK_SIZE,      // Stack size in bytes, not words.\n *                       ( void * ) 1,    // Parameter passed into the task.\n *                       tskIDLE_PRIORITY,// Priority at which the task is created.\n *                       xStack,          // Array to use as the task's stack.\n *                       \u0026xTaskBuffer );  // Variable to hold the task's data structure.\n *\n *         // puxStackBuffer and pxTaskBuffer were not NULL, so the task will have\n *         // been created, and xHandle will be the task's handle.  Use the handle\n *         // to suspend the task.\n *         vTaskSuspend( xHandle );\n *     }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tstatic inline IRAM_ATTR TaskHandle_t xTaskCreateStatic(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t ulStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tStackType_t * const pxStackBuffer,\n\t\t\tStaticTask_t * const pxTaskBuffer)\n\t{\n\t\treturn xTaskCreateStaticPinnedToCore( pvTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, pxStackBuffer, pxTaskBuffer, tskNO_AFFINITY );\n\t}\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/** @cond */\n/**\n * xTaskCreateRestricted() should only be used in systems that include an MPU\n * implementation.\n *\n * Create a new task and add it to the list of tasks that are ready to run.\n * The function parameters define the memory regions and associated access\n * permissions allocated to the task.\n *\n * @param pxTaskDefinition Pointer to a structure that contains a member\n * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API\n * documentation) plus an optional stack buffer and the memory region\n * definitions.\n *\n * @param pxCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * Example usage:\n * @code{c}\n * // Create an TaskParameters_t structure that defines the task to be created.\n * static const TaskParameters_t xCheckTaskParameters =\n * {\n * \tvATask,\t\t// pvTaskCode - the function that implements the task.\n * \t\"ATask\",\t// pcName - just a text name for the task to assist debugging.\n * \t100,\t\t// usStackDepth\t- the stack size DEFINED IN BYTES.\n * \tNULL,\t\t// pvParameters - passed into the task function as the function parameters.\n * \t( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.\n * \tcStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.\n *\n * \t// xRegions - Allocate up to three separate memory regions for access by\n * \t// the task, with appropriate access permissions.  Different processors have\n * \t// different memory alignment requirements - refer to the FreeRTOS documentation\n * \t// for full information.\n * \t{\n * \t\t// Base address\t\t\t\t\tLength\tParameters\n *         { cReadWriteArray,\t\t\t\t32,\t\tportMPU_REGION_READ_WRITE },\n *         { cReadOnlyArray,\t\t\t\t32,\t\tportMPU_REGION_READ_ONLY },\n *         { cPrivilegedOnlyAccessArray,\t128,\tportMPU_REGION_PRIVILEGED_READ_WRITE }\n * \t}\n * };\n *\n * int main( void )\n * {\n * TaskHandle_t xHandle;\n *\n * \t// Create a task from the const structure defined above.  The task handle\n * \t// is requested (the second parameter is not NULL) but in this case just for\n * \t// demonstration purposes as its not actually used.\n * \txTaskCreateRestricted( \u0026xRegTest1Parameters, \u0026xHandle );\n *\n * \t// Start the scheduler.\n * \tvTaskStartScheduler();\n *\n * \t// Will only get here if there was insufficient memory to create the idle\n * \t// and/or timer task.\n * \tfor( ;; );\n * }\n * @endcode\n * \\ingroup Tasks\n */\n#if( portUSING_MPU_WRAPPERS == 1 )\n\tBaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask ) PRIVILEGED_FUNCTION;\n#endif\n\n\n/**\n * Memory regions are assigned to a restricted task when the task is created by\n * a call to xTaskCreateRestricted().  These regions can be redefined using\n * vTaskAllocateMPURegions().\n *\n * @param xTask The handle of the task being updated.\n *\n * @param xRegions A pointer to an MemoryRegion_t structure that contains the\n * new memory region definitions.\n *\n * Example usage:\n *\n * @code{c}\n * // Define an array of MemoryRegion_t structures that configures an MPU region\n * // allowing read/write access for 1024 bytes starting at the beginning of the\n * // ucOneKByte array.  The other two of the maximum 3 definable regions are\n * // unused so set to zero.\n * static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =\n * {\n * \t// Base address\t\tLength\t\tParameters\n * \t{ ucOneKByte,\t\t1024,\t\tportMPU_REGION_READ_WRITE },\n * \t{ 0,\t\t\t\t0,\t\t\t0 },\n * \t{ 0,\t\t\t\t0,\t\t\t0 }\n * };\n *\n * void vATask( void *pvParameters )\n * {\n * \t// This task was created such that it has access to certain regions of\n * \t// memory as defined by the MPU configuration.  At some point it is\n * \t// desired that these MPU regions are replaced with that defined in the\n * \t// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()\n * \t// for this purpose.  NULL is used as the task handle to indicate that this\n * \t// function should modify the MPU regions of the calling task.\n * \tvTaskAllocateMPURegions( NULL, xAltRegions );\n *\n * \t// Now the task can continue its function, but from this point on can only\n * \t// access its stack and the ucOneKByte array (unless any other statically\n * \t// defined or shared regions have been declared elsewhere).\n * }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Remove a task from the RTOS real time kernel's management.\n *\n * The task being deleted will be removed from all ready, blocked, suspended\n * and event lists.\n *\n * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @note The idle task is responsible for freeing the kernel allocated\n * memory from tasks that have been deleted.  It is therefore important that\n * the idle task is not starved of microcontroller processing time if your\n * application makes any calls to vTaskDelete ().  Memory allocated by the\n * task code is not automatically freed, and should be freed before the task\n * is deleted.\n *\n * See the demo application file death.c for sample code that utilises\n * vTaskDelete ().\n *\n * @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will\n * cause the calling task to be deleted.\n *\n * Example usage:\n * @code{c}\n *  void vOtherFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n * \t // Create the task, storing the handle.\n * \t xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n * \t // Use the handle to delete the task.\n * \t vTaskDelete( xHandle );\n *  }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskDelete( TaskHandle_t xTaskToDelete ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK CONTROL API\n *----------------------------------------------------------*/\n\n/**\n * Delay a task for a given number of ticks.\n *\n * The actual time that the task remains blocked depends on the tick rate.\n * The constant portTICK_PERIOD_MS can be used to calculate real time from\n * the tick rate - with the resolution of one tick period.\n *\n * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * vTaskDelay() specifies a time at which the task wishes to unblock relative to\n * the time at which vTaskDelay() is called.  For example, specifying a block\n * period of 100 ticks will cause the task to unblock 100 ticks after\n * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method\n * of controlling the frequency of a periodic task as the path taken through the\n * code, as well as other task and interrupt activity, will effect the frequency\n * at which vTaskDelay() gets called and therefore the time at which the task\n * next executes.  See vTaskDelayUntil() for an alternative API function designed\n * to facilitate fixed frequency execution.  It does this by specifying an\n * absolute time (rather than a relative time) at which the calling task should\n * unblock.\n *\n * @param xTicksToDelay The amount of time, in tick periods, that\n * the calling task should block.\n *\n * Example usage:\n * @code{c}\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  // Block for 500ms.\n *  const TickType_t xDelay = 500 / portTICK_PERIOD_MS;\n *\n * \t for( ;; )\n * \t {\n * \t\t // Simply toggle the LED every 500ms, blocking between each toggle.\n * \t\t vToggleLED();\n * \t\t vTaskDelay( xDelay );\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelay( const TickType_t xTicksToDelay ) PRIVILEGED_FUNCTION;\n\n/**\n * Delay a task until a specified time.\n *\n * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * This function can be used by periodic tasks to ensure a constant execution frequency.\n *\n * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will\n * cause a task to block for the specified number of ticks from the time vTaskDelay () is\n * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed\n * execution frequency as the time between a task starting to execute and that task\n * calling vTaskDelay () may not be fixed [the task may take a different path though the\n * code between calls, or may get interrupted or preempted a different number of times\n * each time it executes].\n *\n * Whereas vTaskDelay () specifies a wake time relative to the time at which the function\n * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to\n * unblock.\n *\n * The constant portTICK_PERIOD_MS can be used to calculate real time from the tick\n * rate - with the resolution of one tick period.\n *\n * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the\n * task was last unblocked.  The variable must be initialised with the current time\n * prior to its first use (see the example below).  Following this the variable is\n * automatically updated within vTaskDelayUntil ().\n *\n * @param xTimeIncrement The cycle time period.  The task will be unblocked at\n * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the\n * same xTimeIncrement parameter value will cause the task to execute with\n * a fixed interface period.\n *\n * Example usage:\n * @code{c}\n *  // Perform an action every 10 ticks.\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  TickType_t xLastWakeTime;\n *  const TickType_t xFrequency = 10;\n *\n * \t // Initialise the xLastWakeTime variable with the current time.\n * \t xLastWakeTime = xTaskGetTickCount ();\n * \t for( ;; )\n * \t {\n * \t\t // Wait for the next cycle.\n * \t\t vTaskDelayUntil( \u0026xLastWakeTime, xFrequency );\n *\n * \t\t // Perform action here.\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the priority of any task.\n *\n * INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to obtain the priority of the created task.\n *   // It was created with tskIDLE_PRIORITY, but may have changed\n *   // it itself.\n *   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )\n *   {\n *       // The task has changed it's priority.\n *   }\n *\n *   // ...\n *\n *   // Is our priority higher than the created task?\n *   if( uxTaskPriorityGet( xHandle ) \u003c uxTaskPriorityGet( NULL ) )\n *   {\n *       // Our priority (obtained using NULL handle) is higher.\n *   }\n * }\n * @endcode\n * \\ingroup TaskCtrl\n */\nUBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * A version of uxTaskPriorityGet() that can be used from an ISR.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n */\nUBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the state of any task.\n *\n * States are encoded by the eTaskState enumerated type.\n *\n * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.\n *\n * @return The state of xTask at the time the function was called.  Note the\n * state of the task might change between the function being called, and the\n * functions return value being tested by the calling task.\n */\neTaskState eTaskGetState( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Set the priority of any task.\n *\n * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A context switch will occur before the function returns if the priority\n * being set is higher than the currently executing task.\n *\n * @param xTask Handle to the task for which the priority is being set.\n * Passing a NULL handle results in the priority of the calling task being set.\n *\n * @param uxNewPriority The priority to which the task will be set.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to raise the priority of the created task.\n *   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );\n *\n *   // ...\n *\n *   // Use a NULL handle to raise our priority to the same value.\n *   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) PRIVILEGED_FUNCTION;\n\n/**\n * Suspend a task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * When suspended, a task will never get any microcontroller processing time,\n * no matter what its priority.\n *\n * Calls to vTaskSuspend are not accumulative -\n * i.e. calling vTaskSuspend () twice on the same task still only requires one\n * call to vTaskResume () to ready the suspended task.\n *\n * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL\n * handle will cause the calling task to be suspended.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Suspend ourselves.\n *   vTaskSuspend( NULL );\n *\n *   // We cannot get here unless another task calls vTaskResume\n *   // with our handle as the parameter.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskSuspend( TaskHandle_t xTaskToSuspend ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes a suspended task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * vTaskResume ().\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Resume the suspended task ourselves.\n *   vTaskResume( xHandle );\n *\n *   // The created task will once again get microcontroller processing\n *   // time in accordance with its priority within the system.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskResume( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/**\n * An implementation of vTaskResume() that can be called from within an ISR.\n *\n * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be\n * available.  See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * xTaskResumeFromISR ().\n *\n * xTaskResumeFromISR() should not be used to synchronise a task with an\n * interrupt if there is a chance that the interrupt could arrive prior to the\n * task being suspended - as this can lead to interrupts being missed. Use of a\n * semaphore as a synchronisation mechanism would avoid this eventuality.\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * @return pdTRUE if resuming the task should result in a context switch,\n * otherwise pdFALSE. This is used by the ISR to determine if a context switch\n * may be required following the ISR.\n *\n * \\ingroup TaskCtrl\n */\nBaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * SCHEDULER CONTROL\n *----------------------------------------------------------*/\n/** @cond */\n/**\n * Starts the real time kernel tick processing.\n *\n * After calling the kernel has control over which tasks are executed and when.\n *\n * See the demo application file main.c for an example of creating\n * tasks and starting the kernel.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will not get here unless a task calls vTaskEndScheduler ()\n *  }\n * @endcode\n *\n * \\ingroup SchedulerControl\n */\nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Stops the real time kernel tick.\n *\n * @note At the time of writing only the x86 real mode port, which runs on a PC\n * in place of DOS, implements this function.\n *\n * All created tasks will be automatically deleted and multitasking\n * (either preemptive or cooperative) will stop.\n * Execution then resumes from the point where vTaskStartScheduler ()\n * was called, as if vTaskStartScheduler () had just returned.\n *\n * See the demo application file main. c in the demo/PC directory for an\n * example that uses vTaskEndScheduler ().\n *\n * vTaskEndScheduler () requires an exit function to be defined within the\n * portable layer (see vPortEndScheduler () in port. c for the PC port).  This\n * performs hardware specific operations such as stopping the kernel tick.\n *\n * vTaskEndScheduler () will cause all of the resources allocated by the\n * kernel to be freed - but will not free resources allocated by application\n * tasks.\n *\n * Example usage:\n * @code{c}\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // At some point we want to end the real time kernel processing\n *       // so call ...\n *       vTaskEndScheduler ();\n *   }\n *  }\n *\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will only get here when the vTaskCode () task has called\n *   // vTaskEndScheduler ().  When we get here we are back to single task\n *   // execution.\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Suspends the scheduler without disabling interrupts.\n *\n * Context switches will not occur while the scheduler is suspended.\n *\n * After calling vTaskSuspendAll () the calling task will continue to execute\n * without risk of being swapped out until a call to xTaskResumeAll () has been\n * made.\n *\n * API functions that have the potential to cause a context switch (for example,\n * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler\n * is suspended.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the kernel\n *       // tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.\n *       xTaskResumeAll ();\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes scheduler activity after it was suspended by a call to\n * vTaskSuspendAll().\n *\n * xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks\n * that were previously suspended by a call to vTaskSuspend().\n *\n * @return If resuming the scheduler caused a context switch then pdTRUE is\n *\t\t  returned, otherwise pdFALSE is returned.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the real\n *       // time kernel tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.  We want to force\n *       // a context switch - but there is no point if resuming the scheduler\n *       // caused a context switch already.\n *       if( !xTaskResumeAll () )\n *       {\n *            taskYIELD ();\n *       }\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nBaseType_t xTaskResumeAll( void ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK UTILITIES\n *----------------------------------------------------------*/\n\n/**\n * Get tick count\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get tick count from ISR\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * This is a version of xTaskGetTickCount() that is safe to be called from an\n * ISR - provided that TickType_t is the natural word size of the\n * microcontroller being used or interrupt nesting is either not supported or\n * not being used.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get current number of tasks\n *\n * @return The number of tasks that the real time kernel is currently managing.\n * This includes all ready, blocked and suspended tasks.  A task that\n * has been deleted but not yet freed by the idle task will also be\n * included in the count.\n *\n * \\ingroup TaskUtils\n */\nUBaseType_t uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get task name\n *\n * @return The text (human readable) name of the task referenced by the handle\n * xTaskToQuery.  A task can query its own name by either passing in its own\n * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be\n * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.\n *\n * \\ingroup TaskUtils\n */\nchar *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Returns the high water mark of the stack associated with xTask.\n *\n * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * High water mark is the minimum free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task started.\n * The smaller the returned number the closer the task has come to overflowing its stack.\n *\n * @param xTask Handle of the task associated with the stack to be checked.\n * Set xTask to NULL to check the stack of the calling task.\n *\n * @return The smallest amount of free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task referenced by\n * xTask was created.\n */\nUBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Returns the start of the stack associated with xTask.\n *\n * INCLUDE_pxTaskGetStackStart must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * Returns the highest stack memory address on architectures where the stack grows down\n * from high memory, and the lowest memory address on architectures where the\n * stack grows up from low memory.\n *\n * @param xTask Handle of the task associated with the stack returned.\n * Set xTask to NULL to return the stack of the calling task.\n *\n * @return A pointer to the start of the stack.\n */\nuint8_t* pxTaskGetStackStart( TaskHandle_t xTask) PRIVILEGED_FUNCTION;\n\n/* When using trace macros it is sometimes necessary to include task.h before\nFreeRTOS.h.  When this is done TaskHookFunction_t will not yet have been defined,\nso the following two prototypes will cause a compilation error.  This can be\nfixed by simply guarding against the inclusion of these two prototypes unless\nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration\nconstant. */\n#ifdef configUSE_APPLICATION_TASK_TAG\n\t#if configUSE_APPLICATION_TASK_TAG == 1\n\t\t/**\n\t\t * Sets pxHookFunction to be the task hook function used by the task xTask.\n\t\t * @param xTask Handle of the task to set the hook function for\n\t\t *              Passing xTask as NULL has the effect of setting the calling\n\t\t *              tasks hook function.\n\t\t * @param pxHookFunction  Pointer to the hook function.\n\t\t */\n\t\tvoid vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction ) PRIVILEGED_FUNCTION;\n\n\t\t/**\n\t\t * Get the hook function assigned to given task.\n\t\t * @param xTask Handle of the task to get the hook function for\n\t\t *              Passing xTask as NULL has the effect of getting the calling\n\t\t *              tasks hook function.\n\t\t * @return The pxHookFunction value assigned to the task xTask.\n\t\t */\n\t\tTaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\t#endif /* configUSE_APPLICATION_TASK_TAG ==1 */\n#endif /* ifdef configUSE_APPLICATION_TASK_TAG */\n#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS \u003e 0 )\n\n\t/**\n\t * Set local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t * @param xIndex The index of the pointer to set, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @param pvValue  Pointer value to set.\n\t */\n\tvoid vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue ) PRIVILEGED_FUNCTION;\n\n\n\t/**\n\t * Get local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToQuery  Task to get thread local storage pointer for\n\t * @param xIndex The index of the pointer to get, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @return  Pointer value\n\t */\n\tvoid *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) PRIVILEGED_FUNCTION;\n\n\t#if ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS )\n\n\t\t/**\n\t\t * Prototype of local storage pointer deletion callback.\n\t\t */\n\t\ttypedef void (*TlsDeleteCallbackFunction_t)( int, void * );\n\n\t\t/**\n\t\t * Set local storage pointer and deletion callback.\n\t\t *\n\t\t * Each task contains an array of pointers that is dimensioned by the\n\t\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t\t * The kernel does not use the pointers itself, so the application writer\n\t\t * can use the pointers for any purpose they wish.\n\t\t *\n\t\t * Local storage pointers set for a task can reference dynamically\n\t\t * allocated resources. This function is similar to\n\t\t * vTaskSetThreadLocalStoragePointer, but provides a way to release\n\t\t * these resources when the task gets deleted. For each pointer,\n\t\t * a callback function can be set. This function will be called\n\t\t * when task is deleted, with the local storage pointer index\n\t\t * and value as arguments.\n\t\t *\n\t\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t\t * @param xIndex The index of the pointer to set, from 0 to\n\t\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t\t * @param pvValue  Pointer value to set.\n\t\t * @param pvDelCallback  Function to call to dispose of the local\n\t\t *                       storage pointer when the task is deleted.\n\t\t */\n\t\tvoid vTaskSetThreadLocalStoragePointerAndDelCallback( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue, TlsDeleteCallbackFunction_t pvDelCallback);\n\t#endif\n\n#endif\n\n/**\n * Calls the hook function associated with xTask. Passing xTask as NULL has\n * the effect of calling the Running tasks (the calling task) hook function.\n *\n * @param xTask  Handle of the task to call the hook for.\n * @param pvParameter  Parameter passed to the hook function for the task to interpret as it\n * wants.  The return value is the value returned by the task hook function\n * registered by the user.\n */\nBaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) PRIVILEGED_FUNCTION;\n\n/**\n * Get the handle of idle task for the current CPU.\n *\n * xTaskGetIdleTaskHandle() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @return The handle of the idle task.  It is not valid to call\n * xTaskGetIdleTaskHandle() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandle( void );\n\n/**\n * Get the handle of idle task for the given CPU.\n *\n * xTaskGetIdleTaskHandleForCPU() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @param cpuid The CPU to get the handle for\n *\n * @return Idle task handle of a given cpu. It is not valid to call\n * xTaskGetIdleTaskHandleForCPU() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandleForCPU( UBaseType_t cpuid );\n\n/**\n * Get the state of tasks in the system.\n *\n * configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for\n * uxTaskGetSystemState() to be available.\n *\n * uxTaskGetSystemState() populates an TaskStatus_t structure for each task in\n * the system.  TaskStatus_t structures contain, among other things, members\n * for the task handle, task name, task priority, task state, and total amount\n * of run time consumed by the task.  See the TaskStatus_t structure\n * definition in this file for the full member list.\n *\n * @note  This function is intended for debugging use only as its use results in\n * the scheduler remaining suspended for an extended period.\n *\n * @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.\n * The array must contain at least one TaskStatus_t structure for each task\n * that is under the control of the RTOS.  The number of tasks under the control\n * of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.\n *\n * @param uxArraySize The size of the array pointed to by the pxTaskStatusArray\n * parameter.  The size is specified as the number of indexes in the array, or\n * the number of TaskStatus_t structures contained in the array, not by the\n * number of bytes in the array.\n *\n * @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in\n * FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the\n * total run time (as defined by the run time stats clock, see\n * http://www.freertos.org/rtos-run-time-stats.html) since the target booted.\n * pulTotalRunTime can be set to NULL to omit the total run time information.\n *\n * @return The number of TaskStatus_t structures that were populated by\n * uxTaskGetSystemState().  This should equal the number returned by the\n * uxTaskGetNumberOfTasks() API function, but will be zero if the value passed\n * in the uxArraySize parameter was too small.\n *\n * Example usage:\n * @code{c}\n * // This example demonstrates how a human readable table of run time stats\n * // information is generated from raw data provided by uxTaskGetSystemState().\n * // The human readable table is written to pcWriteBuffer\n * void vTaskGetRunTimeStats( char *pcWriteBuffer )\n * {\n * TaskStatus_t *pxTaskStatusArray;\n * volatile UBaseType_t uxArraySize, x;\n * uint32_t ulTotalRunTime, ulStatsAsPercentage;\n *\n *  // Make sure the write buffer does not contain a string.\n *  *pcWriteBuffer = 0x00;\n *\n *  // Take a snapshot of the number of tasks in case it changes while this\n *  // function is executing.\n *  uxArraySize = uxTaskGetNumberOfTasks();\n *\n *  // Allocate a TaskStatus_t structure for each task.  An array could be\n *  // allocated statically at compile time.\n *  pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );\n *\n *  if( pxTaskStatusArray != NULL )\n *  {\n *      // Generate raw status information about each task.\n *      uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, \u0026ulTotalRunTime );\n *\n *      // For percentage calculations.\n *      ulTotalRunTime /= 100UL;\n *\n *      // Avoid divide by zero errors.\n *      if( ulTotalRunTime \u003e 0 )\n *      {\n *          // For each populated position in the pxTaskStatusArray array,\n *          // format the raw data as human readable ASCII data\n *          for( x = 0; x \u003c uxArraySize; x++ )\n *          {\n *              // What percentage of the total run time has the task used?\n *              // This will always be rounded down to the nearest integer.\n *              // ulTotalRunTimeDiv100 has already been divided by 100.\n *              ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;\n *\n *              if( ulStatsAsPercentage \u003e 0UL )\n *              {\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );\n *              }\n *              else\n *              {\n *                  // If the percentage is zero here then the task has\n *                  // consumed less than 1% of the total run time.\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t\u003c1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );\n *              }\n *\n *              pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );\n *          }\n *      }\n *\n *      // The array is no longer needed, free the memory it consumes.\n *      vPortFree( pxTaskStatusArray );\n *  }\n * }\n * @endcode\n */\nUBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime );\n\n/**\n * List all the current tasks.\n *\n * configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must\n * both be defined as 1 for this function to be available.  See the\n * configuration section of the FreeRTOS.org website for more information.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Lists all the current tasks, along with their current state and stack\n * usage high water mark.\n *\n * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or\n * suspended ('S').\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskList() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays task\n * names, states and stack usage.\n *\n * vTaskList() has a dependency on the sprintf() C library function that might\n * bloat the code size, use a lot of stack, and provide different results on\n * different platforms.  An alternative, tiny, third party, and limited\n * functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState()\n * directly to get access to raw stats data, rather than indirectly through a\n * call to vTaskList().\n *\n * @param pcWriteBuffer A buffer into which the above mentioned details\n * will be written, in ASCII form.  This buffer is assumed to be large\n * enough to contain the generated report.  Approximately 40 bytes per\n * task should be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskList( char * pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Get the state of running tasks as a string\n *\n * configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS\n * must both be defined as 1 for this function to be available.  The application\n * must also then provide definitions for\n * portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()\n * to configure a peripheral timer/counter and return the timers current count\n * value respectively.  The counter should be at least 10 times the frequency of\n * the tick count.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total\n * accumulated execution time being stored for each task.  The resolution\n * of the accumulated time value depends on the frequency of the timer\n * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.\n * Calling vTaskGetRunTimeStats() writes the total execution time of each\n * task into a buffer, both as an absolute count value and as a percentage\n * of the total system execution time.\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays the\n * amount of time each task has spent in the Running state in both absolute and\n * percentage terms.\n *\n * vTaskGetRunTimeStats() has a dependency on the sprintf() C library function\n * that might bloat the code size, use a lot of stack, and provide different\n * results on different platforms.  An alternative, tiny, third party, and\n * limited functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState() directly\n * to get access to raw stats data, rather than indirectly through a call to\n * vTaskGetRunTimeStats().\n *\n * @param pcWriteBuffer A buffer into which the execution times will be\n * written, in ASCII form.  This buffer is assumed to be large enough to\n * contain the generated report.  Approximately 40 bytes per task should\n * be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskGetRunTimeStats( char *pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Send task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );\n\n/**\n * Send task notification from an ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotify() that can be used from an interrupt service routine\n * (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should\n * be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Wait for task notification\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value\n * will be cleared in the calling task's notification value before the task\n * checks to see if any notifications are pending, and optionally blocks if no\n * notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if\n * limits.h is included) or 0xffffffffUL (if limits.h is not included) will have\n * the effect of resetting the task's notification value to 0.  Setting\n * ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.\n *\n * @param ulBitsToClearOnExit If a notification is pending or received before\n * the calling task exits the xTaskNotifyWait() function then the task's\n * notification value (see the xTaskNotify() API function) is passed out using\n * the pulNotificationValue parameter.  Then any bits that are set in\n * ulBitsToClearOnExit will be cleared in the task's notification value (note\n * *pulNotificationValue is set before any bits are cleared).  Setting\n * ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL\n * (if limits.h is not included) will have the effect of resetting the task's\n * notification value to 0 before the function exits.  Setting\n * ulBitsToClearOnExit to 0 will leave the task's notification value unchanged\n * when the function exits (in which case the value passed out in\n * pulNotificationValue will match the task's notification value).\n *\n * @param pulNotificationValue Used to pass the task's notification value out\n * of the function.  Note the value passed out will not be effected by the\n * clearing of any bits caused by ulBitsToClearOnExit being non-zero.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for a notification to be received, should a notification\n * not already be pending when xTaskNotifyWait() was called.  The task\n * will not consume any processing time while it is in the Blocked state.  This\n * is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be\n * used to convert a time specified in milliseconds to a time specified in\n * ticks.\n *\n * @return If a notification was received (including notifications that were\n * already pending when xTaskNotifyWait was called) then pdPASS is\n * returned.  Otherwise pdFAIL is returned.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );\n\n/**\n * Simplified macro for sending task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * xTaskNotifyGive() is a helper macro intended for use when task notifications\n * are used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given using the xSemaphoreGive() API function,\n * the equivalent action that instead uses a task notification is\n * xTaskNotifyGive().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @return xTaskNotifyGive() is a macro that calls xTaskNotify() with the\n * eAction parameter set to eIncrement - so pdPASS is always returned.\n *\n * \\ingroup TaskNotifications\n */\n#define xTaskNotifyGive( xTaskToNotify ) xTaskNotify( ( xTaskToNotify ), 0, eIncrement )\n\n/**\n * Simplified macro for sending task notification from ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotifyGive() that can be called from an interrupt service\n * routine (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * vTaskNotifyGiveFromISR() is intended for use when task notifications are\n * used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given from an ISR using the\n * xSemaphoreGiveFromISR() API function, the equivalent action that instead uses\n * a task notification is vTaskNotifyGiveFromISR().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch\n * should be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * \\ingroup TaskNotifications\n */\nvoid vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Simplified macro for receiving task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * ulTaskNotifyTake() is intended for use when a task notification is used as a\n * faster and lighter weight binary or counting semaphore alternative.  Actual\n * FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the\n * equivalent action that instead uses a task notification is\n * ulTaskNotifyTake().\n *\n * When a task is using its notification value as a binary or counting semaphore\n * other tasks should send notifications to it using the xTaskNotifyGive()\n * macro, or xTaskNotify() function with the eAction parameter set to\n * eIncrement.\n *\n * ulTaskNotifyTake() can either clear the task's notification value to\n * zero on exit, in which case the notification value acts like a binary\n * semaphore, or decrement the task's notification value on exit, in which case\n * the notification value acts like a counting semaphore.\n *\n * A task can use ulTaskNotifyTake() to [optionally] block to wait for a\n * the task's notification value to be non-zero.  The task does not consume any\n * CPU time while it is in the Blocked state.\n *\n * Where as xTaskNotifyWait() will return when a notification is pending,\n * ulTaskNotifyTake() will return when the task's notification value is\n * not zero.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's\n * notification value is decremented when the function exits.  In this way the\n * notification value acts like a counting semaphore.  If xClearCountOnExit is\n * not pdFALSE then the task's notification value is cleared to zero when the\n * function exits.  In this way the notification value acts like a binary\n * semaphore.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for the task's notification value to be greater than zero,\n * should the count not already be greater than zero when\n * ulTaskNotifyTake() was called.  The task will not consume any processing\n * time while it is in the Blocked state.  This is specified in kernel ticks,\n * the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time\n * specified in milliseconds to a time specified in ticks.\n *\n * @return The task's notification count before it is either cleared to zero or\n * decremented (see the xClearCountOnExit parameter).\n *\n * \\ingroup TaskNotifications\n */\nuint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );\n\n/*-----------------------------------------------------------\n * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES\n *----------------------------------------------------------*/\n/** @cond */\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Called from the real time kernel tick (either preemptive or cooperative),\n * this increments the tick count and checks if any tasks that are blocked\n * for a finite period required removing from a blocked list and placing on\n * a ready list.  If a non-zero value is returned then a context switch is\n * required because either:\n *   + A task was removed from a blocked list because its timeout had expired,\n *     or\n *   + Time slicing is in use and there is a task of equal priority to the\n *     currently running task.\n */\nBaseType_t xTaskIncrementTick( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes the calling task from the ready list and places it both\n * on the list of tasks waiting for a particular event, and the\n * list of delayed tasks.  The task will be removed from both lists\n * and replaced on the ready list should either the event occur (and\n * there be no higher priority tasks waiting on the same event) or\n * the delay period expires.\n *\n * The 'unordered' version replaces the event list item value with the\n * xItemValue value, and inserts the list item at the end of the list.\n *\n * The 'ordered' version uses the existing event list item value (which is the\n * owning tasks priority) to insert the list item into the event list is task\n * priority order.\n *\n * @param pxEventList The list containing tasks that are blocked waiting\n * for the event to occur.\n *\n * @param xItemValue The item value to use for the event list item when the\n * event list is not ordered by task priority.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait\n * for the event to occur.  This is specified in kernel ticks,the constant\n * portTICK_PERIOD_MS can be used to convert kernel ticks into a real time\n * period.\n */\nvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\nvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * This function performs nearly the same function as vTaskPlaceOnEventList().\n * The difference being that this function does not permit tasks to block\n * indefinitely, whereas vTaskPlaceOnEventList() does.\n *\n */\nvoid vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes a task from both the specified event list and the list of blocked\n * tasks, and places it on a ready queue.\n *\n * xTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called\n * if either an event occurs to unblock a task, or the block timeout period\n * expires.\n *\n * xTaskRemoveFromEventList() is used when the event list is in task priority\n * order.  It removes the list item from the head of the event list as that will\n * have the highest priority owning task of all the tasks on the event list.\n * xTaskRemoveFromUnorderedEventList() is used when the event list is not\n * ordered and the event list items hold something other than the owning tasks\n * priority.  In this case the event list item value is updated to the value\n * passed in the xItemValue parameter.\n *\n * @return pdTRUE if the task being removed has a higher priority than the task\n * making the call, otherwise pdFALSE.\n */\nBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) PRIVILEGED_FUNCTION;\nBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Sets the pointer to the current TCB to the TCB of the highest priority task\n * that is ready to run.\n */\nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE.  THEY ARE USED BY\n * THE EVENT BITS MODULE.\n */\nTickType_t uxTaskResetEventItemValue( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Return the handle of the calling task.\n */\nTaskHandle_t xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;\n\n\n\n/*\n * Return the handle of the task running on a certain CPU. Because of\n * the nature of SMP processing, there is no guarantee that this\n * value will still be valid on return and should only be used for\n * debugging purposes.\n */\nTaskHandle_t xTaskGetCurrentTaskHandleForCPU( BaseType_t cpuid );\n\n\n/*\n * Capture the current time status for future reference.\n */\nvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) PRIVILEGED_FUNCTION;\n\n/*\n * Compare the time status now with that previously captured to see if the\n * timeout has expired.\n */\nBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * Shortcut used by the queue implementation to prevent unnecessary call to\n * taskYIELD();\n */\nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Returns the scheduler state as taskSCHEDULER_RUNNING,\n * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.\n */\nBaseType_t xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Raises the priority of the mutex holder to that of the calling task should\n * the mutex holder have a priority less than the calling task.\n */\nvoid vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the priority of a task back to its proper priority in the case that it\n * inherited a higher priority while it was holding a semaphore.\n */\nBaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.\n */\nUBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n\n/*\n * Get the current core affinity of a task\n */\nBaseType_t xTaskGetAffinity( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the uxTaskNumber of the task referenced by the xTask parameter to\n * uxHandle.\n */\nvoid vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) PRIVILEGED_FUNCTION;\n\n/*\n * Only available when configUSE_TICKLESS_IDLE is set to 1.\n * If tickless mode is being used, or a low power mode is implemented, then\n * the tick interrupt will not execute during idle periods.  When this is the\n * case, the tick count value maintained by the scheduler needs to be kept up\n * to date with the actual execution time by being skipped forward by a time\n * equal to the idle period.\n */\nvoid vTaskStepTick( const TickType_t xTicksToJump ) PRIVILEGED_FUNCTION;\n\n/*\n * Only avilable when configUSE_TICKLESS_IDLE is set to 1.\n * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port\n * specific sleep function to determine if it is ok to proceed with the sleep,\n * and if it is ok to proceed, if it is ok to sleep indefinitely.\n *\n * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only\n * called with the scheduler suspended, not from within a critical section.  It\n * is therefore possible for an interrupt to request a context switch between\n * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being\n * entered.  eTaskConfirmSleepModeStatus() should be called from a short\n * critical section between the timer being stopped and the sleep mode being\n * entered to ensure it is ok to proceed into the sleep mode.\n */\neSleepModeStatus eTaskConfirmSleepModeStatus( void ) PRIVILEGED_FUNCTION;\n\n/*\n * For internal use only.  Increment the mutex held count when a mutex is\n * taken and return the handle of the task that has taken the mutex.\n */\nvoid *pvTaskIncrementMutexHeldCount( void );\n\n/*\n * This function fills array with TaskSnapshot_t structures for every task in the system.\n * Used by core dump facility to get snapshots of all tasks in the system.\n * Only available when configENABLE_TASK_SNAPSHOT is set to 1.\n * @param pxTaskSnapshotArray Pointer to array of TaskSnapshot_t structures to store tasks snapshot data.\n * @param uxArraySize Size of tasks snapshots array.\n * @param pxTcbSz Pointer to store size of TCB.\n * @return Number of elements stored in array.\n */\nUBaseType_t uxTaskGetSnapshotAll( TaskSnapshot_t * const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t * const pxTcbSz );\n\n/** @endcond */\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* INC_TASK_H */\n\n\n\n"}},"jsonrpc":"2.0"}Content-Length: 195

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":8}},"id":474,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":474,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":9,"line":312},"start":{"character":8,"line":312}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":8}},"id":475,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":475,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":9,"line":312},"start":{"character":8,"line":312}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":4},"end":{"line":303,"character":8}},"context":{"diagnostics":[]}},"id":476,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":476,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":303},"start":{"character":4,"line":303}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":733},"contentChanges":[{"range":{"start":{"line":303,"character":4},"end":{"line":303,"character":8}},"rangeLength":4,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":733}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":5},"end":{"line":303,"character":5}},"context":{"diagnostics":[]}},"id":477,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":477,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":734},"contentChanges":[{"range":{"start":{"line":303,"character":5},"end":{"line":303,"character":5}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":734}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":735},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":735}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":736},"contentChanges":[{"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":736}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":8},"end":{"line":303,"character":8}},"context":{"diagnostics":[]}},"id":478,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":478,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":2}},"id":479,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":479,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":0}},"id":480,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":480,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":0}},"id":481,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":481,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":18}},"id":482,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":482,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":18}},"id":483,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":483,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":19}},"id":484,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":484,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":313,"character":10}},"id":485,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":485,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":11}},"id":486,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":486,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":313,"character":9}},"id":487,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":487,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":9,"line":313},"start":{"character":8,"line":313}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":7}},"id":488,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":488,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":304,"character":6}},"id":489,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":489,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":304},"start":{"character":4,"line":304}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":7}},"id":490,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":490,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":491,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":491,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"context":{"diagnostics":[]}},"id":492,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":492,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":493,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":493,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":8},"end":{"line":303,"character":8}},"context":{"diagnostics":[]}},"id":494,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":494,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":4},"end":{"line":303,"character":8}},"context":{"diagnostics":[]}},"id":495,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":495,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":303},"start":{"character":4,"line":303}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":5}},"id":496,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":496,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":5},"end":{"line":303,"character":8}},"context":{"diagnostics":[]}},"id":497,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":497,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":303},"start":{"character":5,"line":303}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":737},"contentChanges":[{"range":{"start":{"line":303,"character":5},"end":{"line":303,"character":8}},"rangeLength":3,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":737}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"context":{"diagnostics":[]}},"id":498,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":498,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":738},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"text":"6"}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":739},"contentChanges":[{"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":739}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":8},"end":{"line":303,"character":8}},"context":{"diagnostics":[]}},"id":499,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":499,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":7}},"id":500,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":500,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":306,"character":11}},"id":501,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":501,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":11}},"id":502,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":502,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":11}},"id":503,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":503,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":11}},"id":504,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":504,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":11}},"id":505,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":505,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":311,"character":8}},"id":506,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":506,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":311,"character":8}},"id":507,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":507,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":311,"character":8}},"id":508,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":508,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":12}},"id":509,"jsonrpc":"2.0"}
<<<
Content-Length: 671

{"id":509,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":13,"line":309},"start":{"character":2,"line":309}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":309,"character":10}},"id":510,"jsonrpc":"2.0"}
<<<
Content-Length: 671

{"id":510,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":13,"line":309},"start":{"character":2,"line":309}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":7}},"id":511,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":511,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":7}},"id":512,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":512,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":513,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":513,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":313,"character":2}},"id":514,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":514,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":740},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":740}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"context":{"diagnostics":[]}},"id":515,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":515,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":741},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":741}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":516,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":516,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":742},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":742}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":743},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"text":"3"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":743}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":517,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":517,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":744},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":745},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":744}}Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":745}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":518,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":518,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":8}},"id":519,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":519,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":315},"start":{"character":4,"line":315}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":21}},"id":520,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":520,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":311,"character":25}},"id":521,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":521,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":303,"character":6}},"id":522,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":522,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":523,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":523,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":746},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":746}}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":747},"contentChanges":[{"range":{"start":{"line":303,"character":5},"end":{"line":303,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":747}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":5},"end":{"line":303,"character":5}},"context":{"diagnostics":[]}},"id":524,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":524,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":748},"contentChanges":[{"range":{"start":{"line":303,"character":5},"end":{"line":303,"character":5}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":748}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"context":{"diagnostics":[]}},"id":525,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":525,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":749},"contentChanges":[{"range":{"start":{"line":303,"character":6},"end":{"line":303,"character":6}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":749}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":750},"contentChanges":[{"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":750}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":8},"end":{"line":303,"character":8}},"context":{"diagnostics":[]}},"id":526,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":526,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":751},"contentChanges":[{"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":751}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":303,"character":7},"end":{"line":303,"character":7}},"context":{"diagnostics":[]}},"id":527,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":527,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":304,"character":7}},"id":528,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":528,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":304},"start":{"character":4,"line":304}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":26}},"id":529,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"id":529,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `portTICK_PERIOD_MS`  \n\n---\n```cpp\n#define portTICK_PERIOD_MS ((TickType_t)1000 / configTICK_RATE_HZ)\n```"},"range":{"end":{"character":37,"line":274},"start":{"character":19,"line":274}}}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":27}},"id":530,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":530,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":27},"end":{"line":274,"character":27}},"context":{"diagnostics":[]}},"id":531,"jsonrpc":"2.0"}
<<<
Content-Length: 391

{"id":531,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":27,"line":274},"start":{"character":27,"line":274}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'portTICK_PERIOD_MS'"},"kind":"refactor","title":"Expand macro 'portTICK_PERIOD_MS'"}]}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":27}},"id":532,"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"id":532,"jsonrpc":"2.0","result":[{"range":{"end":{"character":26,"line":365},"start":{"character":8,"line":365}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/portmacro.h"}]}
>>>
Content-Length: 24309

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/portmacro.h","languageId":"cpp","version":1,"text":"/*\n    FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.\n    All rights reserved\n\n    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.\n\n    ***************************************************************************\n     *                                                                       *\n     *    FreeRTOS provides completely free yet professionally developed,    *\n     *    robust, strictly quality controlled, supported, and cross          *\n     *    platform software that has become a de facto standard.             *\n     *                                                                       *\n     *    Help yourself get started quickly and support the FreeRTOS         *\n     *    project by purchasing a FreeRTOS tutorial book, reference          *\n     *    manual, or both from: http://www.FreeRTOS.org/Documentation        *\n     *                                                                       *\n     *    Thank you!                                                         *\n     *                                                                       *\n    ***************************************************************************\n\n    This file is part of the FreeRTOS distribution.\n\n    FreeRTOS is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License (version 2) as published by the\n    Free Software Foundation \u003e\u003e!AND MODIFIED BY!\u003c\u003c the FreeRTOS exception.\n\n    \u003e\u003e!   NOTE: The modification to the GPL is included to allow you to     !\u003c\u003c\n    \u003e\u003e!   distribute a combined work that includes FreeRTOS without being   !\u003c\u003c\n    \u003e\u003e!   obliged to provide the source code for proprietary components     !\u003c\u003c\n    \u003e\u003e!   outside of the FreeRTOS kernel.                                   !\u003c\u003c\n\n    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY\n    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n    FOR A PARTICULAR PURPOSE.  Full license text is available from the following\n    link: http://www.freertos.org/a00114.html\n\n    1 tab == 4 spaces!\n\n    ***************************************************************************\n     *                                                                       *\n     *    Having a problem?  Start by reading the FAQ \"My application does   *\n     *    not run, what could be wrong?\"                                     *\n     *                                                                       *\n     *    http://www.FreeRTOS.org/FAQHelp.html                               *\n     *                                                                       *\n    ***************************************************************************\n\n    http://www.FreeRTOS.org - Documentation, books, training, latest versions,\n    license and Real Time Engineers Ltd. contact details.\n\n    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,\n    including FreeRTOS+Trace - an indispensable productivity tool, a DOS\n    compatible FAT file system, and our tiny thread aware UDP/IP stack.\n\n    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High\n    Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS\n    licenses offer ticketed support, indemnification and middleware.\n\n    http://www.SafeRTOS.com - High Integrity Systems also provide a safety\n    engineered and independently SIL3 certified version for use in safety and\n    mission critical applications that require provable dependability.\n\n    1 tab == 4 spaces!\n*/\n\n#ifndef PORTMACRO_H\n#define PORTMACRO_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifndef __ASSEMBLER__\n\n#include \u003cstdint.h\u003e\n\n#include \u003cxtensa/hal.h\u003e\n#include \u003cxtensa/config/core.h\u003e\n#include \u003cxtensa/config/system.h\u003e\t/* required for XSHAL_CLIB */\n#include \u003cxtensa/xtruntime.h\u003e\n#include \"esp_crosscore_int.h\"\n#include \"esp_timer.h\"              /* required for FreeRTOS run time stats */\n\n\n#include \u003cesp_heap_caps.h\u003e\n#include \"soc/soc_memory_layout.h\"\n\n//#include \"xtensa_context.h\"\n\n/*-----------------------------------------------------------\n * Port specific definitions.\n *\n * The settings in this file configure FreeRTOS correctly for the\n * given hardware and compiler.\n *\n * These settings should not be altered.\n *-----------------------------------------------------------\n */\n\n/* Type definitions. */\n\n#define portCHAR\t\tint8_t\n#define portFLOAT\t\tfloat\n#define portDOUBLE\t\tdouble\n#define portLONG\t\tint32_t\n#define portSHORT\t\tint16_t\n#define portSTACK_TYPE\tuint8_t\n#define portBASE_TYPE\tint\n\ntypedef portSTACK_TYPE\t\t\tStackType_t;\ntypedef portBASE_TYPE\t\t\tBaseType_t;\ntypedef unsigned portBASE_TYPE\tUBaseType_t;\n\n#if( configUSE_16_BIT_TICKS == 1 )\n\ttypedef uint16_t TickType_t;\n\t#define portMAX_DELAY ( TickType_t ) 0xffff\n#else\n\ttypedef uint32_t TickType_t;\n\t#define portMAX_DELAY ( TickType_t ) 0xffffffffUL\n#endif\n/*-----------------------------------------------------------*/\n\n// portbenchmark\n#include \"portbenchmark.h\"\n\n#include \"sdkconfig.h\"\n#include \"esp_attr.h\"\n\n/* \"mux\" data structure (spinlock) */\ntypedef struct {\n\t/* owner field values:\n\t * 0                - Uninitialized (invalid)\n\t * portMUX_FREE_VAL - Mux is free, can be locked by either CPU\n\t * CORE_ID_PRO / CORE_ID_APP - Mux is locked to the particular core\n\t *\n\t * Any value other than portMUX_FREE_VAL, CORE_ID_PRO, CORE_ID_APP indicates corruption\n\t */\n\tuint32_t owner;\n\t/* count field:\n\t * If mux is unlocked, count should be zero.\n\t * If mux is locked, count is non-zero \u0026 represents the number of recursive locks on the mux.\n\t */\n\tuint32_t count;\n#ifdef CONFIG_FREERTOS_PORTMUX_DEBUG\n\tconst char *lastLockedFn;\n\tint lastLockedLine;\n#endif\n} portMUX_TYPE;\n\n#define portMUX_FREE_VAL\t\t0xB33FFFFF\n\n/* Special constants for vPortCPUAcquireMutexTimeout() */\n#define portMUX_NO_TIMEOUT      (-1)  /* When passed for 'timeout_cycles', spin forever if necessary */\n#define portMUX_TRY_LOCK        0     /* Try to acquire the spinlock a single time only */\n\n// Keep this in sync with the portMUX_TYPE struct definition please.\n#ifndef CONFIG_FREERTOS_PORTMUX_DEBUG\n#define portMUX_INITIALIZER_UNLOCKED {\t\t\t\t\t\\\n\t\t.owner = portMUX_FREE_VAL,\t\t\t\t\t\t\\\n\t\t.count = 0,\t\t\t\t\t\t\t\t\t\t\\\n\t}\n#else\n#define portMUX_INITIALIZER_UNLOCKED {\t\t\t\t\t\\\n\t\t.owner = portMUX_FREE_VAL,\t\t\t\t\t\t\\\n\t\t.count = 0,\t\t\t\t\t\t\t\t\t\t\\\n\t\t.lastLockedFn = \"(never locked)\",\t\t\t\t\\\n\t\t.lastLockedLine = -1\t\t\t\t\t\t\t\\\n\t}\n#endif\n\n\n#define portASSERT_IF_IN_ISR()        vPortAssertIfInISR()\nvoid vPortAssertIfInISR();\n\n#define portCRITICAL_NESTING_IN_TCB 1\n\n/*\nModifications to portENTER_CRITICAL.\n\nFor an introduction, see \"Critical Sections \u0026 Disabling Interrupts\" in docs/api-guides/freertos-smp.rst\n\nThe original portENTER_CRITICAL only disabled the ISRs. This is enough for single-CPU operation: by\ndisabling the interrupts, there is no task switch so no other tasks can meddle in the data, and because\ninterrupts are disabled, ISRs can't corrupt data structures either.\n\nFor multiprocessing, things get a bit more hairy. First of all, disabling the interrupts doesn't stop\nthe tasks or ISRs on the other processors meddling with our CPU. For tasks, this is solved by adding\na spinlock to the portENTER_CRITICAL macro. A task running on the other CPU accessing the same data will\nspinlock in the portENTER_CRITICAL code until the first CPU is done.\n\nFor ISRs, we now also need muxes: while portENTER_CRITICAL disabling interrupts will stop ISRs on the same\nCPU from meddling with the data, it does not stop interrupts on the other cores from interfering with the\ndata. For this, we also use a spinlock in the routines called by the ISR, but these spinlocks\ndo not disable the interrupts (because they already are).\n\nThis all assumes that interrupts are either entirely disabled or enabled. Interrupt priority levels\nwill break this scheme.\n\nRemark: For the ESP32, portENTER_CRITICAL and portENTER_CRITICAL_ISR both alias vTaskEnterCritical, meaning\nthat either function can be called both from ISR as well as task context. This is not standard FreeRTOS \nbehaviour; please keep this in mind if you need any compatibility with other FreeRTOS implementations.\n*/\nvoid vPortCPUInitializeMutex(portMUX_TYPE *mux);\n#ifdef CONFIG_FREERTOS_PORTMUX_DEBUG\nvoid vPortCPUAcquireMutex(portMUX_TYPE *mux, const char *function, int line);\nbool vPortCPUAcquireMutexTimeout(portMUX_TYPE *mux, int timeout_cycles, const char *function, int line);\nvoid vPortCPUReleaseMutex(portMUX_TYPE *mux, const char *function, int line);\n\n\nvoid vTaskEnterCritical( portMUX_TYPE *mux, const char *function, int line );\nvoid vTaskExitCritical( portMUX_TYPE *mux, const char *function, int line );\n\n#ifdef CONFIG_FREERTOS_CHECK_PORT_CRITICAL_COMPLIANCE\n/* Calling port*_CRITICAL from ISR context would cause an assert failure.\n * If the parent function is called from both ISR and Non-ISR context then call port*_CRITICAL_SAFE\n */\n#define portENTER_CRITICAL(mux)        do {                                                                                             \\\n                                            if(!xPortInIsrContext()) {                                                                  \\\n                                                vTaskEnterCritical(mux, __FUNCTION__, __LINE__);                                        \\\n                                            } else {                                                                                    \\\n                                                ets_printf(\"%s:%d (%s)- port*_CRITICAL called from ISR context!\\n\", __FILE__, __LINE__, \\\n                                                           __FUNCTION__);                                                               \\\n                                                abort();                                                                                \\\n                                            }                                                                                           \\\n                                       } while(0)\n\n#define portEXIT_CRITICAL(mux)        do {                                                                                              \\\n                                            if(!xPortInIsrContext()) {                                                                  \\\n                                                vTaskExitCritical(mux, __FUNCTION__, __LINE__);                                         \\\n                                            } else {                                                                                    \\\n                                                ets_printf(\"%s:%d (%s)- port*_CRITICAL called from ISR context!\\n\", __FILE__, __LINE__, \\\n                                                           __FUNCTION__);                                                               \\\n                                                abort();                                                                                \\\n                                            }                                                                                           \\\n                                       } while(0)\n#else\n#define portENTER_CRITICAL(mux)        vTaskEnterCritical(mux, __FUNCTION__, __LINE__)\n#define portEXIT_CRITICAL(mux)         vTaskExitCritical(mux, __FUNCTION__, __LINE__)\n#endif\n#define portENTER_CRITICAL_ISR(mux)    vTaskEnterCritical(mux, __FUNCTION__, __LINE__)\n#define portEXIT_CRITICAL_ISR(mux)     vTaskExitCritical(mux, __FUNCTION__, __LINE__)\n#else\nvoid vTaskExitCritical( portMUX_TYPE *mux );\nvoid vTaskEnterCritical( portMUX_TYPE *mux );\nvoid vPortCPUAcquireMutex(portMUX_TYPE *mux);\n\n/** @brief Acquire a portmux spinlock with a timeout\n *\n * @param mux Pointer to portmux to acquire.\n * @param timeout_cycles Timeout to spin, in CPU cycles. Pass portMUX_NO_TIMEOUT to wait forever,\n * portMUX_TRY_LOCK to try a single time to acquire the lock.\n *\n * @return true if mutex is successfully acquired, false on timeout.\n */\nbool vPortCPUAcquireMutexTimeout(portMUX_TYPE *mux, int timeout_cycles);\nvoid vPortCPUReleaseMutex(portMUX_TYPE *mux);\n\n#ifdef CONFIG_FREERTOS_CHECK_PORT_CRITICAL_COMPLIANCE\n/* Calling port*_CRITICAL from ISR context would cause an assert failure.\n * If the parent function is called from both ISR and Non-ISR context then call port*_CRITICAL_SAFE\n */\n#define portENTER_CRITICAL(mux)        do {                                                                                             \\\n                                            if(!xPortInIsrContext()) {                                                                  \\\n                                                vTaskEnterCritical(mux);                                                                \\\n                                            } else {                                                                                    \\\n                                                ets_printf(\"%s:%d (%s)- port*_CRITICAL called from ISR context!\\n\", __FILE__, __LINE__, \\\n                                                           __FUNCTION__);                                                               \\\n                                                abort();                                                                                \\\n                                            }                                                                                           \\\n                                       } while(0)\n\n#define portEXIT_CRITICAL(mux)        do {                                                                                              \\\n                                            if(!xPortInIsrContext()) {                                                                  \\\n                                                vTaskExitCritical(mux);                                                                 \\\n                                            } else {                                                                                    \\\n                                                ets_printf(\"%s:%d (%s)- port*_CRITICAL called from ISR context!\\n\", __FILE__, __LINE__, \\\n                                                           __FUNCTION__);                                                               \\\n                                                abort();                                                                                \\\n                                            }                                                                                           \\\n                                       } while(0)\n#else\n#define portENTER_CRITICAL(mux)        vTaskEnterCritical(mux)\n#define portEXIT_CRITICAL(mux)         vTaskExitCritical(mux)\n#endif\n#define portENTER_CRITICAL_ISR(mux)    vTaskEnterCritical(mux)\n#define portEXIT_CRITICAL_ISR(mux)     vTaskExitCritical(mux)\n#endif\n\n#define portENTER_CRITICAL_SAFE(mux)  do {                                             \\\n                                         if (xPortInIsrContext()) {                    \\\n                                             portENTER_CRITICAL_ISR(mux);              \\\n                                         } else {                                      \\\n                                             portENTER_CRITICAL(mux);                  \\\n                                         }                                             \\\n                                      } while(0)\n\n#define portEXIT_CRITICAL_SAFE(mux)  do {                                              \\\n                                         if (xPortInIsrContext()) {                    \\\n                                             portEXIT_CRITICAL_ISR(mux);               \\\n                                         } else {                                      \\\n                                             portEXIT_CRITICAL(mux);                   \\\n                                         }                                             \\\n                                      } while(0)\n\n\n// Critical section management. NW-TODO: replace XTOS_SET_INTLEVEL with more efficient version, if any?\n// These cannot be nested. They should be used with a lot of care and cannot be called from interrupt level.\n//\n// Only applies to one CPU. See notes above \u0026 below for reasons not to use these.\n#define portDISABLE_INTERRUPTS()      do { XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL); portbenchmarkINTERRUPT_DISABLE(); } while (0)\n#define portENABLE_INTERRUPTS()       do { portbenchmarkINTERRUPT_RESTORE(0); XTOS_SET_INTLEVEL(0); } while (0)\n\n// Cleaner solution allows nested interrupts disabling and restoring via local registers or stack.\n// They can be called from interrupts too.\n// WARNING: Only applies to current CPU. See notes above.\nstatic inline unsigned portENTER_CRITICAL_NESTED() {\n\tunsigned state = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);\n\tportbenchmarkINTERRUPT_DISABLE();\n\treturn state;\n}\n#define portEXIT_CRITICAL_NESTED(state)   do { portbenchmarkINTERRUPT_RESTORE(state); XTOS_RESTORE_JUST_INTLEVEL(state); } while (0)\n\n// These FreeRTOS versions are similar to the nested versions above\n#define portSET_INTERRUPT_MASK_FROM_ISR()            portENTER_CRITICAL_NESTED()\n#define portCLEAR_INTERRUPT_MASK_FROM_ISR(state)     portEXIT_CRITICAL_NESTED(state)\n\n//Because the ROM routines don't necessarily handle a stack in external RAM correctly, we force\n//the stack memory to always be internal.\n#define portTcbMemoryCaps (MALLOC_CAP_INTERNAL|MALLOC_CAP_8BIT)\n#define portStackMemoryCaps (MALLOC_CAP_INTERNAL|MALLOC_CAP_8BIT)\n\n#define pvPortMallocTcbMem(size) heap_caps_malloc(size, portTcbMemoryCaps)\n#define pvPortMallocStackMem(size)  heap_caps_malloc(size, portStackMemoryCaps)\n\n//xTaskCreateStatic uses these functions to check incoming memory.\n#define portVALID_TCB_MEM(ptr) (esp_ptr_internal(ptr) \u0026\u0026 esp_ptr_byte_accessible(ptr))\n#ifdef CONFIG_SPIRAM_ALLOW_STACK_EXTERNAL_MEMORY\n#define portVALID_STACK_MEM(ptr) esp_ptr_byte_accessible(ptr)\n#else\n#define portVALID_STACK_MEM(ptr) (esp_ptr_internal(ptr) \u0026\u0026 esp_ptr_byte_accessible(ptr))\n#endif\n\n/*\n * Wrapper for the Xtensa compare-and-set instruction. This subroutine will atomically compare\n * *addr to 'compare'. If *addr == compare, *addr is set to *set. *set is updated with the previous\n * value of *addr (either 'compare' or some other value.)\n *\n * Warning: From the ISA docs: in some (unspecified) cases, the s32c1i instruction may return the\n * *bitwise inverse* of the old mem if the mem wasn't written. This doesn't seem to happen on the\n * ESP32 (portMUX assertions would fail).\n */\nstatic inline void uxPortCompareSet(volatile uint32_t *addr, uint32_t compare, uint32_t *set) {\n    __asm__ __volatile__ (\n        \"WSR \t    %2,SCOMPARE1 \\n\"\n        \"S32C1I     %0, %1, 0\t \\n\"\n        :\"=r\"(*set)\n        :\"r\"(addr), \"r\"(compare), \"0\"(*set)\n        );\n}\n\n\n/*-----------------------------------------------------------*/\n\n/* Architecture specifics. */\n#define portSTACK_GROWTH\t\t\t( -1 )\n#define portTICK_PERIOD_MS\t\t\t( ( TickType_t ) 1000 / configTICK_RATE_HZ )\n#define portBYTE_ALIGNMENT\t\t\t4\n#define portNOP()\t\t\t\t\tXT_NOP()\n/*-----------------------------------------------------------*/\n\n/* Fine resolution time */\n#define portGET_RUN_TIME_COUNTER_VALUE()  xthal_get_ccount()\n//ccount or esp_timer are initialized elsewhere\n#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()\n\n#ifdef CONFIG_FREERTOS_RUN_TIME_STATS_USING_ESP_TIMER\n/* Coarse resolution time (us) */\n#define portALT_GET_RUN_TIME_COUNTER_VALUE(x)    x = (uint32_t)esp_timer_get_time()\n#endif\n\n\n\n/* Kernel utilities. */\nvoid vPortYield( void );\nvoid _frxt_setup_switch( void );\n#define portYIELD()\t\t\t\t\tvPortYield()\n#define portYIELD_FROM_ISR()        {traceISR_EXIT_TO_SCHEDULER(); _frxt_setup_switch();}\n\nstatic inline uint32_t xPortGetCoreID();\n\n/* Yielding within an API call (when interrupts are off), means the yield should be delayed\n   until interrupts are re-enabled.\n\n   To do this, we use the \"cross-core\" interrupt as a trigger to yield on this core when interrupts are re-enabled.This\n   is the same interrupt \u0026 code path which is used to trigger a yield between CPUs, although in this case the yield is\n   happening on the same CPU.\n*/\n#define portYIELD_WITHIN_API() esp_crosscore_int_send_yield(xPortGetCoreID())\n\n/*-----------------------------------------------------------*/\n\n/* Task function macros as described on the FreeRTOS.org WEB site. */\n#define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )\n#define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )\n\n// When coprocessors are defined, we to maintain a pointer to coprocessors area.\n// We currently use a hack: redefine field xMPU_SETTINGS in TCB block as a structure that can hold:\n// MPU wrappers, coprocessor area pointer, trace code structure, and more if needed.\n// The field is normally used for memory protection. FreeRTOS should create another general purpose field.\ntypedef struct {\n\t#if XCHAL_CP_NUM \u003e 0\n\tvolatile StackType_t* coproc_area; // Pointer to coprocessor save area; MUST BE FIRST\n\t#endif\n\n\t#if portUSING_MPU_WRAPPERS\n\t// Define here mpu_settings, which is port dependent\n\tint mpu_setting; // Just a dummy example here; MPU not ported to Xtensa yet\n\t#endif\n\n\t#if configUSE_TRACE_FACILITY_2\n\tstruct {\n\t\t// Cf. porttraceStamp()\n\t\tint taskstamp;        /* Stamp from inside task to see where we are */\n\t\tint taskstampcount;   /* A counter usually incremented when we restart the task's loop */\n\t} porttrace;\n\t#endif\n} xMPU_SETTINGS;\n\n// Main hack to use MPU_wrappers even when no MPU is defined (warning: mpu_setting should not be accessed; otherwise move this above xMPU_SETTINGS)\n#if (XCHAL_CP_NUM \u003e 0 || configUSE_TRACE_FACILITY_2) \u0026\u0026 !portUSING_MPU_WRAPPERS   // If MPU wrappers not used, we still need to allocate coproc area\n\t#undef portUSING_MPU_WRAPPERS\n\t#define portUSING_MPU_WRAPPERS 1   // Enable it to allocate coproc area\n\t#define MPU_WRAPPERS_H             // Override mpu_wrapper.h to disable unwanted code\n\t#define PRIVILEGED_FUNCTION\n\t#define PRIVILEGED_DATA\n#endif\n\nextern void esp_vApplicationIdleHook( void );\nextern void esp_vApplicationTickHook( void );\n\n#ifndef CONFIG_FREERTOS_LEGACY_HOOKS\n#define vApplicationIdleHook    esp_vApplicationIdleHook\n#define vApplicationTickHook    esp_vApplicationTickHook\n#endif /* !CONFIG_FREERTOS_LEGACY_HOOKS */\n\nvoid _xt_coproc_release(volatile void * coproc_sa_base);\nvoid vApplicationSleep( TickType_t xExpectedIdleTime );\n\n#define portSUPPRESS_TICKS_AND_SLEEP( idleTime ) vApplicationSleep( idleTime )\n\n// porttrace\n#if configUSE_TRACE_FACILITY_2\n#include \"porttrace.h\"\n#endif\n\n// configASSERT_2 if requested\n#if configASSERT_2\n#include \u003cstdio.h\u003e\nvoid exit(int);\n#define configASSERT( x )   if (!(x)) { porttracePrint(-1); printf(\"\\nAssertion failed in %s:%d\\n\", __FILE__, __LINE__); exit(-1); }\n#endif\n\n#endif // __ASSEMBLER__\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* PORTMACRO_H */\n\n"}},"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/portmacro.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/portmacro.h"}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":28},"end":{"line":274,"character":28}},"context":{"diagnostics":[]}},"id":533,"jsonrpc":"2.0"}
<<<
Content-Length: 391

{"id":533,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":28,"line":274},"start":{"character":28,"line":274}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'portTICK_PERIOD_MS'"},"kind":"refactor","title":"Expand macro 'portTICK_PERIOD_MS'"}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":5},"end":{"line":274,"character":39}},"context":{"diagnostics":[]}},"id":534,"jsonrpc":"2.0"}
<<<
Content-Length: 366

{"id":534,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":39,"line":274},"start":{"character":5,"line":273}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":6}},"id":535,"jsonrpc":"2.0"}
<<<
Content-Length: 270

{"id":535,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":10,"line":273},"start":{"character":4,"line":273}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":274,"character":33}},"id":536,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"id":536,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `portTICK_PERIOD_MS`  \n\n---\n```cpp\n#define portTICK_PERIOD_MS ((TickType_t)1000 / configTICK_RATE_HZ)\n```"},"range":{"end":{"character":37,"line":274},"start":{"character":19,"line":274}}}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":33},"end":{"line":274,"character":33}},"context":{"diagnostics":[]}},"id":537,"jsonrpc":"2.0"}
<<<
Content-Length: 391

{"id":537,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":33,"line":274},"start":{"character":33,"line":274}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'portTICK_PERIOD_MS'"},"kind":"refactor","title":"Expand macro 'portTICK_PERIOD_MS'"}]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":273,"character":54}},"id":538,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":538,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":273,"character":54},"end":{"line":273,"character":54}},"context":{"diagnostics":[]}},"id":539,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":539,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":4},"end":{"line":273,"character":54}},"context":{"diagnostics":[]}},"id":540,"jsonrpc":"2.0"}
<<<
Content-Length: 366

{"id":540,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":54,"line":273},"start":{"character":4,"line":272}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":3}},"id":541,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":541,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":4}},"id":542,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":542,"jsonrpc":"2.0","result":[{"range":{"end":{"character":28,"line":115},"start":{"character":22,"line":115}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}]}
>>>
Content-Length: 4134

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n HardwareSerial.h - Hardware serial library for Wiring\n Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 28 September 2010 by Mark Sproul\n Modified 14 August 2012 by Alarus\n Modified 3 December 2013 by Matthijs Kooijman\n Modified 18 December 2014 by Ivan Grokhotkov (esp8266 platform support)\n Modified 31 March 2015 by Markus Sattler (rewrite the code for UART0 + UART1 support in ESP8266)\n Modified 25 April 2015 by Thomas Flayols (add configuration different from 8N1 in ESP8266)\n Modified 13 October 2018 by Jeroen Döll (add baudrate detection)\n Baudrate detection example usage (detection on Serial1):\n   void setup() {\n     Serial.begin(115200);\n     delay(100);\n     Serial.println();\n\n     Serial1.begin(0, SERIAL_8N1, -1, -1, true, 11000UL);  // Passing 0 for baudrate to detect it, the last parameter is a timeout in ms\n\n     unsigned long detectedBaudRate = Serial1.baudRate();\n     if(detectedBaudRate) {\n       Serial.printf(\"Detected baudrate is %lu\\n\", detectedBaudRate);\n     } else {\n       Serial.println(\"No baudrate detected, Serial1 will not work!\");\n     }\n   }\n\n Pay attention: the baudrate returned by baudRate() may be rounded, eg 115200 returns 115201\n */\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n#include \"esp32-hal.h\"\n\nclass HardwareSerial: public Stream\n{\npublic:\n    HardwareSerial(int uart_nr);\n\n    void begin(unsigned long baud, uint32_t config=SERIAL_8N1, int8_t rxPin=-1, int8_t txPin=-1, bool invert=false, unsigned long timeout_ms = 20000UL);\n    void end();\n    void updateBaudRate(unsigned long baud);\n    int available(void);\n    int availableForWrite(void);\n    int peek(void);\n    int read(void);\n    size_t read(uint8_t *buffer, size_t size);\n    inline size_t read(char * buffer, size_t size)\n    {\n        return read((uint8_t*) buffer, size);\n    }\n    void flush(void);\n    void flush( bool txOnly);\n    size_t write(uint8_t);\n    size_t write(const uint8_t *buffer, size_t size);\n    inline size_t write(const char * buffer, size_t size)\n    {\n        return write((uint8_t*) buffer, size);\n    }\n    inline size_t write(const char * s)\n    {\n        return write((uint8_t*) s, strlen(s));\n    }\n    inline size_t write(unsigned long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(unsigned int n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(int n)\n    {\n        return write((uint8_t) n);\n    }\n    uint32_t baudRate();\n    operator bool() const;\n\n    size_t setRxBufferSize(size_t);\n    void setDebugOutput(bool);\n    \n    void setRxInvert(bool);\n\nprotected:\n    int _uart_nr;\n    uart_t* _uart;\n    uint8_t _tx_pin;\n    uint8_t _rx_pin;\n};\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#if !defined(NO_GLOBAL_INSTANCES) \u0026\u0026 !defined(NO_GLOBAL_SERIAL)\nextern HardwareSerial Serial;\nextern HardwareSerial Serial1;\nextern HardwareSerial Serial2;\n#endif\n\n#endif // HardwareSerial_h\n"}},"jsonrpc":"2.0"}Content-Length: 181

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":4}},"id":543,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":543,"jsonrpc":"2.0","result":[{"range":{"end":{"character":28,"line":115},"start":{"character":22,"line":115}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}]}
>>>
Content-Length: 4134

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n HardwareSerial.h - Hardware serial library for Wiring\n Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Modified 28 September 2010 by Mark Sproul\n Modified 14 August 2012 by Alarus\n Modified 3 December 2013 by Matthijs Kooijman\n Modified 18 December 2014 by Ivan Grokhotkov (esp8266 platform support)\n Modified 31 March 2015 by Markus Sattler (rewrite the code for UART0 + UART1 support in ESP8266)\n Modified 25 April 2015 by Thomas Flayols (add configuration different from 8N1 in ESP8266)\n Modified 13 October 2018 by Jeroen Döll (add baudrate detection)\n Baudrate detection example usage (detection on Serial1):\n   void setup() {\n     Serial.begin(115200);\n     delay(100);\n     Serial.println();\n\n     Serial1.begin(0, SERIAL_8N1, -1, -1, true, 11000UL);  // Passing 0 for baudrate to detect it, the last parameter is a timeout in ms\n\n     unsigned long detectedBaudRate = Serial1.baudRate();\n     if(detectedBaudRate) {\n       Serial.printf(\"Detected baudrate is %lu\\n\", detectedBaudRate);\n     } else {\n       Serial.println(\"No baudrate detected, Serial1 will not work!\");\n     }\n   }\n\n Pay attention: the baudrate returned by baudRate() may be rounded, eg 115200 returns 115201\n */\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n#include \"esp32-hal.h\"\n\nclass HardwareSerial: public Stream\n{\npublic:\n    HardwareSerial(int uart_nr);\n\n    void begin(unsigned long baud, uint32_t config=SERIAL_8N1, int8_t rxPin=-1, int8_t txPin=-1, bool invert=false, unsigned long timeout_ms = 20000UL);\n    void end();\n    void updateBaudRate(unsigned long baud);\n    int available(void);\n    int availableForWrite(void);\n    int peek(void);\n    int read(void);\n    size_t read(uint8_t *buffer, size_t size);\n    inline size_t read(char * buffer, size_t size)\n    {\n        return read((uint8_t*) buffer, size);\n    }\n    void flush(void);\n    void flush( bool txOnly);\n    size_t write(uint8_t);\n    size_t write(const uint8_t *buffer, size_t size);\n    inline size_t write(const char * buffer, size_t size)\n    {\n        return write((uint8_t*) buffer, size);\n    }\n    inline size_t write(const char * s)\n    {\n        return write((uint8_t*) s, strlen(s));\n    }\n    inline size_t write(unsigned long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(long n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(unsigned int n)\n    {\n        return write((uint8_t) n);\n    }\n    inline size_t write(int n)\n    {\n        return write((uint8_t) n);\n    }\n    uint32_t baudRate();\n    operator bool() const;\n\n    size_t setRxBufferSize(size_t);\n    void setDebugOutput(bool);\n    \n    void setRxInvert(bool);\n\nprotected:\n    int _uart_nr;\n    uart_t* _uart;\n    uint8_t _tx_pin;\n    uint8_t _rx_pin;\n};\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#if !defined(NO_GLOBAL_INSTANCES) \u0026\u0026 !defined(NO_GLOBAL_SERIAL)\nextern HardwareSerial Serial;\nextern HardwareSerial Serial1;\nextern HardwareSerial Serial2;\n#endif\n\n#endif // HardwareSerial_h\n"}},"jsonrpc":"2.0"}Content-Length: 181

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.h"}}
>>>
Content-Length: 377

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":753},"contentChanges":[{"range":{"start":{"line":273,"character":4},"end":{"line":273,"character":4}},"text":"// "},{"range":{"start":{"line":272,"character":4},"end":{"line":272,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":753}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":7},"end":{"line":273,"character":57}},"context":{"diagnostics":[]}},"id":544,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":544,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":754},"contentChanges":[{"range":{"start":{"line":286,"character":3},"end":{"line":286,"character":3}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":754}}
>>>
Content-Length: 373

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":755},"contentChanges":[{"range":{"start":{"line":287,"character":2},"end":{"line":287,"character":2}},"text":"Serial.print(\" Overflow Stack :\");\n    Serial.println(uxTaskGetStackHighWaterMark(NULL));"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":755}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":288,"character":54},"end":{"line":288,"character":54}},"context":{"diagnostics":[]}},"id":545,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":545,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":756},"contentChanges":[{"range":{"start":{"line":287,"character":2},"end":{"line":288,"character":54}},"rangeLength":89,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":756}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":2}},"context":{"diagnostics":[]}},"id":546,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":546,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":757},"contentChanges":[{"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":2}},"text":"''"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1213

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":4,"line":286},"start":{"character":2,"line":286}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":757}}
>>>
Content-Length: 445

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":286,"character":3},"end":{"line":286,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":4}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":547,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":547,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":758},"contentChanges":[{"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":4}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":758}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":2}},"context":{"diagnostics":[]}},"id":548,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":548,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 285

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":759},"contentChanges":[{"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":2}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":759}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":287,"character":2},"end":{"line":287,"character":2}},"context":{"diagnostics":[]}},"id":549,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":549,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 373

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":760},"contentChanges":[{"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":2}},"text":"Serial.print(\" Overflow Stack :\");\n    Serial.println(uxTaskGetStackHighWaterMark(NULL));"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":760}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":287,"character":54},"end":{"line":287,"character":54}},"context":{"diagnostics":[]}},"id":550,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":550,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":286,"character":36},"end":{"line":286,"character":36}},"context":{"diagnostics":[]}},"id":551,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":551,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":286,"character":1}},"id":552,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":552,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":286,"character":2}},"id":553,"jsonrpc":"2.0"}
<<<
Content-Length: 2443

{"id":553,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":8,"line":90},"start":{"character":2,"line":90}}},{"kind":1,"range":{"end":{"character":10,"line":93},"start":{"character":4,"line":93}}},{"kind":1,"range":{"end":{"character":10,"line":109},"start":{"character":4,"line":109}}},{"kind":1,"range":{"end":{"character":16,"line":118},"start":{"character":10,"line":118}}},{"kind":1,"range":{"end":{"character":8,"line":121},"start":{"character":2,"line":121}}},{"kind":1,"range":{"end":{"character":10,"line":126},"start":{"character":4,"line":126}}},{"kind":1,"range":{"end":{"character":8,"line":131},"start":{"character":2,"line":131}}},{"kind":1,"range":{"end":{"character":8,"line":142},"start":{"character":2,"line":142}}},{"kind":1,"range":{"end":{"character":8,"line":143},"start":{"character":2,"line":143}}},{"kind":1,"range":{"end":{"character":8,"line":144},"start":{"character":2,"line":144}}},{"kind":1,"range":{"end":{"character":8,"line":145},"start":{"character":2,"line":145}}},{"kind":1,"range":{"end":{"character":8,"line":146},"start":{"character":2,"line":146}}},{"kind":1,"range":{"end":{"character":8,"line":147},"start":{"character":2,"line":147}}},{"kind":1,"range":{"end":{"character":8,"line":148},"start":{"character":2,"line":148}}},{"kind":1,"range":{"end":{"character":8,"line":149},"start":{"character":2,"line":149}}},{"kind":1,"range":{"end":{"character":8,"line":150},"start":{"character":2,"line":150}}},{"kind":1,"range":{"end":{"character":8,"line":151},"start":{"character":2,"line":151}}},{"kind":1,"range":{"end":{"character":8,"line":152},"start":{"character":2,"line":152}}},{"kind":1,"range":{"end":{"character":8,"line":153},"start":{"character":2,"line":153}}},{"kind":1,"range":{"end":{"character":8,"line":154},"start":{"character":2,"line":154}}},{"kind":1,"range":{"end":{"character":8,"line":162},"start":{"character":2,"line":162}}},{"kind":1,"range":{"end":{"character":8,"line":163},"start":{"character":2,"line":163}}},{"kind":1,"range":{"end":{"character":8,"line":164},"start":{"character":2,"line":164}}},{"kind":1,"range":{"end":{"character":10,"line":253},"start":{"character":4,"line":253}}},{"kind":1,"range":{"end":{"character":8,"line":286},"start":{"character":2,"line":286}}},{"kind":1,"range":{"end":{"character":10,"line":287},"start":{"character":4,"line":287}}},{"kind":1,"range":{"end":{"character":8,"line":293},"start":{"character":2,"line":293}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":2}},"context":{"diagnostics":[]}},"id":554,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":554,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":287,"character":3}},"id":555,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":555,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":761},"contentChanges":[{"range":{"start":{"line":286,"character":2},"end":{"line":286,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":761}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":286,"character":4},"end":{"line":286,"character":4}},"context":{"diagnostics":[]}},"id":556,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":556,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":4}},"id":557,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":557,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":307,"character":6}},"id":558,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":558,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":307},"start":{"character":4,"line":307}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":316,"character":8}},"id":559,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":559,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":316},"start":{"character":4,"line":316}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":316,"character":7}},"id":560,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":560,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":316},"start":{"character":4,"line":316}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":8}},"id":561,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":561,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":13,"line":303},"start":{"character":2,"line":303}}},{"kind":1,"range":{"end":{"character":13,"line":312},"start":{"character":2,"line":312}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":8},"end":{"line":315,"character":8}},"context":{"diagnostics":[]}},"id":562,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":562,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":2}},"id":563,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":563,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":5},"end":{"line":315,"character":5}},"context":{"diagnostics":[]}},"id":564,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":564,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":4},"end":{"line":315,"character":4}},"context":{"diagnostics":[]}},"id":565,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":565,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":4},"end":{"line":315,"character":8}},"context":{"diagnostics":[]}},"id":566,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":566,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":8,"line":315},"start":{"character":4,"line":315}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":762},"contentChanges":[{"range":{"start":{"line":315,"character":4},"end":{"line":315,"character":8}},"rangeLength":4,"text":"7"}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":763},"contentChanges":[{"range":{"start":{"line":315,"character":5},"end":{"line":315,"character":5}},"text":"6"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":762}}Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":763}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":764},"contentChanges":[{"range":{"start":{"line":315,"character":6},"end":{"line":315,"character":6}},"text":"8"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":764}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":7},"end":{"line":315,"character":7}},"context":{"diagnostics":[]}},"id":567,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":567,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":313,"character":4}},"id":568,"jsonrpc":"2.0"}
<<<
Content-Length: 314

{"id":568,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `task2`  \n\n---\n→ `void`  \nParameters:  \n- `void * parameters`\n\nPassed as pvTaskCode  \n\n---\n```cpp\nvoid task2(void *parameters)\n```"},"range":{"end":{"character":9,"line":313},"start":{"character":4,"line":313}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":6}},"id":569,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":569,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":308,"character":6}},"id":570,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":570,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":6,"line":308},"start":{"character":5,"line":308}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":307,"character":5}},"id":571,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":571,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":307},"start":{"character":4,"line":307}}}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":307,"character":6}},"id":572,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":572,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":307,"character":6},"end":{"line":307,"character":6}},"context":{"diagnostics":[]}},"id":573,"jsonrpc":"2.0"}
<<<
Content-Length: 361

{"id":573,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":6,"line":307},"start":{"character":6,"line":307}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":306,"character":5}},"id":574,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":574,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":306,"character":6}},"id":575,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":575,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":306,"character":6},"end":{"line":306,"character":6}},"context":{"diagnostics":[]}},"id":576,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":576,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":314,"character":1}},"id":577,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":577,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":765},"contentChanges":[{"range":{"start":{"line":306,"character":5},"end":{"line":306,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":765}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":306,"character":5},"end":{"line":306,"character":5}},"context":{"diagnostics":[]}},"id":578,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":578,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":766},"contentChanges":[{"range":{"start":{"line":306,"character":5},"end":{"line":306,"character":5}},"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":766}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":306,"character":6},"end":{"line":306,"character":6}},"context":{"diagnostics":[]}},"id":579,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":579,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":314,"character":3}},"id":580,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":580,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":4}},"id":581,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":581,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":7}},"id":582,"jsonrpc":"2.0"}
<<<
Content-Length: 670

{"id":582,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":8,"line":315},"start":{"character":7,"line":315}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":8},"end":{"line":315,"character":8}},"context":{"diagnostics":[]}},"id":583,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":583,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":315,"character":7}},"id":584,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":584,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":13,"line":303},"start":{"character":2,"line":303}}},{"kind":1,"range":{"end":{"character":13,"line":312},"start":{"character":2,"line":312}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":7},"end":{"line":315,"character":7}},"context":{"diagnostics":[]}},"id":585,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":585,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":4},"end":{"line":315,"character":7}},"context":{"diagnostics":[]}},"id":586,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":586,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","selection":{"end":{"character":7,"line":315},"start":{"character":4,"line":315}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":767},"contentChanges":[{"range":{"start":{"line":315,"character":4},"end":{"line":315,"character":7}},"rangeLength":3,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":767}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":5},"end":{"line":315,"character":5}},"context":{"diagnostics":[]}},"id":587,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":587,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":768},"contentChanges":[{"range":{"start":{"line":315,"character":5},"end":{"line":315,"character":5}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":768}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":6},"end":{"line":315,"character":6}},"context":{"diagnostics":[]}},"id":588,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":588,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":769},"contentChanges":[{"range":{"start":{"line":315,"character":6},"end":{"line":315,"character":6}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":769}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":770},"contentChanges":[{"range":{"start":{"line":315,"character":7},"end":{"line":315,"character":7}},"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":770}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":315,"character":8},"end":{"line":315,"character":8}},"context":{"diagnostics":[]}},"id":589,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":589,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":311,"character":9}},"id":590,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":590,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":12}},"id":591,"jsonrpc":"2.0"}
<<<
Content-Length: 671

{"id":591,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":13,"line":312},"start":{"character":2,"line":312}}}}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":305,"character":10}},"id":592,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":592,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":305,"character":10},"end":{"line":305,"character":10}},"context":{"diagnostics":[]}},"id":593,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":593,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":771},"contentChanges":[{"range":{"start":{"line":305,"character":10},"end":{"line":305,"character":10}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":771}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":305,"character":11},"end":{"line":305,"character":11}},"context":{"diagnostics":[]}},"id":594,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":594,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":313,"character":7}},"id":595,"jsonrpc":"2.0"}
<<<
Content-Length: 314

{"id":595,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `task2`  \n\n---\n→ `void`  \nParameters:  \n- `void * parameters`\n\nPassed as pvTaskCode  \n\n---\n```cpp\nvoid task2(void *parameters)\n```"},"range":{"end":{"character":9,"line":313},"start":{"character":4,"line":313}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":314,"character":9}},"id":596,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":596,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":314,"character":10}},"id":597,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":597,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":314,"character":10},"end":{"line":314,"character":10}},"context":{"diagnostics":[]}},"id":598,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":598,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":12}},"id":599,"jsonrpc":"2.0"}
<<<
Content-Length: 671

{"id":599,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":13,"line":312},"start":{"character":2,"line":312}}}}
>>>
Content-Length: 207

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":12}},"id":600,"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"id":600,"jsonrpc":"2.0","result":[{"range":{"end":{"character":47,"line":431},"start":{"character":36,"line":431}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}]}
>>>
Content-Length: 98727

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h","languageId":"cpp","version":1,"text":"/*\n    FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.\n    All rights reserved\n\n    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.\n\n    This file is part of the FreeRTOS distribution.\n\n    FreeRTOS is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License (version 2) as published by the\n    Free Software Foundation \u003e\u003e!AND MODIFIED BY!\u003c\u003c the FreeRTOS exception.\n\n\t***************************************************************************\n    \u003e\u003e!   NOTE: The modification to the GPL is included to allow you to     !\u003c\u003c\n    \u003e\u003e!   distribute a combined work that includes FreeRTOS without being   !\u003c\u003c\n    \u003e\u003e!   obliged to provide the source code for proprietary components     !\u003c\u003c\n    \u003e\u003e!   outside of the FreeRTOS kernel.                                   !\u003c\u003c\n\t***************************************************************************\n\n    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY\n    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n    FOR A PARTICULAR PURPOSE.  Full license text is available on the following\n    link: http://www.freertos.org/a00114.html\n\n    ***************************************************************************\n     *                                                                       *\n     *    FreeRTOS provides completely free yet professionally developed,    *\n     *    robust, strictly quality controlled, supported, and cross          *\n     *    platform software that is more than just the market leader, it     *\n     *    is the industry's de facto standard.                               *\n     *                                                                       *\n     *    Help yourself get started quickly while simultaneously helping     *\n     *    to support the FreeRTOS project by purchasing a FreeRTOS           *\n     *    tutorial book, reference manual, or both:                          *\n     *    http://www.FreeRTOS.org/Documentation                              *\n     *                                                                       *\n    ***************************************************************************\n\n    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading\n\tthe FAQ page \"My application does not run, what could be wrong?\".  Have you\n\tdefined configASSERT()?\n\n\thttp://www.FreeRTOS.org/support - In return for receiving this top quality\n\tembedded software for free we request you assist our global community by\n\tparticipating in the support forum.\n\n\thttp://www.FreeRTOS.org/training - Investing in training allows your team to\n\tbe as productive as possible as early as possible.  Now you can receive\n\tFreeRTOS training directly from Richard Barry, CEO of Real Time Engineers\n\tLtd, and the world's leading authority on the world's leading RTOS.\n\n    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,\n    including FreeRTOS+Trace - an indispensable productivity tool, a DOS\n    compatible FAT file system, and our tiny thread aware UDP/IP stack.\n\n    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.\n    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.\n\n    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High\n    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS\n    licenses offer ticketed support, indemnification and commercial middleware.\n\n    http://www.SafeRTOS.com - High Integrity Systems also provide a safety\n    engineered and independently SIL3 certified version for use in safety and\n    mission critical applications that require provable dependability.\n\n    1 tab == 4 spaces!\n*/\n\n\n#ifndef INC_TASK_H\n#define INC_TASK_H\n\n#ifndef INC_FREERTOS_H\n\t#error \"include FreeRTOS.h must appear in source files before include task.h\"\n#endif\n\n#include \u003climits.h\u003e\n\n#include \"list.h\"\n#include \"portmacro.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*-----------------------------------------------------------\n * MACROS AND DEFINITIONS\n *----------------------------------------------------------*/\n\n#define tskKERNEL_VERSION_NUMBER \"V8.2.0\"\n#define tskKERNEL_VERSION_MAJOR 8\n#define tskKERNEL_VERSION_MINOR 2\n#define tskKERNEL_VERSION_BUILD 0\n\n/**\n * @brief Argument of xTaskCreatePinnedToCore indicating that task has no affinity\n */\n#define tskNO_AFFINITY INT_MAX\n\n/**\n * task. h\n *\n * Type by which tasks are referenced.  For example, a call to xTaskCreate\n * returns (via a pointer parameter) an TaskHandle_t variable that can then\n * be used as a parameter to vTaskDelete to delete the task.\n *\n * \\ingroup Tasks\n */\ntypedef void * TaskHandle_t;\n\n/**\n * Defines the prototype to which the application task hook function must\n * conform.\n */\ntypedef BaseType_t (*TaskHookFunction_t)( void * );\n\n/** Task states returned by eTaskGetState. */\ntypedef enum\n{\n\teRunning = 0,\t/*!\u003c A task is querying the state of itself, so must be running. */\n\teReady,\t\t\t/*!\u003c The task being queried is in a read or pending ready list. */\n\teBlocked,\t\t/*!\u003c The task being queried is in the Blocked state. */\n\teSuspended,\t\t/*!\u003c The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */\n\teDeleted\t\t/*!\u003c The task being queried has been deleted, but its TCB has not yet been freed. */\n} eTaskState;\n\n/** Actions that can be performed when vTaskNotify() is called. */\ntypedef enum\n{\n\teNoAction = 0,\t\t\t\t/*!\u003c Notify the task without updating its notify value. */\n\teSetBits,\t\t\t\t\t/*!\u003c Set bits in the task's notification value. */\n\teIncrement,\t\t\t\t\t/*!\u003c Increment the task's notification value. */\n\teSetValueWithOverwrite,\t\t/*!\u003c Set the task's notification value to a specific value even if the previous value has not yet been read by the task. */\n\teSetValueWithoutOverwrite\t/*!\u003c Set the task's notification value if the previous value has been read by the task. */\n} eNotifyAction;\n\n/** @cond */\n/**\n * Used internally only.\n */\ntypedef struct xTIME_OUT\n{\n\tBaseType_t xOverflowCount;\n\tTickType_t xTimeOnEntering;\n} TimeOut_t;\n\n/**\n * Defines the memory ranges allocated to the task when an MPU is used.\n */\ntypedef struct xMEMORY_REGION\n{\n\tvoid *pvBaseAddress;\n\tuint32_t ulLengthInBytes;\n\tuint32_t ulParameters;\n} MemoryRegion_t;\n\n/**\n * Parameters required to create an MPU protected task.\n */\ntypedef struct xTASK_PARAMETERS\n{\n\tTaskFunction_t pvTaskCode;\n\tconst char * const pcName;\t/*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tuint32_t usStackDepth;\n\tvoid *pvParameters;\n\tUBaseType_t uxPriority;\n\tStackType_t *puxStackBuffer;\n\tMemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];\n} TaskParameters_t;\n/** @endcond */\n\n/**\n *  Used with the uxTaskGetSystemState() function to return the state of each task in the system.\n*/\ntypedef struct xTASK_STATUS\n{\n\tTaskHandle_t xHandle;\t\t\t/*!\u003c The handle of the task to which the rest of the information in the structure relates. */\n\tconst char *pcTaskName;\t\t\t/*!\u003c A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tUBaseType_t xTaskNumber;\t\t/*!\u003c A number unique to the task. */\n\teTaskState eCurrentState;\t\t/*!\u003c The state in which the task existed when the structure was populated. */\n\tUBaseType_t uxCurrentPriority;\t/*!\u003c The priority at which the task was running (may be inherited) when the structure was populated. */\n\tUBaseType_t uxBasePriority;\t\t/*!\u003c The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. */\n\tuint32_t ulRunTimeCounter;\t\t/*!\u003c The total run time allocated to the task so far, as defined by the run time stats clock.  See http://www.freertos.org/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. */\n\tStackType_t *pxStackBase;\t\t/*!\u003c Points to the lowest address of the task's stack area. */\n\tuint32_t usStackHighWaterMark;\t/*!\u003c The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. */\n#if configTASKLIST_INCLUDE_COREID\n\tBaseType_t xCoreID;\t\t\t\t/*!\u003c Core this task is pinned to. This field is present if CONFIG_FREERTOS_VTASKLIST_INCLUDE_COREID is set. */\n#endif\n} TaskStatus_t;\n\n/**\n * Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.\n * We need this struct because TCB_t is defined (hidden) in tasks.c.\n */\ntypedef struct xTASK_SNAPSHOT\n{\n\tvoid        *pxTCB;         /*!\u003c Address of task control block. */\n\tStackType_t *pxTopOfStack;  /*!\u003c Points to the location of the last item placed on the tasks stack. */\n\tStackType_t *pxEndOfStack;  /*!\u003c Points to the end of the stack. pxTopOfStack \u003c pxEndOfStack, stack grows hi2lo\n\t\t\t\t\t\t\t\t\tpxTopOfStack \u003e pxEndOfStack, stack grows lo2hi*/\n} TaskSnapshot_t;\n\n/**\n * Possible return values for eTaskConfirmSleepModeStatus().\n */\ntypedef enum\n{\n\teAbortSleep = 0,\t\t/*!\u003c A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */\n\teStandardSleep,\t\t\t/*!\u003c Enter a sleep mode that will not last any longer than the expected idle time. */\n\teNoTasksWaitingTimeout\t/*!\u003c No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */\n} eSleepModeStatus;\n\n\n/**\n * Defines the priority used by the idle task.  This must not be modified.\n *\n * \\ingroup TaskUtils\n */\n#define tskIDLE_PRIORITY\t\t\t( ( UBaseType_t ) 0U )\n\n/**\n * task. h\n *\n * Macro for forcing a context switch.\n *\n * \\ingroup SchedulerControl\n */\n#define taskYIELD()\t\t\t\t\tportYIELD()\n\n/**\n * task. h\n *\n * Macro to mark the start of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskENTER_CRITICAL(mux)\t\tportENTER_CRITICAL(mux)\n#else\n#define taskENTER_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskENTER_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portENTER_CRITICAL(mux)'\\\"\") portENTER_CRITICAL(mux)\n#endif\n#define taskENTER_CRITICAL_ISR(mux)\t\tportENTER_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to mark the end of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskEXIT_CRITICAL(mux)\t\t\tportEXIT_CRITICAL(mux)\n#else\n#define taskEXIT_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskEXIT_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portEXIT_CRITICAL(mux)'\\\"\") portEXIT_CRITICAL(mux)\n#endif\n#define taskEXIT_CRITICAL_ISR(mux)\t\tportEXIT_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to disable all maskable interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskDISABLE_INTERRUPTS()\tportDISABLE_INTERRUPTS()\n\n/**\n * task. h\n *\n * Macro to enable microcontroller interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskENABLE_INTERRUPTS()\t\tportENABLE_INTERRUPTS()\n\n/* Definitions returned by xTaskGetSchedulerState().  taskSCHEDULER_SUSPENDED is\n0 to generate more optimal code when configASSERT() is defined as the constant\nis used in assert() statements. */\n#define taskSCHEDULER_SUSPENDED\t\t( ( BaseType_t ) 0 )\n#define taskSCHEDULER_NOT_STARTED\t( ( BaseType_t ) 1 )\n#define taskSCHEDULER_RUNNING\t\t( ( BaseType_t ) 2 )\n\n\n/*-----------------------------------------------------------\n * TASK CREATION API\n *----------------------------------------------------------*/\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreate, but allows setting task affinity\n * in SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\tBaseType_t xTaskCreatePinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\tconst uint32_t usStackDepth,\n\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\tTaskHandle_t * const pvCreatedTask,\n\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID);\n\n#endif\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * See xTaskCreateStatic() for a version that does not use any dynamic memory\n * allocation.\n *\n * xTaskCreate() can only be used to create a task that has unrestricted\n * access to the entire microcontroller memory map.  Systems that include MPU\n * support can alternatively create an MPU constrained task using\n * xTaskCreateRestricted().\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *  // Task to be created.\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *   }\n *  }\n *\n *  // Function that creates a task.\n *  void vOtherFunction( void )\n *  {\n *  static uint8_t ucParameterToPass;\n *  TaskHandle_t xHandle = NULL;\n *\n *   // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass\n *   // must exist for the lifetime of the task, so in this case is declared static.  If it was just an\n *   // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time\n *   // the new task attempts to access it.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, \u0026ucParameterToPass, tskIDLE_PRIORITY, \u0026xHandle );\n *      configASSERT( xHandle );\n *\n *   // Use the handle to delete the task.\n *      if( xHandle != NULL )\n *      {\n *       vTaskDelete( xHandle );\n *      }\n *  }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\n\tstatic inline IRAM_ATTR BaseType_t xTaskCreate(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t usStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tTaskHandle_t * const pvCreatedTask)\n\t{\n\t\treturn xTaskCreatePinnedToCore( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pvCreatedTask, tskNO_AFFINITY );\n\t}\n\n#endif\n\n\n\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreateStatic, but allows specifying\n * task affinity in an SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tTaskHandle_t xTaskCreateStaticPinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\t\t\tconst uint32_t ulStackDepth,\n\t\t\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\t\t\tStackType_t * const pxStackBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tStaticTask_t * const pxTaskBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID );\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *\n *     // Dimensions the buffer that the task being created will use as its stack.\n *     // NOTE:  This is the number of bytes the stack will hold, not the number of\n *     // words as found in vanilla FreeRTOS.\n *     #define STACK_SIZE 200\n *\n *     // Structure that will hold the TCB of the task being created.\n *     StaticTask_t xTaskBuffer;\n *\n *     // Buffer that the task being created will use as its stack.  Note this is\n *     // an array of StackType_t variables.  The size of StackType_t is dependent on\n *     // the RTOS port.\n *     StackType_t xStack[ STACK_SIZE ];\n *\n *     // Function that implements the task being created.\n *     void vTaskCode( void * pvParameters )\n *     {\n *         // The parameter value is expected to be 1 as 1 is passed in the\n *         // pvParameters value in the call to xTaskCreateStatic().\n *         configASSERT( ( uint32_t ) pvParameters == 1UL );\n *\n *         for( ;; )\n *         {\n *             // Task code goes here.\n *         }\n *     }\n *\n *     // Function that creates a task.\n *     void vOtherFunction( void )\n *     {\n *         TaskHandle_t xHandle = NULL;\n *\n *         // Create the task without using any dynamic memory allocation.\n *         xHandle = xTaskCreateStatic(\n *                       vTaskCode,       // Function that implements the task.\n *                       \"NAME\",          // Text name for the task.\n *                       STACK_SIZE,      // Stack size in bytes, not words.\n *                       ( void * ) 1,    // Parameter passed into the task.\n *                       tskIDLE_PRIORITY,// Priority at which the task is created.\n *                       xStack,          // Array to use as the task's stack.\n *                       \u0026xTaskBuffer );  // Variable to hold the task's data structure.\n *\n *         // puxStackBuffer and pxTaskBuffer were not NULL, so the task will have\n *         // been created, and xHandle will be the task's handle.  Use the handle\n *         // to suspend the task.\n *         vTaskSuspend( xHandle );\n *     }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tstatic inline IRAM_ATTR TaskHandle_t xTaskCreateStatic(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t ulStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tStackType_t * const pxStackBuffer,\n\t\t\tStaticTask_t * const pxTaskBuffer)\n\t{\n\t\treturn xTaskCreateStaticPinnedToCore( pvTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, pxStackBuffer, pxTaskBuffer, tskNO_AFFINITY );\n\t}\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/** @cond */\n/**\n * xTaskCreateRestricted() should only be used in systems that include an MPU\n * implementation.\n *\n * Create a new task and add it to the list of tasks that are ready to run.\n * The function parameters define the memory regions and associated access\n * permissions allocated to the task.\n *\n * @param pxTaskDefinition Pointer to a structure that contains a member\n * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API\n * documentation) plus an optional stack buffer and the memory region\n * definitions.\n *\n * @param pxCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * Example usage:\n * @code{c}\n * // Create an TaskParameters_t structure that defines the task to be created.\n * static const TaskParameters_t xCheckTaskParameters =\n * {\n * \tvATask,\t\t// pvTaskCode - the function that implements the task.\n * \t\"ATask\",\t// pcName - just a text name for the task to assist debugging.\n * \t100,\t\t// usStackDepth\t- the stack size DEFINED IN BYTES.\n * \tNULL,\t\t// pvParameters - passed into the task function as the function parameters.\n * \t( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.\n * \tcStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.\n *\n * \t// xRegions - Allocate up to three separate memory regions for access by\n * \t// the task, with appropriate access permissions.  Different processors have\n * \t// different memory alignment requirements - refer to the FreeRTOS documentation\n * \t// for full information.\n * \t{\n * \t\t// Base address\t\t\t\t\tLength\tParameters\n *         { cReadWriteArray,\t\t\t\t32,\t\tportMPU_REGION_READ_WRITE },\n *         { cReadOnlyArray,\t\t\t\t32,\t\tportMPU_REGION_READ_ONLY },\n *         { cPrivilegedOnlyAccessArray,\t128,\tportMPU_REGION_PRIVILEGED_READ_WRITE }\n * \t}\n * };\n *\n * int main( void )\n * {\n * TaskHandle_t xHandle;\n *\n * \t// Create a task from the const structure defined above.  The task handle\n * \t// is requested (the second parameter is not NULL) but in this case just for\n * \t// demonstration purposes as its not actually used.\n * \txTaskCreateRestricted( \u0026xRegTest1Parameters, \u0026xHandle );\n *\n * \t// Start the scheduler.\n * \tvTaskStartScheduler();\n *\n * \t// Will only get here if there was insufficient memory to create the idle\n * \t// and/or timer task.\n * \tfor( ;; );\n * }\n * @endcode\n * \\ingroup Tasks\n */\n#if( portUSING_MPU_WRAPPERS == 1 )\n\tBaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask ) PRIVILEGED_FUNCTION;\n#endif\n\n\n/**\n * Memory regions are assigned to a restricted task when the task is created by\n * a call to xTaskCreateRestricted().  These regions can be redefined using\n * vTaskAllocateMPURegions().\n *\n * @param xTask The handle of the task being updated.\n *\n * @param xRegions A pointer to an MemoryRegion_t structure that contains the\n * new memory region definitions.\n *\n * Example usage:\n *\n * @code{c}\n * // Define an array of MemoryRegion_t structures that configures an MPU region\n * // allowing read/write access for 1024 bytes starting at the beginning of the\n * // ucOneKByte array.  The other two of the maximum 3 definable regions are\n * // unused so set to zero.\n * static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =\n * {\n * \t// Base address\t\tLength\t\tParameters\n * \t{ ucOneKByte,\t\t1024,\t\tportMPU_REGION_READ_WRITE },\n * \t{ 0,\t\t\t\t0,\t\t\t0 },\n * \t{ 0,\t\t\t\t0,\t\t\t0 }\n * };\n *\n * void vATask( void *pvParameters )\n * {\n * \t// This task was created such that it has access to certain regions of\n * \t// memory as defined by the MPU configuration.  At some point it is\n * \t// desired that these MPU regions are replaced with that defined in the\n * \t// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()\n * \t// for this purpose.  NULL is used as the task handle to indicate that this\n * \t// function should modify the MPU regions of the calling task.\n * \tvTaskAllocateMPURegions( NULL, xAltRegions );\n *\n * \t// Now the task can continue its function, but from this point on can only\n * \t// access its stack and the ucOneKByte array (unless any other statically\n * \t// defined or shared regions have been declared elsewhere).\n * }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Remove a task from the RTOS real time kernel's management.\n *\n * The task being deleted will be removed from all ready, blocked, suspended\n * and event lists.\n *\n * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @note The idle task is responsible for freeing the kernel allocated\n * memory from tasks that have been deleted.  It is therefore important that\n * the idle task is not starved of microcontroller processing time if your\n * application makes any calls to vTaskDelete ().  Memory allocated by the\n * task code is not automatically freed, and should be freed before the task\n * is deleted.\n *\n * See the demo application file death.c for sample code that utilises\n * vTaskDelete ().\n *\n * @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will\n * cause the calling task to be deleted.\n *\n * Example usage:\n * @code{c}\n *  void vOtherFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n * \t // Create the task, storing the handle.\n * \t xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n * \t // Use the handle to delete the task.\n * \t vTaskDelete( xHandle );\n *  }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskDelete( TaskHandle_t xTaskToDelete ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK CONTROL API\n *----------------------------------------------------------*/\n\n/**\n * Delay a task for a given number of ticks.\n *\n * The actual time that the task remains blocked depends on the tick rate.\n * The constant portTICK_PERIOD_MS can be used to calculate real time from\n * the tick rate - with the resolution of one tick period.\n *\n * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * vTaskDelay() specifies a time at which the task wishes to unblock relative to\n * the time at which vTaskDelay() is called.  For example, specifying a block\n * period of 100 ticks will cause the task to unblock 100 ticks after\n * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method\n * of controlling the frequency of a periodic task as the path taken through the\n * code, as well as other task and interrupt activity, will effect the frequency\n * at which vTaskDelay() gets called and therefore the time at which the task\n * next executes.  See vTaskDelayUntil() for an alternative API function designed\n * to facilitate fixed frequency execution.  It does this by specifying an\n * absolute time (rather than a relative time) at which the calling task should\n * unblock.\n *\n * @param xTicksToDelay The amount of time, in tick periods, that\n * the calling task should block.\n *\n * Example usage:\n * @code{c}\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  // Block for 500ms.\n *  const TickType_t xDelay = 500 / portTICK_PERIOD_MS;\n *\n * \t for( ;; )\n * \t {\n * \t\t // Simply toggle the LED every 500ms, blocking between each toggle.\n * \t\t vToggleLED();\n * \t\t vTaskDelay( xDelay );\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelay( const TickType_t xTicksToDelay ) PRIVILEGED_FUNCTION;\n\n/**\n * Delay a task until a specified time.\n *\n * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * This function can be used by periodic tasks to ensure a constant execution frequency.\n *\n * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will\n * cause a task to block for the specified number of ticks from the time vTaskDelay () is\n * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed\n * execution frequency as the time between a task starting to execute and that task\n * calling vTaskDelay () may not be fixed [the task may take a different path though the\n * code between calls, or may get interrupted or preempted a different number of times\n * each time it executes].\n *\n * Whereas vTaskDelay () specifies a wake time relative to the time at which the function\n * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to\n * unblock.\n *\n * The constant portTICK_PERIOD_MS can be used to calculate real time from the tick\n * rate - with the resolution of one tick period.\n *\n * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the\n * task was last unblocked.  The variable must be initialised with the current time\n * prior to its first use (see the example below).  Following this the variable is\n * automatically updated within vTaskDelayUntil ().\n *\n * @param xTimeIncrement The cycle time period.  The task will be unblocked at\n * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the\n * same xTimeIncrement parameter value will cause the task to execute with\n * a fixed interface period.\n *\n * Example usage:\n * @code{c}\n *  // Perform an action every 10 ticks.\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  TickType_t xLastWakeTime;\n *  const TickType_t xFrequency = 10;\n *\n * \t // Initialise the xLastWakeTime variable with the current time.\n * \t xLastWakeTime = xTaskGetTickCount ();\n * \t for( ;; )\n * \t {\n * \t\t // Wait for the next cycle.\n * \t\t vTaskDelayUntil( \u0026xLastWakeTime, xFrequency );\n *\n * \t\t // Perform action here.\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the priority of any task.\n *\n * INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to obtain the priority of the created task.\n *   // It was created with tskIDLE_PRIORITY, but may have changed\n *   // it itself.\n *   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )\n *   {\n *       // The task has changed it's priority.\n *   }\n *\n *   // ...\n *\n *   // Is our priority higher than the created task?\n *   if( uxTaskPriorityGet( xHandle ) \u003c uxTaskPriorityGet( NULL ) )\n *   {\n *       // Our priority (obtained using NULL handle) is higher.\n *   }\n * }\n * @endcode\n * \\ingroup TaskCtrl\n */\nUBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * A version of uxTaskPriorityGet() that can be used from an ISR.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n */\nUBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the state of any task.\n *\n * States are encoded by the eTaskState enumerated type.\n *\n * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.\n *\n * @return The state of xTask at the time the function was called.  Note the\n * state of the task might change between the function being called, and the\n * functions return value being tested by the calling task.\n */\neTaskState eTaskGetState( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Set the priority of any task.\n *\n * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A context switch will occur before the function returns if the priority\n * being set is higher than the currently executing task.\n *\n * @param xTask Handle to the task for which the priority is being set.\n * Passing a NULL handle results in the priority of the calling task being set.\n *\n * @param uxNewPriority The priority to which the task will be set.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to raise the priority of the created task.\n *   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );\n *\n *   // ...\n *\n *   // Use a NULL handle to raise our priority to the same value.\n *   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) PRIVILEGED_FUNCTION;\n\n/**\n * Suspend a task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * When suspended, a task will never get any microcontroller processing time,\n * no matter what its priority.\n *\n * Calls to vTaskSuspend are not accumulative -\n * i.e. calling vTaskSuspend () twice on the same task still only requires one\n * call to vTaskResume () to ready the suspended task.\n *\n * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL\n * handle will cause the calling task to be suspended.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Suspend ourselves.\n *   vTaskSuspend( NULL );\n *\n *   // We cannot get here unless another task calls vTaskResume\n *   // with our handle as the parameter.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskSuspend( TaskHandle_t xTaskToSuspend ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes a suspended task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * vTaskResume ().\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Resume the suspended task ourselves.\n *   vTaskResume( xHandle );\n *\n *   // The created task will once again get microcontroller processing\n *   // time in accordance with its priority within the system.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskResume( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/**\n * An implementation of vTaskResume() that can be called from within an ISR.\n *\n * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be\n * available.  See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * xTaskResumeFromISR ().\n *\n * xTaskResumeFromISR() should not be used to synchronise a task with an\n * interrupt if there is a chance that the interrupt could arrive prior to the\n * task being suspended - as this can lead to interrupts being missed. Use of a\n * semaphore as a synchronisation mechanism would avoid this eventuality.\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * @return pdTRUE if resuming the task should result in a context switch,\n * otherwise pdFALSE. This is used by the ISR to determine if a context switch\n * may be required following the ISR.\n *\n * \\ingroup TaskCtrl\n */\nBaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * SCHEDULER CONTROL\n *----------------------------------------------------------*/\n/** @cond */\n/**\n * Starts the real time kernel tick processing.\n *\n * After calling the kernel has control over which tasks are executed and when.\n *\n * See the demo application file main.c for an example of creating\n * tasks and starting the kernel.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will not get here unless a task calls vTaskEndScheduler ()\n *  }\n * @endcode\n *\n * \\ingroup SchedulerControl\n */\nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Stops the real time kernel tick.\n *\n * @note At the time of writing only the x86 real mode port, which runs on a PC\n * in place of DOS, implements this function.\n *\n * All created tasks will be automatically deleted and multitasking\n * (either preemptive or cooperative) will stop.\n * Execution then resumes from the point where vTaskStartScheduler ()\n * was called, as if vTaskStartScheduler () had just returned.\n *\n * See the demo application file main. c in the demo/PC directory for an\n * example that uses vTaskEndScheduler ().\n *\n * vTaskEndScheduler () requires an exit function to be defined within the\n * portable layer (see vPortEndScheduler () in port. c for the PC port).  This\n * performs hardware specific operations such as stopping the kernel tick.\n *\n * vTaskEndScheduler () will cause all of the resources allocated by the\n * kernel to be freed - but will not free resources allocated by application\n * tasks.\n *\n * Example usage:\n * @code{c}\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // At some point we want to end the real time kernel processing\n *       // so call ...\n *       vTaskEndScheduler ();\n *   }\n *  }\n *\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will only get here when the vTaskCode () task has called\n *   // vTaskEndScheduler ().  When we get here we are back to single task\n *   // execution.\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Suspends the scheduler without disabling interrupts.\n *\n * Context switches will not occur while the scheduler is suspended.\n *\n * After calling vTaskSuspendAll () the calling task will continue to execute\n * without risk of being swapped out until a call to xTaskResumeAll () has been\n * made.\n *\n * API functions that have the potential to cause a context switch (for example,\n * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler\n * is suspended.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the kernel\n *       // tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.\n *       xTaskResumeAll ();\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes scheduler activity after it was suspended by a call to\n * vTaskSuspendAll().\n *\n * xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks\n * that were previously suspended by a call to vTaskSuspend().\n *\n * @return If resuming the scheduler caused a context switch then pdTRUE is\n *\t\t  returned, otherwise pdFALSE is returned.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the real\n *       // time kernel tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.  We want to force\n *       // a context switch - but there is no point if resuming the scheduler\n *       // caused a context switch already.\n *       if( !xTaskResumeAll () )\n *       {\n *            taskYIELD ();\n *       }\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nBaseType_t xTaskResumeAll( void ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK UTILITIES\n *----------------------------------------------------------*/\n\n/**\n * Get tick count\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get tick count from ISR\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * This is a version of xTaskGetTickCount() that is safe to be called from an\n * ISR - provided that TickType_t is the natural word size of the\n * microcontroller being used or interrupt nesting is either not supported or\n * not being used.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get current number of tasks\n *\n * @return The number of tasks that the real time kernel is currently managing.\n * This includes all ready, blocked and suspended tasks.  A task that\n * has been deleted but not yet freed by the idle task will also be\n * included in the count.\n *\n * \\ingroup TaskUtils\n */\nUBaseType_t uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get task name\n *\n * @return The text (human readable) name of the task referenced by the handle\n * xTaskToQuery.  A task can query its own name by either passing in its own\n * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be\n * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.\n *\n * \\ingroup TaskUtils\n */\nchar *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Returns the high water mark of the stack associated with xTask.\n *\n * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * High water mark is the minimum free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task started.\n * The smaller the returned number the closer the task has come to overflowing its stack.\n *\n * @param xTask Handle of the task associated with the stack to be checked.\n * Set xTask to NULL to check the stack of the calling task.\n *\n * @return The smallest amount of free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task referenced by\n * xTask was created.\n */\nUBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Returns the start of the stack associated with xTask.\n *\n * INCLUDE_pxTaskGetStackStart must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * Returns the highest stack memory address on architectures where the stack grows down\n * from high memory, and the lowest memory address on architectures where the\n * stack grows up from low memory.\n *\n * @param xTask Handle of the task associated with the stack returned.\n * Set xTask to NULL to return the stack of the calling task.\n *\n * @return A pointer to the start of the stack.\n */\nuint8_t* pxTaskGetStackStart( TaskHandle_t xTask) PRIVILEGED_FUNCTION;\n\n/* When using trace macros it is sometimes necessary to include task.h before\nFreeRTOS.h.  When this is done TaskHookFunction_t will not yet have been defined,\nso the following two prototypes will cause a compilation error.  This can be\nfixed by simply guarding against the inclusion of these two prototypes unless\nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration\nconstant. */\n#ifdef configUSE_APPLICATION_TASK_TAG\n\t#if configUSE_APPLICATION_TASK_TAG == 1\n\t\t/**\n\t\t * Sets pxHookFunction to be the task hook function used by the task xTask.\n\t\t * @param xTask Handle of the task to set the hook function for\n\t\t *              Passing xTask as NULL has the effect of setting the calling\n\t\t *              tasks hook function.\n\t\t * @param pxHookFunction  Pointer to the hook function.\n\t\t */\n\t\tvoid vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction ) PRIVILEGED_FUNCTION;\n\n\t\t/**\n\t\t * Get the hook function assigned to given task.\n\t\t * @param xTask Handle of the task to get the hook function for\n\t\t *              Passing xTask as NULL has the effect of getting the calling\n\t\t *              tasks hook function.\n\t\t * @return The pxHookFunction value assigned to the task xTask.\n\t\t */\n\t\tTaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\t#endif /* configUSE_APPLICATION_TASK_TAG ==1 */\n#endif /* ifdef configUSE_APPLICATION_TASK_TAG */\n#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS \u003e 0 )\n\n\t/**\n\t * Set local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t * @param xIndex The index of the pointer to set, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @param pvValue  Pointer value to set.\n\t */\n\tvoid vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue ) PRIVILEGED_FUNCTION;\n\n\n\t/**\n\t * Get local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToQuery  Task to get thread local storage pointer for\n\t * @param xIndex The index of the pointer to get, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @return  Pointer value\n\t */\n\tvoid *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) PRIVILEGED_FUNCTION;\n\n\t#if ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS )\n\n\t\t/**\n\t\t * Prototype of local storage pointer deletion callback.\n\t\t */\n\t\ttypedef void (*TlsDeleteCallbackFunction_t)( int, void * );\n\n\t\t/**\n\t\t * Set local storage pointer and deletion callback.\n\t\t *\n\t\t * Each task contains an array of pointers that is dimensioned by the\n\t\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t\t * The kernel does not use the pointers itself, so the application writer\n\t\t * can use the pointers for any purpose they wish.\n\t\t *\n\t\t * Local storage pointers set for a task can reference dynamically\n\t\t * allocated resources. This function is similar to\n\t\t * vTaskSetThreadLocalStoragePointer, but provides a way to release\n\t\t * these resources when the task gets deleted. For each pointer,\n\t\t * a callback function can be set. This function will be called\n\t\t * when task is deleted, with the local storage pointer index\n\t\t * and value as arguments.\n\t\t *\n\t\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t\t * @param xIndex The index of the pointer to set, from 0 to\n\t\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t\t * @param pvValue  Pointer value to set.\n\t\t * @param pvDelCallback  Function to call to dispose of the local\n\t\t *                       storage pointer when the task is deleted.\n\t\t */\n\t\tvoid vTaskSetThreadLocalStoragePointerAndDelCallback( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue, TlsDeleteCallbackFunction_t pvDelCallback);\n\t#endif\n\n#endif\n\n/**\n * Calls the hook function associated with xTask. Passing xTask as NULL has\n * the effect of calling the Running tasks (the calling task) hook function.\n *\n * @param xTask  Handle of the task to call the hook for.\n * @param pvParameter  Parameter passed to the hook function for the task to interpret as it\n * wants.  The return value is the value returned by the task hook function\n * registered by the user.\n */\nBaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) PRIVILEGED_FUNCTION;\n\n/**\n * Get the handle of idle task for the current CPU.\n *\n * xTaskGetIdleTaskHandle() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @return The handle of the idle task.  It is not valid to call\n * xTaskGetIdleTaskHandle() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandle( void );\n\n/**\n * Get the handle of idle task for the given CPU.\n *\n * xTaskGetIdleTaskHandleForCPU() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @param cpuid The CPU to get the handle for\n *\n * @return Idle task handle of a given cpu. It is not valid to call\n * xTaskGetIdleTaskHandleForCPU() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandleForCPU( UBaseType_t cpuid );\n\n/**\n * Get the state of tasks in the system.\n *\n * configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for\n * uxTaskGetSystemState() to be available.\n *\n * uxTaskGetSystemState() populates an TaskStatus_t structure for each task in\n * the system.  TaskStatus_t structures contain, among other things, members\n * for the task handle, task name, task priority, task state, and total amount\n * of run time consumed by the task.  See the TaskStatus_t structure\n * definition in this file for the full member list.\n *\n * @note  This function is intended for debugging use only as its use results in\n * the scheduler remaining suspended for an extended period.\n *\n * @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.\n * The array must contain at least one TaskStatus_t structure for each task\n * that is under the control of the RTOS.  The number of tasks under the control\n * of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.\n *\n * @param uxArraySize The size of the array pointed to by the pxTaskStatusArray\n * parameter.  The size is specified as the number of indexes in the array, or\n * the number of TaskStatus_t structures contained in the array, not by the\n * number of bytes in the array.\n *\n * @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in\n * FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the\n * total run time (as defined by the run time stats clock, see\n * http://www.freertos.org/rtos-run-time-stats.html) since the target booted.\n * pulTotalRunTime can be set to NULL to omit the total run time information.\n *\n * @return The number of TaskStatus_t structures that were populated by\n * uxTaskGetSystemState().  This should equal the number returned by the\n * uxTaskGetNumberOfTasks() API function, but will be zero if the value passed\n * in the uxArraySize parameter was too small.\n *\n * Example usage:\n * @code{c}\n * // This example demonstrates how a human readable table of run time stats\n * // information is generated from raw data provided by uxTaskGetSystemState().\n * // The human readable table is written to pcWriteBuffer\n * void vTaskGetRunTimeStats( char *pcWriteBuffer )\n * {\n * TaskStatus_t *pxTaskStatusArray;\n * volatile UBaseType_t uxArraySize, x;\n * uint32_t ulTotalRunTime, ulStatsAsPercentage;\n *\n *  // Make sure the write buffer does not contain a string.\n *  *pcWriteBuffer = 0x00;\n *\n *  // Take a snapshot of the number of tasks in case it changes while this\n *  // function is executing.\n *  uxArraySize = uxTaskGetNumberOfTasks();\n *\n *  // Allocate a TaskStatus_t structure for each task.  An array could be\n *  // allocated statically at compile time.\n *  pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );\n *\n *  if( pxTaskStatusArray != NULL )\n *  {\n *      // Generate raw status information about each task.\n *      uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, \u0026ulTotalRunTime );\n *\n *      // For percentage calculations.\n *      ulTotalRunTime /= 100UL;\n *\n *      // Avoid divide by zero errors.\n *      if( ulTotalRunTime \u003e 0 )\n *      {\n *          // For each populated position in the pxTaskStatusArray array,\n *          // format the raw data as human readable ASCII data\n *          for( x = 0; x \u003c uxArraySize; x++ )\n *          {\n *              // What percentage of the total run time has the task used?\n *              // This will always be rounded down to the nearest integer.\n *              // ulTotalRunTimeDiv100 has already been divided by 100.\n *              ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;\n *\n *              if( ulStatsAsPercentage \u003e 0UL )\n *              {\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );\n *              }\n *              else\n *              {\n *                  // If the percentage is zero here then the task has\n *                  // consumed less than 1% of the total run time.\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t\u003c1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );\n *              }\n *\n *              pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );\n *          }\n *      }\n *\n *      // The array is no longer needed, free the memory it consumes.\n *      vPortFree( pxTaskStatusArray );\n *  }\n * }\n * @endcode\n */\nUBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime );\n\n/**\n * List all the current tasks.\n *\n * configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must\n * both be defined as 1 for this function to be available.  See the\n * configuration section of the FreeRTOS.org website for more information.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Lists all the current tasks, along with their current state and stack\n * usage high water mark.\n *\n * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or\n * suspended ('S').\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskList() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays task\n * names, states and stack usage.\n *\n * vTaskList() has a dependency on the sprintf() C library function that might\n * bloat the code size, use a lot of stack, and provide different results on\n * different platforms.  An alternative, tiny, third party, and limited\n * functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState()\n * directly to get access to raw stats data, rather than indirectly through a\n * call to vTaskList().\n *\n * @param pcWriteBuffer A buffer into which the above mentioned details\n * will be written, in ASCII form.  This buffer is assumed to be large\n * enough to contain the generated report.  Approximately 40 bytes per\n * task should be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskList( char * pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Get the state of running tasks as a string\n *\n * configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS\n * must both be defined as 1 for this function to be available.  The application\n * must also then provide definitions for\n * portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()\n * to configure a peripheral timer/counter and return the timers current count\n * value respectively.  The counter should be at least 10 times the frequency of\n * the tick count.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total\n * accumulated execution time being stored for each task.  The resolution\n * of the accumulated time value depends on the frequency of the timer\n * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.\n * Calling vTaskGetRunTimeStats() writes the total execution time of each\n * task into a buffer, both as an absolute count value and as a percentage\n * of the total system execution time.\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays the\n * amount of time each task has spent in the Running state in both absolute and\n * percentage terms.\n *\n * vTaskGetRunTimeStats() has a dependency on the sprintf() C library function\n * that might bloat the code size, use a lot of stack, and provide different\n * results on different platforms.  An alternative, tiny, third party, and\n * limited functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState() directly\n * to get access to raw stats data, rather than indirectly through a call to\n * vTaskGetRunTimeStats().\n *\n * @param pcWriteBuffer A buffer into which the execution times will be\n * written, in ASCII form.  This buffer is assumed to be large enough to\n * contain the generated report.  Approximately 40 bytes per task should\n * be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskGetRunTimeStats( char *pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Send task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );\n\n/**\n * Send task notification from an ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotify() that can be used from an interrupt service routine\n * (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should\n * be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Wait for task notification\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value\n * will be cleared in the calling task's notification value before the task\n * checks to see if any notifications are pending, and optionally blocks if no\n * notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if\n * limits.h is included) or 0xffffffffUL (if limits.h is not included) will have\n * the effect of resetting the task's notification value to 0.  Setting\n * ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.\n *\n * @param ulBitsToClearOnExit If a notification is pending or received before\n * the calling task exits the xTaskNotifyWait() function then the task's\n * notification value (see the xTaskNotify() API function) is passed out using\n * the pulNotificationValue parameter.  Then any bits that are set in\n * ulBitsToClearOnExit will be cleared in the task's notification value (note\n * *pulNotificationValue is set before any bits are cleared).  Setting\n * ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL\n * (if limits.h is not included) will have the effect of resetting the task's\n * notification value to 0 before the function exits.  Setting\n * ulBitsToClearOnExit to 0 will leave the task's notification value unchanged\n * when the function exits (in which case the value passed out in\n * pulNotificationValue will match the task's notification value).\n *\n * @param pulNotificationValue Used to pass the task's notification value out\n * of the function.  Note the value passed out will not be effected by the\n * clearing of any bits caused by ulBitsToClearOnExit being non-zero.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for a notification to be received, should a notification\n * not already be pending when xTaskNotifyWait() was called.  The task\n * will not consume any processing time while it is in the Blocked state.  This\n * is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be\n * used to convert a time specified in milliseconds to a time specified in\n * ticks.\n *\n * @return If a notification was received (including notifications that were\n * already pending when xTaskNotifyWait was called) then pdPASS is\n * returned.  Otherwise pdFAIL is returned.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );\n\n/**\n * Simplified macro for sending task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * xTaskNotifyGive() is a helper macro intended for use when task notifications\n * are used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given using the xSemaphoreGive() API function,\n * the equivalent action that instead uses a task notification is\n * xTaskNotifyGive().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @return xTaskNotifyGive() is a macro that calls xTaskNotify() with the\n * eAction parameter set to eIncrement - so pdPASS is always returned.\n *\n * \\ingroup TaskNotifications\n */\n#define xTaskNotifyGive( xTaskToNotify ) xTaskNotify( ( xTaskToNotify ), 0, eIncrement )\n\n/**\n * Simplified macro for sending task notification from ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotifyGive() that can be called from an interrupt service\n * routine (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * vTaskNotifyGiveFromISR() is intended for use when task notifications are\n * used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given from an ISR using the\n * xSemaphoreGiveFromISR() API function, the equivalent action that instead uses\n * a task notification is vTaskNotifyGiveFromISR().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch\n * should be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * \\ingroup TaskNotifications\n */\nvoid vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Simplified macro for receiving task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * ulTaskNotifyTake() is intended for use when a task notification is used as a\n * faster and lighter weight binary or counting semaphore alternative.  Actual\n * FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the\n * equivalent action that instead uses a task notification is\n * ulTaskNotifyTake().\n *\n * When a task is using its notification value as a binary or counting semaphore\n * other tasks should send notifications to it using the xTaskNotifyGive()\n * macro, or xTaskNotify() function with the eAction parameter set to\n * eIncrement.\n *\n * ulTaskNotifyTake() can either clear the task's notification value to\n * zero on exit, in which case the notification value acts like a binary\n * semaphore, or decrement the task's notification value on exit, in which case\n * the notification value acts like a counting semaphore.\n *\n * A task can use ulTaskNotifyTake() to [optionally] block to wait for a\n * the task's notification value to be non-zero.  The task does not consume any\n * CPU time while it is in the Blocked state.\n *\n * Where as xTaskNotifyWait() will return when a notification is pending,\n * ulTaskNotifyTake() will return when the task's notification value is\n * not zero.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's\n * notification value is decremented when the function exits.  In this way the\n * notification value acts like a counting semaphore.  If xClearCountOnExit is\n * not pdFALSE then the task's notification value is cleared to zero when the\n * function exits.  In this way the notification value acts like a binary\n * semaphore.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for the task's notification value to be greater than zero,\n * should the count not already be greater than zero when\n * ulTaskNotifyTake() was called.  The task will not consume any processing\n * time while it is in the Blocked state.  This is specified in kernel ticks,\n * the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time\n * specified in milliseconds to a time specified in ticks.\n *\n * @return The task's notification count before it is either cleared to zero or\n * decremented (see the xClearCountOnExit parameter).\n *\n * \\ingroup TaskNotifications\n */\nuint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );\n\n/*-----------------------------------------------------------\n * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES\n *----------------------------------------------------------*/\n/** @cond */\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Called from the real time kernel tick (either preemptive or cooperative),\n * this increments the tick count and checks if any tasks that are blocked\n * for a finite period required removing from a blocked list and placing on\n * a ready list.  If a non-zero value is returned then a context switch is\n * required because either:\n *   + A task was removed from a blocked list because its timeout had expired,\n *     or\n *   + Time slicing is in use and there is a task of equal priority to the\n *     currently running task.\n */\nBaseType_t xTaskIncrementTick( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes the calling task from the ready list and places it both\n * on the list of tasks waiting for a particular event, and the\n * list of delayed tasks.  The task will be removed from both lists\n * and replaced on the ready list should either the event occur (and\n * there be no higher priority tasks waiting on the same event) or\n * the delay period expires.\n *\n * The 'unordered' version replaces the event list item value with the\n * xItemValue value, and inserts the list item at the end of the list.\n *\n * The 'ordered' version uses the existing event list item value (which is the\n * owning tasks priority) to insert the list item into the event list is task\n * priority order.\n *\n * @param pxEventList The list containing tasks that are blocked waiting\n * for the event to occur.\n *\n * @param xItemValue The item value to use for the event list item when the\n * event list is not ordered by task priority.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait\n * for the event to occur.  This is specified in kernel ticks,the constant\n * portTICK_PERIOD_MS can be used to convert kernel ticks into a real time\n * period.\n */\nvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\nvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * This function performs nearly the same function as vTaskPlaceOnEventList().\n * The difference being that this function does not permit tasks to block\n * indefinitely, whereas vTaskPlaceOnEventList() does.\n *\n */\nvoid vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes a task from both the specified event list and the list of blocked\n * tasks, and places it on a ready queue.\n *\n * xTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called\n * if either an event occurs to unblock a task, or the block timeout period\n * expires.\n *\n * xTaskRemoveFromEventList() is used when the event list is in task priority\n * order.  It removes the list item from the head of the event list as that will\n * have the highest priority owning task of all the tasks on the event list.\n * xTaskRemoveFromUnorderedEventList() is used when the event list is not\n * ordered and the event list items hold something other than the owning tasks\n * priority.  In this case the event list item value is updated to the value\n * passed in the xItemValue parameter.\n *\n * @return pdTRUE if the task being removed has a higher priority than the task\n * making the call, otherwise pdFALSE.\n */\nBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) PRIVILEGED_FUNCTION;\nBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Sets the pointer to the current TCB to the TCB of the highest priority task\n * that is ready to run.\n */\nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE.  THEY ARE USED BY\n * THE EVENT BITS MODULE.\n */\nTickType_t uxTaskResetEventItemValue( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Return the handle of the calling task.\n */\nTaskHandle_t xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;\n\n\n\n/*\n * Return the handle of the task running on a certain CPU. Because of\n * the nature of SMP processing, there is no guarantee that this\n * value will still be valid on return and should only be used for\n * debugging purposes.\n */\nTaskHandle_t xTaskGetCurrentTaskHandleForCPU( BaseType_t cpuid );\n\n\n/*\n * Capture the current time status for future reference.\n */\nvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) PRIVILEGED_FUNCTION;\n\n/*\n * Compare the time status now with that previously captured to see if the\n * timeout has expired.\n */\nBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * Shortcut used by the queue implementation to prevent unnecessary call to\n * taskYIELD();\n */\nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Returns the scheduler state as taskSCHEDULER_RUNNING,\n * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.\n */\nBaseType_t xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Raises the priority of the mutex holder to that of the calling task should\n * the mutex holder have a priority less than the calling task.\n */\nvoid vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the priority of a task back to its proper priority in the case that it\n * inherited a higher priority while it was holding a semaphore.\n */\nBaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.\n */\nUBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n\n/*\n * Get the current core affinity of a task\n */\nBaseType_t xTaskGetAffinity( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the uxTaskNumber of the task referenced by the xTask parameter to\n * uxHandle.\n */\nvoid vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) PRIVILEGED_FUNCTION;\n\n/*\n * Only available when configUSE_TICKLESS_IDLE is set to 1.\n * If tickless mode is being used, or a low power mode is implemented, then\n * the tick interrupt will not execute during idle periods.  When this is the\n * case, the tick count value maintained by the scheduler needs to be kept up\n * to date with the actual execution time by being skipped forward by a time\n * equal to the idle period.\n */\nvoid vTaskStepTick( const TickType_t xTicksToJump ) PRIVILEGED_FUNCTION;\n\n/*\n * Only avilable when configUSE_TICKLESS_IDLE is set to 1.\n * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port\n * specific sleep function to determine if it is ok to proceed with the sleep,\n * and if it is ok to proceed, if it is ok to sleep indefinitely.\n *\n * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only\n * called with the scheduler suspended, not from within a critical section.  It\n * is therefore possible for an interrupt to request a context switch between\n * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being\n * entered.  eTaskConfirmSleepModeStatus() should be called from a short\n * critical section between the timer being stopped and the sleep mode being\n * entered to ensure it is ok to proceed into the sleep mode.\n */\neSleepModeStatus eTaskConfirmSleepModeStatus( void ) PRIVILEGED_FUNCTION;\n\n/*\n * For internal use only.  Increment the mutex held count when a mutex is\n * taken and return the handle of the task that has taken the mutex.\n */\nvoid *pvTaskIncrementMutexHeldCount( void );\n\n/*\n * This function fills array with TaskSnapshot_t structures for every task in the system.\n * Used by core dump facility to get snapshots of all tasks in the system.\n * Only available when configENABLE_TASK_SNAPSHOT is set to 1.\n * @param pxTaskSnapshotArray Pointer to array of TaskSnapshot_t structures to store tasks snapshot data.\n * @param uxArraySize Size of tasks snapshots array.\n * @param pxTcbSz Pointer to store size of TCB.\n * @return Number of elements stored in array.\n */\nUBaseType_t uxTaskGetSnapshotAll( TaskSnapshot_t * const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t * const pxTcbSz );\n\n/** @endcond */\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* INC_TASK_H */\n\n\n\n"}},"jsonrpc":"2.0"}Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":772},"contentChanges":[{"range":{"start":{"line":305,"character":10},"end":{"line":305,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 195

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":305,"character":10},"end":{"line":305,"character":10}},"context":{"diagnostics":[]}},"id":601,"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":772}}Content-Length: 38

{"id":601,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":312,"character":12}},"id":602,"jsonrpc":"2.0"}
<<<
Content-Length: 671

{"id":602,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":13,"line":312},"start":{"character":2,"line":312}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":224,"character":11}},"id":603,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":603,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":224,"character":11}},"id":604,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":604,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":224,"character":0},"end":{"line":225,"character":0}},"context":{"diagnostics":[]}},"id":605,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":605,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":773},"contentChanges":[{"range":{"start":{"line":224,"character":0},"end":{"line":225,"character":0}},"rangeLength":19,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":773}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":225,"character":11}},"id":606,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":606,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":225,"character":12}},"id":607,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":607,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":774},"contentChanges":[{"range":{"start":{"line":225,"character":0},"end":{"line":226,"character":0}},"rangeLength":19,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":774}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":211,"character":39}},"id":608,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":608,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":180,"character":21}},"id":609,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":609,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":183,"character":49}},"id":610,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":610,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":285,"character":4}},"id":611,"jsonrpc":"2.0"}
<<<
Content-Length: 2444

{"id":611,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":8,"line":90},"start":{"character":2,"line":90}}},{"kind":1,"range":{"end":{"character":10,"line":93},"start":{"character":4,"line":93}}},{"kind":1,"range":{"end":{"character":10,"line":109},"start":{"character":4,"line":109}}},{"kind":1,"range":{"end":{"character":16,"line":118},"start":{"character":10,"line":118}}},{"kind":1,"range":{"end":{"character":8,"line":121},"start":{"character":2,"line":121}}},{"kind":1,"range":{"end":{"character":10,"line":126},"start":{"character":4,"line":126}}},{"kind":1,"range":{"end":{"character":8,"line":131},"start":{"character":2,"line":131}}},{"kind":1,"range":{"end":{"character":8,"line":142},"start":{"character":2,"line":142}}},{"kind":1,"range":{"end":{"character":8,"line":143},"start":{"character":2,"line":143}}},{"kind":1,"range":{"end":{"character":8,"line":144},"start":{"character":2,"line":144}}},{"kind":1,"range":{"end":{"character":8,"line":145},"start":{"character":2,"line":145}}},{"kind":1,"range":{"end":{"character":8,"line":146},"start":{"character":2,"line":146}}},{"kind":1,"range":{"end":{"character":8,"line":147},"start":{"character":2,"line":147}}},{"kind":1,"range":{"end":{"character":8,"line":148},"start":{"character":2,"line":148}}},{"kind":1,"range":{"end":{"character":8,"line":149},"start":{"character":2,"line":149}}},{"kind":1,"range":{"end":{"character":8,"line":150},"start":{"character":2,"line":150}}},{"kind":1,"range":{"end":{"character":8,"line":151},"start":{"character":2,"line":151}}},{"kind":1,"range":{"end":{"character":8,"line":152},"start":{"character":2,"line":152}}},{"kind":1,"range":{"end":{"character":8,"line":153},"start":{"character":2,"line":153}}},{"kind":1,"range":{"end":{"character":8,"line":154},"start":{"character":2,"line":154}}},{"kind":1,"range":{"end":{"character":8,"line":162},"start":{"character":2,"line":162}}},{"kind":1,"range":{"end":{"character":8,"line":163},"start":{"character":2,"line":163}}},{"kind":1,"range":{"end":{"character":8,"line":164},"start":{"character":2,"line":164}}},{"kind":1,"range":{"end":{"character":10,"line":251},"start":{"character":4,"line":251}}},{"kind":1,"range":{"end":{"character":10,"line":284},"start":{"character":4,"line":284}}},{"kind":1,"range":{"end":{"character":10,"line":285},"start":{"character":4,"line":285}}},{"kind":1,"range":{"end":{"character":8,"line":291},"start":{"character":2,"line":291}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":285,"character":4},"end":{"line":285,"character":4}},"context":{"diagnostics":[]}},"id":612,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":612,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":775},"contentChanges":[{"range":{"start":{"line":285,"character":4},"end":{"line":285,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":775}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":284,"character":7}},"id":613,"jsonrpc":"2.0"}
<<<
Content-Length: 2354

{"id":613,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":8,"line":90},"start":{"character":2,"line":90}}},{"kind":1,"range":{"end":{"character":10,"line":93},"start":{"character":4,"line":93}}},{"kind":1,"range":{"end":{"character":10,"line":109},"start":{"character":4,"line":109}}},{"kind":1,"range":{"end":{"character":16,"line":118},"start":{"character":10,"line":118}}},{"kind":1,"range":{"end":{"character":8,"line":121},"start":{"character":2,"line":121}}},{"kind":1,"range":{"end":{"character":10,"line":126},"start":{"character":4,"line":126}}},{"kind":1,"range":{"end":{"character":8,"line":131},"start":{"character":2,"line":131}}},{"kind":1,"range":{"end":{"character":8,"line":142},"start":{"character":2,"line":142}}},{"kind":1,"range":{"end":{"character":8,"line":143},"start":{"character":2,"line":143}}},{"kind":1,"range":{"end":{"character":8,"line":144},"start":{"character":2,"line":144}}},{"kind":1,"range":{"end":{"character":8,"line":145},"start":{"character":2,"line":145}}},{"kind":1,"range":{"end":{"character":8,"line":146},"start":{"character":2,"line":146}}},{"kind":1,"range":{"end":{"character":8,"line":147},"start":{"character":2,"line":147}}},{"kind":1,"range":{"end":{"character":8,"line":148},"start":{"character":2,"line":148}}},{"kind":1,"range":{"end":{"character":8,"line":149},"start":{"character":2,"line":149}}},{"kind":1,"range":{"end":{"character":8,"line":150},"start":{"character":2,"line":150}}},{"kind":1,"range":{"end":{"character":8,"line":151},"start":{"character":2,"line":151}}},{"kind":1,"range":{"end":{"character":8,"line":152},"start":{"character":2,"line":152}}},{"kind":1,"range":{"end":{"character":8,"line":153},"start":{"character":2,"line":153}}},{"kind":1,"range":{"end":{"character":8,"line":154},"start":{"character":2,"line":154}}},{"kind":1,"range":{"end":{"character":8,"line":162},"start":{"character":2,"line":162}}},{"kind":1,"range":{"end":{"character":8,"line":163},"start":{"character":2,"line":163}}},{"kind":1,"range":{"end":{"character":8,"line":164},"start":{"character":2,"line":164}}},{"kind":1,"range":{"end":{"character":10,"line":251},"start":{"character":4,"line":251}}},{"kind":1,"range":{"end":{"character":10,"line":284},"start":{"character":4,"line":284}}},{"kind":1,"range":{"end":{"character":8,"line":291},"start":{"character":2,"line":291}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":284,"character":7},"end":{"line":284,"character":7}},"context":{"diagnostics":[]}},"id":614,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":614,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":776},"contentChanges":[{"range":{"start":{"line":284,"character":4},"end":{"line":284,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":776}}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":284,"character":10},"end":{"line":284,"character":10}},"context":{"diagnostics":[]}},"id":615,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":615,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":272,"character":8}},"id":616,"jsonrpc":"2.0"}
<<<
Content-Length: 1892

{"id":616,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `vTaskDelay`  \n\n---\n→ `void`  \nParameters:  \n- `const TickType_t xTicksToDelay`\n\nDelay a task for a given number of ticks.  \nThe actual time that the task remains blocked depends on the tick rate.  \nThe constant portTICK_PERIOD_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.  \nINCLUDE_vTaskDelay must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \nvTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method of controlling the frequency of a periodic task as the path taken through the code, as well as other task and interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the calling task should unblock.  \n@param xTicksToDelay The amount of time, in tick periods, that the calling task should block.  \nExample usage:  \n@code{c} void vTaskFunction( void * pvParameters ) { // Block for 500ms.  \nconst TickType_t xDelay = 500 / portTICK_PERIOD_MS;  \nfor( ;; ) { // Simply toggle the LED every 500ms, blocking between each toggle.  \nvToggleLED();  \nvTaskDelay( xDelay );  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl  \n\n---\n```cpp\nvoid vTaskDelay(const TickType_t xTicksToDelay)\n```"},"range":{"end":{"character":14,"line":272},"start":{"character":4,"line":272}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":276,"character":9}},"id":617,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":617,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":275,"character":0},"end":{"line":277,"character":44}},"context":{"diagnostics":[]}},"id":618,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":618,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":777},"contentChanges":[{"range":{"start":{"line":275,"character":0},"end":{"line":277,"character":44}},"rangeLength":103,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":777}}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":778},"contentChanges":[{"range":{"start":{"line":274,"character":3},"end":{"line":275,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":778}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":274,"character":3},"end":{"line":274,"character":3}},"context":{"diagnostics":[]}},"id":619,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":619,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 9537

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":779},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\n//#include \u003cArduino.h\u003e\n// For IMU\n#include \u003cAdafruit_LSM6DS33.h\u003e\n#include \u003cAdafruit_Sensor.h\u003e\n\n//For WiFi and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\n//  Create sensor object\nAdafruit_LSM6DS33 imu;\n\n//  Create sensor object\nsensors_event_t a,g,temp;\nfloat accX, accY, accZ,\n      accRoll,      accPitch,     accYaw;            // units degrees (roll and pitch noisy, yaw not possible)\n\n\n// LDR sensor pin\nconst int ldrPin=34;\n// Flashed pins\nconst int rightPin=13;\nconst int leftPin=14;\nconst int lightPin=12;\nint lightInit; // initial value\n//Receiver MAC Address\n//C4:4F:33:6B:0F:E1\nuint8_t broadcastAddress[] = {0xC4, 0x4F, 0x33, 0x6B, 0x0F, 0xE1};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct masterMessage {\n  float roll;\n  float pitch;\n  int lightSensor;\n} masterMessage;\n\ntypedef struct receivedMessage{\n  bool imuUsage;\n  //String rec_message;\n}receivedMessage;\n\n// Define the masterMessage\nmasterMessage msgToSlave;\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nreceivedMessage messageFromSlave;\n\n// String receivedString; \n// Variable to store if sending data was successful\nString success;\n// Should be global ... ( TODO -\u003e Check why ???)\nesp_now_peer_info_t peerInfo;\n\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW();\n#line 83 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initIMU();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initLDRSensor();\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPrint();\n#line 124 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid serialPlotter();\n#line 139 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 150 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 160 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getAccReadings();\n#line 169 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid getLDRReadings();\n#line 175 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid doCalculations();\n#line 183 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid blinking(int pin);\n#line 196 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid checkAlarms();\n#line 215 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task1(void * parameters);\n#line 243 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid task2(void * parameters);\n#line 253 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid setup();\n#line 285 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid loop();\n#line 54 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Master/Esp_Master.ino\"\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  //esp_now_peer_info_t peerInfo;\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\nvoid initIMU(){\n  while (!Serial)\n    delay(10); // will pause Zero, Leonardo, etc until serial console opens\n\n  Serial.println(\"Adafruit LSM6DS33 test!\");\n\n  if (!imu.begin_I2C()) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS)) {\n    // if (!lsm6ds33.begin_SPI(LSM_CS, LSM_SCK, LSM_MISO, LSM_MOSI)) {\n    Serial.println(\"Failed to find LSM6DS33 chip\");\n    while (1) {\n      delay(10);\n    }\n  }  \n  Serial.println(\"Adafruit LSM6DS33 FOUND!\");\n}\n\nvoid initLDRSensor(){\n  //we will take a single reading from the light sensor and store it in the lightCal        \n  //variable. This will give us a prelinary value to compare against in the loop\n  pinMode(ldrPin, INPUT);\n  // lightInit=analogRead(ldrPin);\n}\n\nvoid serialPrint(){\n  Serial.print(\"X: \");\n  Serial.print(accX);\n  Serial.print(\"  Y: \");\n  Serial.print(accY);\n  Serial.print(\"  Z: \");\n  Serial.print(accZ);\n  Serial.print(\"  Roll: \");\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"  Pitch: \");\n  Serial.print(msgToSlave.pitch);\n  Serial.print(\"  Light: \");\n  Serial.print(msgToSlave.lightSensor);\n  Serial.println();\n\n}\n\nvoid serialPlotter(){\n  // Serial.print(accX);\n  // Serial.print(accY);\n  // Serial.print(accZ);\n  Serial.print(msgToSlave.roll);\n  Serial.print(\"\\t\");\n  Serial.println(msgToSlave.pitch);\n  \n  // Serial.print(\"  Light: \");\n  // Serial.print(msgToSlave.lightSensor);\n  // Serial.println();\n\n}\n\n// Callback Function that sents message\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  //Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  //Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    success = \"Delivery Success :)\";\n  }\n  else{\n    success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026messageFromSlave,incomingData, sizeof(messageFromSlave));\n  //Just for debug\n  //Serial.print(\"Bytes received: \");\n  //Serial.println(len);\n\n  // Write the data that have been sent\n  // receivedString = messageFromSlave.rec_message;\n  \n}\nvoid getAccReadings(){\n  imu.getEvent(\u0026a, \u0026g, \u0026temp);\n  // Get current acceleration values\n  accX = a.acceleration.x;\n  accY = a.acceleration.y;\n  accZ = a.acceleration.z;\n}\n\n\nvoid getLDRReadings(){\n  // Read the current light Levels\n  // lightInit=\n  msgToSlave.lightSensor=analogRead(ldrPin);\n}\n\nvoid doCalculations() {\n  /*\n  Calculate Roll and pitch and save them into the structure message\n  */\n  msgToSlave.roll = atan2(accY, accZ) * 180/M_PI;\n  msgToSlave.pitch = atan2(-accX, sqrt(accY*accY + accZ*accZ)) * 180/M_PI;\n}\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    digitalWrite(pin,LOW);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (msgToSlave.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n  if (msgToSlave.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (msgToSlave.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  \n}\n\n\nvoid task1(void * parameters){\n  for(;;){\n    Serial.print(\"Task 1: \");\n    //Get accelation readings\n    getAccReadings();\n    getLDRReadings();\n    doCalculations();\n    \n    // Send message via ESP-NOW\n    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) \u0026msgToSlave, sizeof(msgToSlave));\n    \n    if (result == ESP_OK) {\n      // Serial.println(\"Sent with success\");\n    }\n    else {\n      // Serial.println(\"Error sending the data\");\n    }\n    // Delay should be reduced ? \n    // serialPrint();\n    serialPlotter();\n    checkAlarms();\n    // Serial.print(\" Overflow Stack :\");\n    // Serial.println(uxTaskGetStackHighWaterMark(NULL));\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  \n  }\n}\n\nvoid task2(void * parameters){\n  for(;;){\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n    // Serial.print(\" Overflow Stack :\");\n    // Serial.println(uxTaskGetStackHighWaterMark(NULL));\n  }\n  \n}\n\nvoid setup(){\n  Serial.begin(115200);\n  initIMU();\n  initLDRSensor();\n  initESPNOW();\n\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n\n  xTaskCreate(\n    task1, // function name\n    \"Task1\", // task name\n    1400, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n  delay(500);\n  xTaskCreate(\n    task2, // function name\n    \"Task2\", // task name\n    1024, // stack size\n    NULL, // task parameters \n    1, // task priority\n    NULL // task handle\n    );\n}\n\n\n\nvoid loop(){\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":780},"contentChanges":[{"range":{"start":{"line":273,"character":0},"end":{"line":273,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":781},"contentChanges":[{"range":{"start":{"line":272,"character":39},"end":{"line":273,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":272,"character":39},"end":{"line":272,"character":39}},"context":{"diagnostics":[]}},"id":620,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":5,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":5,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 38

{"id":620,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 172

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"}},"id":621,"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":280,"character":2}},"id":622,"jsonrpc":"2.0"}
<<<
Content-Length: 1042

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp","version":781}}Content-Length: 11744

{"id":621,"jsonrpc":"2.0","result":[{"kind":13,"name":"imu","range":{"end":{"character":21,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":21,"line":12},"start":{"character":18,"line":12}}},{"kind":13,"name":"a","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":16,"line":15}}},{"kind":13,"name":"g","range":{"end":{"character":19,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":19,"line":15},"start":{"character":18,"line":15}}},{"kind":13,"name":"temp","range":{"end":{"character":24,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":20,"line":15}}},{"kind":13,"name":"accX","range":{"end":{"character":10,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":6,"line":16}}},{"kind":13,"name":"accY","range":{"end":{"character":16,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":16,"line":16},"start":{"character":12,"line":16}}},{"kind":13,"name":"accZ","range":{"end":{"character":22,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":22,"line":16},"start":{"character":18,"line":16}}},{"kind":13,"name":"accRoll","range":{"end":{"character":13,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":17},"start":{"character":6,"line":17}}},{"kind":13,"name":"accPitch","range":{"end":{"character":28,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":17},"start":{"character":20,"line":17}}},{"kind":13,"name":"accYaw","range":{"end":{"character":40,"line":17},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":40,"line":17},"start":{"character":34,"line":17}}},{"kind":13,"name":"ldrPin","range":{"end":{"character":19,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}}},{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":18,"line":23},"start":{"character":10,"line":23}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":17,"line":24},"start":{"character":10,"line":24}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":18,"line":25},"start":{"character":10,"line":25}}},{"kind":13,"name":"lightInit","range":{"end":{"character":13,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":13,"line":26},"start":{"character":4,"line":26}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":24,"line":29},"start":{"character":8,"line":29}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":12,"line":34},"start":{"character":8,"line":34}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":13,"line":35},"start":{"character":8,"line":35}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":17,"line":36},"start":{"character":6,"line":36}}}],"kind":23,"name":"masterMessage","range":{"end":{"character":1,"line":37},"start":{"character":8,"line":33}},"selectionRange":{"end":{"character":28,"line":33},"start":{"character":15,"line":33}}},{"kind":5,"name":"masterMessage","range":{"end":{"character":15,"line":37},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":15,"line":37},"start":{"character":2,"line":37}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":40},"start":{"character":2,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":7,"line":40}}}],"kind":23,"name":"receivedMessage","range":{"end":{"character":1,"line":42},"start":{"character":8,"line":39}},"selectionRange":{"end":{"character":30,"line":39},"start":{"character":15,"line":39}}},{"kind":5,"name":"receivedMessage","range":{"end":{"character":16,"line":42},"start":{"character":0,"line":39}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":1,"line":42}}},{"kind":13,"name":"msgToSlave","range":{"end":{"character":24,"line":45},"start":{"character":0,"line":45}},"selectionRange":{"end":{"character":24,"line":45},"start":{"character":14,"line":45}}},{"kind":13,"name":"messageFromSlave","range":{"end":{"character":32,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":32,"line":47},"start":{"character":16,"line":47}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":14,"line":51},"start":{"character":7,"line":51}}},{"kind":13,"name":"peerInfo","range":{"end":{"character":28,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":28,"line":53},"start":{"character":20,"line":53}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"initIMU","range":{"end":{"character":14,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":12,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":20,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":18,"line":60},"start":{"character":5,"line":60}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":18,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":16,"line":62},"start":{"character":5,"line":62}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":20,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":18,"line":64},"start":{"character":5,"line":64}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":15,"line":66},"start":{"character":5,"line":66}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":15,"line":68},"start":{"character":5,"line":68}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":21,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":19,"line":70},"start":{"character":5,"line":70}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":21,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":19,"line":72},"start":{"character":5,"line":72}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":21,"line":74},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":19,"line":74},"start":{"character":5,"line":74}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":13,"line":76},"start":{"character":5,"line":76}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":16,"line":78},"start":{"character":5,"line":78}}},{"kind":12,"name":"task1","range":{"end":{"character":29,"line":80},"start":{"character":0,"line":80}},"selectionRange":{"end":{"character":10,"line":80},"start":{"character":5,"line":80}}},{"kind":12,"name":"task2","range":{"end":{"character":29,"line":82},"start":{"character":0,"line":82}},"selectionRange":{"end":{"character":10,"line":82},"start":{"character":5,"line":82}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":84},"start":{"character":0,"line":84}},"selectionRange":{"end":{"character":10,"line":84},"start":{"character":5,"line":84}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":86},"start":{"character":0,"line":86}},"selectionRange":{"end":{"character":9,"line":86},"start":{"character":5,"line":86}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":88}},"selectionRange":{"end":{"character":15,"line":88},"start":{"character":5,"line":88}}},{"kind":12,"name":"initIMU","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":117}},"selectionRange":{"end":{"character":12,"line":117},"start":{"character":5,"line":117}}},{"kind":12,"name":"initLDRSensor","range":{"end":{"character":1,"line":139},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":18,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"serialPrint","range":{"end":{"character":1,"line":156},"start":{"character":0,"line":141}},"selectionRange":{"end":{"character":16,"line":141},"start":{"character":5,"line":141}}},{"kind":12,"name":"serialPlotter","range":{"end":{"character":1,"line":170},"start":{"character":0,"line":158}},"selectionRange":{"end":{"character":18,"line":158},"start":{"character":5,"line":158}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":182},"start":{"character":0,"line":173}},"selectionRange":{"end":{"character":15,"line":173},"start":{"character":5,"line":173}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":193},"start":{"character":0,"line":184}},"selectionRange":{"end":{"character":15,"line":184},"start":{"character":5,"line":184}}},{"kind":12,"name":"getAccReadings","range":{"end":{"character":1,"line":200},"start":{"character":0,"line":194}},"selectionRange":{"end":{"character":19,"line":194},"start":{"character":5,"line":194}}},{"kind":12,"name":"getLDRReadings","range":{"end":{"character":1,"line":207},"start":{"character":0,"line":203}},"selectionRange":{"end":{"character":19,"line":203},"start":{"character":5,"line":203}}},{"kind":12,"name":"doCalculations","range":{"end":{"character":1,"line":215},"start":{"character":0,"line":209}},"selectionRange":{"end":{"character":19,"line":209},"start":{"character":5,"line":209}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":228},"start":{"character":0,"line":217}},"selectionRange":{"end":{"character":13,"line":217},"start":{"character":5,"line":217}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":246},"start":{"character":0,"line":230}},"selectionRange":{"end":{"character":16,"line":230},"start":{"character":5,"line":230}}},{"kind":12,"name":"task1","range":{"end":{"character":1,"line":274},"start":{"character":0,"line":249}},"selectionRange":{"end":{"character":10,"line":249},"start":{"character":5,"line":249}}},{"kind":12,"name":"task2","range":{"end":{"character":1,"line":284},"start":{"character":0,"line":276}},"selectionRange":{"end":{"character":10,"line":276},"start":{"character":5,"line":276}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":314},"start":{"character":0,"line":286}},"selectionRange":{"end":{"character":10,"line":286},"start":{"character":5,"line":286}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":320},"start":{"character":0,"line":318}},"selectionRange":{"end":{"character":9,"line":318},"start":{"character":5,"line":318}}}]}Content-Length: 40

{"id":622,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":581},"jsonrpc":"2.0"}Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":198,"character":13}},"id":623,"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"id":623,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### field `(anonymous)`  \n\n---\nType: `union sensors_event_t::(anonymous)`  \n\n---\n```cpp\n// In (anonymous struct)\npublic: sensors_event_t::(anonymous)\n```"},"range":{"end":{"character":23,"line":198},"start":{"character":11,"line":198}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":175,"character":80}},"id":624,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":624,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":239,"character":20}},"id":625,"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"id":625,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `blinking`  \n\n---\n→ `void`  \nParameters:  \n- `int pin`\n\n---\n```cpp\nvoid blinking(int pin)\n```"},"range":{"end":{"character":20,"line":239},"start":{"character":13,"line":239}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":232,"character":11}},"id":626,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"id":626,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `digitalWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t val`\n\n---\n```cpp\nvoid digitalWrite(uint8_t pin, uint8_t val)\n```"},"range":{"end":{"character":16,"line":232},"start":{"character":4,"line":232}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":231,"character":29}},"id":627,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":627,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":231,"character":29},"end":{"line":231,"character":29}},"context":{"diagnostics":[]}},"id":628,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":628,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":239,"character":5}},"id":629,"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"id":629,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `blinking`  \n\n---\n→ `void`  \nParameters:  \n- `int pin`\n\n---\n```cpp\nvoid blinking(int pin)\n```"},"range":{"end":{"character":12,"line":239},"start":{"character":4,"line":239}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":233,"character":6}},"id":630,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":630,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":234,"character":9}},"id":631,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"id":631,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `digitalWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t val`\n\n---\n```cpp\nvoid digitalWrite(uint8_t pin, uint8_t val)\n```"},"range":{"end":{"character":16,"line":234},"start":{"character":4,"line":234}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":234,"character":22}},"id":632,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":632,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `lightPin`  \n\n---\nType: `const int`  \nValue = `12`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int lightPin = 12\n```"},"range":{"end":{"character":25,"line":234},"start":{"character":17,"line":234}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":234,"character":23}},"id":633,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":633,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `lightPin`  \n\n---\nType: `const int`  \nValue = `12`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int lightPin = 12\n```"},"range":{"end":{"character":25,"line":234},"start":{"character":17,"line":234}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":232,"character":26}},"id":634,"jsonrpc":"2.0"}
<<<
Content-Length: 215

{"id":634,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `HIGH`  \n\n---\n```cpp\n#define HIGH 0x1\n```"},"range":{"end":{"character":30,"line":232},"start":{"character":26,"line":232}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":232,"character":8}},"id":635,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"id":635,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `digitalWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t val`\n\n---\n```cpp\nvoid digitalWrite(uint8_t pin, uint8_t val)\n```"},"range":{"end":{"character":16,"line":232},"start":{"character":4,"line":232}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":234,"character":3}},"id":636,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":636,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":231,"character":18}},"id":637,"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"id":637,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### field `lightSensor`  \n\n---\nType: `int`  \n\n---\n```cpp\n// In masterMessage\npublic: int lightSensor\n```"},"range":{"end":{"character":28,"line":231},"start":{"character":17,"line":231}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":264,"character":17}},"id":638,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":638,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":225,"character":17}},"id":639,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":639,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":222,"character":15},"end":{"line":225,"character":17}},"context":{"diagnostics":[]}},"id":640,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":640,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":222,"character":15},"end":{"line":222,"character":15}},"context":{"diagnostics":[]}},"id":641,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":641,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":223,"character":9}},"id":642,"jsonrpc":"2.0"}
<<<
Content-Length: 397

{"id":642,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":223},"start":{"character":4,"line":223}}},{"kind":1,"range":{"end":{"character":14,"line":225},"start":{"character":4,"line":225}}},{"kind":1,"range":{"end":{"character":14,"line":272},"start":{"character":4,"line":272}}},{"kind":1,"range":{"end":{"character":14,"line":279},"start":{"character":4,"line":279}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":223,"character":9},"end":{"line":223,"character":9}},"context":{"diagnostics":[]}},"id":643,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":643,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":222,"character":4}},"id":644,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"id":644,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `digitalWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t val`\n\n---\n```cpp\nvoid digitalWrite(uint8_t pin, uint8_t val)\n```"},"range":{"end":{"character":16,"line":222},"start":{"character":4,"line":222}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":222,"character":8}},"id":645,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"id":645,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `digitalWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t val`\n\n---\n```cpp\nvoid digitalWrite(uint8_t pin, uint8_t val)\n```"},"range":{"end":{"character":16,"line":222},"start":{"character":4,"line":222}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":222,"character":18}},"id":646,"jsonrpc":"2.0"}
<<<
Content-Length: 283

{"id":646,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### param `pin`  \n\n---\nType: `int`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\n// In blinking\nint pin\n```"},"range":{"end":{"character":20,"line":222},"start":{"character":17,"line":222}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":223,"character":18}},"id":647,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":647,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### `expression`  \n\n---\nType: `unsigned int`  \nValue = `200`"},"range":{"end":{"character":19,"line":223},"start":{"character":18,"line":223}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":223,"character":19}},"id":648,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"id":648,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `portTICK_PERIOD_MS`  \n\n---\n```cpp\n#define portTICK_PERIOD_MS ((TickType_t)1000 / configTICK_RATE_HZ)\n```"},"range":{"end":{"character":37,"line":223},"start":{"character":19,"line":223}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":225,"character":15}},"id":649,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":649,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":225,"character":18}},"id":650,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":650,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### `expression`  \n\n---\nType: `unsigned int`  \nValue = `300`"},"range":{"end":{"character":19,"line":225},"start":{"character":18,"line":225}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":225,"character":19}},"id":651,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"id":651,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `portTICK_PERIOD_MS`  \n\n---\n```cpp\n#define portTICK_PERIOD_MS ((TickType_t)1000 / configTICK_RATE_HZ)\n```"},"range":{"end":{"character":37,"line":225},"start":{"character":19,"line":225}}}}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":221,"character":21}},"id":652,"jsonrpc":"2.0"}
<<<
Content-Length: 318

{"id":652,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `k`  \n\n---\nType: `int`  \nValue = `0`  \nBlinking the alarm 5 times (about 1 second procedure)  \n\n---\n```cpp\n// In blinking\nint k = 0\n```"},"range":{"end":{"character":22,"line":221},"start":{"character":21,"line":221}}}}Content-Length: 38

{"id":653,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":293,"character":26},"end":{"line":294,"character":0}},"context":{"diagnostics":[]}},"id":653,"jsonrpc":"2.0"}Content-Length: 214

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":298,"character":26}},"id":654,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":654,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":298,"character":26},"end":{"line":298,"character":26}},"context":{"diagnostics":[]}},"id":655,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":655,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 202

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":299,"character":25}},"id":656,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":656,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"position":{"line":17,"character":14}},"id":657,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"id":657,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `accPitch`  \n\n---\nType: `float`  \nunits degrees (roll and pitch noisy, yaw not possible)  \n\n---\n```cpp\nfloat accPitch\n```"},"range":{"end":{"character":14,"line":17},"start":{"character":13,"line":17}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":284,"character":1},"end":{"line":284,"character":1}},"context":{"diagnostics":[]}},"id":658,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":658,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server115944645/sketch/Esp_Master.ino.cpp"},"range":{"start":{"line":276,"character":0},"end":{"line":284,"character":1}},"context":{"diagnostics":[]}},"id":659,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":659,"jsonrpc":"2.0","result":[]}