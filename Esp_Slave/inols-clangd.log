






Started logging.

>>>
Content-Length: 2097

{"method":"initialize","params":{"processId":22011,"rootPath":"/tmp/arduino-language-server785540692/sketch","rootUri":"file:///tmp/arduino-language-server785540692/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 5099

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 89 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 113 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 131 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    success = \"Delivery Success :)\";\n  }\n  else{\n    success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo;\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n}\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    delay(200);\n    digitalWrite(pin,LOW);\n    delay(300);\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\n\nvoid loop()\n{\n  /* You can implement your own display logic here*/  \n  // Display Readings in Serial Monitor\n  Serial.print(\"Roll: \");\n  Serial.print(masterMessage.roll);\n  Serial.print(\"    Pitch: \");\n  Serial.print(masterMessage.pitch);\n  Serial.print(\"    Light: \");\n  Serial.print(masterMessage.lightSensor);\n  Serial.println(\"\");\n  checkAlarms();\n  \n  delay(500);\n}\n"}},"jsonrpc":"2.0"}Content-Length: 169

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":64,"character":19},"end":{"line":64,"character":19}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/58","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/58","percentage":1.7241379310344827}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/58","percentage":1.7241379310344827}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/58","percentage":1.7241379310344827}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/58","percentage":1.7241379310344827}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/58","percentage":1.7241379310344827}}}Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":1}}Content-Length: 6300

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":9,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":63},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":15,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":65}},"selectionRange":{"end":{"character":15,"line":65},"start":{"character":5,"line":65}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":103},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":15,"line":77},"start":{"character":5,"line":77}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":113},"start":{"character":0,"line":105}},"selectionRange":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":127},"start":{"character":0,"line":116}},"selectionRange":{"end":{"character":13,"line":116},"start":{"character":5,"line":116}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":144},"start":{"character":0,"line":129}},"selectionRange":{"end":{"character":16,"line":129},"start":{"character":5,"line":129}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":161},"start":{"character":0,"line":147}},"selectionRange":{"end":{"character":9,"line":147},"start":{"character":5,"line":147}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/58","percentage":3.4482758620689653}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/58","percentage":3.4482758620689653}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/58","percentage":5.1724137931034484}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/58","percentage":5.1724137931034484}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/58","percentage":6.8965517241379306}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/58","percentage":6.8965517241379306}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/58","percentage":8.6206896551724146}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/58","percentage":8.6206896551724146}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/58","percentage":10.344827586206897}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/58","percentage":10.344827586206897}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/58","percentage":12.068965517241379}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/58","percentage":12.068965517241379}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/58","percentage":13.793103448275861}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/58","percentage":13.793103448275861}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/58","percentage":15.517241379310345}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/58","percentage":15.517241379310345}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/58","percentage":17.241379310344829}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/58","percentage":17.241379310344829}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/58","percentage":18.96551724137931}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/58","percentage":18.96551724137931}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/58","percentage":20.689655172413794}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/58","percentage":20.689655172413794}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/58","percentage":22.413793103448278}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/58","percentage":22.413793103448278}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/58","percentage":24.137931034482758}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/58","percentage":24.137931034482758}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/58","percentage":25.862068965517242}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/58","percentage":25.862068965517242}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/58","percentage":27.586206896551722}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/58","percentage":27.586206896551722}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/58","percentage":29.310344827586206}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/58","percentage":29.310344827586206}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/58","percentage":31.03448275862069}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/58","percentage":31.03448275862069}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/58","percentage":32.758620689655174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/58","percentage":32.758620689655174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/58","percentage":34.482758620689658}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/58","percentage":34.482758620689658}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/58","percentage":36.206896551724135}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/58","percentage":36.206896551724135}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/58","percentage":37.931034482758619}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/58","percentage":37.931034482758619}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/58","percentage":39.655172413793103}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/58","percentage":39.655172413793103}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/58","percentage":41.379310344827587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/58","percentage":41.379310344827587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/58","percentage":43.103448275862071}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/58","percentage":43.103448275862071}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/58","percentage":44.827586206896555}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/58","percentage":44.827586206896555}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/58","percentage":46.551724137931032}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/58","percentage":46.551724137931032}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/58","percentage":48.275862068965516}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/58","percentage":48.275862068965516}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"29/58","percentage":50}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"29/58","percentage":50}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"30/58","percentage":51.724137931034484}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"30/58","percentage":51.724137931034484}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"31/58","percentage":53.448275862068968}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"31/58","percentage":53.448275862068968}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"32/58","percentage":55.172413793103445}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"32/58","percentage":55.172413793103445}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"33/58","percentage":56.896551724137929}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"33/58","percentage":56.896551724137929}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"34/58","percentage":58.620689655172413}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"34/58","percentage":58.620689655172413}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"35/58","percentage":60.344827586206897}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"35/58","percentage":60.344827586206897}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"36/58","percentage":62.068965517241381}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"36/58","percentage":62.068965517241381}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"37/58","percentage":63.793103448275865}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"37/58","percentage":63.793103448275865}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"38/58","percentage":65.517241379310349}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"38/58","percentage":65.517241379310349}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"39/58","percentage":67.241379310344826}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"39/58","percentage":67.241379310344826}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"40/58","percentage":68.965517241379317}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"40/58","percentage":68.965517241379317}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"41/58","percentage":70.689655172413794}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"41/58","percentage":70.689655172413794}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"42/58","percentage":72.41379310344827}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"42/58","percentage":72.41379310344827}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"43/58","percentage":74.137931034482762}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"43/58","percentage":74.137931034482762}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"44/58","percentage":75.862068965517238}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"44/58","percentage":75.862068965517238}}}
>>>
Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":65,"character":26}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 656

{"id":3,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":7,"line":15},"start":{"character":0,"line":15}}},{"kind":1,"range":{"end":{"character":29,"line":40},"start":{"character":22,"line":40}}},{"kind":1,"range":{"end":{"character":29,"line":42},"start":{"character":22,"line":42}}},{"kind":1,"range":{"end":{"character":50,"line":42},"start":{"character":43,"line":42}}},{"kind":1,"range":{"end":{"character":29,"line":54},"start":{"character":22,"line":54}}},{"kind":1,"range":{"end":{"character":29,"line":65},"start":{"character":22,"line":65}}},{"kind":1,"range":{"end":{"character":50,"line":65},"start":{"character":43,"line":65}}}]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"45/58","percentage":77.58620689655173}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"45/58","percentage":77.58620689655173}}}
>>>
Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":65,"character":26},"end":{"line":65,"character":26}},"context":{"diagnostics":[]}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":4,"jsonrpc":"2.0","result":[]}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"46/58","percentage":79.310344827586206}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"46/58","percentage":79.310344827586206}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"47/58","percentage":81.034482758620683}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"47/58","percentage":81.034482758620683}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"48/58","percentage":82.758620689655174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"48/58","percentage":82.758620689655174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"49/58","percentage":84.482758620689651}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"49/58","percentage":84.482758620689651}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"50/58","percentage":86.206896551724142}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"50/58","percentage":86.206896551724142}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"51/58","percentage":87.931034482758619}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"51/58","percentage":87.931034482758619}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"52/58","percentage":89.65517241379311}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"52/58","percentage":89.65517241379311}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"53/58","percentage":91.379310344827587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"53/58","percentage":91.379310344827587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"54/58","percentage":93.103448275862064}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"54/58","percentage":93.103448275862064}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"55/58","percentage":94.827586206896555}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"56/58","percentage":96.551724137931032}}}
>>>
Content-Length: 198

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":15,"character":18}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 385

{"id":5,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `broadcastAddress`  \n\n---\nType: `uint8_t [6]`  \nValue = `{16, 82, 28, 103, 197, 44}`  \nReceiver MAC Address MASTER : 10:52:1C:67:C5:2C  \n\n---\n```cpp\nuint8_t broadcastAddress[] = {16, 82, 28, 103, 197, 44}\n```"},"range":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"57/58","percentage":98.275862068965523}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":144,"character":1},"end":{"line":144,"character":1}},"context":{"diagnostics":[]}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":6,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 198

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":144,"character":0}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":7,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 197

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":99,"character":2}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":8,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 198

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":101,"character":1}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":9,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 199

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":101,"character":0}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":10,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":58,"character":7}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"id":11,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":3,"range":{"end":{"character":11,"line":58},"start":{"character":4,"line":58}}},{"kind":3,"range":{"end":{"character":11,"line":61},"start":{"character":4,"line":61}}}]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":58,"character":7},"end":{"line":58,"character":7}},"context":{"diagnostics":[]}},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":12,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 198

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":60,"character":4}},"id":13,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":13,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":58,"character":4}},"id":14,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"id":14,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":3,"range":{"end":{"character":11,"line":58},"start":{"character":4,"line":58}}},{"kind":3,"range":{"end":{"character":11,"line":61},"start":{"character":4,"line":61}}}]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":58,"character":4},"end":{"line":58,"character":4}},"context":{"diagnostics":[]}},"id":15,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":15,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 279

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":2},"contentChanges":[{"range":{"start":{"line":58,"character":4},"end":{"line":58,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":2}}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":58,"character":7},"end":{"line":58,"character":7}},"context":{"diagnostics":[]}},"id":16,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":16,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 5106

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":3},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 89 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 113 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 131 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo;\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n}\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    delay(200);\n    digitalWrite(pin,LOW);\n    delay(300);\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\n\nvoid loop()\n{\n  /* You can implement your own display logic here*/  \n  // Display Readings in Serial Monitor\n  Serial.print(\"Roll: \");\n  Serial.print(masterMessage.roll);\n  Serial.print(\"    Pitch: \");\n  Serial.print(masterMessage.pitch);\n  Serial.print(\"    Light: \");\n  Serial.print(masterMessage.lightSensor);\n  Serial.println(\"\");\n  checkAlarms();\n  \n  delay(500);\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":61,"character":7}},"id":17,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":1,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":1,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 212

{"id":17,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":3,"range":{"end":{"character":11,"line":61},"start":{"character":4,"line":61}}}]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":61,"character":7},"end":{"line":61,"character":7}},"context":{"diagnostics":[]}},"id":18,"jsonrpc":"2.0"}Content-Length: 170

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":19,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":18,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":16},"jsonrpc":"2.0"}
<<<
Content-Length: 6301

{"id":19,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":9,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":63},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":15,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":65}},"selectionRange":{"end":{"character":15,"line":65},"start":{"character":5,"line":65}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":103},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":15,"line":77},"start":{"character":5,"line":77}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":113},"start":{"character":0,"line":105}},"selectionRange":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":127},"start":{"character":0,"line":116}},"selectionRange":{"end":{"character":13,"line":116},"start":{"character":5,"line":116}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":144},"start":{"character":0,"line":129}},"selectionRange":{"end":{"character":16,"line":129},"start":{"character":5,"line":129}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":161},"start":{"character":0,"line":147}},"selectionRange":{"end":{"character":9,"line":147},"start":{"character":5,"line":147}}}]}
>>>
Content-Length: 279

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":4},"contentChanges":[{"range":{"start":{"line":61,"character":4},"end":{"line":61,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}Content-Length: 63

{"method":"$/cancelRequest","params":{"id":17},"jsonrpc":"2.0"}Content-Length: 211

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":61,"character":10}},"id":20,"jsonrpc":"2.0"}
<<<
Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":4}}Content-Length: 37

{"id":20,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":18},"jsonrpc":"2.0"}Content-Length: 211

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":58,"character":10}},"id":21,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":21,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":19},"jsonrpc":"2.0"}Content-Length: 211

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":57,"character":10}},"id":22,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"id":22,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":69,"line":54},"start":{"character":63,"line":54}}},{"kind":2,"range":{"end":{"character":23,"line":56},"start":{"character":17,"line":56}}},{"kind":2,"range":{"end":{"character":12,"line":57},"start":{"character":6,"line":57}}}]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":20},"jsonrpc":"2.0"}Content-Length: 211

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":56,"character":10}},"id":23,"jsonrpc":"2.0"}
<<<
Content-Length: 392

{"id":23,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":56},"start":{"character":9,"line":56}}},{"kind":1,"range":{"end":{"character":18,"line":82},"start":{"character":11,"line":82}}},{"kind":1,"range":{"end":{"character":18,"line":98},"start":{"character":11,"line":98}}},{"kind":1,"range":{"end":{"character":16,"line":157},"start":{"character":9,"line":157}}}]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":56,"character":10},"end":{"line":56,"character":10}},"context":{"diagnostics":[]}},"id":24,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":24,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":21},"jsonrpc":"2.0"}Content-Length: 211

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":55,"character":10}},"id":25,"jsonrpc":"2.0"}
<<<
Content-Length: 394

{"id":25,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":55},"start":{"character":9,"line":55}}},{"kind":1,"range":{"end":{"character":14,"line":151},"start":{"character":9,"line":151}}},{"kind":1,"range":{"end":{"character":14,"line":153},"start":{"character":9,"line":153}}},{"kind":1,"range":{"end":{"character":14,"line":155},"start":{"character":9,"line":155}}}]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":55,"character":10},"end":{"line":55,"character":10}},"context":{"diagnostics":[]}},"id":26,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":26,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":22},"jsonrpc":"2.0"}Content-Length: 63

{"method":"$/cancelRequest","params":{"id":23},"jsonrpc":"2.0"}Content-Length: 279

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":5},"contentChanges":[{"range":{"start":{"line":55,"character":2},"end":{"line":55,"character":2}},"text":"// "}]},"jsonrpc":"2.0"}Content-Length: 63

{"method":"$/cancelRequest","params":{"id":24},"jsonrpc":"2.0"}Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":55,"character":13},"end":{"line":55,"character":13}},"context":{"diagnostics":[]}},"id":27,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":27,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 211

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":56,"character":13}},"id":28,"jsonrpc":"2.0"}
<<<
Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":5}}Content-Length: 392

{"id":28,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":56},"start":{"character":9,"line":56}}},{"kind":1,"range":{"end":{"character":18,"line":82},"start":{"character":11,"line":82}}},{"kind":1,"range":{"end":{"character":18,"line":98},"start":{"character":11,"line":98}}},{"kind":1,"range":{"end":{"character":16,"line":157},"start":{"character":9,"line":157}}}]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":56,"character":13},"end":{"line":56,"character":13}},"context":{"diagnostics":[]}},"id":29,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":29,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":25},"jsonrpc":"2.0"}Content-Length: 63

{"method":"$/cancelRequest","params":{"id":26},"jsonrpc":"2.0"}Content-Length: 279

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":6},"contentChanges":[{"range":{"start":{"line":56,"character":2},"end":{"line":56,"character":2}},"text":"// "}]},"jsonrpc":"2.0"}Content-Length: 63

{"method":"$/cancelRequest","params":{"id":27},"jsonrpc":"2.0"}Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":56,"character":16},"end":{"line":56,"character":16}},"context":{"diagnostics":[]}},"id":30,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":30,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":68,"character":5}},"id":31,"jsonrpc":"2.0"}
<<<
Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":6}}Content-Length: 37

{"id":31,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":68,"character":5},"end":{"line":68,"character":5}},"context":{"diagnostics":[]}},"id":32,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":32,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":28},"jsonrpc":"2.0"}Content-Length: 198

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":73,"character":5}},"id":33,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":33,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `receivedPitch`  \n\n---\nType: `float`  \n\n---\n```cpp\nfloat receivedPitch\n```"},"range":{"end":{"character":15,"line":73},"start":{"character":2,"line":73}}}}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":31},"jsonrpc":"2.0"}Content-Length: 63

{"method":"$/cancelRequest","params":{"id":29},"jsonrpc":"2.0"}Content-Length: 198

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":80,"character":3}},"id":34,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":34,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":80,"character":4},"end":{"line":80,"character":4}},"context":{"diagnostics":[]}},"id":35,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":35,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":81,"character":4}},"id":36,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":36,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":81,"character":4},"end":{"line":81,"character":4}},"context":{"diagnostics":[]}},"id":37,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":37,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":82,"character":4}},"id":38,"jsonrpc":"2.0"}
<<<
Content-Length: 1011

{"id":38,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":8,"line":79},"start":{"character":2,"line":79}}},{"kind":1,"range":{"end":{"character":10,"line":82},"start":{"character":4,"line":82}}},{"kind":1,"range":{"end":{"character":10,"line":98},"start":{"character":4,"line":98}}},{"kind":1,"range":{"end":{"character":8,"line":107},"start":{"character":2,"line":107}}},{"kind":1,"range":{"end":{"character":8,"line":151},"start":{"character":2,"line":151}}},{"kind":1,"range":{"end":{"character":8,"line":152},"start":{"character":2,"line":152}}},{"kind":1,"range":{"end":{"character":8,"line":153},"start":{"character":2,"line":153}}},{"kind":1,"range":{"end":{"character":8,"line":154},"start":{"character":2,"line":154}}},{"kind":1,"range":{"end":{"character":8,"line":155},"start":{"character":2,"line":155}}},{"kind":1,"range":{"end":{"character":8,"line":156},"start":{"character":2,"line":156}}},{"kind":1,"range":{"end":{"character":8,"line":157},"start":{"character":2,"line":157}}}]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":82,"character":4},"end":{"line":82,"character":4}},"context":{"diagnostics":[]}},"id":39,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":39,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 279

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":7},"contentChanges":[{"range":{"start":{"line":82,"character":4},"end":{"line":82,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":7}}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":82,"character":7},"end":{"line":82,"character":7}},"context":{"diagnostics":[]}},"id":40,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":40,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 292

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":8},"contentChanges":[{"range":{"start":{"line":82,"character":4},"end":{"line":82,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":8}}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":82,"character":4},"end":{"line":82,"character":4}},"context":{"diagnostics":[]}},"id":41,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":41,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":84,"character":3},"end":{"line":84,"character":3}},"context":{"diagnostics":[]}},"id":42,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":42,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":82,"character":5},"end":{"line":84,"character":3}},"context":{"diagnostics":[]}},"id":43,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":43,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 198

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":88,"character":2}},"id":44,"jsonrpc":"2.0"}
<<<
Content-Length: 599

{"id":44,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `esp_now_register_send_cb`  \n\n---\n→ `esp_err_t`  \nParameters:  \n- `esp_now_send_cb_t cb`\n\n@brief Register callback function of sending ESPNOW data  \n@param cb callback function of sending ESPNOW data  \n@return  \n\\- ESP_OK : succeed  \n\\- ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized  \n\\- ESP_ERR_ESPNOW_INTERNAL : internal error  \n\n---\n```cpp\nesp_err_t esp_now_register_send_cb(esp_now_send_cb_t cb)\n```"},"range":{"end":{"character":26,"line":88},"start":{"character":2,"line":88}}}}
>>>
Content-Length: 198

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":90,"character":5}},"id":45,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":45,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":90,"character":6}},"id":46,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":46,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":90,"character":6},"end":{"line":90,"character":6}},"context":{"diagnostics":[]}},"id":47,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":47,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 210

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":91,"character":6}},"id":48,"jsonrpc":"2.0"}
<<<
Content-Length: 124

{"id":48,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":21,"line":91},"start":{"character":2,"line":91}}}]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":91,"character":6},"end":{"line":91,"character":6}},"context":{"diagnostics":[]}},"id":49,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":49,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 203

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":90,"character":6}},"id":50,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":50,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 271

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":91,"character":7},"end":{"line":91,"character":7}},"context":{"diagnostics":[]}},"id":51,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":51,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 199

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":92,"character":29}},"id":52,"jsonrpc":"2.0"}
<<<
Content-Length: 427

{"id":52,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `broadcastAddress`  \n\n---\nType: `uint8_t [6]`  \nValue = `{16, 82, 28, 103, 197, 44}`  \nPassed (converted to const void \\*)  \nReceiver MAC Address MASTER : 10:52:1C:67:C5:2C  \n\n---\n```cpp\nuint8_t broadcastAddress[] = {16, 82, 28, 103, 197, 44}\n```"},"range":{"end":{"character":45,"line":92},"start":{"character":29,"line":92}}}}
>>>
Content-Length: 211

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":92,"character":31}},"id":53,"jsonrpc":"2.0"}
<<<
Content-Length: 213

{"id":53,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"kind":1,"range":{"end":{"character":45,"line":92},"start":{"character":29,"line":92}}}]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":92,"character":31},"end":{"line":92,"character":31}},"context":{"diagnostics":[]}},"id":54,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":54,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":91,"character":31},"end":{"line":91,"character":31}},"context":{"diagnostics":[]}},"id":55,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":55,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 279

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":9},"contentChanges":[{"range":{"start":{"line":91,"character":31},"end":{"line":91,"character":31}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":9}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":10},"contentChanges":[{"range":{"start":{"line":91,"character":32},"end":{"line":91,"character":32}},"text":"/"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1211

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":33,"line":91},"start":{"character":32,"line":91}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":10}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":11},"contentChanges":[{"range":{"start":{"line":91,"character":33},"end":{"line":91,"character":33}},"text":"/"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":11}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":12},"contentChanges":[{"range":{"start":{"line":91,"character":34},"end":{"line":91,"character":34}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":12}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":13},"contentChanges":[{"range":{"start":{"line":91,"character":35},"end":{"line":91,"character":35}},"text":"O"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":13}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":91,"character":36},"end":{"line":91,"character":36}},"context":{"diagnostics":[]}},"id":56,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":56,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 295

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":14},"contentChanges":[{"range":{"start":{"line":91,"character":35},"end":{"line":91,"character":36}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":14}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":15},"contentChanges":[{"range":{"start":{"line":91,"character":35},"end":{"line":91,"character":35}},"text":"T"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":15}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":16},"contentChanges":[{"range":{"start":{"line":91,"character":36},"end":{"line":91,"character":36}},"text":"O"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":16}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":91,"character":37},"end":{"line":91,"character":37}},"context":{"diagnostics":[]}},"id":57,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":57,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":17},"contentChanges":[{"range":{"start":{"line":91,"character":37},"end":{"line":91,"character":37}},"text":"D"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":17}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":18},"contentChanges":[{"range":{"start":{"line":91,"character":38},"end":{"line":91,"character":38}},"text":"O"}]},"jsonrpc":"2.0"}Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":19},"contentChanges":[{"range":{"start":{"line":91,"character":39},"end":{"line":91,"character":39}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":18}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":19}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":20},"contentChanges":[{"range":{"start":{"line":91,"character":40},"end":{"line":91,"character":40}},"text":"M"}]},"jsonrpc":"2.0"}Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":21},"contentChanges":[{"range":{"start":{"line":91,"character":41},"end":{"line":91,"character":41}},"text":"O"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":20}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":21}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":22},"contentChanges":[{"range":{"start":{"line":91,"character":42},"end":{"line":91,"character":42}},"text":"T"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":22}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":91,"character":43},"end":{"line":91,"character":43}},"context":{"diagnostics":[]}},"id":58,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":58,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 295

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":23},"contentChanges":[{"range":{"start":{"line":91,"character":42},"end":{"line":91,"character":43}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":24},"contentChanges":[{"range":{"start":{"line":91,"character":42},"end":{"line":91,"character":42}},"text":"V"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":23}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":24}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":25},"contentChanges":[{"range":{"start":{"line":91,"character":43},"end":{"line":91,"character":43}},"text":"E"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":25}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":26},"contentChanges":[{"range":{"start":{"line":91,"character":44},"end":{"line":91,"character":44}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":26}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":27},"contentChanges":[{"range":{"start":{"line":91,"character":45},"end":{"line":91,"character":45}},"text":"I"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":27}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":28},"contentChanges":[{"range":{"start":{"line":91,"character":46},"end":{"line":91,"character":46}},"text":"T"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":28}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":29},"contentChanges":[{"range":{"start":{"line":91,"character":47},"end":{"line":91,"character":47}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":29}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":30},"contentChanges":[{"range":{"start":{"line":91,"character":48},"end":{"line":91,"character":48}},"text":"A"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":30}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":31},"contentChanges":[{"range":{"start":{"line":91,"character":49},"end":{"line":91,"character":49}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":31}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":32},"contentChanges":[{"range":{"start":{"line":91,"character":50},"end":{"line":91,"character":50}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":32}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":33},"contentChanges":[{"range":{"start":{"line":91,"character":51},"end":{"line":91,"character":51}},"text":"G"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":33}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":34},"contentChanges":[{"range":{"start":{"line":91,"character":52},"end":{"line":91,"character":52}},"text":"L"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":34}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":35},"contentChanges":[{"range":{"start":{"line":91,"character":53},"end":{"line":91,"character":53}},"text":"O"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":35}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":91,"character":54},"end":{"line":91,"character":54}},"context":{"diagnostics":[]}},"id":59,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":59,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":36},"contentChanges":[{"range":{"start":{"line":91,"character":54},"end":{"line":91,"character":54}},"text":"B"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":36}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":37},"contentChanges":[{"range":{"start":{"line":91,"character":55},"end":{"line":91,"character":55}},"text":"A"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":37}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":38},"contentChanges":[{"range":{"start":{"line":91,"character":56},"end":{"line":91,"character":56}},"text":"L"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":38}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":91,"character":57},"end":{"line":91,"character":57}},"context":{"diagnostics":[]}},"id":60,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":60,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 199

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":98,"character":16}},"id":61,"jsonrpc":"2.0"}
<<<
Content-Length: 314

{"id":61,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"end":{"character":18,"line":98},"start":{"character":11,"line":98}}}}
>>>
Content-Length: 211

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":98,"character":16}},"id":62,"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"id":62,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":18,"line":82},"start":{"character":11,"line":82}}},{"kind":1,"range":{"end":{"character":18,"line":98},"start":{"character":11,"line":98}}},{"kind":1,"range":{"end":{"character":16,"line":157},"start":{"character":9,"line":157}}}]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":98,"character":16},"end":{"line":98,"character":16}},"context":{"diagnostics":[]}},"id":63,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":63,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 199

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":92,"character":39}},"id":64,"jsonrpc":"2.0"}
<<<
Content-Length: 427

{"id":64,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `broadcastAddress`  \n\n---\nType: `uint8_t [6]`  \nValue = `{16, 82, 28, 103, 197, 44}`  \nPassed (converted to const void \\*)  \nReceiver MAC Address MASTER : 10:52:1C:67:C5:2C  \n\n---\n```cpp\nuint8_t broadcastAddress[] = {16, 82, 28, 103, 197, 44}\n```"},"range":{"end":{"character":45,"line":92},"start":{"character":29,"line":92}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":124,"character":15},"end":{"line":124,"character":15}},"context":{"diagnostics":[]}},"id":65,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":65,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 199

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":124,"character":9}},"id":66,"jsonrpc":"2.0"}
<<<
Content-Length: 270

{"id":66,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `delay`  \n\n---\n→ `void`  \nParameters:  \n- `uint32_t`\n\n---\n```cpp\nvoid delay(uint32_t)\n```"},"range":{"end":{"character":9,"line":124},"start":{"character":4,"line":124}}}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":144,"character":1},"end":{"line":144,"character":1}},"context":{"diagnostics":[]}},"id":67,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":67,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":39},"contentChanges":[{"range":{"start":{"line":144,"character":1},"end":{"line":144,"character":1}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":39}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":40},"contentChanges":[{"range":{"start":{"line":145,"character":0},"end":{"line":145,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":40}}
>>>
Content-Length: 498

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":41},"contentChanges":[{"range":{"start":{"line":146,"character":0},"end":{"line":146,"character":0}},"text":"void task2(void * parameters){\n  for(;;){\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n    // Serial.print(\" Overflow Stack :\");\n    // Serial.println(uxTaskGetStackHighWaterMark(NULL));\n  }\n  \n}"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":41}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":154,"character":1},"end":{"line":154,"character":1}},"context":{"diagnostics":[]}},"id":68,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":68,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":147,"character":10},"end":{"line":147,"character":10}},"context":{"diagnostics":[]}},"id":69,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":69,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":146,"character":10}},"id":70,"jsonrpc":"2.0"}
<<<
Content-Length: 126

{"id":70,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":10,"line":146},"start":{"character":5,"line":146}}}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":146,"character":10},"end":{"line":146,"character":10}},"context":{"diagnostics":[]}},"id":71,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":71,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 199

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":148,"character":0}},"id":72,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":72,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":146,"character":5},"end":{"line":146,"character":10}},"context":{"diagnostics":[]}},"id":73,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":73,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":42},"contentChanges":[{"range":{"start":{"line":146,"character":5},"end":{"line":146,"character":10}},"rangeLength":5,"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 232

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":146,"character":6},"context":{"triggerKind":1}},"id":74,"jsonrpc":"2.0"}
<<<
Content-Length: 54211

{"id":74,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"documentation":{"kind":"markdown","value":"From `\"Adafruit_GFX.h\"`  \nA generic graphics superclass that can handle all sorts of drawing. At a minimum you can subclass and provide drawPixel(). At a maximum you can do a ton of overriding to optimize. Used for any/all Adafruit displays!"},"filterText":"Adafruit_GFX","insertText":"Adafruit_GFX","insertTextFormat":2,"kind":7,"label":" Adafruit_GFX","score":2.4585452079772949,"sortText":"3fe2a732Adafruit_GFX","textEdit":{"newText":"Adafruit_GFX","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"documentation":{"kind":"markdown","value":"From `\"Adafruit_GFX.h\"`  \nA simple drawn button UI element"},"filterText":"Adafruit_GFX_Button","insertText":"Adafruit_GFX_Button","insertTextFormat":2,"kind":7,"label":" Adafruit_GFX_Button","score":1.8608452081680298,"sortText":"4011cfd3Adafruit_GFX_Button","textEdit":{"newText":"Adafruit_GFX_Button","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_SPITFT.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_SPITFT.h\"`  \n@brief Adafruit_SPITFT is an intermediary class between Adafruit_GFX and various hardware-specific subclasses for different displays.  \nIt handles certain operations that are common to a range of displays (address window, area fills, etc.). Originally these were all color TFT displays interfaced via SPI, but it's since expanded to include color OLEDs and parallel-interfaced TFTs. THE NAME HAS BEEN KEPT TO AVOID BREAKING A LOT OF SUBCLASSES AND EXAMPLE CODE.  \nMany of the class member functions similarly live on with names that don't necessarily accurately describe what they're doing,  \nagain to avoid breaking a lot of other code. If in doubt, read the comments."},"filterText":"Adafruit_SPITFT","insertText":"Adafruit_SPITFT","insertTextFormat":2,"kind":7,"label":"•Adafruit_SPITFT","score":1.7842658758163452,"sortText":"401b9d2dAdafruit_SPITFT","textEdit":{"newText":"Adafruit_SPITFT","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"Adafruit_GrayOLED.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"Adafruit_GrayOLED.h\"`  \n@brief Class that stores state and functions for interacting with generic grayscale OLED displays."},"filterText":"Adafruit_GrayOLED","insertText":"Adafruit_GrayOLED","insertTextFormat":2,"kind":7,"label":"•Adafruit_GrayOLED","score":1.5104800462722778,"sortText":"403ea897Adafruit_GrayOLED","textEdit":{"newText":"Adafruit_GrayOLED","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"abs","insertText":"abs","insertTextFormat":2,"kind":3,"label":"•abs(int)","score":1.5094624757766724,"sortText":"403ec9efabs","textEdit":{"newText":"abs","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A0","insertText":"A0","insertTextFormat":2,"kind":6,"label":"•A0","score":1.5037370920181274,"sortText":"403f858bA0","textEdit":{"newText":"A0","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A10","insertText":"A10","insertTextFormat":2,"kind":6,"label":"•A10","score":1.5037370920181274,"sortText":"403f858bA10","textEdit":{"newText":"A10","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A16","insertText":"A16","insertTextFormat":2,"kind":6,"label":"•A16","score":1.5037370920181274,"sortText":"403f858bA16","textEdit":{"newText":"A16","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A17","insertText":"A17","insertTextFormat":2,"kind":6,"label":"•A17","score":1.5037370920181274,"sortText":"403f858bA17","textEdit":{"newText":"A17","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A18","insertText":"A18","insertTextFormat":2,"kind":6,"label":"•A18","score":1.5037370920181274,"sortText":"403f858bA18","textEdit":{"newText":"A18","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A3","insertText":"A3","insertTextFormat":2,"kind":6,"label":"•A3","score":1.5037370920181274,"sortText":"403f858bA3","textEdit":{"newText":"A3","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const uint8_t","documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"A5","insertText":"A5","insertTextFormat":2,"kind":6,"label":"•A5","score":1.5037370920181274,"sortText":"403f858bA5","textEdit":{"newText":"A5","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"AP_HAS_CLIENT_BIT","insertText":"AP_HAS_CLIENT_BIT","insertTextFormat":2,"kind":6,"label":"•AP_HAS_CLIENT_BIT","score":1.5037370920181274,"sortText":"403f858bAP_HAS_CLIENT_BIT","textEdit":{"newText":"AP_HAS_CLIENT_BIT","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"AP_HAS_IP6_BIT","insertText":"AP_HAS_IP6_BIT","insertTextFormat":2,"kind":6,"label":"•AP_HAS_IP6_BIT","score":1.5037370920181274,"sortText":"403f858bAP_HAS_IP6_BIT","textEdit":{"newText":"AP_HAS_IP6_BIT","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"WiFiGeneric.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int","documentation":{"kind":"markdown","value":"From `\"WiFiGeneric.h\"`"},"filterText":"AP_STARTED_BIT","insertText":"AP_STARTED_BIT","insertTextFormat":2,"kind":6,"label":"•AP_STARTED_BIT","score":1.5037370920181274,"sortText":"403f858bAP_STARTED_BIT","textEdit":{"newText":"AP_STARTED_BIT","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"a64l","insertText":"a64l","insertTextFormat":2,"kind":3,"label":"•a64l(const char *__input)","score":1.5037370920181274,"sortText":"403f858ba64l","textEdit":{"newText":"a64l","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"abort","insertText":"abort","insertTextFormat":2,"kind":3,"label":"•abort()","score":1.5037370920181274,"sortText":"403f858babort","textEdit":{"newText":"abort","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"asiprintf","insertText":"asiprintf","insertTextFormat":2,"kind":3,"label":"•asiprintf(char **, const char *, ...)","score":1.5037370920181274,"sortText":"403f858basiprintf","textEdit":{"newText":"asiprintf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"asniprintf","insertText":"asniprintf","insertTextFormat":2,"kind":3,"label":"•asniprintf(char *, size_t *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858basniprintf","textEdit":{"newText":"asniprintf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"char *","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"asnprintf","insertText":"asnprintf","insertTextFormat":2,"kind":3,"label":"•asnprintf(char *, size_t *, const char *, ...)","score":1.5037370920181274,"sortText":"403f858basnprintf","textEdit":{"newText":"asnprintf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdio.h\"`"},"filterText":"asprintf","insertText":"asprintf","insertTextFormat":2,"kind":3,"label":"•asprintf(char **, const char *, ...)","score":1.5037370920181274,"sortText":"403f858basprintf","textEdit":{"newText":"asprintf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"atexit","insertText":"atexit","insertTextFormat":2,"kind":3,"label":"•atexit(void (*__func)())","score":1.5037370920181274,"sortText":"403f858batexit","textEdit":{"newText":"atexit","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"atof","insertText":"atof","insertTextFormat":2,"kind":3,"label":"•atof(const char *__nptr)","score":1.5037370920181274,"sortText":"403f858batof","textEdit":{"newText":"atof","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"atoff","insertText":"atoff","insertTextFormat":2,"kind":3,"label":"•atoff(const char *__nptr)","score":1.5037370920181274,"sortText":"403f858batoff","textEdit":{"newText":"atoff","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"atoi","insertText":"atoi","insertTextFormat":2,"kind":3,"label":"•atoi(const char *__nptr)","score":1.5037370920181274,"sortText":"403f858batoi","textEdit":{"newText":"atoi","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"atol","insertText":"atol","insertTextFormat":2,"kind":3,"label":"•atol(const char *__nptr)","score":1.5037370920181274,"sortText":"403f858batol","textEdit":{"newText":"atol","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long long","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"atoll","insertText":"atoll","insertTextFormat":2,"kind":3,"label":"•atoll(const char *__nptr)","score":1.5037370920181274,"sortText":"403f858batoll","textEdit":{"newText":"atoll","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_attenuation_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`"},"filterText":"ADC_2_5db","insertText":"ADC_2_5db","insertTextFormat":2,"kind":20,"label":"•ADC_2_5db","score":1.3747211694717407,"sortText":"40500923ADC_2_5db","textEdit":{"newText":"ADC_2_5db","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"apb_change_ev_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"APB_AFTER_CHANGE","insertText":"APB_AFTER_CHANGE","insertTextFormat":2,"kind":20,"label":"•APB_AFTER_CHANGE","score":1.3747211694717407,"sortText":"40500923APB_AFTER_CHANGE","textEdit":{"newText":"APB_AFTER_CHANGE","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"apb_change_ev_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"APB_BEFORE_CHANGE","insertText":"APB_BEFORE_CHANGE","insertTextFormat":2,"kind":20,"label":"•APB_BEFORE_CHANGE","score":1.3747211694717407,"sortText":"40500923APB_BEFORE_CHANGE","textEdit":{"newText":"APB_BEFORE_CHANGE","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nAttach pin to ADC (will also clear any other analog mode that could be on)"},"filterText":"adcAttachPin","insertText":"adcAttachPin","insertTextFormat":2,"kind":3,"label":"•adcAttachPin(uint8_t pin)","score":1.3747211694717407,"sortText":"40500923adcAttachPin","textEdit":{"newText":"adcAttachPin","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`"},"filterText":"adc_attenuation_t","insertText":"adc_attenuation_t","insertTextFormat":2,"kind":8,"label":"•adc_attenuation_t","score":1.3747211694717407,"sortText":"40500923adc_attenuation_t","textEdit":{"newText":"adc_attenuation_t","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"addApbChangeCallback","insertText":"addApbChangeCallback","insertTextFormat":2,"kind":3,"label":"•addApbChangeCallback(void *arg, apb_change_cb_t cb)","score":1.3747211694717407,"sortText":"40500923addApbChangeCallback","textEdit":{"newText":"addApbChangeCallback","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nSet the resolution of analogRead return values. Default is 12 bits (range from 0 to 4096).  \nIf between 9 and 12, it will equal the set hardware resolution, else value will be shifted.  \nRange is 1 - 16  \nNote: compatibility with Arduino SAM"},"filterText":"analogReadResolution","insertText":"analogReadResolution","insertTextFormat":2,"kind":3,"label":"•analogReadResolution(uint8_t bits)","score":1.3747211694717407,"sortText":"40500923analogReadResolution","textEdit":{"newText":"analogReadResolution","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-adc.h\"`  \nSet the attenuation for particular pin Default is 11db"},"filterText":"analogSetPinAttenuation","insertText":"analogSetPinAttenuation","insertTextFormat":2,"kind":3,"label":"•analogSetPinAttenuation(uint8_t pin, adc_attenuation_t attenuation)","score":1.3747211694717407,"sortText":"40500923analogSetPinAttenuation","textEdit":{"newText":"analogSetPinAttenuation","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"apb_change_cb_t","insertText":"apb_change_cb_t","insertTextFormat":2,"kind":8,"label":"•apb_change_cb_t","score":1.3747211694717407,"sortText":"40500923apb_change_cb_t","textEdit":{"newText":"apb_change_cb_t","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"apb_change_ev_t","insertText":"apb_change_ev_t","insertTextFormat":2,"kind":8,"label":"•apb_change_ev_t","score":1.3747211694717407,"sortText":"40500923apb_change_ev_t","textEdit":{"newText":"apb_change_ev_t","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-gpio.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"esp32-hal-gpio.h\"`"},"filterText":"attachInterruptArg","insertText":"attachInterruptArg","insertTextFormat":2,"kind":3,"label":"•attachInterruptArg(uint8_t pin, void (*)(void *), void *arg, int mode)","score":1.3747211694717407,"sortText":"40500923attachInterruptArg","textEdit":{"newText":"attachInterruptArg","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"SLEEP_MODE","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`  \nCPU ON"},"filterText":"AWAKE","insertText":"AWAKE","insertTextFormat":2,"kind":20,"label":"•AWAKE","score":1.2690916061401367,"sortText":"405d8e68AWAKE","textEdit":{"newText":"AWAKE","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"acosh","insertText":"acosh","insertTextFormat":2,"kind":3,"label":"•acosh(double)","score":1.2690916061401367,"sortText":"405d8e68acosh","textEdit":{"newText":"acosh","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"acoshl","insertText":"acoshl","insertTextFormat":2,"kind":3,"label":"•acoshl(long double)","score":1.2690916061401367,"sortText":"405d8e68acoshl","textEdit":{"newText":"acoshl","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"asin","insertText":"asin","insertTextFormat":2,"kind":3,"label":"•asin(double)","score":1.2690916061401367,"sortText":"405d8e68asin","textEdit":{"newText":"asin","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"asinf","insertText":"asinf","insertTextFormat":2,"kind":3,"label":"•asinf(float)","score":1.2690916061401367,"sortText":"405d8e68asinf","textEdit":{"newText":"asinf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"asinhf","insertText":"asinhf","insertTextFormat":2,"kind":3,"label":"•asinhf(float)","score":1.2690916061401367,"sortText":"405d8e68asinhf","textEdit":{"newText":"asinhf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"asinl","insertText":"asinl","insertTextFormat":2,"kind":3,"label":"•asinl(long double)","score":1.2690916061401367,"sortText":"405d8e68asinl","textEdit":{"newText":"asinl","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"atan","insertText":"atan","insertTextFormat":2,"kind":3,"label":"•atan(double)","score":1.2690916061401367,"sortText":"405d8e68atan","textEdit":{"newText":"atan","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"atan2f","insertText":"atan2f","insertTextFormat":2,"kind":3,"label":"•atan2f(float, float)","score":1.2690916061401367,"sortText":"405d8e68atan2f","textEdit":{"newText":"atan2f","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`  \nSingle precision versions of ANSI functions."},"filterText":"atanf","insertText":"atanf","insertTextFormat":2,"kind":3,"label":"•atanf(float)","score":1.2690916061401367,"sortText":"405d8e68atanf","textEdit":{"newText":"atanf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"atanhl","insertText":"atanhl","insertTextFormat":2,"kind":3,"label":"•atanhl(long double)","score":1.2690916061401367,"sortText":"405d8e68atanhl","textEdit":{"newText":"atanhl","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[4 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"abs","insertText":"std::abs","insertTextFormat":2,"kind":3,"label":"•std::abs(…)","score":1.2531143426895142,"sortText":"405f99f3abs","textEdit":{"newText":"std::abs","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"acos","insertText":"std::acos","insertTextFormat":2,"kind":3,"label":"•std::acos(…)","score":1.2531143426895142,"sortText":"405f99f3acos","textEdit":{"newText":"std::acos","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`  \nAdditional overloads."},"filterText":"acosh","insertText":"std::acosh","insertTextFormat":2,"kind":3,"label":"•std::acosh(…)","score":1.2531143426895142,"sortText":"405f99f3acosh","textEdit":{"newText":"std::acosh","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"asin","insertText":"std::asin","insertTextFormat":2,"kind":3,"label":"•std::asin(…)","score":1.2531143426895142,"sortText":"405f99f3asin","textEdit":{"newText":"std::asin","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"asinh","insertText":"std::asinh","insertTextFormat":2,"kind":3,"label":"•std::asinh(…)","score":1.2531143426895142,"sortText":"405f99f3asinh","textEdit":{"newText":"std::asinh","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atan","insertText":"std::atan","insertTextFormat":2,"kind":3,"label":"•std::atan(…)","score":1.2531143426895142,"sortText":"405f99f3atan","textEdit":{"newText":"std::atan","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[4 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atan2","insertText":"std::atan2","insertTextFormat":2,"kind":3,"label":"•std::atan2(…)","score":1.2531143426895142,"sortText":"405f99f3atan2","textEdit":{"newText":"std::atan2","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atanh","insertText":"std::atanh","insertTextFormat":2,"kind":3,"label":"•std::atanh(…)","score":1.2531143426895142,"sortText":"405f99f3atanh","textEdit":{"newText":"std::atanh","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"acos","insertText":"std::acos","insertTextFormat":2,"kind":18,"label":"•std::acos","score":1.1391948461532593,"sortText":"406e2eddacos","textEdit":{"newText":"std::acos","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`  \nfunctions"},"filterText":"acosh","insertText":"std::acosh","insertTextFormat":2,"kind":18,"label":"•std::acosh","score":1.1391948461532593,"sortText":"406e2eddacosh","textEdit":{"newText":"std::acosh","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"acoshf","insertText":"std::acoshf","insertTextFormat":2,"kind":18,"label":"•std::acoshf","score":1.1391948461532593,"sortText":"406e2eddacoshf","textEdit":{"newText":"std::acoshf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"acoshl","insertText":"std::acoshl","insertTextFormat":2,"kind":18,"label":"•std::acoshl","score":1.1391948461532593,"sortText":"406e2eddacoshl","textEdit":{"newText":"std::acoshl","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"asin","insertText":"std::asin","insertTextFormat":2,"kind":18,"label":"•std::asin","score":1.1391948461532593,"sortText":"406e2eddasin","textEdit":{"newText":"std::asin","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"asinh","insertText":"std::asinh","insertTextFormat":2,"kind":18,"label":"•std::asinh","score":1.1391948461532593,"sortText":"406e2eddasinh","textEdit":{"newText":"std::asinh","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"asinhf","insertText":"std::asinhf","insertTextFormat":2,"kind":18,"label":"•std::asinhf","score":1.1391948461532593,"sortText":"406e2eddasinhf","textEdit":{"newText":"std::asinhf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"asinhl","insertText":"std::asinhl","insertTextFormat":2,"kind":18,"label":"•std::asinhl","score":1.1391948461532593,"sortText":"406e2eddasinhl","textEdit":{"newText":"std::asinhl","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atan","insertText":"std::atan","insertTextFormat":2,"kind":18,"label":"•std::atan","score":1.1391948461532593,"sortText":"406e2eddatan","textEdit":{"newText":"std::atan","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atan2","insertText":"std::atan2","insertTextFormat":2,"kind":18,"label":"•std::atan2","score":1.1391948461532593,"sortText":"406e2eddatan2","textEdit":{"newText":"std::atan2","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atanh","insertText":"std::atanh","insertTextFormat":2,"kind":18,"label":"•std::atanh","score":1.1391948461532593,"sortText":"406e2eddatanh","textEdit":{"newText":"std::atanh","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atanhf","insertText":"std::atanhf","insertTextFormat":2,"kind":18,"label":"•std::atanhf","score":1.1391948461532593,"sortText":"406e2eddatanhf","textEdit":{"newText":"std::atanhf","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"atanhl","insertText":"std::atanhl","insertTextFormat":2,"kind":18,"label":"•std::atanhl","score":1.1391948461532593,"sortText":"406e2eddatanhl","textEdit":{"newText":"std::atanhl","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <cstdlib>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"long","documentation":{"kind":"markdown","value":"From `<cstdlib>`"},"filterText":"abs","insertText":"std::abs","insertTextFormat":2,"kind":3,"label":"•std::abs(long __i)","score":0.98550808429718018,"sortText":"4083b5beabs","textEdit":{"newText":"std::abs","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nadd_const"},"filterText":"add_const","insertText":"std::add_const<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::add_const<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5beadd_const","textEdit":{"newText":"std::add_const<${1:typename _Tp}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nadd_cv"},"filterText":"add_cv","insertText":"std::add_cv<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::add_cv<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5beadd_cv","textEdit":{"newText":"std::add_cv<${1:typename _Tp}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nadd_lvalue_reference"},"filterText":"add_lvalue_reference","insertText":"std::add_lvalue_reference<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::add_lvalue_reference<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5beadd_lvalue_reference","textEdit":{"newText":"std::add_lvalue_reference<${1:typename _Tp}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`"},"filterText":"add_pointer","insertText":"std::add_pointer<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::add_pointer<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5beadd_pointer","textEdit":{"newText":"std::add_pointer<${1:typename _Tp}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nDestructible and constructible type properties."},"filterText":"add_rvalue_reference","insertText":"std::add_rvalue_reference<${1:typename}>","insertTextFormat":2,"kind":22,"label":"•std::add_rvalue_reference<typename>","score":0.98550808429718018,"sortText":"4083b5beadd_rvalue_reference","textEdit":{"newText":"std::add_rvalue_reference<${1:typename}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nadd_volatile"},"filterText":"add_volatile","insertText":"std::add_volatile<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::add_volatile<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5beadd_volatile","textEdit":{"newText":"std::add_volatile<${1:typename _Tp}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \n@brief Alignment type.  \nThe value of \\_Align is a default-alignment which shall be the most stringent alignment requirement for any C++ object type whose size is no greater than \\_Len (3.9). The member typedef type shall be a POD type suitable for use as uninitialized storage for any object whose size is at most \\_Len and whose alignment is a divisor of \\_Align."},"filterText":"aligned_storage","insertText":"std::aligned_storage<${1:std::size_t _Len}>","insertTextFormat":2,"kind":22,"label":"•std::aligned_storage<std::size_t _Len, std::size_t _Align>","score":0.98550808429718018,"sortText":"4083b5bealigned_storage","textEdit":{"newText":"std::aligned_storage<${1:std::size_t _Len}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \n@brief Provide aligned storage for types.  \n[meta.trans.other]  \nProvides aligned storage for any of the provided types of at least size \\_Len.  \n@see aligned_storage"},"filterText":"aligned_union","insertText":"std::aligned_union<${1:size_t _Len}, ${2:typename _Types}>","insertTextFormat":2,"kind":22,"label":"•std::aligned_union<size_t _Len, typename _Types>","score":0.98550808429718018,"sortText":"4083b5bealigned_union","textEdit":{"newText":"std::aligned_union<${1:size_t _Len}, ${2:typename _Types}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nalignment_of"},"filterText":"alignment_of","insertText":"std::alignment_of<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::alignment_of<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5bealignment_of","textEdit":{"newText":"std::alignment_of<${1:typename _Tp}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <array>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<array>`  \n@brief A standard container for storing a fixed size sequence of elements.  \n@ingroup sequences  \nMeets the requirements of a \\<a href=\"tables.html#65\">container\\</a>, a \\<a href=\"tables.html#66\">reversible container\\</a>, and a \\<a href=\"tables.html#67\">sequence\\</a>.  \nSets support random access iterators.  \n@tparam Tp Type of element. Required to be a complete type.  \n@tparam N Number of elements."},"filterText":"array","insertText":"std::array<${1:typename _Tp}, ${2:std::size_t _Nm}>","insertTextFormat":2,"kind":22,"label":"•std::array<typename _Tp, std::size_t _Nm>","score":0.98550808429718018,"sortText":"4083b5bearray","textEdit":{"newText":"std::array<${1:typename _Tp}, ${2:std::size_t _Nm}>","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"documentation":{"kind":"markdown","value":"! The class which defines how we will talk to this device over SPI *"},"filterText":"Adafruit_SPIDevice","insertText":"Adafruit_SPIDevice","insertTextFormat":2,"kind":7,"label":" Adafruit_SPIDevice","score":0.98512113094329834,"sortText":"4083cf1aAdafruit_SPIDevice","textEdit":{"newText":"Adafruit_SPIDevice","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"documentation":{"kind":"markdown","value":"@brief The class which defines a device register (a location to read/write data from)"},"filterText":"Adafruit_BusIO_Register","insertText":"Adafruit_BusIO_Register","insertTextFormat":2,"kind":7,"label":" Adafruit_BusIO_Register","score":0.97604858875274658,"sortText":"408621aeAdafruit_BusIO_Register","textEdit":{"newText":"Adafruit_BusIO_Register","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc1_channel_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC1 channel 6 is GPIO34"},"filterText":"ADC1_CHANNEL_6","insertText":"ADC1_CHANNEL_6","insertTextFormat":2,"kind":20,"label":"•ADC1_CHANNEL_6","score":0.96751219034194946,"sortText":"4088511fADC1_CHANNEL_6","textEdit":{"newText":"ADC1_CHANNEL_6","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc1_channel_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC1 channel 7 is GPIO35"},"filterText":"ADC1_CHANNEL_7","insertText":"ADC1_CHANNEL_7","insertTextFormat":2,"kind":20,"label":"•ADC1_CHANNEL_7","score":0.96751219034194946,"sortText":"4088511fADC1_CHANNEL_7","textEdit":{"newText":"ADC1_CHANNEL_7","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc2_channel_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC2 channel 2 is GPIO2"},"filterText":"ADC2_CHANNEL_2","insertText":"ADC2_CHANNEL_2","insertTextFormat":2,"kind":20,"label":"•ADC2_CHANNEL_2","score":0.96751219034194946,"sortText":"4088511fADC2_CHANNEL_2","textEdit":{"newText":"ADC2_CHANNEL_2","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc2_channel_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC2 channel 4 is GPIO13"},"filterText":"ADC2_CHANNEL_4","insertText":"ADC2_CHANNEL_4","insertTextFormat":2,"kind":20,"label":"•ADC2_CHANNEL_4","score":0.96751219034194946,"sortText":"4088511fADC2_CHANNEL_4","textEdit":{"newText":"ADC2_CHANNEL_4","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc2_channel_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC2 channel 6 is GPIO14"},"filterText":"ADC2_CHANNEL_6","insertText":"ADC2_CHANNEL_6","insertTextFormat":2,"kind":20,"label":"•ADC2_CHANNEL_6","score":0.96751219034194946,"sortText":"4088511fADC2_CHANNEL_6","textEdit":{"newText":"ADC2_CHANNEL_6","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_atten_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nThe input voltage of ADC will be reduced to about 1/1"},"filterText":"ADC_ATTEN_DB_0","insertText":"ADC_ATTEN_DB_0","insertTextFormat":2,"kind":20,"label":"•ADC_ATTEN_DB_0","score":0.96751219034194946,"sortText":"4088511fADC_ATTEN_DB_0","textEdit":{"newText":"ADC_ATTEN_DB_0","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_atten_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nThe input voltage of ADC will be reduced to about 1/3.6"},"filterText":"ADC_ATTEN_DB_11","insertText":"ADC_ATTEN_DB_11","insertTextFormat":2,"kind":20,"label":"•ADC_ATTEN_DB_11","score":0.96751219034194946,"sortText":"4088511fADC_ATTEN_DB_11","textEdit":{"newText":"ADC_ATTEN_DB_11","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_atten_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nThe input voltage of ADC will be reduced to about 1/1.34"},"filterText":"ADC_ATTEN_DB_2_5","insertText":"ADC_ATTEN_DB_2_5","insertTextFormat":2,"kind":20,"label":"•ADC_ATTEN_DB_2_5","score":0.96751219034194946,"sortText":"4088511fADC_ATTEN_DB_2_5","textEdit":{"newText":"ADC_ATTEN_DB_2_5","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_atten_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`"},"filterText":"ADC_ATTEN_MAX","insertText":"ADC_ATTEN_MAX","insertTextFormat":2,"kind":20,"label":"•ADC_ATTEN_MAX","score":0.96751219034194946,"sortText":"4088511fADC_ATTEN_MAX","textEdit":{"newText":"ADC_ATTEN_MAX","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_channel_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC channel"},"filterText":"ADC_CHANNEL_6","insertText":"ADC_CHANNEL_6","insertTextFormat":2,"kind":20,"label":"•ADC_CHANNEL_6","score":0.96751219034194946,"sortText":"4088511fADC_CHANNEL_6","textEdit":{"newText":"ADC_CHANNEL_6","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_channel_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC channel"},"filterText":"ADC_CHANNEL_7","insertText":"ADC_CHANNEL_7","insertTextFormat":2,"kind":20,"label":"•ADC_CHANNEL_7","score":0.96751219034194946,"sortText":"4088511fADC_CHANNEL_7","textEdit":{"newText":"ADC_CHANNEL_7","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_channel_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC channel"},"filterText":"ADC_CHANNEL_9","insertText":"ADC_CHANNEL_9","insertTextFormat":2,"kind":20,"label":"•ADC_CHANNEL_9","score":0.96751219034194946,"sortText":"4088511fADC_CHANNEL_9","textEdit":{"newText":"ADC_CHANNEL_9","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_i2s_encode_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`"},"filterText":"ADC_ENCODE_MAX","insertText":"ADC_ENCODE_MAX","insertTextFormat":2,"kind":20,"label":"•ADC_ENCODE_MAX","score":0.96751219034194946,"sortText":"4088511fADC_ENCODE_MAX","textEdit":{"newText":"ADC_ENCODE_MAX","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_unit_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nSAR ADC 2, not supported yet"},"filterText":"ADC_UNIT_2","insertText":"ADC_UNIT_2","insertTextFormat":2,"kind":20,"label":"•ADC_UNIT_2","score":0.96751219034194946,"sortText":"4088511fADC_UNIT_2","textEdit":{"newText":"ADC_UNIT_2","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_unit_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nSAR ADC 1 and 2 alternative mode, not supported yet"},"filterText":"ADC_UNIT_ALTER","insertText":"ADC_UNIT_ALTER","insertTextFormat":2,"kind":20,"label":"•ADC_UNIT_ALTER","score":0.96751219034194946,"sortText":"4088511fADC_UNIT_ALTER","textEdit":{"newText":"ADC_UNIT_ALTER","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_bits_width_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`  \nADC capture width is 11Bit"},"filterText":"ADC_WIDTH_BIT_11","insertText":"ADC_WIDTH_BIT_11","insertTextFormat":2,"kind":20,"label":"•ADC_WIDTH_BIT_11","score":0.96751219034194946,"sortText":"4088511fADC_WIDTH_BIT_11","textEdit":{"newText":"ADC_WIDTH_BIT_11","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"driver/adc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"adc_bits_width_t","documentation":{"kind":"markdown","value":"From `\"driver/adc.h\"`"},"filterText":"ADC_WIDTH_MAX","insertText":"ADC_WIDTH_MAX","insertTextFormat":2,"kind":20,"label":"•ADC_WIDTH_MAX","score":0.96751219034194946,"sortText":"4088511fADC_WIDTH_MAX","textEdit":{"newText":"ADC_WIDTH_MAX","range":{"end":{"character":6,"line":146},"start":{"character":5,"line":146}}}}]}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":43},"contentChanges":[{"range":{"start":{"line":146,"character":6},"end":{"line":146,"character":6}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":42}}
>>>
Content-Length: 232

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":146,"character":7},"context":{"triggerKind":3}},"id":75,"jsonrpc":"2.0"}
<<<
Content-Length: 13116

{"id":75,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"alarm","insertText":"alarm","insertTextFormat":2,"kind":3,"label":"•alarm(unsigned int __secs)","score":1.1118042469024658,"sortText":"4071b066alarm","textEdit":{"newText":"alarm","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"void *","documentation":{"kind":"markdown","value":"From `<memory>`  \n@brief Fit aligned storage in buffer.  \n[ptr.align]  \nThis function tries to fit @a \\_\\_size bytes of storage with alignment  \n@a \\_\\_align into the buffer @a \\_\\_ptr of size @a \\_\\_space bytes. If such a buffer fits then @a \\_\\_ptr is changed to point to the first byte of the aligned storage and @a \\_\\_space is reduced by the bytes used for alignment.  \n@param \\_\\_align A fundamental or extended alignment value.  \n@param \\_\\_size Size of the aligned storage required.  \n@param \\_\\_ptr Pointer to a buffer of @a \\_\\_space bytes.  \n@param \\_\\_space Size of the buffer pointed to by @a \\_\\_ptr.  \n@return the updated pointer if the aligned storage fits, otherwise nullptr."},"filterText":"align","insertText":"std::align","insertTextFormat":2,"kind":3,"label":"•std::align(size_t __align, size_t __size, void *&__ptr, size_t &__space)","score":1.0575764179229736,"sortText":"4078a156align","textEdit":{"newText":"std::align","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \n@brief Alignment type.  \nThe value of \\_Align is a default-alignment which shall be the most stringent alignment requirement for any C++ object type whose size is no greater than \\_Len (3.9). The member typedef type shall be a POD type suitable for use as uninitialized storage for any object whose size is at most \\_Len and whose alignment is a divisor of \\_Align."},"filterText":"aligned_storage","insertText":"std::aligned_storage<${1:std::size_t _Len}>","insertTextFormat":2,"kind":22,"label":"•std::aligned_storage<std::size_t _Len, std::size_t _Align>","score":0.98550808429718018,"sortText":"4083b5bealigned_storage","textEdit":{"newText":"std::aligned_storage<${1:std::size_t _Len}>","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \n@brief Provide aligned storage for types.  \n[meta.trans.other]  \nProvides aligned storage for any of the provided types of at least size \\_Len.  \n@see aligned_storage"},"filterText":"aligned_union","insertText":"std::aligned_union<${1:size_t _Len}, ${2:typename _Types}>","insertTextFormat":2,"kind":22,"label":"•std::aligned_union<size_t _Len, typename _Types>","score":0.98550808429718018,"sortText":"4083b5bealigned_union","textEdit":{"newText":"std::aligned_union<${1:size_t _Len}, ${2:typename _Types}>","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nalignment_of"},"filterText":"alignment_of","insertText":"std::alignment_of<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::alignment_of<typename _Tp>","score":0.98550808429718018,"sortText":"4083b5bealignment_of","textEdit":{"newText":"std::alignment_of<${1:typename _Tp}>","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"bool","documentation":{"kind":"markdown","value":"From `<algorithm>`  \n@brief Checks that a predicate is true for all the elements of a sequence.  \n@ingroup non_mutating_algorithms  \n@param \\_\\_first An input iterator.  \n@param \\_\\_last An input iterator.  \n@param \\_\\_pred A predicate.  \n@return True if the check is true, false otherwise.  \nReturns true if @p \\_\\_pred is true for each element in the range  \n@p [\\_\\_first,\\_\\_last), and false otherwise."},"filterText":"all_of","insertText":"std::all_of","insertTextFormat":2,"kind":3,"label":"•std::all_of(_IIter, _IIter, _Predicate)","score":0.92650353908538818,"sortText":"4092d0aaall_of","textEdit":{"newText":"std::all_of","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"shared_ptr<_Tp>","documentation":{"kind":"markdown","value":"From `<memory>`  \n@brief Create an object that is owned by a shared_ptr.  \n@param \\_\\_a An allocator.  \n@param \\_\\_args Arguments for the @a \\_Tp object's constructor.  \n@return A shared_ptr that owns the newly created object.  \n@throw An exception thrown from @a \\_Alloc::allocate or from the constructor of @a \\_Tp.  \nA copy of @a \\_\\_a will be used to allocate memory for the shared_ptr and the new object."},"filterText":"allocate_shared","insertText":"std::allocate_shared","insertTextFormat":2,"kind":3,"label":"•std::allocate_shared<typename _Tp>(const _Alloc &__a, _Args &&__args...)","score":0.92650353908538818,"sortText":"4092d0aaallocate_shared","textEdit":{"newText":"std::allocate_shared","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<memory>`  \n@defgroup allocators Allocators  \n@ingroup memory  \nClasses encapsulating memory operations.  \n@{"},"filterText":"allocator","insertText":"std::allocator<${1:typename}>","insertTextFormat":2,"kind":7,"label":"•std::allocator<typename>","score":0.92650353908538818,"sortText":"4092d0aaallocator","textEdit":{"newText":"std::allocator<${1:typename}>","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"const allocator_arg_t","documentation":{"kind":"markdown","value":"From `<memory>`"},"filterText":"allocator_arg","insertText":"std::allocator_arg","insertTextFormat":2,"kind":6,"label":"•std::allocator_arg","score":0.92650353908538818,"sortText":"4092d0aaallocator_arg","textEdit":{"newText":"std::allocator_arg","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<memory>`  \n[allocator.tag]"},"filterText":"allocator_arg_t","insertText":"std::allocator_arg_t","insertTextFormat":2,"kind":22,"label":"•std::allocator_arg_t","score":0.92650353908538818,"sortText":"4092d0aaallocator_arg_t","textEdit":{"newText":"std::allocator_arg_t","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<memory>`  \n@brief Uniform interface to all allocator types.  \n@ingroup allocators"},"filterText":"allocator_traits","insertText":"std::allocator_traits<${1:typename _Alloc}>","insertTextFormat":2,"kind":22,"label":"•std::allocator_traits<typename _Alloc>","score":0.92650353908538818,"sortText":"4092d0aaallocator_traits","textEdit":{"newText":"std::allocator_traits<${1:typename _Alloc}>","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"dhcpserver/dhcpserver_options.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"dhcp_msg_option","documentation":{"kind":"markdown","value":"From `\"dhcpserver/dhcpserver_options.h\"`  \nIP Layer Parameters per Interface"},"filterText":"ALL_SUBNETS_ARE_LOCAL","insertText":"ALL_SUBNETS_ARE_LOCAL","insertTextFormat":2,"kind":20,"label":"•ALL_SUBNETS_ARE_LOCAL","score":0.84486329555511475,"sortText":"40c2c029ALL_SUBNETS_ARE_LOCAL","textEdit":{"newText":"ALL_SUBNETS_ARE_LOCAL","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<type_traits>`  \nadd_lvalue_reference"},"filterText":"add_lvalue_reference","insertText":"std::add_lvalue_reference<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::add_lvalue_reference<typename _Tp>","score":0.9855080246925354,"sortText":"40c2c84fadd_lvalue_reference","textEdit":{"newText":"std::add_lvalue_reference<${1:typename _Tp}>","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <atomic>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<atomic>`"},"filterText":"atomic_load","insertText":"std::atomic_load","insertTextFormat":2,"kind":3,"label":"•std::atomic_load(…)","score":0.92650347948074341,"sortText":"40ce1c80atomic_load","textEdit":{"newText":"std::atomic_load","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <atomic>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[2 overloads]","documentation":{"kind":"markdown","value":"From `<atomic>`  \n@brief Atomic load for shared_ptr objects.  \n@param \\_\\_p A non-null pointer to a shared_ptr object.  \n@return @c \\*\\_\\_p  \nThe memory order shall not be @c memory_order_release or  \n@c memory_order_acq_rel.  \n@{"},"filterText":"atomic_load_explicit","insertText":"std::atomic_load_explicit","insertTextFormat":2,"kind":3,"label":"•std::atomic_load_explicit(…)","score":0.92650347948074341,"sortText":"40ce1c80atomic_load_explicit","textEdit":{"newText":"std::atomic_load_explicit","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"alloca.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"alloca.h\"`"},"filterText":"alloca","insertText":"alloca(${1:size})","insertTextFormat":2,"kind":1,"label":"•alloca(size)","score":0.57685983180999756,"sortText":"40ec52eaalloca","textEdit":{"newText":"alloca(${1:size})","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/xtruntime-frames.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"xtensa/xtruntime-frames.h\"`"},"filterText":"ALIGNPAD","insertText":"ALIGNPAD","insertTextFormat":2,"kind":1,"label":"•ALIGNPAD","score":0.57685983180999756,"sortText":"40fec88dALIGNPAD","textEdit":{"newText":"ALIGNPAD","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_context.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_context.h\"`"},"filterText":"ALIGNUP","insertText":"ALIGNUP(${1:n}, ${2:val})","insertTextFormat":2,"kind":1,"label":"•ALIGNUP(n, val)","score":0.53754985332489014,"sortText":"410f2d7bALIGNUP","textEdit":{"newText":"ALIGNUP(${1:n}, ${2:val})","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}},{"additionalTextEdits":[{"newText":"#include <sys/stat.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/stat.h>`"},"filterText":"ALLPERMS","insertText":"ALLPERMS","insertTextFormat":2,"kind":1,"label":"•ALLPERMS","score":0.50536549091339111,"sortText":"411d98a4ALLPERMS","textEdit":{"newText":"ALLPERMS","range":{"end":{"character":7,"line":146},"start":{"character":5,"line":146}}}}]}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":43}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":44},"contentChanges":[{"range":{"start":{"line":146,"character":7},"end":{"line":146,"character":7}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":44}}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":146,"character":8},"end":{"line":146,"character":8}},"context":{"diagnostics":[]}},"id":76,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":76,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 295

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":45},"contentChanges":[{"range":{"start":{"line":146,"character":7},"end":{"line":146,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":45}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":46},"contentChanges":[{"range":{"start":{"line":146,"character":7},"end":{"line":146,"character":7}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":46}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":47},"contentChanges":[{"range":{"start":{"line":146,"character":8},"end":{"line":146,"character":8}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":48},"contentChanges":[{"range":{"start":{"line":146,"character":9},"end":{"line":146,"character":9}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":47}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":48}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":49},"contentChanges":[{"range":{"start":{"line":146,"character":10},"end":{"line":146,"character":10}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":49}}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":50},"contentChanges":[{"range":{"start":{"line":146,"character":10},"end":{"line":146,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":50}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":51},"contentChanges":[{"range":{"start":{"line":146,"character":10},"end":{"line":146,"character":10}},"text":"T"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":146,"character":11},"context":{"triggerKind":1}},"id":77,"jsonrpc":"2.0"}
<<<
Content-Length: 68

{"id":77,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":51}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":52},"contentChanges":[{"range":{"start":{"line":146,"character":11},"end":{"line":146,"character":11}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":146,"character":12},"context":{"triggerKind":1}},"id":78,"jsonrpc":"2.0"}
<<<
Content-Length: 68

{"id":78,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":52}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":53},"contentChanges":[{"range":{"start":{"line":146,"character":12},"end":{"line":146,"character":12}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":146,"character":13},"context":{"triggerKind":1}},"id":79,"jsonrpc":"2.0"}
<<<
Content-Length: 68

{"id":79,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":54},"contentChanges":[{"range":{"start":{"line":146,"character":13},"end":{"line":146,"character":13}},"text":"k"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":146,"character":14},"context":{"triggerKind":1}},"id":80,"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":53}}Content-Length: 68

{"id":80,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":54}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":55},"contentChanges":[{"range":{"start":{"line":146,"character":14},"end":{"line":146,"character":14}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":146,"character":15},"context":{"triggerKind":1}},"id":81,"jsonrpc":"2.0"}
<<<
Content-Length: 68

{"id":81,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":55}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":146,"character":15},"end":{"line":146,"character":15}},"context":{"diagnostics":[]}},"id":82,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":82,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":139,"character":8},"end":{"line":144,"character":1}},"context":{"diagnostics":[]}},"id":83,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":83,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":144,"character":1},"end":{"line":144,"character":1}},"context":{"diagnostics":[]}},"id":84,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":84,"jsonrpc":"2.0","result":[]}Content-Length: 126

{"id":85,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":149},"start":{"character":4,"line":149}}}]}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":149,"character":14}},"id":85,"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":149,"character":14}},"id":86,"jsonrpc":"2.0"}
<<<
Content-Length: 1891

{"id":86,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `vTaskDelay`  \n\n---\n→ `void`  \nParameters:  \n- `const TickType_t xTicksToDelay`\n\nDelay a task for a given number of ticks.  \nThe actual time that the task remains blocked depends on the tick rate.  \nThe constant portTICK_PERIOD_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.  \nINCLUDE_vTaskDelay must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \nvTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method of controlling the frequency of a periodic task as the path taken through the code, as well as other task and interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the calling task should unblock.  \n@param xTicksToDelay The amount of time, in tick periods, that the calling task should block.  \nExample usage:  \n@code{c} void vTaskFunction( void * pvParameters ) { // Block for 500ms.  \nconst TickType_t xDelay = 500 / portTICK_PERIOD_MS;  \nfor( ;; ) { // Simply toggle the LED every 500ms, blocking between each toggle.  \nvToggleLED();  \nvTaskDelay( xDelay );  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl  \n\n---\n```cpp\nvoid vTaskDelay(const TickType_t xTicksToDelay)\n```"},"range":{"end":{"character":14,"line":149},"start":{"character":4,"line":149}}}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":149,"character":14},"end":{"line":149,"character":14}},"context":{"diagnostics":[]}},"id":87,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":87,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 205

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":149,"character":14}},"id":88,"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"id":88,"jsonrpc":"2.0","result":[{"range":{"end":{"character":15,"line":810},"start":{"character":5,"line":810}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}]}
>>>
Content-Length: 98727

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h","languageId":"cpp","version":1,"text":"/*\n    FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.\n    All rights reserved\n\n    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.\n\n    This file is part of the FreeRTOS distribution.\n\n    FreeRTOS is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License (version 2) as published by the\n    Free Software Foundation \u003e\u003e!AND MODIFIED BY!\u003c\u003c the FreeRTOS exception.\n\n\t***************************************************************************\n    \u003e\u003e!   NOTE: The modification to the GPL is included to allow you to     !\u003c\u003c\n    \u003e\u003e!   distribute a combined work that includes FreeRTOS without being   !\u003c\u003c\n    \u003e\u003e!   obliged to provide the source code for proprietary components     !\u003c\u003c\n    \u003e\u003e!   outside of the FreeRTOS kernel.                                   !\u003c\u003c\n\t***************************************************************************\n\n    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY\n    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n    FOR A PARTICULAR PURPOSE.  Full license text is available on the following\n    link: http://www.freertos.org/a00114.html\n\n    ***************************************************************************\n     *                                                                       *\n     *    FreeRTOS provides completely free yet professionally developed,    *\n     *    robust, strictly quality controlled, supported, and cross          *\n     *    platform software that is more than just the market leader, it     *\n     *    is the industry's de facto standard.                               *\n     *                                                                       *\n     *    Help yourself get started quickly while simultaneously helping     *\n     *    to support the FreeRTOS project by purchasing a FreeRTOS           *\n     *    tutorial book, reference manual, or both:                          *\n     *    http://www.FreeRTOS.org/Documentation                              *\n     *                                                                       *\n    ***************************************************************************\n\n    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading\n\tthe FAQ page \"My application does not run, what could be wrong?\".  Have you\n\tdefined configASSERT()?\n\n\thttp://www.FreeRTOS.org/support - In return for receiving this top quality\n\tembedded software for free we request you assist our global community by\n\tparticipating in the support forum.\n\n\thttp://www.FreeRTOS.org/training - Investing in training allows your team to\n\tbe as productive as possible as early as possible.  Now you can receive\n\tFreeRTOS training directly from Richard Barry, CEO of Real Time Engineers\n\tLtd, and the world's leading authority on the world's leading RTOS.\n\n    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,\n    including FreeRTOS+Trace - an indispensable productivity tool, a DOS\n    compatible FAT file system, and our tiny thread aware UDP/IP stack.\n\n    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.\n    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.\n\n    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High\n    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS\n    licenses offer ticketed support, indemnification and commercial middleware.\n\n    http://www.SafeRTOS.com - High Integrity Systems also provide a safety\n    engineered and independently SIL3 certified version for use in safety and\n    mission critical applications that require provable dependability.\n\n    1 tab == 4 spaces!\n*/\n\n\n#ifndef INC_TASK_H\n#define INC_TASK_H\n\n#ifndef INC_FREERTOS_H\n\t#error \"include FreeRTOS.h must appear in source files before include task.h\"\n#endif\n\n#include \u003climits.h\u003e\n\n#include \"list.h\"\n#include \"portmacro.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*-----------------------------------------------------------\n * MACROS AND DEFINITIONS\n *----------------------------------------------------------*/\n\n#define tskKERNEL_VERSION_NUMBER \"V8.2.0\"\n#define tskKERNEL_VERSION_MAJOR 8\n#define tskKERNEL_VERSION_MINOR 2\n#define tskKERNEL_VERSION_BUILD 0\n\n/**\n * @brief Argument of xTaskCreatePinnedToCore indicating that task has no affinity\n */\n#define tskNO_AFFINITY INT_MAX\n\n/**\n * task. h\n *\n * Type by which tasks are referenced.  For example, a call to xTaskCreate\n * returns (via a pointer parameter) an TaskHandle_t variable that can then\n * be used as a parameter to vTaskDelete to delete the task.\n *\n * \\ingroup Tasks\n */\ntypedef void * TaskHandle_t;\n\n/**\n * Defines the prototype to which the application task hook function must\n * conform.\n */\ntypedef BaseType_t (*TaskHookFunction_t)( void * );\n\n/** Task states returned by eTaskGetState. */\ntypedef enum\n{\n\teRunning = 0,\t/*!\u003c A task is querying the state of itself, so must be running. */\n\teReady,\t\t\t/*!\u003c The task being queried is in a read or pending ready list. */\n\teBlocked,\t\t/*!\u003c The task being queried is in the Blocked state. */\n\teSuspended,\t\t/*!\u003c The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */\n\teDeleted\t\t/*!\u003c The task being queried has been deleted, but its TCB has not yet been freed. */\n} eTaskState;\n\n/** Actions that can be performed when vTaskNotify() is called. */\ntypedef enum\n{\n\teNoAction = 0,\t\t\t\t/*!\u003c Notify the task without updating its notify value. */\n\teSetBits,\t\t\t\t\t/*!\u003c Set bits in the task's notification value. */\n\teIncrement,\t\t\t\t\t/*!\u003c Increment the task's notification value. */\n\teSetValueWithOverwrite,\t\t/*!\u003c Set the task's notification value to a specific value even if the previous value has not yet been read by the task. */\n\teSetValueWithoutOverwrite\t/*!\u003c Set the task's notification value if the previous value has been read by the task. */\n} eNotifyAction;\n\n/** @cond */\n/**\n * Used internally only.\n */\ntypedef struct xTIME_OUT\n{\n\tBaseType_t xOverflowCount;\n\tTickType_t xTimeOnEntering;\n} TimeOut_t;\n\n/**\n * Defines the memory ranges allocated to the task when an MPU is used.\n */\ntypedef struct xMEMORY_REGION\n{\n\tvoid *pvBaseAddress;\n\tuint32_t ulLengthInBytes;\n\tuint32_t ulParameters;\n} MemoryRegion_t;\n\n/**\n * Parameters required to create an MPU protected task.\n */\ntypedef struct xTASK_PARAMETERS\n{\n\tTaskFunction_t pvTaskCode;\n\tconst char * const pcName;\t/*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tuint32_t usStackDepth;\n\tvoid *pvParameters;\n\tUBaseType_t uxPriority;\n\tStackType_t *puxStackBuffer;\n\tMemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];\n} TaskParameters_t;\n/** @endcond */\n\n/**\n *  Used with the uxTaskGetSystemState() function to return the state of each task in the system.\n*/\ntypedef struct xTASK_STATUS\n{\n\tTaskHandle_t xHandle;\t\t\t/*!\u003c The handle of the task to which the rest of the information in the structure relates. */\n\tconst char *pcTaskName;\t\t\t/*!\u003c A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\tUBaseType_t xTaskNumber;\t\t/*!\u003c A number unique to the task. */\n\teTaskState eCurrentState;\t\t/*!\u003c The state in which the task existed when the structure was populated. */\n\tUBaseType_t uxCurrentPriority;\t/*!\u003c The priority at which the task was running (may be inherited) when the structure was populated. */\n\tUBaseType_t uxBasePriority;\t\t/*!\u003c The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. */\n\tuint32_t ulRunTimeCounter;\t\t/*!\u003c The total run time allocated to the task so far, as defined by the run time stats clock.  See http://www.freertos.org/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. */\n\tStackType_t *pxStackBase;\t\t/*!\u003c Points to the lowest address of the task's stack area. */\n\tuint32_t usStackHighWaterMark;\t/*!\u003c The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. */\n#if configTASKLIST_INCLUDE_COREID\n\tBaseType_t xCoreID;\t\t\t\t/*!\u003c Core this task is pinned to. This field is present if CONFIG_FREERTOS_VTASKLIST_INCLUDE_COREID is set. */\n#endif\n} TaskStatus_t;\n\n/**\n * Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.\n * We need this struct because TCB_t is defined (hidden) in tasks.c.\n */\ntypedef struct xTASK_SNAPSHOT\n{\n\tvoid        *pxTCB;         /*!\u003c Address of task control block. */\n\tStackType_t *pxTopOfStack;  /*!\u003c Points to the location of the last item placed on the tasks stack. */\n\tStackType_t *pxEndOfStack;  /*!\u003c Points to the end of the stack. pxTopOfStack \u003c pxEndOfStack, stack grows hi2lo\n\t\t\t\t\t\t\t\t\tpxTopOfStack \u003e pxEndOfStack, stack grows lo2hi*/\n} TaskSnapshot_t;\n\n/**\n * Possible return values for eTaskConfirmSleepModeStatus().\n */\ntypedef enum\n{\n\teAbortSleep = 0,\t\t/*!\u003c A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */\n\teStandardSleep,\t\t\t/*!\u003c Enter a sleep mode that will not last any longer than the expected idle time. */\n\teNoTasksWaitingTimeout\t/*!\u003c No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */\n} eSleepModeStatus;\n\n\n/**\n * Defines the priority used by the idle task.  This must not be modified.\n *\n * \\ingroup TaskUtils\n */\n#define tskIDLE_PRIORITY\t\t\t( ( UBaseType_t ) 0U )\n\n/**\n * task. h\n *\n * Macro for forcing a context switch.\n *\n * \\ingroup SchedulerControl\n */\n#define taskYIELD()\t\t\t\t\tportYIELD()\n\n/**\n * task. h\n *\n * Macro to mark the start of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskENTER_CRITICAL(mux)\t\tportENTER_CRITICAL(mux)\n#else\n#define taskENTER_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskENTER_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portENTER_CRITICAL(mux)'\\\"\") portENTER_CRITICAL(mux)\n#endif\n#define taskENTER_CRITICAL_ISR(mux)\t\tportENTER_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to mark the end of a critical code region.  Preemptive context\n * switches cannot occur when in a critical region.\n *\n * @note This may alter the stack (depending on the portable implementation)\n * so must be used with care!\n *\n * \\ingroup SchedulerControl\n */\n#ifdef _ESP_FREERTOS_INTERNAL\n#define taskEXIT_CRITICAL(mux)\t\t\tportEXIT_CRITICAL(mux)\n#else\n#define taskEXIT_CRITICAL(mux) _Pragma(\"GCC warning \\\"'taskEXIT_CRITICAL(mux)' is deprecated in ESP-IDF, consider using 'portEXIT_CRITICAL(mux)'\\\"\") portEXIT_CRITICAL(mux)\n#endif\n#define taskEXIT_CRITICAL_ISR(mux)\t\tportEXIT_CRITICAL_ISR(mux)\n\n/**\n * task. h\n *\n * Macro to disable all maskable interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskDISABLE_INTERRUPTS()\tportDISABLE_INTERRUPTS()\n\n/**\n * task. h\n *\n * Macro to enable microcontroller interrupts.\n *\n * \\ingroup SchedulerControl\n */\n#define taskENABLE_INTERRUPTS()\t\tportENABLE_INTERRUPTS()\n\n/* Definitions returned by xTaskGetSchedulerState().  taskSCHEDULER_SUSPENDED is\n0 to generate more optimal code when configASSERT() is defined as the constant\nis used in assert() statements. */\n#define taskSCHEDULER_SUSPENDED\t\t( ( BaseType_t ) 0 )\n#define taskSCHEDULER_NOT_STARTED\t( ( BaseType_t ) 1 )\n#define taskSCHEDULER_RUNNING\t\t( ( BaseType_t ) 2 )\n\n\n/*-----------------------------------------------------------\n * TASK CREATION API\n *----------------------------------------------------------*/\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreate, but allows setting task affinity\n * in SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\tBaseType_t xTaskCreatePinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\tconst uint32_t usStackDepth,\n\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\tTaskHandle_t * const pvCreatedTask,\n\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID);\n\n#endif\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * See xTaskCreateStatic() for a version that does not use any dynamic memory\n * allocation.\n *\n * xTaskCreate() can only be used to create a task that has unrestricted\n * access to the entire microcontroller memory map.  Systems that include MPU\n * support can alternatively create an MPU constrained task using\n * xTaskCreateRestricted().\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default\n * is 16.\n *\n * @param usStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task should run.  Systems that\n * include MPU support can optionally create tasks in a privileged (system)\n * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For\n * example, to create a privileged task at priority 2 the uxPriority parameter\n * should be set to ( 2 | portPRIVILEGE_BIT ).\n *\n * @param pvCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *  // Task to be created.\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *   }\n *  }\n *\n *  // Function that creates a task.\n *  void vOtherFunction( void )\n *  {\n *  static uint8_t ucParameterToPass;\n *  TaskHandle_t xHandle = NULL;\n *\n *   // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass\n *   // must exist for the lifetime of the task, so in this case is declared static.  If it was just an\n *   // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time\n *   // the new task attempts to access it.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, \u0026ucParameterToPass, tskIDLE_PRIORITY, \u0026xHandle );\n *      configASSERT( xHandle );\n *\n *   // Use the handle to delete the task.\n *      if( xHandle != NULL )\n *      {\n *       vTaskDelete( xHandle );\n *      }\n *  }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\n\n\tstatic inline IRAM_ATTR BaseType_t xTaskCreate(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t usStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tTaskHandle_t * const pvCreatedTask)\n\t{\n\t\treturn xTaskCreatePinnedToCore( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pvCreatedTask, tskNO_AFFINITY );\n\t}\n\n#endif\n\n\n\n\n/**\n * Create a new task with a specified affinity.\n *\n * This function is similar to xTaskCreateStatic, but allows specifying\n * task affinity in an SMP system.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @param xCoreID If the value is tskNO_AFFINITY, the created task is not\n * pinned to any CPU, and the scheduler can run it on any core available.\n * Other values indicate the index number of the CPU which the task should\n * be pinned to. Specifying values larger than (portNUM_PROCESSORS - 1) will\n * cause the function to fail.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * \\ingroup Tasks\n */\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tTaskHandle_t xTaskCreateStaticPinnedToCore(\tTaskFunction_t pvTaskCode,\n\t\t\t\t\t\t\t\t\t\t\t\tconst char * const pcName,\n\t\t\t\t\t\t\t\t\t\t\t\tconst uint32_t ulStackDepth,\n\t\t\t\t\t\t\t\t\t\t\t\tvoid * const pvParameters,\n\t\t\t\t\t\t\t\t\t\t\t\tUBaseType_t uxPriority,\n\t\t\t\t\t\t\t\t\t\t\t\tStackType_t * const pxStackBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tStaticTask_t * const pxTaskBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\tconst BaseType_t xCoreID );\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/**\n * Create a new task and add it to the list of tasks that are ready to run.\n *\n * Internally, within the FreeRTOS implementation, tasks use two blocks of\n * memory.  The first block is used to hold the task's data structures.  The\n * second block is used by the task as its stack.  If a task is created using\n * xTaskCreate() then both blocks of memory are automatically dynamically\n * allocated inside the xTaskCreate() function.  (see\n * http://www.freertos.org/a00111.html).  If a task is created using\n * xTaskCreateStatic() then the application writer must provide the required\n * memory.  xTaskCreateStatic() therefore allows a task to be created without\n * using any dynamic memory allocation.\n *\n * @param pvTaskCode Pointer to the task entry function.  Tasks\n * must be implemented to never return (i.e. continuous loop).\n *\n * @param pcName A descriptive name for the task.  This is mainly used to\n * facilitate debugging.  The maximum length of the string is defined by\n * configMAX_TASK_NAME_LEN in FreeRTOSConfig.h.\n *\n * @param ulStackDepth The size of the task stack specified as the number of\n * bytes. Note that this differs from vanilla FreeRTOS.\n *\n * @param pvParameters Pointer that will be used as the parameter for the task\n * being created.\n *\n * @param uxPriority The priority at which the task will run.\n *\n * @param pxStackBuffer Must point to a StackType_t array that has at least\n * ulStackDepth indexes - the array will then be used as the task's stack,\n * removing the need for the stack to be allocated dynamically.\n *\n * @param pxTaskBuffer Must point to a variable of type StaticTask_t, which will\n * then be used to hold the task's data structures, removing the need for the\n * memory to be allocated dynamically.\n *\n * @return If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will\n * be created and pdPASS is returned.  If either pxStackBuffer or pxTaskBuffer\n * are NULL then the task will not be created and\n * errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY is returned.\n *\n * @note If program uses thread local variables (ones specified with \"__thread\" keyword)\n * then storage for them will be allocated on the task's stack.\n *\n * Example usage:\n * @code{c}\n *\n *     // Dimensions the buffer that the task being created will use as its stack.\n *     // NOTE:  This is the number of bytes the stack will hold, not the number of\n *     // words as found in vanilla FreeRTOS.\n *     #define STACK_SIZE 200\n *\n *     // Structure that will hold the TCB of the task being created.\n *     StaticTask_t xTaskBuffer;\n *\n *     // Buffer that the task being created will use as its stack.  Note this is\n *     // an array of StackType_t variables.  The size of StackType_t is dependent on\n *     // the RTOS port.\n *     StackType_t xStack[ STACK_SIZE ];\n *\n *     // Function that implements the task being created.\n *     void vTaskCode( void * pvParameters )\n *     {\n *         // The parameter value is expected to be 1 as 1 is passed in the\n *         // pvParameters value in the call to xTaskCreateStatic().\n *         configASSERT( ( uint32_t ) pvParameters == 1UL );\n *\n *         for( ;; )\n *         {\n *             // Task code goes here.\n *         }\n *     }\n *\n *     // Function that creates a task.\n *     void vOtherFunction( void )\n *     {\n *         TaskHandle_t xHandle = NULL;\n *\n *         // Create the task without using any dynamic memory allocation.\n *         xHandle = xTaskCreateStatic(\n *                       vTaskCode,       // Function that implements the task.\n *                       \"NAME\",          // Text name for the task.\n *                       STACK_SIZE,      // Stack size in bytes, not words.\n *                       ( void * ) 1,    // Parameter passed into the task.\n *                       tskIDLE_PRIORITY,// Priority at which the task is created.\n *                       xStack,          // Array to use as the task's stack.\n *                       \u0026xTaskBuffer );  // Variable to hold the task's data structure.\n *\n *         // puxStackBuffer and pxTaskBuffer were not NULL, so the task will have\n *         // been created, and xHandle will be the task's handle.  Use the handle\n *         // to suspend the task.\n *         vTaskSuspend( xHandle );\n *     }\n * @endcode\n * \\ingroup Tasks\n */\n\n#if( configSUPPORT_STATIC_ALLOCATION == 1 )\n\tstatic inline IRAM_ATTR TaskHandle_t xTaskCreateStatic(\n\t\t\tTaskFunction_t pvTaskCode,\n\t\t\tconst char * const pcName,\n\t\t\tconst uint32_t ulStackDepth,\n\t\t\tvoid * const pvParameters,\n\t\t\tUBaseType_t uxPriority,\n\t\t\tStackType_t * const pxStackBuffer,\n\t\t\tStaticTask_t * const pxTaskBuffer)\n\t{\n\t\treturn xTaskCreateStaticPinnedToCore( pvTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, pxStackBuffer, pxTaskBuffer, tskNO_AFFINITY );\n\t}\n#endif /* configSUPPORT_STATIC_ALLOCATION */\n\n/** @cond */\n/**\n * xTaskCreateRestricted() should only be used in systems that include an MPU\n * implementation.\n *\n * Create a new task and add it to the list of tasks that are ready to run.\n * The function parameters define the memory regions and associated access\n * permissions allocated to the task.\n *\n * @param pxTaskDefinition Pointer to a structure that contains a member\n * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API\n * documentation) plus an optional stack buffer and the memory region\n * definitions.\n *\n * @param pxCreatedTask Used to pass back a handle by which the created task\n * can be referenced.\n *\n * @return pdPASS if the task was successfully created and added to a ready\n * list, otherwise an error code defined in the file projdefs.h\n *\n * Example usage:\n * @code{c}\n * // Create an TaskParameters_t structure that defines the task to be created.\n * static const TaskParameters_t xCheckTaskParameters =\n * {\n * \tvATask,\t\t// pvTaskCode - the function that implements the task.\n * \t\"ATask\",\t// pcName - just a text name for the task to assist debugging.\n * \t100,\t\t// usStackDepth\t- the stack size DEFINED IN BYTES.\n * \tNULL,\t\t// pvParameters - passed into the task function as the function parameters.\n * \t( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.\n * \tcStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.\n *\n * \t// xRegions - Allocate up to three separate memory regions for access by\n * \t// the task, with appropriate access permissions.  Different processors have\n * \t// different memory alignment requirements - refer to the FreeRTOS documentation\n * \t// for full information.\n * \t{\n * \t\t// Base address\t\t\t\t\tLength\tParameters\n *         { cReadWriteArray,\t\t\t\t32,\t\tportMPU_REGION_READ_WRITE },\n *         { cReadOnlyArray,\t\t\t\t32,\t\tportMPU_REGION_READ_ONLY },\n *         { cPrivilegedOnlyAccessArray,\t128,\tportMPU_REGION_PRIVILEGED_READ_WRITE }\n * \t}\n * };\n *\n * int main( void )\n * {\n * TaskHandle_t xHandle;\n *\n * \t// Create a task from the const structure defined above.  The task handle\n * \t// is requested (the second parameter is not NULL) but in this case just for\n * \t// demonstration purposes as its not actually used.\n * \txTaskCreateRestricted( \u0026xRegTest1Parameters, \u0026xHandle );\n *\n * \t// Start the scheduler.\n * \tvTaskStartScheduler();\n *\n * \t// Will only get here if there was insufficient memory to create the idle\n * \t// and/or timer task.\n * \tfor( ;; );\n * }\n * @endcode\n * \\ingroup Tasks\n */\n#if( portUSING_MPU_WRAPPERS == 1 )\n\tBaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask ) PRIVILEGED_FUNCTION;\n#endif\n\n\n/**\n * Memory regions are assigned to a restricted task when the task is created by\n * a call to xTaskCreateRestricted().  These regions can be redefined using\n * vTaskAllocateMPURegions().\n *\n * @param xTask The handle of the task being updated.\n *\n * @param xRegions A pointer to an MemoryRegion_t structure that contains the\n * new memory region definitions.\n *\n * Example usage:\n *\n * @code{c}\n * // Define an array of MemoryRegion_t structures that configures an MPU region\n * // allowing read/write access for 1024 bytes starting at the beginning of the\n * // ucOneKByte array.  The other two of the maximum 3 definable regions are\n * // unused so set to zero.\n * static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =\n * {\n * \t// Base address\t\tLength\t\tParameters\n * \t{ ucOneKByte,\t\t1024,\t\tportMPU_REGION_READ_WRITE },\n * \t{ 0,\t\t\t\t0,\t\t\t0 },\n * \t{ 0,\t\t\t\t0,\t\t\t0 }\n * };\n *\n * void vATask( void *pvParameters )\n * {\n * \t// This task was created such that it has access to certain regions of\n * \t// memory as defined by the MPU configuration.  At some point it is\n * \t// desired that these MPU regions are replaced with that defined in the\n * \t// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()\n * \t// for this purpose.  NULL is used as the task handle to indicate that this\n * \t// function should modify the MPU regions of the calling task.\n * \tvTaskAllocateMPURegions( NULL, xAltRegions );\n *\n * \t// Now the task can continue its function, but from this point on can only\n * \t// access its stack and the ucOneKByte array (unless any other statically\n * \t// defined or shared regions have been declared elsewhere).\n * }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Remove a task from the RTOS real time kernel's management.\n *\n * The task being deleted will be removed from all ready, blocked, suspended\n * and event lists.\n *\n * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @note The idle task is responsible for freeing the kernel allocated\n * memory from tasks that have been deleted.  It is therefore important that\n * the idle task is not starved of microcontroller processing time if your\n * application makes any calls to vTaskDelete ().  Memory allocated by the\n * task code is not automatically freed, and should be freed before the task\n * is deleted.\n *\n * See the demo application file death.c for sample code that utilises\n * vTaskDelete ().\n *\n * @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will\n * cause the calling task to be deleted.\n *\n * Example usage:\n * @code{c}\n *  void vOtherFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n * \t // Create the task, storing the handle.\n * \t xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n * \t // Use the handle to delete the task.\n * \t vTaskDelete( xHandle );\n *  }\n * @endcode\n * \\ingroup Tasks\n */\nvoid vTaskDelete( TaskHandle_t xTaskToDelete ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK CONTROL API\n *----------------------------------------------------------*/\n\n/**\n * Delay a task for a given number of ticks.\n *\n * The actual time that the task remains blocked depends on the tick rate.\n * The constant portTICK_PERIOD_MS can be used to calculate real time from\n * the tick rate - with the resolution of one tick period.\n *\n * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * vTaskDelay() specifies a time at which the task wishes to unblock relative to\n * the time at which vTaskDelay() is called.  For example, specifying a block\n * period of 100 ticks will cause the task to unblock 100 ticks after\n * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method\n * of controlling the frequency of a periodic task as the path taken through the\n * code, as well as other task and interrupt activity, will effect the frequency\n * at which vTaskDelay() gets called and therefore the time at which the task\n * next executes.  See vTaskDelayUntil() for an alternative API function designed\n * to facilitate fixed frequency execution.  It does this by specifying an\n * absolute time (rather than a relative time) at which the calling task should\n * unblock.\n *\n * @param xTicksToDelay The amount of time, in tick periods, that\n * the calling task should block.\n *\n * Example usage:\n * @code{c}\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  // Block for 500ms.\n *  const TickType_t xDelay = 500 / portTICK_PERIOD_MS;\n *\n * \t for( ;; )\n * \t {\n * \t\t // Simply toggle the LED every 500ms, blocking between each toggle.\n * \t\t vToggleLED();\n * \t\t vTaskDelay( xDelay );\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelay( const TickType_t xTicksToDelay ) PRIVILEGED_FUNCTION;\n\n/**\n * Delay a task until a specified time.\n *\n * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * This function can be used by periodic tasks to ensure a constant execution frequency.\n *\n * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will\n * cause a task to block for the specified number of ticks from the time vTaskDelay () is\n * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed\n * execution frequency as the time between a task starting to execute and that task\n * calling vTaskDelay () may not be fixed [the task may take a different path though the\n * code between calls, or may get interrupted or preempted a different number of times\n * each time it executes].\n *\n * Whereas vTaskDelay () specifies a wake time relative to the time at which the function\n * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to\n * unblock.\n *\n * The constant portTICK_PERIOD_MS can be used to calculate real time from the tick\n * rate - with the resolution of one tick period.\n *\n * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the\n * task was last unblocked.  The variable must be initialised with the current time\n * prior to its first use (see the example below).  Following this the variable is\n * automatically updated within vTaskDelayUntil ().\n *\n * @param xTimeIncrement The cycle time period.  The task will be unblocked at\n * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the\n * same xTimeIncrement parameter value will cause the task to execute with\n * a fixed interface period.\n *\n * Example usage:\n * @code{c}\n *  // Perform an action every 10 ticks.\n *  void vTaskFunction( void * pvParameters )\n *  {\n *  TickType_t xLastWakeTime;\n *  const TickType_t xFrequency = 10;\n *\n * \t // Initialise the xLastWakeTime variable with the current time.\n * \t xLastWakeTime = xTaskGetTickCount ();\n * \t for( ;; )\n * \t {\n * \t\t // Wait for the next cycle.\n * \t\t vTaskDelayUntil( \u0026xLastWakeTime, xFrequency );\n *\n * \t\t // Perform action here.\n * \t }\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the priority of any task.\n *\n * INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to obtain the priority of the created task.\n *   // It was created with tskIDLE_PRIORITY, but may have changed\n *   // it itself.\n *   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )\n *   {\n *       // The task has changed it's priority.\n *   }\n *\n *   // ...\n *\n *   // Is our priority higher than the created task?\n *   if( uxTaskPriorityGet( xHandle ) \u003c uxTaskPriorityGet( NULL ) )\n *   {\n *       // Our priority (obtained using NULL handle) is higher.\n *   }\n * }\n * @endcode\n * \\ingroup TaskCtrl\n */\nUBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * A version of uxTaskPriorityGet() that can be used from an ISR.\n *\n * @param xTask Handle of the task to be queried.  Passing a NULL\n * handle results in the priority of the calling task being returned.\n *\n * @return The priority of xTask.\n *\n */\nUBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Obtain the state of any task.\n *\n * States are encoded by the eTaskState enumerated type.\n *\n * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * @param xTask Handle of the task to be queried.\n *\n * @return The state of xTask at the time the function was called.  Note the\n * state of the task might change between the function being called, and the\n * functions return value being tested by the calling task.\n */\neTaskState eTaskGetState( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Set the priority of any task.\n *\n * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A context switch will occur before the function returns if the priority\n * being set is higher than the currently executing task.\n *\n * @param xTask Handle to the task for which the priority is being set.\n * Passing a NULL handle results in the priority of the calling task being set.\n *\n * @param uxNewPriority The priority to which the task will be set.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to raise the priority of the created task.\n *   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );\n *\n *   // ...\n *\n *   // Use a NULL handle to raise our priority to the same value.\n *   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) PRIVILEGED_FUNCTION;\n\n/**\n * Suspend a task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * When suspended, a task will never get any microcontroller processing time,\n * no matter what its priority.\n *\n * Calls to vTaskSuspend are not accumulative -\n * i.e. calling vTaskSuspend () twice on the same task still only requires one\n * call to vTaskResume () to ready the suspended task.\n *\n * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL\n * handle will cause the calling task to be suspended.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Suspend ourselves.\n *   vTaskSuspend( NULL );\n *\n *   // We cannot get here unless another task calls vTaskResume\n *   // with our handle as the parameter.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskSuspend( TaskHandle_t xTaskToSuspend ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes a suspended task.\n *\n * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.\n * See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * vTaskResume ().\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *  TaskHandle_t xHandle;\n *\n *   // Create a task, storing the handle.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, \u0026xHandle );\n *\n *   // ...\n *\n *   // Use the handle to suspend the created task.\n *   vTaskSuspend( xHandle );\n *\n *   // ...\n *\n *   // The created task will not run during this period, unless\n *   // another task calls vTaskResume( xHandle ).\n *\n *   //...\n *\n *\n *   // Resume the suspended task ourselves.\n *   vTaskResume( xHandle );\n *\n *   // The created task will once again get microcontroller processing\n *   // time in accordance with its priority within the system.\n *  }\n * @endcode\n * \\ingroup TaskCtrl\n */\nvoid vTaskResume( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/**\n * An implementation of vTaskResume() that can be called from within an ISR.\n *\n * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be\n * available.  See the configuration section for more information.\n *\n * A task that has been suspended by one or more calls to vTaskSuspend ()\n * will be made available for running again by a single call to\n * xTaskResumeFromISR ().\n *\n * xTaskResumeFromISR() should not be used to synchronise a task with an\n * interrupt if there is a chance that the interrupt could arrive prior to the\n * task being suspended - as this can lead to interrupts being missed. Use of a\n * semaphore as a synchronisation mechanism would avoid this eventuality.\n *\n * @param xTaskToResume Handle to the task being readied.\n *\n * @return pdTRUE if resuming the task should result in a context switch,\n * otherwise pdFALSE. This is used by the ISR to determine if a context switch\n * may be required following the ISR.\n *\n * \\ingroup TaskCtrl\n */\nBaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * SCHEDULER CONTROL\n *----------------------------------------------------------*/\n/** @cond */\n/**\n * Starts the real time kernel tick processing.\n *\n * After calling the kernel has control over which tasks are executed and when.\n *\n * See the demo application file main.c for an example of creating\n * tasks and starting the kernel.\n *\n * Example usage:\n * @code{c}\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will not get here unless a task calls vTaskEndScheduler ()\n *  }\n * @endcode\n *\n * \\ingroup SchedulerControl\n */\nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Stops the real time kernel tick.\n *\n * @note At the time of writing only the x86 real mode port, which runs on a PC\n * in place of DOS, implements this function.\n *\n * All created tasks will be automatically deleted and multitasking\n * (either preemptive or cooperative) will stop.\n * Execution then resumes from the point where vTaskStartScheduler ()\n * was called, as if vTaskStartScheduler () had just returned.\n *\n * See the demo application file main. c in the demo/PC directory for an\n * example that uses vTaskEndScheduler ().\n *\n * vTaskEndScheduler () requires an exit function to be defined within the\n * portable layer (see vPortEndScheduler () in port. c for the PC port).  This\n * performs hardware specific operations such as stopping the kernel tick.\n *\n * vTaskEndScheduler () will cause all of the resources allocated by the\n * kernel to be freed - but will not free resources allocated by application\n * tasks.\n *\n * Example usage:\n * @code{c}\n *  void vTaskCode( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // At some point we want to end the real time kernel processing\n *       // so call ...\n *       vTaskEndScheduler ();\n *   }\n *  }\n *\n *  void vAFunction( void )\n *  {\n *   // Create at least one task before starting the kernel.\n *   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );\n *\n *   // Start the real time kernel with preemption.\n *   vTaskStartScheduler ();\n *\n *   // Will only get here when the vTaskCode () task has called\n *   // vTaskEndScheduler ().  When we get here we are back to single task\n *   // execution.\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;\n\n/** @endcond */\n\n/**\n * Suspends the scheduler without disabling interrupts.\n *\n * Context switches will not occur while the scheduler is suspended.\n *\n * After calling vTaskSuspendAll () the calling task will continue to execute\n * without risk of being swapped out until a call to xTaskResumeAll () has been\n * made.\n *\n * API functions that have the potential to cause a context switch (for example,\n * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler\n * is suspended.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the kernel\n *       // tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.\n *       xTaskResumeAll ();\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Resumes scheduler activity after it was suspended by a call to\n * vTaskSuspendAll().\n *\n * xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks\n * that were previously suspended by a call to vTaskSuspend().\n *\n * @return If resuming the scheduler caused a context switch then pdTRUE is\n *\t\t  returned, otherwise pdFALSE is returned.\n *\n * Example usage:\n * @code{c}\n *  void vTask1( void * pvParameters )\n *  {\n *   for( ;; )\n *   {\n *       // Task code goes here.\n *\n *       // ...\n *\n *       // At some point the task wants to perform a long operation during\n *       // which it does not want to get swapped out.  It cannot use\n *       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the\n *       // operation may cause interrupts to be missed - including the\n *       // ticks.\n *\n *       // Prevent the real time kernel swapping out the task.\n *       vTaskSuspendAll ();\n *\n *       // Perform the operation here.  There is no need to use critical\n *       // sections as we have all the microcontroller processing time.\n *       // During this time interrupts will still operate and the real\n *       // time kernel tick count will be maintained.\n *\n *       // ...\n *\n *       // The operation is complete.  Restart the kernel.  We want to force\n *       // a context switch - but there is no point if resuming the scheduler\n *       // caused a context switch already.\n *       if( !xTaskResumeAll () )\n *       {\n *            taskYIELD ();\n *       }\n *   }\n *  }\n * @endcode\n * \\ingroup SchedulerControl\n */\nBaseType_t xTaskResumeAll( void ) PRIVILEGED_FUNCTION;\n\n/*-----------------------------------------------------------\n * TASK UTILITIES\n *----------------------------------------------------------*/\n\n/**\n * Get tick count\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get tick count from ISR\n *\n * @return The count of ticks since vTaskStartScheduler was called.\n *\n * This is a version of xTaskGetTickCount() that is safe to be called from an\n * ISR - provided that TickType_t is the natural word size of the\n * microcontroller being used or interrupt nesting is either not supported or\n * not being used.\n *\n * \\ingroup TaskUtils\n */\nTickType_t xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get current number of tasks\n *\n * @return The number of tasks that the real time kernel is currently managing.\n * This includes all ready, blocked and suspended tasks.  A task that\n * has been deleted but not yet freed by the idle task will also be\n * included in the count.\n *\n * \\ingroup TaskUtils\n */\nUBaseType_t uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;\n\n/**\n * Get task name\n *\n * @return The text (human readable) name of the task referenced by the handle\n * xTaskToQuery.  A task can query its own name by either passing in its own\n * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be\n * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.\n *\n * \\ingroup TaskUtils\n */\nchar *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Returns the high water mark of the stack associated with xTask.\n *\n * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * High water mark is the minimum free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task started.\n * The smaller the returned number the closer the task has come to overflowing its stack.\n *\n * @param xTask Handle of the task associated with the stack to be checked.\n * Set xTask to NULL to check the stack of the calling task.\n *\n * @return The smallest amount of free stack space there has been (in bytes\n * rather than words as found in vanilla FreeRTOS) since the task referenced by\n * xTask was created.\n */\nUBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/**\n * Returns the start of the stack associated with xTask.\n *\n * INCLUDE_pxTaskGetStackStart must be set to 1 in FreeRTOSConfig.h for\n * this function to be available.\n *\n * Returns the highest stack memory address on architectures where the stack grows down\n * from high memory, and the lowest memory address on architectures where the\n * stack grows up from low memory.\n *\n * @param xTask Handle of the task associated with the stack returned.\n * Set xTask to NULL to return the stack of the calling task.\n *\n * @return A pointer to the start of the stack.\n */\nuint8_t* pxTaskGetStackStart( TaskHandle_t xTask) PRIVILEGED_FUNCTION;\n\n/* When using trace macros it is sometimes necessary to include task.h before\nFreeRTOS.h.  When this is done TaskHookFunction_t will not yet have been defined,\nso the following two prototypes will cause a compilation error.  This can be\nfixed by simply guarding against the inclusion of these two prototypes unless\nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration\nconstant. */\n#ifdef configUSE_APPLICATION_TASK_TAG\n\t#if configUSE_APPLICATION_TASK_TAG == 1\n\t\t/**\n\t\t * Sets pxHookFunction to be the task hook function used by the task xTask.\n\t\t * @param xTask Handle of the task to set the hook function for\n\t\t *              Passing xTask as NULL has the effect of setting the calling\n\t\t *              tasks hook function.\n\t\t * @param pxHookFunction  Pointer to the hook function.\n\t\t */\n\t\tvoid vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction ) PRIVILEGED_FUNCTION;\n\n\t\t/**\n\t\t * Get the hook function assigned to given task.\n\t\t * @param xTask Handle of the task to get the hook function for\n\t\t *              Passing xTask as NULL has the effect of getting the calling\n\t\t *              tasks hook function.\n\t\t * @return The pxHookFunction value assigned to the task xTask.\n\t\t */\n\t\tTaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\t#endif /* configUSE_APPLICATION_TASK_TAG ==1 */\n#endif /* ifdef configUSE_APPLICATION_TASK_TAG */\n#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS \u003e 0 )\n\n\t/**\n\t * Set local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t * @param xIndex The index of the pointer to set, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @param pvValue  Pointer value to set.\n\t */\n\tvoid vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue ) PRIVILEGED_FUNCTION;\n\n\n\t/**\n\t * Get local storage pointer specific to the given task.\n\t *\n\t * Each task contains an array of pointers that is dimensioned by the\n\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t * The kernel does not use the pointers itself, so the application writer\n\t * can use the pointers for any purpose they wish.\n\t *\n\t * @param xTaskToQuery  Task to get thread local storage pointer for\n\t * @param xIndex The index of the pointer to get, from 0 to\n\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t * @return  Pointer value\n\t */\n\tvoid *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) PRIVILEGED_FUNCTION;\n\n\t#if ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS )\n\n\t\t/**\n\t\t * Prototype of local storage pointer deletion callback.\n\t\t */\n\t\ttypedef void (*TlsDeleteCallbackFunction_t)( int, void * );\n\n\t\t/**\n\t\t * Set local storage pointer and deletion callback.\n\t\t *\n\t\t * Each task contains an array of pointers that is dimensioned by the\n\t\t * configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.\n\t\t * The kernel does not use the pointers itself, so the application writer\n\t\t * can use the pointers for any purpose they wish.\n\t\t *\n\t\t * Local storage pointers set for a task can reference dynamically\n\t\t * allocated resources. This function is similar to\n\t\t * vTaskSetThreadLocalStoragePointer, but provides a way to release\n\t\t * these resources when the task gets deleted. For each pointer,\n\t\t * a callback function can be set. This function will be called\n\t\t * when task is deleted, with the local storage pointer index\n\t\t * and value as arguments.\n\t\t *\n\t\t * @param xTaskToSet  Task to set thread local storage pointer for\n\t\t * @param xIndex The index of the pointer to set, from 0 to\n\t\t *               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1.\n\t\t * @param pvValue  Pointer value to set.\n\t\t * @param pvDelCallback  Function to call to dispose of the local\n\t\t *                       storage pointer when the task is deleted.\n\t\t */\n\t\tvoid vTaskSetThreadLocalStoragePointerAndDelCallback( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue, TlsDeleteCallbackFunction_t pvDelCallback);\n\t#endif\n\n#endif\n\n/**\n * Calls the hook function associated with xTask. Passing xTask as NULL has\n * the effect of calling the Running tasks (the calling task) hook function.\n *\n * @param xTask  Handle of the task to call the hook for.\n * @param pvParameter  Parameter passed to the hook function for the task to interpret as it\n * wants.  The return value is the value returned by the task hook function\n * registered by the user.\n */\nBaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) PRIVILEGED_FUNCTION;\n\n/**\n * Get the handle of idle task for the current CPU.\n *\n * xTaskGetIdleTaskHandle() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @return The handle of the idle task.  It is not valid to call\n * xTaskGetIdleTaskHandle() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandle( void );\n\n/**\n * Get the handle of idle task for the given CPU.\n *\n * xTaskGetIdleTaskHandleForCPU() is only available if\n * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.\n *\n * @param cpuid The CPU to get the handle for\n *\n * @return Idle task handle of a given cpu. It is not valid to call\n * xTaskGetIdleTaskHandleForCPU() before the scheduler has been started.\n */\nTaskHandle_t xTaskGetIdleTaskHandleForCPU( UBaseType_t cpuid );\n\n/**\n * Get the state of tasks in the system.\n *\n * configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for\n * uxTaskGetSystemState() to be available.\n *\n * uxTaskGetSystemState() populates an TaskStatus_t structure for each task in\n * the system.  TaskStatus_t structures contain, among other things, members\n * for the task handle, task name, task priority, task state, and total amount\n * of run time consumed by the task.  See the TaskStatus_t structure\n * definition in this file for the full member list.\n *\n * @note  This function is intended for debugging use only as its use results in\n * the scheduler remaining suspended for an extended period.\n *\n * @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.\n * The array must contain at least one TaskStatus_t structure for each task\n * that is under the control of the RTOS.  The number of tasks under the control\n * of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.\n *\n * @param uxArraySize The size of the array pointed to by the pxTaskStatusArray\n * parameter.  The size is specified as the number of indexes in the array, or\n * the number of TaskStatus_t structures contained in the array, not by the\n * number of bytes in the array.\n *\n * @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in\n * FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the\n * total run time (as defined by the run time stats clock, see\n * http://www.freertos.org/rtos-run-time-stats.html) since the target booted.\n * pulTotalRunTime can be set to NULL to omit the total run time information.\n *\n * @return The number of TaskStatus_t structures that were populated by\n * uxTaskGetSystemState().  This should equal the number returned by the\n * uxTaskGetNumberOfTasks() API function, but will be zero if the value passed\n * in the uxArraySize parameter was too small.\n *\n * Example usage:\n * @code{c}\n * // This example demonstrates how a human readable table of run time stats\n * // information is generated from raw data provided by uxTaskGetSystemState().\n * // The human readable table is written to pcWriteBuffer\n * void vTaskGetRunTimeStats( char *pcWriteBuffer )\n * {\n * TaskStatus_t *pxTaskStatusArray;\n * volatile UBaseType_t uxArraySize, x;\n * uint32_t ulTotalRunTime, ulStatsAsPercentage;\n *\n *  // Make sure the write buffer does not contain a string.\n *  *pcWriteBuffer = 0x00;\n *\n *  // Take a snapshot of the number of tasks in case it changes while this\n *  // function is executing.\n *  uxArraySize = uxTaskGetNumberOfTasks();\n *\n *  // Allocate a TaskStatus_t structure for each task.  An array could be\n *  // allocated statically at compile time.\n *  pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );\n *\n *  if( pxTaskStatusArray != NULL )\n *  {\n *      // Generate raw status information about each task.\n *      uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, \u0026ulTotalRunTime );\n *\n *      // For percentage calculations.\n *      ulTotalRunTime /= 100UL;\n *\n *      // Avoid divide by zero errors.\n *      if( ulTotalRunTime \u003e 0 )\n *      {\n *          // For each populated position in the pxTaskStatusArray array,\n *          // format the raw data as human readable ASCII data\n *          for( x = 0; x \u003c uxArraySize; x++ )\n *          {\n *              // What percentage of the total run time has the task used?\n *              // This will always be rounded down to the nearest integer.\n *              // ulTotalRunTimeDiv100 has already been divided by 100.\n *              ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;\n *\n *              if( ulStatsAsPercentage \u003e 0UL )\n *              {\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );\n *              }\n *              else\n *              {\n *                  // If the percentage is zero here then the task has\n *                  // consumed less than 1% of the total run time.\n *                  sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t\u003c1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );\n *              }\n *\n *              pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );\n *          }\n *      }\n *\n *      // The array is no longer needed, free the memory it consumes.\n *      vPortFree( pxTaskStatusArray );\n *  }\n * }\n * @endcode\n */\nUBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime );\n\n/**\n * List all the current tasks.\n *\n * configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must\n * both be defined as 1 for this function to be available.  See the\n * configuration section of the FreeRTOS.org website for more information.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Lists all the current tasks, along with their current state and stack\n * usage high water mark.\n *\n * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or\n * suspended ('S').\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskList() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays task\n * names, states and stack usage.\n *\n * vTaskList() has a dependency on the sprintf() C library function that might\n * bloat the code size, use a lot of stack, and provide different results on\n * different platforms.  An alternative, tiny, third party, and limited\n * functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState()\n * directly to get access to raw stats data, rather than indirectly through a\n * call to vTaskList().\n *\n * @param pcWriteBuffer A buffer into which the above mentioned details\n * will be written, in ASCII form.  This buffer is assumed to be large\n * enough to contain the generated report.  Approximately 40 bytes per\n * task should be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskList( char * pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Get the state of running tasks as a string\n *\n * configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS\n * must both be defined as 1 for this function to be available.  The application\n * must also then provide definitions for\n * portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()\n * to configure a peripheral timer/counter and return the timers current count\n * value respectively.  The counter should be at least 10 times the frequency of\n * the tick count.\n *\n * @note This function will disable interrupts for its duration.  It is\n * not intended for normal application runtime use but as a debug aid.\n *\n * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total\n * accumulated execution time being stored for each task.  The resolution\n * of the accumulated time value depends on the frequency of the timer\n * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.\n * Calling vTaskGetRunTimeStats() writes the total execution time of each\n * task into a buffer, both as an absolute count value and as a percentage\n * of the total system execution time.\n *\n * @note This function is provided for convenience only, and is used by many of the\n * demo applications.  Do not consider it to be part of the scheduler.\n *\n * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the\n * uxTaskGetSystemState() output into a human readable table that displays the\n * amount of time each task has spent in the Running state in both absolute and\n * percentage terms.\n *\n * vTaskGetRunTimeStats() has a dependency on the sprintf() C library function\n * that might bloat the code size, use a lot of stack, and provide different\n * results on different platforms.  An alternative, tiny, third party, and\n * limited functionality implementation of sprintf() is provided in many of the\n * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note\n * printf-stdarg.c does not provide a full snprintf() implementation!).\n *\n * It is recommended that production systems call uxTaskGetSystemState() directly\n * to get access to raw stats data, rather than indirectly through a call to\n * vTaskGetRunTimeStats().\n *\n * @param pcWriteBuffer A buffer into which the execution times will be\n * written, in ASCII form.  This buffer is assumed to be large enough to\n * contain the generated report.  Approximately 40 bytes per task should\n * be sufficient.\n *\n * \\ingroup TaskUtils\n */\nvoid vTaskGetRunTimeStats( char *pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */\n\n/**\n * Send task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );\n\n/**\n * Send task notification from an ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotify() that can be used from an interrupt service routine\n * (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param ulValue Data that can be sent with the notification.  How the data is\n * used depends on the value of the eAction parameter.\n *\n * @param eAction Specifies how the notification updates the task's notification\n * value, if at all.  Valid values for eAction are as follows:\n *\t- eSetBits:\n *\t  The task's notification value is bitwise ORed with ulValue.  xTaskNofify()\n * \t  always returns pdPASS in this case.\n *\n *\t- eIncrement:\n *\t  The task's notification value is incremented.  ulValue is not used and\n *\t  xTaskNotify() always returns pdPASS in this case.\n *\n *\t- eSetValueWithOverwrite:\n *\t  The task's notification value is set to the value of ulValue, even if the\n *\t  task being notified had not yet processed the previous notification (the\n *\t  task already had a notification pending).  xTaskNotify() always returns\n *\t  pdPASS in this case.\n *\n *\t- eSetValueWithoutOverwrite:\n *\t  If the task being notified did not already have a notification pending then\n *\t  the task's notification value is set to ulValue and xTaskNotify() will\n *\t  return pdPASS.  If the task being notified already had a notification\n *\t  pending then no action is performed and pdFAIL is returned.\n *\n *\t- eNoAction:\n *\t  The task receives a notification without its notification value being\n *\t  updated.  ulValue is not used and xTaskNotify() always returns pdPASS in\n *\t  this case.\n *\n * @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should\n * be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * @return Dependent on the value of eAction.  See the description of the\n * eAction parameter.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Wait for task notification\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * A notification sent to a task will remain pending until it is cleared by the\n * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was\n * already in the Blocked state to wait for a notification when the notification\n * arrives then the task will automatically be removed from the Blocked state\n * (unblocked) and the notification cleared.\n *\n * A task can use xTaskNotifyWait() to [optionally] block to wait for a\n * notification to be pending, or ulTaskNotifyTake() to [optionally] block\n * to wait for its notification value to have a non-zero value.  The task does\n * not consume any CPU time while it is in the Blocked state.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value\n * will be cleared in the calling task's notification value before the task\n * checks to see if any notifications are pending, and optionally blocks if no\n * notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if\n * limits.h is included) or 0xffffffffUL (if limits.h is not included) will have\n * the effect of resetting the task's notification value to 0.  Setting\n * ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.\n *\n * @param ulBitsToClearOnExit If a notification is pending or received before\n * the calling task exits the xTaskNotifyWait() function then the task's\n * notification value (see the xTaskNotify() API function) is passed out using\n * the pulNotificationValue parameter.  Then any bits that are set in\n * ulBitsToClearOnExit will be cleared in the task's notification value (note\n * *pulNotificationValue is set before any bits are cleared).  Setting\n * ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL\n * (if limits.h is not included) will have the effect of resetting the task's\n * notification value to 0 before the function exits.  Setting\n * ulBitsToClearOnExit to 0 will leave the task's notification value unchanged\n * when the function exits (in which case the value passed out in\n * pulNotificationValue will match the task's notification value).\n *\n * @param pulNotificationValue Used to pass the task's notification value out\n * of the function.  Note the value passed out will not be effected by the\n * clearing of any bits caused by ulBitsToClearOnExit being non-zero.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for a notification to be received, should a notification\n * not already be pending when xTaskNotifyWait() was called.  The task\n * will not consume any processing time while it is in the Blocked state.  This\n * is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be\n * used to convert a time specified in milliseconds to a time specified in\n * ticks.\n *\n * @return If a notification was received (including notifications that were\n * already pending when xTaskNotifyWait was called) then pdPASS is\n * returned.  Otherwise pdFAIL is returned.\n *\n * \\ingroup TaskNotifications\n */\nBaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );\n\n/**\n * Simplified macro for sending task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * xTaskNotifyGive() is a helper macro intended for use when task notifications\n * are used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given using the xSemaphoreGive() API function,\n * the equivalent action that instead uses a task notification is\n * xTaskNotifyGive().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @return xTaskNotifyGive() is a macro that calls xTaskNotify() with the\n * eAction parameter set to eIncrement - so pdPASS is always returned.\n *\n * \\ingroup TaskNotifications\n */\n#define xTaskNotifyGive( xTaskToNotify ) xTaskNotify( ( xTaskToNotify ), 0, eIncrement )\n\n/**\n * Simplified macro for sending task notification from ISR.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro\n * to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * A version of xTaskNotifyGive() that can be called from an interrupt service\n * routine (ISR).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * vTaskNotifyGiveFromISR() is intended for use when task notifications are\n * used as light weight and faster binary or counting semaphore equivalents.\n * Actual FreeRTOS semaphores are given from an ISR using the\n * xSemaphoreGiveFromISR() API function, the equivalent action that instead uses\n * a task notification is vTaskNotifyGiveFromISR().\n *\n * When task notifications are being used as a binary or counting semaphore\n * equivalent then the task being notified should wait for the notification\n * using the ulTaskNotificationTake() API function rather than the\n * xTaskNotifyWait() API function.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.\n *\n * @param xTaskToNotify The handle of the task being notified.  The handle to a\n * task can be returned from the xTaskCreate() API function used to create the\n * task, and the handle of the currently running task can be obtained by calling\n * xTaskGetCurrentTaskHandle().\n *\n * @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set\n * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the\n * task to which the notification was sent to leave the Blocked state, and the\n * unblocked task has a priority higher than the currently running task.  If\n * vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch\n * should be requested before the interrupt is exited.  How a context switch is\n * requested from an ISR is dependent on the port - see the documentation page\n * for the port in use.\n *\n * \\ingroup TaskNotifications\n */\nvoid vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken );\n\n/**\n * Simplified macro for receiving task notification.\n *\n * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this\n * function to be available.\n *\n * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private\n * \"notification value\", which is a 32-bit unsigned integer (uint32_t).\n *\n * Events can be sent to a task using an intermediary object.  Examples of such\n * objects are queues, semaphores, mutexes and event groups.  Task notifications\n * are a method of sending an event directly to a task without the need for such\n * an intermediary object.\n *\n * A notification sent to a task can optionally perform an action, such as\n * update, overwrite or increment the task's notification value.  In that way\n * task notifications can be used to send data to a task, or be used as light\n * weight and fast binary or counting semaphores.\n *\n * ulTaskNotifyTake() is intended for use when a task notification is used as a\n * faster and lighter weight binary or counting semaphore alternative.  Actual\n * FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the\n * equivalent action that instead uses a task notification is\n * ulTaskNotifyTake().\n *\n * When a task is using its notification value as a binary or counting semaphore\n * other tasks should send notifications to it using the xTaskNotifyGive()\n * macro, or xTaskNotify() function with the eAction parameter set to\n * eIncrement.\n *\n * ulTaskNotifyTake() can either clear the task's notification value to\n * zero on exit, in which case the notification value acts like a binary\n * semaphore, or decrement the task's notification value on exit, in which case\n * the notification value acts like a counting semaphore.\n *\n * A task can use ulTaskNotifyTake() to [optionally] block to wait for a\n * the task's notification value to be non-zero.  The task does not consume any\n * CPU time while it is in the Blocked state.\n *\n * Where as xTaskNotifyWait() will return when a notification is pending,\n * ulTaskNotifyTake() will return when the task's notification value is\n * not zero.\n *\n * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.\n *\n * @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's\n * notification value is decremented when the function exits.  In this way the\n * notification value acts like a counting semaphore.  If xClearCountOnExit is\n * not pdFALSE then the task's notification value is cleared to zero when the\n * function exits.  In this way the notification value acts like a binary\n * semaphore.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait in\n * the Blocked state for the task's notification value to be greater than zero,\n * should the count not already be greater than zero when\n * ulTaskNotifyTake() was called.  The task will not consume any processing\n * time while it is in the Blocked state.  This is specified in kernel ticks,\n * the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time\n * specified in milliseconds to a time specified in ticks.\n *\n * @return The task's notification count before it is either cleared to zero or\n * decremented (see the xClearCountOnExit parameter).\n *\n * \\ingroup TaskNotifications\n */\nuint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );\n\n/*-----------------------------------------------------------\n * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES\n *----------------------------------------------------------*/\n/** @cond */\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Called from the real time kernel tick (either preemptive or cooperative),\n * this increments the tick count and checks if any tasks that are blocked\n * for a finite period required removing from a blocked list and placing on\n * a ready list.  If a non-zero value is returned then a context switch is\n * required because either:\n *   + A task was removed from a blocked list because its timeout had expired,\n *     or\n *   + Time slicing is in use and there is a task of equal priority to the\n *     currently running task.\n */\nBaseType_t xTaskIncrementTick( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes the calling task from the ready list and places it both\n * on the list of tasks waiting for a particular event, and the\n * list of delayed tasks.  The task will be removed from both lists\n * and replaced on the ready list should either the event occur (and\n * there be no higher priority tasks waiting on the same event) or\n * the delay period expires.\n *\n * The 'unordered' version replaces the event list item value with the\n * xItemValue value, and inserts the list item at the end of the list.\n *\n * The 'ordered' version uses the existing event list item value (which is the\n * owning tasks priority) to insert the list item into the event list is task\n * priority order.\n *\n * @param pxEventList The list containing tasks that are blocked waiting\n * for the event to occur.\n *\n * @param xItemValue The item value to use for the event list item when the\n * event list is not ordered by task priority.\n *\n * @param xTicksToWait The maximum amount of time that the task should wait\n * for the event to occur.  This is specified in kernel ticks,the constant\n * portTICK_PERIOD_MS can be used to convert kernel ticks into a real time\n * period.\n */\nvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\nvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * This function performs nearly the same function as vTaskPlaceOnEventList().\n * The difference being that this function does not permit tasks to block\n * indefinitely, whereas vTaskPlaceOnEventList() does.\n *\n */\nvoid vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN\n * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.\n *\n * Removes a task from both the specified event list and the list of blocked\n * tasks, and places it on a ready queue.\n *\n * xTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called\n * if either an event occurs to unblock a task, or the block timeout period\n * expires.\n *\n * xTaskRemoveFromEventList() is used when the event list is in task priority\n * order.  It removes the list item from the head of the event list as that will\n * have the highest priority owning task of all the tasks on the event list.\n * xTaskRemoveFromUnorderedEventList() is used when the event list is not\n * ordered and the event list items hold something other than the owning tasks\n * priority.  In this case the event list item value is updated to the value\n * passed in the xItemValue parameter.\n *\n * @return pdTRUE if the task being removed has a higher priority than the task\n * making the call, otherwise pdFALSE.\n */\nBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) PRIVILEGED_FUNCTION;\nBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) PRIVILEGED_FUNCTION;\n\n/*\n * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY\n * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS\n * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.\n *\n * Sets the pointer to the current TCB to the TCB of the highest priority task\n * that is ready to run.\n */\nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;\n\n/*\n * THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE.  THEY ARE USED BY\n * THE EVENT BITS MODULE.\n */\nTickType_t uxTaskResetEventItemValue( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Return the handle of the calling task.\n */\nTaskHandle_t xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;\n\n\n\n/*\n * Return the handle of the task running on a certain CPU. Because of\n * the nature of SMP processing, there is no guarantee that this\n * value will still be valid on return and should only be used for\n * debugging purposes.\n */\nTaskHandle_t xTaskGetCurrentTaskHandleForCPU( BaseType_t cpuid );\n\n\n/*\n * Capture the current time status for future reference.\n */\nvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) PRIVILEGED_FUNCTION;\n\n/*\n * Compare the time status now with that previously captured to see if the\n * timeout has expired.\n */\nBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) PRIVILEGED_FUNCTION;\n\n/*\n * Shortcut used by the queue implementation to prevent unnecessary call to\n * taskYIELD();\n */\nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Returns the scheduler state as taskSCHEDULER_RUNNING,\n * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.\n */\nBaseType_t xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;\n\n/*\n * Raises the priority of the mutex holder to that of the calling task should\n * the mutex holder have a priority less than the calling task.\n */\nvoid vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the priority of a task back to its proper priority in the case that it\n * inherited a higher priority while it was holding a semaphore.\n */\nBaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;\n\n/*\n * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.\n */\nUBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n\n/*\n * Get the current core affinity of a task\n */\nBaseType_t xTaskGetAffinity( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;\n\n/*\n * Set the uxTaskNumber of the task referenced by the xTask parameter to\n * uxHandle.\n */\nvoid vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) PRIVILEGED_FUNCTION;\n\n/*\n * Only available when configUSE_TICKLESS_IDLE is set to 1.\n * If tickless mode is being used, or a low power mode is implemented, then\n * the tick interrupt will not execute during idle periods.  When this is the\n * case, the tick count value maintained by the scheduler needs to be kept up\n * to date with the actual execution time by being skipped forward by a time\n * equal to the idle period.\n */\nvoid vTaskStepTick( const TickType_t xTicksToJump ) PRIVILEGED_FUNCTION;\n\n/*\n * Only avilable when configUSE_TICKLESS_IDLE is set to 1.\n * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port\n * specific sleep function to determine if it is ok to proceed with the sleep,\n * and if it is ok to proceed, if it is ok to sleep indefinitely.\n *\n * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only\n * called with the scheduler suspended, not from within a critical section.  It\n * is therefore possible for an interrupt to request a context switch between\n * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being\n * entered.  eTaskConfirmSleepModeStatus() should be called from a short\n * critical section between the timer being stopped and the sleep mode being\n * entered to ensure it is ok to proceed into the sleep mode.\n */\neSleepModeStatus eTaskConfirmSleepModeStatus( void ) PRIVILEGED_FUNCTION;\n\n/*\n * For internal use only.  Increment the mutex held count when a mutex is\n * taken and return the handle of the task that has taken the mutex.\n */\nvoid *pvTaskIncrementMutexHeldCount( void );\n\n/*\n * This function fills array with TaskSnapshot_t structures for every task in the system.\n * Used by core dump facility to get snapshots of all tasks in the system.\n * Only available when configENABLE_TASK_SNAPSHOT is set to 1.\n * @param pxTaskSnapshotArray Pointer to array of TaskSnapshot_t structures to store tasks snapshot data.\n * @param uxArraySize Size of tasks snapshots array.\n * @param pxTcbSz Pointer to store size of TCB.\n * @return Number of elements stored in array.\n */\nUBaseType_t uxTaskGetSnapshotAll( TaskSnapshot_t * const pxTaskSnapshotArray, const UBaseType_t uxArraySize, UBaseType_t * const pxTcbSz );\n\n/** @endcond */\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* INC_TASK_H */\n\n\n\n"}},"jsonrpc":"2.0"}Content-Length: 195

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":149,"character":14}},"id":89,"jsonrpc":"2.0"}
<<<
Content-Length: 1891

{"id":89,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `vTaskDelay`  \n\n---\n→ `void`  \nParameters:  \n- `const TickType_t xTicksToDelay`\n\nDelay a task for a given number of ticks.  \nThe actual time that the task remains blocked depends on the tick rate.  \nThe constant portTICK_PERIOD_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.  \nINCLUDE_vTaskDelay must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \nvTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method of controlling the frequency of a periodic task as the path taken through the code, as well as other task and interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the calling task should unblock.  \n@param xTicksToDelay The amount of time, in tick periods, that the calling task should block.  \nExample usage:  \n@code{c} void vTaskFunction( void * pvParameters ) { // Block for 500ms.  \nconst TickType_t xDelay = 500 / portTICK_PERIOD_MS;  \nfor( ;; ) { // Simply toggle the LED every 500ms, blocking between each toggle.  \nvToggleLED();  \nvTaskDelay( xDelay );  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl  \n\n---\n```cpp\nvoid vTaskDelay(const TickType_t xTicksToDelay)\n```"},"range":{"end":{"character":14,"line":149},"start":{"character":4,"line":149}}}}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":149,"character":14}},"id":90,"jsonrpc":"2.0"}
<<<
Content-Length: 1891

{"id":90,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `vTaskDelay`  \n\n---\n→ `void`  \nParameters:  \n- `const TickType_t xTicksToDelay`\n\nDelay a task for a given number of ticks.  \nThe actual time that the task remains blocked depends on the tick rate.  \nThe constant portTICK_PERIOD_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.  \nINCLUDE_vTaskDelay must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \nvTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method of controlling the frequency of a periodic task as the path taken through the code, as well as other task and interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the calling task should unblock.  \n@param xTicksToDelay The amount of time, in tick periods, that the calling task should block.  \nExample usage:  \n@code{c} void vTaskFunction( void * pvParameters ) { // Block for 500ms.  \nconst TickType_t xDelay = 500 / portTICK_PERIOD_MS;  \nfor( ;; ) { // Simply toggle the LED every 500ms, blocking between each toggle.  \nvToggleLED();  \nvTaskDelay( xDelay );  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl  \n\n---\n```cpp\nvoid vTaskDelay(const TickType_t xTicksToDelay)\n```"},"range":{"end":{"character":14,"line":149},"start":{"character":4,"line":149}}}}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":139,"character":12}},"id":91,"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"id":91,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `digitalWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t val`\n\n---\n```cpp\nvoid digitalWrite(uint8_t pin, uint8_t val)\n```"},"range":{"end":{"character":16,"line":139},"start":{"character":4,"line":139}}}}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":139,"character":12}},"id":92,"jsonrpc":"2.0"}
<<<
Content-Length: 396

{"id":92,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":121},"start":{"character":4,"line":121}}},{"kind":1,"range":{"end":{"character":16,"line":123},"start":{"character":4,"line":123}}},{"kind":1,"range":{"end":{"character":16,"line":139},"start":{"character":4,"line":139}}},{"kind":1,"range":{"end":{"character":16,"line":141},"start":{"character":4,"line":141}}}]}
>>>
Content-Length: 205

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":139,"character":12}},"id":93,"jsonrpc":"2.0"}
<<<
Content-Length: 221

{"id":93,"jsonrpc":"2.0","result":[{"range":{"end":{"character":24,"line":298},"start":{"character":12,"line":298}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/esp32-hal-gpio.c"}]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":139,"character":12},"end":{"line":139,"character":12}},"context":{"diagnostics":[]}},"id":94,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":94,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 10763

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/esp32-hal-gpio.c","languageId":"c","version":1,"text":"// Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include \"esp32-hal-gpio.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"rom/ets_sys.h\"\n#include \"esp_attr.h\"\n#include \"esp_intr.h\"\n#include \"rom/gpio.h\"\n#include \"soc/gpio_reg.h\"\n#include \"soc/io_mux_reg.h\"\n#include \"soc/gpio_struct.h\"\n#include \"soc/rtc_io_reg.h\"\n\nconst int8_t esp32_adc2gpio[20] = {36, 37, 38, 39, 32, 33, 34, 35, -1, -1, 4, 0, 2, 15, 13, 12, 14, 27, 25, 26};\n\nconst DRAM_ATTR esp32_gpioMux_t esp32_gpioMux[GPIO_PIN_COUNT]={\n    {0x44, 11, 11, 1},\n    {0x88, -1, -1, -1},\n    {0x40, 12, 12, 2},\n    {0x84, -1, -1, -1},\n    {0x48, 10, 10, 0},\n    {0x6c, -1, -1, -1},\n    {0x60, -1, -1, -1},\n    {0x64, -1, -1, -1},\n    {0x68, -1, -1, -1},\n    {0x54, -1, -1, -1},\n    {0x58, -1, -1, -1},\n    {0x5c, -1, -1, -1},\n    {0x34, 15, 15, 5},\n    {0x38, 14, 14, 4},\n    {0x30, 16, 16, 6},\n    {0x3c, 13, 13, 3},\n    {0x4c, -1, -1, -1},\n    {0x50, -1, -1, -1},\n    {0x70, -1, -1, -1},\n    {0x74, -1, -1, -1},\n    {0x78, -1, -1, -1},\n    {0x7c, -1, -1, -1},\n    {0x80, -1, -1, -1},\n    {0x8c, -1, -1, -1},\n    {0, -1, -1, -1},\n    {0x24, 6, 18, -1}, //DAC1\n    {0x28, 7, 19, -1}, //DAC2\n    {0x2c, 17, 17, 7},\n    {0, -1, -1, -1},\n    {0, -1, -1, -1},\n    {0, -1, -1, -1},\n    {0, -1, -1, -1},\n    {0x1c, 9, 4, 8},\n    {0x20, 8, 5, 9},\n    {0x14, 4, 6, -1},\n    {0x18, 5, 7, -1},\n    {0x04, 0, 0, -1},\n    {0x08, 1, 1, -1},\n    {0x0c, 2, 2, -1},\n    {0x10, 3, 3, -1}\n};\n\ntypedef void (*voidFuncPtr)(void);\ntypedef void (*voidFuncPtrArg)(void*);\ntypedef struct {\n    voidFuncPtr fn;\n    void* arg;\n    bool functional;\n} InterruptHandle_t;\nstatic InterruptHandle_t __pinInterruptHandlers[GPIO_PIN_COUNT] = {0,};\n\n#include \"driver/rtc_io.h\"\n\nextern void IRAM_ATTR __pinMode(uint8_t pin, uint8_t mode)\n{\n\n    if(!digitalPinIsValid(pin)) {\n        return;\n    }\n\n    uint32_t rtc_reg = rtc_gpio_desc[pin].reg;\n    if(mode == ANALOG) {\n        if(!rtc_reg) {\n            return;//not rtc pin\n        }\n        //lock rtc\n        uint32_t reg_val = ESP_REG(rtc_reg);\n        if(reg_val \u0026 rtc_gpio_desc[pin].mux){\n            return;//already in adc mode\n        }\n        reg_val \u0026= ~(\n                (RTC_IO_TOUCH_PAD1_FUN_SEL_V \u003c\u003c rtc_gpio_desc[pin].func)\n                |rtc_gpio_desc[pin].ie\n                |rtc_gpio_desc[pin].pullup\n                |rtc_gpio_desc[pin].pulldown);\n        ESP_REG(RTC_GPIO_ENABLE_W1TC_REG) = (1 \u003c\u003c (rtc_gpio_desc[pin].rtc_num + RTC_GPIO_ENABLE_W1TC_S));\n        ESP_REG(rtc_reg) = reg_val | rtc_gpio_desc[pin].mux;\n        //unlock rtc\n        ESP_REG(DR_REG_IO_MUX_BASE + esp32_gpioMux[pin].reg) = ((uint32_t)2 \u003c\u003c MCU_SEL_S) | ((uint32_t)2 \u003c\u003c FUN_DRV_S) | FUN_IE;\n        return;\n    }\n\n    //RTC pins PULL settings\n    if(rtc_reg) {\n        //lock rtc\n        ESP_REG(rtc_reg) = ESP_REG(rtc_reg) \u0026 ~(rtc_gpio_desc[pin].mux);\n        if(mode \u0026 PULLUP) {\n            ESP_REG(rtc_reg) = (ESP_REG(rtc_reg) | rtc_gpio_desc[pin].pullup) \u0026 ~(rtc_gpio_desc[pin].pulldown);\n        } else if(mode \u0026 PULLDOWN) {\n            ESP_REG(rtc_reg) = (ESP_REG(rtc_reg) | rtc_gpio_desc[pin].pulldown) \u0026 ~(rtc_gpio_desc[pin].pullup);\n        } else {\n            ESP_REG(rtc_reg) = ESP_REG(rtc_reg) \u0026 ~(rtc_gpio_desc[pin].pullup | rtc_gpio_desc[pin].pulldown);\n        }\n        //unlock rtc\n    }\n\n    uint32_t pinFunction = 0, pinControl = 0;\n\n    //lock gpio\n    if(mode \u0026 INPUT) {\n        if(pin \u003c 32) {\n            GPIO.enable_w1tc = ((uint32_t)1 \u003c\u003c pin);\n        } else {\n            GPIO.enable1_w1tc.val = ((uint32_t)1 \u003c\u003c (pin - 32));\n        }\n    } else if(mode \u0026 OUTPUT) {\n        if(pin \u003e 33){\n            //unlock gpio\n            return;//pins above 33 can be only inputs\n        } else if(pin \u003c 32) {\n            GPIO.enable_w1ts = ((uint32_t)1 \u003c\u003c pin);\n        } else {\n            GPIO.enable1_w1ts.val = ((uint32_t)1 \u003c\u003c (pin - 32));\n        }\n    }\n\n    if(mode \u0026 PULLUP) {\n        pinFunction |= FUN_PU;\n    } else if(mode \u0026 PULLDOWN) {\n        pinFunction |= FUN_PD;\n    }\n\n    pinFunction |= ((uint32_t)2 \u003c\u003c FUN_DRV_S);//what are the drivers?\n    pinFunction |= FUN_IE;//input enable but required for output as well?\n\n    if(mode \u0026 (INPUT | OUTPUT)) {\n        pinFunction |= ((uint32_t)2 \u003c\u003c MCU_SEL_S);\n    } else if(mode == SPECIAL) {\n        pinFunction |= ((uint32_t)(((pin)==1||(pin)==3)?0:1) \u003c\u003c MCU_SEL_S);\n    } else {\n        pinFunction |= ((uint32_t)(mode \u003e\u003e 5) \u003c\u003c MCU_SEL_S);\n    }\n\n    ESP_REG(DR_REG_IO_MUX_BASE + esp32_gpioMux[pin].reg) = pinFunction;\n\n    if(mode \u0026 OPEN_DRAIN) {\n        pinControl = (1 \u003c\u003c GPIO_PIN0_PAD_DRIVER_S);\n    }\n\n    GPIO.pin[pin].val = pinControl;\n    //unlock gpio\n}\n\nextern void IRAM_ATTR __digitalWrite(uint8_t pin, uint8_t val)\n{\n    if(val) {\n        if(pin \u003c 32) {\n            GPIO.out_w1ts = ((uint32_t)1 \u003c\u003c pin);\n        } else if(pin \u003c 34) {\n            GPIO.out1_w1ts.val = ((uint32_t)1 \u003c\u003c (pin - 32));\n        }\n    } else {\n        if(pin \u003c 32) {\n            GPIO.out_w1tc = ((uint32_t)1 \u003c\u003c pin);\n        } else if(pin \u003c 34) {\n            GPIO.out1_w1tc.val = ((uint32_t)1 \u003c\u003c (pin - 32));\n        }\n    }\n}\n\nextern int IRAM_ATTR __digitalRead(uint8_t pin)\n{\n    if(pin \u003c 32) {\n        return (GPIO.in \u003e\u003e pin) \u0026 0x1;\n    } else if(pin \u003c 40) {\n        return (GPIO.in1.val \u003e\u003e (pin - 32)) \u0026 0x1;\n    }\n    return 0;\n}\n\nstatic intr_handle_t gpio_intr_handle = NULL;\n\nstatic void IRAM_ATTR __onPinInterrupt()\n{\n    uint32_t gpio_intr_status_l=0;\n    uint32_t gpio_intr_status_h=0;\n\n    gpio_intr_status_l = GPIO.status;\n    gpio_intr_status_h = GPIO.status1.val;\n    GPIO.status_w1tc = gpio_intr_status_l;//Clear intr for gpio0-gpio31\n    GPIO.status1_w1tc.val = gpio_intr_status_h;//Clear intr for gpio32-39\n\n    uint8_t pin=0;\n    if(gpio_intr_status_l) {\n        do {\n            if(gpio_intr_status_l \u0026 ((uint32_t)1 \u003c\u003c pin)) {\n                if(__pinInterruptHandlers[pin].fn) {\n                    if(__pinInterruptHandlers[pin].arg){\n                        ((voidFuncPtrArg)__pinInterruptHandlers[pin].fn)(__pinInterruptHandlers[pin].arg);\n                    } else {\n                        __pinInterruptHandlers[pin].fn();\n                    }\n                }\n            }\n        } while(++pin\u003c32);\n    }\n    if(gpio_intr_status_h) {\n        pin=32;\n        do {\n            if(gpio_intr_status_h \u0026 ((uint32_t)1 \u003c\u003c (pin - 32))) {\n                if(__pinInterruptHandlers[pin].fn) {\n                    if(__pinInterruptHandlers[pin].arg){\n                        ((voidFuncPtrArg)__pinInterruptHandlers[pin].fn)(__pinInterruptHandlers[pin].arg);\n                    } else {\n                        __pinInterruptHandlers[pin].fn();\n                    }\n                }\n            }\n        } while(++pin\u003cGPIO_PIN_COUNT);\n    }\n}\n\nextern void cleanupFunctional(void* arg);\n\nextern void __attachInterruptFunctionalArg(uint8_t pin, voidFuncPtrArg userFunc, void * arg, int intr_type, bool functional)\n{\n    static bool interrupt_initialized = false;\n\n    if(!interrupt_initialized) {\n        interrupt_initialized = true;\n        esp_intr_alloc(ETS_GPIO_INTR_SOURCE, (int)ESP_INTR_FLAG_IRAM, __onPinInterrupt, NULL, \u0026gpio_intr_handle);\n    }\n\n    // if new attach without detach remove old info\n    if (__pinInterruptHandlers[pin].functional \u0026\u0026 __pinInterruptHandlers[pin].arg)\n    {\n    \tcleanupFunctional(__pinInterruptHandlers[pin].arg);\n    }\n    __pinInterruptHandlers[pin].fn = (voidFuncPtr)userFunc;\n    __pinInterruptHandlers[pin].arg = arg;\n    __pinInterruptHandlers[pin].functional = functional;\n\n    esp_intr_disable(gpio_intr_handle);\n    if(esp_intr_get_cpu(gpio_intr_handle)) { //APP_CPU\n        GPIO.pin[pin].int_ena = 1;\n    } else { //PRO_CPU\n        GPIO.pin[pin].int_ena = 4;\n    }\n    GPIO.pin[pin].int_type = intr_type;\n    esp_intr_enable(gpio_intr_handle);\n}\n\nextern void __attachInterruptArg(uint8_t pin, voidFuncPtrArg userFunc, void * arg, int intr_type)\n{\n\t__attachInterruptFunctionalArg(pin, userFunc, arg, intr_type, false);\n}\n\nextern void __attachInterrupt(uint8_t pin, voidFuncPtr userFunc, int intr_type) {\n    __attachInterruptFunctionalArg(pin, (voidFuncPtrArg)userFunc, NULL, intr_type, false);\n}\n\nextern void __detachInterrupt(uint8_t pin)\n{\n    esp_intr_disable(gpio_intr_handle);\n    if (__pinInterruptHandlers[pin].functional \u0026\u0026 __pinInterruptHandlers[pin].arg)\n    {\n    \tcleanupFunctional(__pinInterruptHandlers[pin].arg);\n    }\n    __pinInterruptHandlers[pin].fn = NULL;\n    __pinInterruptHandlers[pin].arg = NULL;\n    __pinInterruptHandlers[pin].functional = false;\n\n    GPIO.pin[pin].int_ena = 0;\n    GPIO.pin[pin].int_type = 0;\n    esp_intr_enable(gpio_intr_handle);\n}\n\n\nextern void pinMode(uint8_t pin, uint8_t mode) __attribute__ ((weak, alias(\"__pinMode\")));\nextern void digitalWrite(uint8_t pin, uint8_t val) __attribute__ ((weak, alias(\"__digitalWrite\")));\nextern int digitalRead(uint8_t pin) __attribute__ ((weak, alias(\"__digitalRead\")));\nextern void attachInterrupt(uint8_t pin, voidFuncPtr handler, int mode) __attribute__ ((weak, alias(\"__attachInterrupt\")));\nextern void attachInterruptArg(uint8_t pin, voidFuncPtrArg handler, void * arg, int mode) __attribute__ ((weak, alias(\"__attachInterruptArg\")));\nextern void detachInterrupt(uint8_t pin) __attribute__ ((weak, alias(\"__detachInterrupt\")));\n\n"}},"jsonrpc":"2.0"}Content-Length: 320

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":56},"contentChanges":[{"range":{"start":{"line":139,"character":0},"end":{"line":139,"character":0}},"text":"    vTaskDelay(500/portTICK_PERIOD_MS);\n"}]},"jsonrpc":"2.0"}Content-Length: 181

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/esp32-hal-gpio.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/esp32-hal-gpio.c"}}Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":56}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":140,"character":12},"end":{"line":140,"character":12}},"context":{"diagnostics":[]}},"id":95,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":95,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":57},"contentChanges":[{"range":{"start":{"line":140,"character":4},"end":{"line":140,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":57}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":140,"character":15},"end":{"line":140,"character":15}},"context":{"diagnostics":[]}},"id":96,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":96,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":139,"character":14}},"id":97,"jsonrpc":"2.0"}
<<<
Content-Length: 1891

{"id":97,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `vTaskDelay`  \n\n---\n→ `void`  \nParameters:  \n- `const TickType_t xTicksToDelay`\n\nDelay a task for a given number of ticks.  \nThe actual time that the task remains blocked depends on the tick rate.  \nThe constant portTICK_PERIOD_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.  \nINCLUDE_vTaskDelay must be defined as 1 for this function to be available.  \nSee the configuration section for more information.  \nvTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method of controlling the frequency of a periodic task as the path taken through the code, as well as other task and interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the calling task should unblock.  \n@param xTicksToDelay The amount of time, in tick periods, that the calling task should block.  \nExample usage:  \n@code{c} void vTaskFunction( void * pvParameters ) { // Block for 500ms.  \nconst TickType_t xDelay = 500 / portTICK_PERIOD_MS;  \nfor( ;; ) { // Simply toggle the LED every 500ms, blocking between each toggle.  \nvToggleLED();  \nvTaskDelay( xDelay );  \n} }  \n@endcode  \n\\\\ingroup TaskCtrl  \n\n---\n```cpp\nvoid vTaskDelay(const TickType_t xTicksToDelay)\n```"},"range":{"end":{"character":14,"line":139},"start":{"character":4,"line":139}}}}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":139,"character":16}},"id":98,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":98,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":139,"character":16},"end":{"line":139,"character":16}},"context":{"diagnostics":[]}},"id":99,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":99,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":141,"character":3}},"id":100,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":100,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 205

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":141,"character":4}},"id":101,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":101,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 295

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":58},"contentChanges":[{"range":{"start":{"line":140,"character":4},"end":{"line":140,"character":7}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":58}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":140,"character":12},"end":{"line":140,"character":12}},"context":{"diagnostics":[]}},"id":102,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":102,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":59},"contentChanges":[{"range":{"start":{"line":139,"character":0},"end":{"line":140,"character":0}},"rangeLength":40,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":59}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":139,"character":12},"end":{"line":139,"character":12}},"context":{"diagnostics":[]}},"id":103,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":103,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":138,"character":12}},"id":104,"jsonrpc":"2.0"}
<<<
Content-Length: 1115

{"id":104,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":1,"range":{"end":{"character":23,"line":66},"start":{"character":10,"line":66}}},{"kind":1,"range":{"end":{"character":58,"line":66},"start":{"character":45,"line":66}}},{"kind":1,"range":{"end":{"character":30,"line":72},"start":{"character":17,"line":72}}},{"kind":1,"range":{"end":{"character":31,"line":73},"start":{"character":18,"line":73}}},{"kind":1,"range":{"end":{"character":31,"line":74},"start":{"character":18,"line":74}}},{"kind":1,"range":{"end":{"character":19,"line":130},"start":{"character":6,"line":130}}},{"kind":1,"range":{"end":{"character":24,"line":134},"start":{"character":11,"line":134}}},{"kind":1,"range":{"end":{"character":19,"line":138},"start":{"character":6,"line":138}}},{"kind":1,"range":{"end":{"character":28,"line":162},"start":{"character":15,"line":162}}},{"kind":1,"range":{"end":{"character":28,"line":164},"start":{"character":15,"line":164}}},{"kind":1,"range":{"end":{"character":28,"line":166},"start":{"character":15,"line":166}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":138,"character":12},"end":{"line":138,"character":12}},"context":{"diagnostics":[]}},"id":105,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":105,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":137,"character":3},"end":{"line":137,"character":3}},"context":{"diagnostics":[]}},"id":106,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":106,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":136,"character":12}},"id":107,"jsonrpc":"2.0"}
<<<
Content-Length: 395

{"id":107,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":1,"range":{"end":{"character":13,"line":116},"start":{"character":5,"line":116}}},{"kind":1,"range":{"end":{"character":12,"line":132},"start":{"character":4,"line":132}}},{"kind":1,"range":{"end":{"character":12,"line":136},"start":{"character":4,"line":136}}}]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":135,"character":12}},"id":108,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":108,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":134,"character":12}},"id":109,"jsonrpc":"2.0"}
<<<
Content-Length: 1115

{"id":109,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":1,"range":{"end":{"character":23,"line":66},"start":{"character":10,"line":66}}},{"kind":1,"range":{"end":{"character":58,"line":66},"start":{"character":45,"line":66}}},{"kind":1,"range":{"end":{"character":30,"line":72},"start":{"character":17,"line":72}}},{"kind":1,"range":{"end":{"character":31,"line":73},"start":{"character":18,"line":73}}},{"kind":1,"range":{"end":{"character":31,"line":74},"start":{"character":18,"line":74}}},{"kind":1,"range":{"end":{"character":19,"line":130},"start":{"character":6,"line":130}}},{"kind":1,"range":{"end":{"character":24,"line":134},"start":{"character":11,"line":134}}},{"kind":1,"range":{"end":{"character":19,"line":138},"start":{"character":6,"line":138}}},{"kind":1,"range":{"end":{"character":28,"line":162},"start":{"character":15,"line":162}}},{"kind":1,"range":{"end":{"character":28,"line":164},"start":{"character":15,"line":164}}},{"kind":1,"range":{"end":{"character":28,"line":166},"start":{"character":15,"line":166}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":134,"character":12},"end":{"line":134,"character":12}},"context":{"diagnostics":[]}},"id":110,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":110,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":132,"character":12}},"id":111,"jsonrpc":"2.0"}
<<<
Content-Length: 395

{"id":111,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":1,"range":{"end":{"character":13,"line":116},"start":{"character":5,"line":116}}},{"kind":1,"range":{"end":{"character":12,"line":132},"start":{"character":4,"line":132}}},{"kind":1,"range":{"end":{"character":12,"line":136},"start":{"character":4,"line":136}}}]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":131,"character":12}},"id":112,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":112,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":131,"character":12},"end":{"line":131,"character":12}},"context":{"diagnostics":[]}},"id":113,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":113,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":122,"character":8}},"id":114,"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"id":114,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":9,"line":122},"start":{"character":4,"line":122}}},{"kind":1,"range":{"end":{"character":9,"line":124},"start":{"character":4,"line":124}}},{"kind":1,"range":{"end":{"character":7,"line":170},"start":{"character":2,"line":170}}}]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":122,"character":8},"end":{"line":122,"character":8}},"context":{"diagnostics":[]}},"id":115,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":115,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 205

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":122,"character":8}},"id":116,"jsonrpc":"2.0"}
<<<
Content-Length: 221

{"id":116,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":143},"start":{"character":5,"line":143}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/esp32-hal-misc.c"}]}
>>>
Content-Length: 7335

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/esp32-hal-misc.c","languageId":"c","version":1,"text":"// Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include \"sdkconfig.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"esp_attr.h\"\n#include \"nvs_flash.h\"\n#include \"nvs.h\"\n#include \"esp_partition.h\"\n#include \"esp_log.h\"\n#include \"esp_timer.h\"\n#ifdef CONFIG_APP_ROLLBACK_ENABLE\n#include \"esp_ota_ops.h\"\n#endif //CONFIG_APP_ROLLBACK_ENABLE\n#ifdef CONFIG_BT_ENABLED\n#include \"esp_bt.h\"\n#endif //CONFIG_BT_ENABLED\n#include \u003csys/time.h\u003e\n#include \"soc/rtc.h\"\n#include \"soc/rtc_cntl_reg.h\"\n#include \"soc/apb_ctrl_reg.h\"\n#include \"rom/rtc.h\"\n#include \"esp_task_wdt.h\"\n#include \"esp32-hal.h\"\n\n//Undocumented!!! Get chip temperature in Farenheit\n//Source: https://github.com/pcbreflux/espressif/blob/master/esp32/arduino/sketchbook/ESP32_int_temp_sensor/ESP32_int_temp_sensor.ino\nuint8_t temprature_sens_read();\n\nfloat temperatureRead()\n{\n    return (temprature_sens_read() - 32) / 1.8;\n}\n\nvoid __yield()\n{\n    vPortYield();\n}\n\nvoid yield() __attribute__ ((weak, alias(\"__yield\")));\n\n#if CONFIG_AUTOSTART_ARDUINO\n\nextern TaskHandle_t loopTaskHandle;\nextern bool loopTaskWDTEnabled;\n\nvoid enableLoopWDT(){\n    if(loopTaskHandle != NULL){\n        if(esp_task_wdt_add(loopTaskHandle) != ESP_OK){\n            log_e(\"Failed to add loop task to WDT\");\n        } else {\n            loopTaskWDTEnabled = true;\n        }\n    }\n}\n\nvoid disableLoopWDT(){\n    if(loopTaskHandle != NULL \u0026\u0026 loopTaskWDTEnabled){\n        loopTaskWDTEnabled = false;\n        if(esp_task_wdt_delete(loopTaskHandle) != ESP_OK){\n            log_e(\"Failed to remove loop task from WDT\");\n        }\n    }\n}\n\nvoid feedLoopWDT(){\n    esp_err_t err = esp_task_wdt_reset();\n    if(err != ESP_OK){\n        log_e(\"Failed to feed WDT! Error: %d\", err);\n    }\n}\n#endif\n\nvoid enableCore0WDT(){\n    TaskHandle_t idle_0 = xTaskGetIdleTaskHandleForCPU(0);\n    if(idle_0 == NULL || esp_task_wdt_add(idle_0) != ESP_OK){\n        log_e(\"Failed to add Core 0 IDLE task to WDT\");\n    }\n}\n\nvoid disableCore0WDT(){\n    TaskHandle_t idle_0 = xTaskGetIdleTaskHandleForCPU(0);\n    if(idle_0 == NULL || esp_task_wdt_delete(idle_0) != ESP_OK){\n        log_e(\"Failed to remove Core 0 IDLE task from WDT\");\n    }\n}\n\n#ifndef CONFIG_FREERTOS_UNICORE\nvoid enableCore1WDT(){\n    TaskHandle_t idle_1 = xTaskGetIdleTaskHandleForCPU(1);\n    if(idle_1 == NULL || esp_task_wdt_add(idle_1) != ESP_OK){\n        log_e(\"Failed to add Core 1 IDLE task to WDT\");\n    }\n}\n\nvoid disableCore1WDT(){\n    TaskHandle_t idle_1 = xTaskGetIdleTaskHandleForCPU(1);\n    if(idle_1 == NULL || esp_task_wdt_delete(idle_1) != ESP_OK){\n        log_e(\"Failed to remove Core 1 IDLE task from WDT\");\n    }\n}\n#endif\n\nBaseType_t xTaskCreateUniversal( TaskFunction_t pxTaskCode,\n                        const char * const pcName,\n                        const uint32_t usStackDepth,\n                        void * const pvParameters,\n                        UBaseType_t uxPriority,\n                        TaskHandle_t * const pxCreatedTask,\n                        const BaseType_t xCoreID ){\n#ifndef CONFIG_FREERTOS_UNICORE\n    if(xCoreID \u003e= 0 \u0026\u0026 xCoreID \u003c 2) {\n        return xTaskCreatePinnedToCore(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask, xCoreID);\n    } else {\n#endif\n    return xTaskCreate(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask);\n#ifndef CONFIG_FREERTOS_UNICORE\n    }\n#endif\n}\n\nunsigned long IRAM_ATTR micros()\n{\n    return (unsigned long) (esp_timer_get_time());\n}\n\nunsigned long IRAM_ATTR millis()\n{\n    return (unsigned long) (esp_timer_get_time() / 1000ULL);\n}\n\nvoid delay(uint32_t ms)\n{\n    vTaskDelay(ms / portTICK_PERIOD_MS);\n}\n\nvoid IRAM_ATTR delayMicroseconds(uint32_t us)\n{\n    uint32_t m = micros();\n    if(us){\n        uint32_t e = (m + us);\n        if(m \u003e e){ //overflow\n            while(micros() \u003e e){\n                NOP();\n            }\n        }\n        while(micros() \u003c e){\n            NOP();\n        }\n    }\n}\n\nvoid initVariant() __attribute__((weak));\nvoid initVariant() {}\n\nvoid init() __attribute__((weak));\nvoid init() {}\n\nbool verifyOta() __attribute__((weak));\nbool verifyOta() { return true; }\n\n#ifdef CONFIG_BT_ENABLED\n//overwritten in esp32-hal-bt.c\nbool btInUse() __attribute__((weak));\nbool btInUse(){ return false; }\n#endif\n\nvoid initArduino()\n{\n#ifdef CONFIG_APP_ROLLBACK_ENABLE\n    const esp_partition_t *running = esp_ota_get_running_partition();\n    esp_ota_img_states_t ota_state;\n    if (esp_ota_get_state_partition(running, \u0026ota_state) == ESP_OK) {\n        if (ota_state == ESP_OTA_IMG_PENDING_VERIFY) {\n            if (verifyOta()) {\n                esp_ota_mark_app_valid_cancel_rollback();\n            } else {\n                log_e(\"OTA verification failed! Start rollback to the previous version ...\");\n                esp_ota_mark_app_invalid_rollback_and_reboot();\n            }\n        }\n    }\n#endif\n    //init proper ref tick value for PLL (uncomment if REF_TICK is different than 1MHz)\n    //ESP_REG(APB_CTRL_PLL_TICK_CONF_REG) = APB_CLK_FREQ / REF_CLK_FREQ - 1;\n#ifdef F_CPU\n    setCpuFrequencyMhz(F_CPU/1000000);\n#endif\n#if CONFIG_SPIRAM_SUPPORT\n    psramInit();\n#endif\n    esp_log_level_set(\"*\", CONFIG_LOG_DEFAULT_LEVEL);\n    esp_err_t err = nvs_flash_init();\n    if(err == ESP_ERR_NVS_NO_FREE_PAGES){\n        const esp_partition_t* partition = esp_partition_find_first(ESP_PARTITION_TYPE_DATA, ESP_PARTITION_SUBTYPE_DATA_NVS, NULL);\n        if (partition != NULL) {\n            err = esp_partition_erase_range(partition, 0, partition-\u003esize);\n            if(!err){\n                err = nvs_flash_init();\n            } else {\n                log_e(\"Failed to format the broken NVS partition!\");\n            }\n        }\n    }\n    if(err) {\n        log_e(\"Failed to initialize NVS! Error: %u\", err);\n    }\n#ifdef CONFIG_BT_ENABLED\n    if(!btInUse()){\n        esp_bt_controller_mem_release(ESP_BT_MODE_BTDM);\n    }\n#endif\n    init();\n    initVariant();\n}\n\n//used by hal log\nconst char * IRAM_ATTR pathToFileName(const char * path)\n{\n    size_t i = 0;\n    size_t pos = 0;\n    char * p = (char *)path;\n    while(*p){\n        i++;\n        if(*p == '/' || *p == '\\\\'){\n            pos = i;\n        }\n        p++;\n    }\n    return path+pos;\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 181

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/esp32-hal-misc.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/esp32-hal-misc.c"}}
>>>
Content-Length: 320

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":60},"contentChanges":[{"range":{"start":{"line":122,"character":0},"end":{"line":122,"character":0}},"text":"    vTaskDelay(500/portTICK_PERIOD_MS);\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":60}}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":123,"character":8},"end":{"line":123,"character":8}},"context":{"diagnostics":[]}},"id":117,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":117,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":122,"character":15}},"id":118,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":118,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":122},"start":{"character":4,"line":122}}},{"kind":1,"range":{"end":{"character":14,"line":150},"start":{"character":4,"line":150}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":122,"character":15},"end":{"line":122,"character":15}},"context":{"diagnostics":[]}},"id":119,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":119,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":122,"character":15}},"id":120,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":120,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":122,"character":16},"end":{"line":122,"character":16}},"context":{"diagnostics":[]}},"id":121,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":121,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":61},"contentChanges":[{"range":{"start":{"line":122,"character":15},"end":{"line":122,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":61}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":62},"contentChanges":[{"range":{"start":{"line":122,"character":15},"end":{"line":122,"character":15}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":62}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":122,"character":16},"end":{"line":122,"character":16}},"context":{"diagnostics":[]}},"id":122,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":122,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":123,"character":15},"end":{"line":123,"character":15}},"context":{"diagnostics":[]}},"id":123,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":123,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":63},"contentChanges":[{"range":{"start":{"line":123,"character":4},"end":{"line":123,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":63}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":123,"character":18},"end":{"line":123,"character":18}},"context":{"diagnostics":[]}},"id":124,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":124,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":124,"character":18}},"id":125,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":125,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":21,"line":116},"start":{"character":18,"line":116}}},{"kind":2,"range":{"end":{"character":20,"line":121},"start":{"character":17,"line":121}}},{"kind":2,"range":{"end":{"character":20,"line":124},"start":{"character":17,"line":124}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":125,"character":15},"end":{"line":125,"character":15}},"context":{"diagnostics":[]}},"id":126,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":126,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 287

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":64},"contentChanges":[{"range":{"start":{"line":125,"character":15},"end":{"line":125,"character":15}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":64}}
>>>
Content-Length: 426

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":66},"contentChanges":[{"range":{"start":{"line":126,"character":0},"end":{"line":126,"character":4}},"rangeLength":4,"text":""},{"range":{"start":{"line":126,"character":0},"end":{"line":126,"character":0}},"text":"    vTaskDelay(500/portTICK_PERIOD_MS);\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":66}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":126,"character":37},"end":{"line":126,"character":37}},"context":{"diagnostics":[]}},"id":127,"jsonrpc":"2.0"}
<<<
Content-Length: 390

{"id":127,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":37,"line":126},"start":{"character":37,"line":126}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'portTICK_PERIOD_MS'"},"kind":"refactor","title":"Expand macro 'portTICK_PERIOD_MS'"}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":126,"character":18},"end":{"line":126,"character":18}},"context":{"diagnostics":[]}},"id":128,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":128,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":126,"character":19}},"id":129,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":129,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":126,"character":19},"end":{"line":126,"character":19}},"context":{"diagnostics":[]}},"id":130,"jsonrpc":"2.0"}
<<<
Content-Length: 390

{"id":130,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":19,"line":126},"start":{"character":19,"line":126}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'portTICK_PERIOD_MS'"},"kind":"refactor","title":"Expand macro 'portTICK_PERIOD_MS'"}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":126,"character":15},"end":{"line":126,"character":15}},"context":{"diagnostics":[]}},"id":131,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":131,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":126,"character":16}},"id":132,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":132,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":67},"contentChanges":[{"range":{"start":{"line":126,"character":15},"end":{"line":126,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":67}}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":68},"contentChanges":[{"range":{"start":{"line":126,"character":15},"end":{"line":126,"character":15}},"text":"3"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":68}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":126,"character":16},"end":{"line":126,"character":16}},"context":{"diagnostics":[]}},"id":133,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":133,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":125,"character":15},"end":{"line":125,"character":15}},"context":{"diagnostics":[]}},"id":134,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":134,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":124,"character":16}},"id":135,"jsonrpc":"2.0"}
<<<
Content-Length: 397

{"id":135,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":121},"start":{"character":4,"line":121}}},{"kind":1,"range":{"end":{"character":16,"line":124},"start":{"character":4,"line":124}}},{"kind":1,"range":{"end":{"character":16,"line":142},"start":{"character":4,"line":142}}},{"kind":1,"range":{"end":{"character":16,"line":144},"start":{"character":4,"line":144}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":124,"character":16},"end":{"line":124,"character":16}},"context":{"diagnostics":[]}},"id":136,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":136,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":69},"contentChanges":[{"range":{"start":{"line":125,"character":4},"end":{"line":125,"character":4}},"text":"// "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":69}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":125,"character":18},"end":{"line":125,"character":18}},"context":{"diagnostics":[]}},"id":137,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":137,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":161,"character":1},"end":{"line":161,"character":1}},"context":{"diagnostics":[]}},"id":138,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":138,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 270

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":0,"character":8},"end":{"line":0,"character":8}},"context":{"diagnostics":[]}},"id":139,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":139,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":2},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":140,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":140,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":141,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":141,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":3},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":142,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":142,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":2},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":143,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":143,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":164,"character":2}},"id":144,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":144,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":164},"start":{"character":2,"line":164}}}}
>>>
Content-Length: 205

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":164,"character":3}},"id":145,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":145,"jsonrpc":"2.0","result":[{"range":{"end":{"character":21,"line":25},"start":{"character":15,"line":25}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.cpp"}]}
>>>
Content-Length: 4603

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.cpp","languageId":"cpp","version":1,"text":"#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cinttypes.h\u003e\n\n#include \"pins_arduino.h\"\n#include \"HardwareSerial.h\"\n\n#ifndef RX1\n#define RX1 9\n#endif\n\n#ifndef TX1\n#define TX1 10\n#endif\n\n#ifndef RX2\n#define RX2 16\n#endif\n\n#ifndef TX2\n#define TX2 17\n#endif\n\n#if !defined(NO_GLOBAL_INSTANCES) \u0026\u0026 !defined(NO_GLOBAL_SERIAL)\nHardwareSerial Serial(0);\nHardwareSerial Serial1(1);\nHardwareSerial Serial2(2);\n#endif\n\nHardwareSerial::HardwareSerial(int uart_nr) : _uart_nr(uart_nr), _uart(NULL) {}\n\nvoid HardwareSerial::begin(unsigned long baud, uint32_t config, int8_t rxPin, int8_t txPin, bool invert, unsigned long timeout_ms)\n{\n    if(0 \u003e _uart_nr || _uart_nr \u003e 2) {\n        log_e(\"Serial number is invalid, please use 0, 1 or 2\");\n        return;\n    }\n    if(_uart) {\n        end();\n    }\n    if(_uart_nr == 0 \u0026\u0026 rxPin \u003c 0 \u0026\u0026 txPin \u003c 0) {\n        rxPin = 3;\n        txPin = 1;\n    }\n    if(_uart_nr == 1 \u0026\u0026 rxPin \u003c 0 \u0026\u0026 txPin \u003c 0) {\n        rxPin = RX1;\n        txPin = TX1;\n    }\n    if(_uart_nr == 2 \u0026\u0026 rxPin \u003c 0 \u0026\u0026 txPin \u003c 0) {\n        rxPin = RX2;\n        txPin = TX2;\n    }\n\n    _uart = uartBegin(_uart_nr, baud ? baud : 9600, config, rxPin, txPin, 256, invert);\n    _tx_pin = txPin;\n    _rx_pin = rxPin;\n\n    if(!baud) {\n        uartStartDetectBaudrate(_uart);\n        time_t startMillis = millis();\n        unsigned long detectedBaudRate = 0;\n        while(millis() - startMillis \u003c timeout_ms \u0026\u0026 !(detectedBaudRate = uartDetectBaudrate(_uart))) {\n            yield();\n        }\n\n        end();\n\n        if(detectedBaudRate) {\n            delay(100); // Give some time...\n            _uart = uartBegin(_uart_nr, detectedBaudRate, config, rxPin, txPin, 256, invert);\n        } else {\n            log_e(\"Could not detect baudrate. Serial data at the port must be present within the timeout for detection to be possible\");\n            _uart = NULL;\n            _tx_pin = 255;\n            _rx_pin = 255;\n        }\n    }\n}\n\nvoid HardwareSerial::updateBaudRate(unsigned long baud)\n{\n\tuartSetBaudRate(_uart, baud);\n}\n\nvoid HardwareSerial::end()\n{\n    if(uartGetDebug() == _uart_nr) {\n        uartSetDebug(0);\n    }\n    log_v(\"pins %d %d\",_tx_pin, _rx_pin);\n    uartEnd(_uart, _tx_pin, _rx_pin);\n    _uart = 0;\n}\n\nsize_t HardwareSerial::setRxBufferSize(size_t new_size) {\n    return uartResizeRxBuffer(_uart, new_size);\n}\n\nvoid HardwareSerial::setDebugOutput(bool en)\n{\n    if(_uart == 0) {\n        return;\n    }\n    if(en) {\n        uartSetDebug(_uart);\n    } else {\n        if(uartGetDebug() == _uart_nr) {\n            uartSetDebug(0);\n        }\n    }\n}\n\nint HardwareSerial::available(void)\n{\n    return uartAvailable(_uart);\n}\nint HardwareSerial::availableForWrite(void)\n{\n    return uartAvailableForWrite(_uart);\n}\n\nint HardwareSerial::peek(void)\n{\n    if (available()) {\n        return uartPeek(_uart);\n    }\n    return -1;\n}\n\nint HardwareSerial::read(void)\n{\n    if(available()) {\n        return uartRead(_uart);\n    }\n    return -1;\n}\n\n// read characters into buffer\n// terminates if size characters have been read, or no further are pending\n// returns the number of characters placed in the buffer\n// the buffer is NOT null terminated.\nsize_t HardwareSerial::read(uint8_t *buffer, size_t size)\n{\n    size_t avail = available();\n    if (size \u003c avail) {\n        avail = size;\n    }\n    size_t count = 0;\n    while(count \u003c avail) {\n        *buffer++ = uartRead(_uart);\n        count++;\n    }\n    return count;\n}\n\nvoid HardwareSerial::flush(void)\n{\n    uartFlush(_uart);\n}\n\nvoid HardwareSerial::flush(bool txOnly)\n{\n    uartFlushTxOnly(_uart, txOnly);\n}\n\nsize_t HardwareSerial::write(uint8_t c)\n{\n    uartWrite(_uart, c);\n    return 1;\n}\n\nsize_t HardwareSerial::write(const uint8_t *buffer, size_t size)\n{\n    uartWriteBuf(_uart, buffer, size);\n    return size;\n}\nuint32_t  HardwareSerial::baudRate()\n\n{\n\treturn uartGetBaudRate(_uart);\n}\nHardwareSerial::operator bool() const\n{\n    return true;\n}\n\nvoid HardwareSerial::setRxInvert(bool invert)\n{\n    uartSetRxInvert(_uart, invert);\n}\n"}},"jsonrpc":"2.0"}Content-Length: 183

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/cores/esp32/HardwareSerial.cpp"}}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":164,"character":2}},"id":146,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":146,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":164},"start":{"character":2,"line":164}}}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":152,"character":39},"end":{"line":152,"character":39}},"context":{"diagnostics":[]}},"id":147,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":147,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":151,"character":18},"end":{"line":151,"character":18}},"context":{"diagnostics":[]}},"id":148,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":148,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":149,"character":15}},"id":149,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":149,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 287

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":70},"contentChanges":[{"range":{"start":{"line":150,"character":10},"end":{"line":150,"character":10}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":70}}
>>>
Content-Length: 516

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":71},"contentChanges":[{"range":{"start":{"line":151,"character":4},"end":{"line":151,"character":4}},"text":"Serial.print(\"Roll: \");\n  Serial.print(masterMessage.roll);\n  Serial.print(\"    Pitch: \");\n  Serial.print(masterMessage.pitch);\n  Serial.print(\"    Light: \");\n  Serial.print(masterMessage.lightSensor);\n  Serial.println(\"\");"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":71}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":157,"character":21},"end":{"line":157,"character":21}},"context":{"diagnostics":[]}},"id":150,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":150,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":150,"character":7}},"id":151,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":151,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":152,"character":4},"end":{"line":157,"character":21}},"context":{"diagnostics":[]}},"id":152,"jsonrpc":"2.0"}
<<<
Content-Length: 365

{"id":152,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":21,"line":157},"start":{"character":4,"line":152}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":152,"character":4}},"id":153,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":153,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":8,"line":152},"start":{"character":2,"line":152}}}}
>>>
Content-Length: 849

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":77},"contentChanges":[{"range":{"start":{"line":157,"character":0},"end":{"line":157,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":156,"character":0},"end":{"line":156,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":155,"character":0},"end":{"line":155,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":154,"character":0},"end":{"line":154,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":153,"character":0},"end":{"line":153,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":152,"character":0},"end":{"line":152,"character":2}},"rangeLength":2,"text":"    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":77}}
>>>
Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":152,"character":6},"end":{"line":157,"character":23}},"context":{"diagnostics":[]}},"id":154,"jsonrpc":"2.0"}
<<<
Content-Length: 365

{"id":154,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":23,"line":157},"start":{"character":6,"line":152}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":152,"character":4}},"id":155,"jsonrpc":"2.0"}
<<<
Content-Length: 270

{"id":155,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":10,"line":152},"start":{"character":4,"line":152}}}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":155,"character":17},"end":{"line":155,"character":17}},"context":{"diagnostics":[]}},"id":156,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":156,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":152,"character":15}},"id":157,"jsonrpc":"2.0"}
<<<
Content-Length: 323

{"id":157,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `double`\n- `int = 2`\n\n---\n```cpp\n// In Print\npublic: size_t print(double, int = 2)\n```"},"range":{"end":{"character":16,"line":152},"start":{"character":11,"line":152}}}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":151,"character":15}},"id":158,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":158,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t print(const char[])\n```"},"range":{"end":{"character":16,"line":151},"start":{"character":11,"line":151}}}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":150,"character":10},"end":{"line":150,"character":10}},"context":{"diagnostics":[]}},"id":159,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":159,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":162,"character":3},"end":{"line":162,"character":3}},"context":{"diagnostics":[]}},"id":160,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":160,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":161,"character":7}},"id":161,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":161,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":162,"character":2}},"id":162,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":162,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":160,"character":13}},"id":163,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":163,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":160,"character":14}},"id":164,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":164,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":160,"character":0},"end":{"line":161,"character":0}},"context":{"diagnostics":[]}},"id":165,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":165,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":78},"contentChanges":[{"range":{"start":{"line":160,"character":0},"end":{"line":161,"character":0}},"rangeLength":42,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":78}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":160,"character":14}},"id":166,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":166,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":160,"character":14},"end":{"line":160,"character":21}},"context":{"diagnostics":[]}},"id":167,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":167,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":160,"character":13}},"id":168,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":168,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":160,"character":14},"end":{"line":160,"character":21}},"context":{"diagnostics":[]}},"id":169,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":169,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":161,"character":3},"end":{"line":161,"character":3}},"context":{"diagnostics":[]}},"id":170,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":170,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":160,"character":14}},"id":171,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":171,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":160,"character":0},"end":{"line":161,"character":0}},"context":{"diagnostics":[]}},"id":172,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":172,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":79},"contentChanges":[{"range":{"start":{"line":160,"character":0},"end":{"line":161,"character":0}},"rangeLength":58,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1040

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":79}}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":169,"character":18}},"id":173,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":173,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":168,"character":0},"end":{"line":0,"character":13}},"context":{"diagnostics":[]}},"id":174,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":174,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":0},"end":{"line":0,"character":13}},"context":{"diagnostics":[]}},"id":175,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":175,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":170,"character":8}},"id":176,"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"id":176,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `double`\n- `int = 2`\n\n---\n```cpp\n// In Print\npublic: size_t print(double, int = 2)\n```"},"range":{"end":{"character":8,"line":170},"start":{"character":2,"line":170}}}}
>>>
Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":177,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":177,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":168,"character":0},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":178,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":178,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":0},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":179,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":179,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":166,"character":0},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":180,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":180,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":0},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":181,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":181,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 270

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":182,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":182,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 273

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":0},"end":{"line":0,"character":13}},"context":{"diagnostics":[]}},"id":183,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":183,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":80},"contentChanges":[{"range":{"start":{"line":164,"character":0},"end":{"line":164,"character":0}},"text":"x"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":164,"character":1},"context":{"triggerKind":1}},"id":184,"jsonrpc":"2.0"}
<<<
Content-Length: 86061

{"id":184,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"It is preferred that the macros xQueueSend(), xQueueSendToFront() and xQueueSendToBack() are used in place of calling this function directly.  \nPost an item on a queue. The item is queued by copy, not by reference.  \nThis function must not be called from an interrupt service routine.  \nSee xQueueSendFromISR () for an alternative which may be used in an ISR.  \n@param xQueue The handle to the queue on which the item is to be posted.  \n@param pvItemToQueue A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.  \n@param xTicksToWait The maximum amount of time the task should block waiting for space to become available on the queue, should it already be full. The call will return immediately if this is set to 0 and the queue is full. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.  \n@param xCopyPosition Can take the value queueSEND_TO_BACK to place the item at the back of the queue, or queueSEND_TO_FRONT to place the item at the front of the queue (for high priority messages).  \n@return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.  \nExample usage:  \n@code{c} struct AMessage { char ucMessageID;  \nchar ucData[ 20 ];  \n} xMessage;  \nuint32_t ulVar = 10UL;  \nvoid vATask( void \\*pvParameters ) { QueueHandle_t xQueue1, xQueue2;  \nstruct AMessage \\*pxMessage;  \n// Create a queue capable of containing 10 uint32_t values.  \nxQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );  \n// Create a queue capable of containing 10 pointers to AMessage structures.  \n// These should be passed by pointer as they contain a lot of data.  \nxQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );  \n// ...  \nif( xQueue1 != 0 ) { // Send an uint32_t. Wait for 10 ticks for space to become // available if necessary.  \nif( xQueueGenericSend( xQueue1, ( void * ) &ulVar, ( TickType_t ) 10, queueSEND_TO_BACK ) != pdPASS ) { // Failed to post the message, even after 10 ticks.  \n} }  \nif( xQueue2 != 0 ) { // Send a pointer to a struct AMessage object. Don't block if the // queue is already full.  \npxMessage = & xMessage;  \nxQueueGenericSend( xQueue2, ( void * ) &pxMessage, ( TickType_t ) 0, queueSEND_TO_BACK );  \n}  \n// ... Rest of task code.  \n}  \n@endcode  \n\\\\ingroup QueueManagement"},"filterText":"xQueueGenericSend","insertText":"xQueueGenericSend(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:TickType_t xTicksToWait}, ${4:const BaseType_t xCopyPosition})","insertTextFormat":2,"kind":3,"label":" xQueueGenericSend(QueueHandle_t xQueue, const void *const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition)","score":1.7042070627212524,"sortText":"4025dc8bxQueueGenericSend","textEdit":{"newText":"xQueueGenericSend(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:TickType_t xTicksToWait}, ${4:const BaseType_t xCopyPosition})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"It is preferred that the macro xQueueReceive() be used rather than calling this function directly.  \nReceive an item from a queue. The item is received by copy so a buffer of adequate size must be provided. The number of bytes copied into the buffer was defined when the queue was created.  \nThis function must not be used in an interrupt service routine. See xQueueReceiveFromISR for an alternative that can.  \n@param xQueue The handle to the queue from which the item is to be received.  \n@param pvBuffer Pointer to the buffer into which the received item will be copied.  \n@param xTicksToWait The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.  \nxQueueGenericReceive() will return immediately if the queue is empty and xTicksToWait is 0.  \n@param xJustPeek When set to true, the item received from the queue is not actually removed from the queue - meaning a subsequent call to xQueueReceive() will return the same item. When set to false, the item being received from the queue is also removed from the queue.  \n@return pdTRUE if an item was successfully received from the queue,  \notherwise pdFALSE.  \nExample usage:  \n@code{c} struct AMessage { char ucMessageID;  \nchar ucData[ 20 ];  \n} xMessage;  \nQueueHandle_t xQueue;  \n// Task to create a queue and post a value.  \nvoid vATask( void \\*pvParameters ) { struct AMessage \\*pxMessage;  \n// Create a queue capable of containing 10 pointers to AMessage structures.  \n// These should be passed by pointer as they contain a lot of data.  \nxQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );  \nif( xQueue == 0 ) { // Failed to create the queue.  \n}  \n// ...  \n// Send a pointer to a struct AMessage object. Don't block if the // queue is already full.  \npxMessage = & xMessage;  \nxQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );  \n// ... Rest of task code.  \n}  \n// Task to receive from the queue.  \nvoid vADifferentTask( void \\*pvParameters ) { struct AMessage \\*pxRxedMessage;  \nif( xQueue != 0 ) { // Receive a message on the created queue. Block for 10 ticks if a // message is not immediately available.  \nif( xQueueGenericReceive( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) ) { // pcRxedMessage now points to the struct AMessage variable posted // by vATask.  \n} }  \n// ... Rest of task code.  \n}  \n@endcode  \n\\\\ingroup QueueManagement"},"filterText":"xQueueGenericReceive","insertText":"xQueueGenericReceive(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer}, ${3:TickType_t xTicksToWait}, ${4:const BaseType_t xJustPeek})","insertTextFormat":2,"kind":3,"label":" xQueueGenericReceive(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeek)","score":1.6939057111740112,"sortText":"40272e19xQueueGenericReceive","textEdit":{"newText":"xQueueGenericReceive(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer}, ${3:TickType_t xTicksToWait}, ${4:const BaseType_t xJustPeek})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`  \nSee the comments above the struct xSTATIC_LIST_ITEM definition."},"filterText":"xSTATIC_LIST","insertText":"xSTATIC_LIST","insertTextFormat":2,"kind":22,"label":"•xSTATIC_LIST","score":1.5037370920181274,"sortText":"403f858bxSTATIC_LIST","textEdit":{"newText":"xSTATIC_LIST","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskCreatePinnedToCore","insertText":"xTaskCreatePinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask}, ${7:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":" xTaskCreatePinnedToCore(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask, const BaseType_t xCoreID)","score":1.5037370920181274,"sortText":"403f858bxTaskCreatePinnedToCore","textEdit":{"newText":"xTaskCreatePinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask}, ${7:const BaseType_t xCoreID})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskCreateRestricted","insertText":"xTaskCreateRestricted(${1:const TaskParameters_t *const pxTaskDefinition}, ${2:TaskHandle_t *pxCreatedTask})","insertTextFormat":2,"kind":3,"label":" xTaskCreateRestricted(const TaskParameters_t *const pxTaskDefinition, TaskHandle_t *pxCreatedTask)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateRestricted","textEdit":{"newText":"xTaskCreateRestricted(${1:const TaskParameters_t *const pxTaskDefinition}, ${2:TaskHandle_t *pxCreatedTask})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"BaseType_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal.h\"`  \nif xCoreID < 0 or CPU is unicore, it will use xTaskCreate, else xTaskCreatePinnedToCore allows to easily handle all possible situations without repetitive code"},"filterText":"xTaskCreateUniversal","insertText":"xTaskCreateUniversal(${1:TaskFunction_t pxTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pxCreatedTask}, ${7:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":"•xTaskCreateUniversal(TaskFunction_t pxTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask, const BaseType_t xCoreID)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateUniversal","textEdit":{"newText":"xTaskCreateUniversal(${1:TaskFunction_t pxTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pxCreatedTask}, ${7:const BaseType_t xCoreID})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Return the handle of the task running on a certain CPU. Because of the nature of SMP processing, there is no guarantee that this value will still be valid on return and should only be used for debugging purposes."},"filterText":"xTaskGetCurrentTaskHandleForCPU","insertText":"xTaskGetCurrentTaskHandleForCPU(${1:BaseType_t cpuid})","insertTextFormat":2,"kind":3,"label":" xTaskGetCurrentTaskHandleForCPU(BaseType_t cpuid)","score":1.5037370920181274,"sortText":"403f858bxTaskGetCurrentTaskHandleForCPU","textEdit":{"newText":"xTaskGetCurrentTaskHandleForCPU(${1:BaseType_t cpuid})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Get the handle of idle task for the given CPU.  \nxTaskGetIdleTaskHandleForCPU() is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.  \n@param cpuid The CPU to get the handle for  \n@return Idle task handle of a given cpu. It is not valid to call xTaskGetIdleTaskHandleForCPU() before the scheduler has been started."},"filterText":"xTaskGetIdleTaskHandleForCPU","insertText":"xTaskGetIdleTaskHandleForCPU(${1:UBaseType_t cpuid})","insertTextFormat":2,"kind":3,"label":" xTaskGetIdleTaskHandleForCPU(UBaseType_t cpuid)","score":1.5037370920181274,"sortText":"403f858bxTaskGetIdleTaskHandleForCPU","textEdit":{"newText":"xTaskGetIdleTaskHandleForCPU(${1:UBaseType_t cpuid})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Returns the scheduler state as taskSCHEDULER_RUNNING,  \ntaskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED."},"filterText":"xTaskGetSchedulerState","insertText":"xTaskGetSchedulerState()","insertTextFormat":2,"kind":3,"label":" xTaskGetSchedulerState()","score":1.5037370920181274,"sortText":"403f858bxTaskGetSchedulerState","textEdit":{"newText":"xTaskGetSchedulerState()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Get tick count  \n@return The count of ticks since vTaskStartScheduler was called.  \n\\\\ingroup TaskUtils"},"filterText":"xTaskGetTickCount","insertText":"xTaskGetTickCount()","insertTextFormat":2,"kind":3,"label":" xTaskGetTickCount()","score":1.5037370920181274,"sortText":"403f858bxTaskGetTickCount","textEdit":{"newText":"xTaskGetTickCount()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Send task notification from an ISR.  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nA version of xTaskNotify() that can be used from an interrupt service routine (ISR).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param xTaskToNotify The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().  \n@param ulValue Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.  \n@param eAction Specifies how the notification updates the task's notification value, if at all. Valid values for eAction are as follows:  \n\\- eSetBits:  \nThe task's notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.  \n\\- eIncrement:  \nThe task's notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithOverwrite:  \nThe task's notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithoutOverwrite:  \nIf the task being notified did not already have a notification pending then the task's notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.  \n\\- eNoAction:  \nThe task receives a notification without its notification value being updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n@param pxHigherPriorityTaskWoken xTaskNotifyFromISR() will set  \n\\*pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the task to which the notification was sent to leave the Blocked state, and the unblocked task has a priority higher than the currently running task. If xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should be requested before the interrupt is exited. How a context switch is requested from an ISR is dependent on the port - see the documentation page for the port in use.  \n@return Dependent on the value of eAction. See the description of the eAction parameter.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotifyFromISR","insertText":"xTaskNotifyFromISR(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","insertTextFormat":2,"kind":3,"label":" xTaskNotifyFromISR(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken)","score":1.5037370920181274,"sortText":"403f858bxTaskNotifyFromISR","textEdit":{"newText":"xTaskNotifyFromISR(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Resumes scheduler activity after it was suspended by a call to vTaskSuspendAll().  \nxTaskResumeAll() only resumes the scheduler. It does not unsuspend tasks that were previously suspended by a call to vTaskSuspend().  \n@return If resuming the scheduler caused a context switch then pdTRUE is returned, otherwise pdFALSE is returned.  \nExample usage:  \n@code{c} void vTask1( void * pvParameters ) { for( ;; ) { // Task code goes here.  \n// ...  \n// At some point the task wants to perform a long operation during // which it does not want to get swapped out. It cannot use // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the // operation may cause interrupts to be missed - including the // ticks.  \n// Prevent the real time kernel swapping out the task.  \nvTaskSuspendAll ();  \n// Perform the operation here. There is no need to use critical // sections as we have all the microcontroller processing time.  \n// During this time interrupts will still operate and the real // time kernel tick count will be maintained.  \n// ...  \n// The operation is complete. Restart the kernel. We want to force // a context switch - but there is no point if resuming the scheduler // caused a context switch already.  \nif( !xTaskResumeAll () ) { taskYIELD ();  \n} } }  \n@endcode  \n\\\\ingroup SchedulerControl"},"filterText":"xTaskResumeAll","insertText":"xTaskResumeAll()","insertTextFormat":2,"kind":3,"label":" xTaskResumeAll()","score":1.5037370920181274,"sortText":"403f858bxTaskResumeAll","textEdit":{"newText":"xTaskResumeAll()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- Generic Interrupt Trampolining Support (DEPRECATED)  \n\\----------------------------------------------------------------------"},"filterText":"XtHalVoidFunc","insertText":"XtHalVoidFunc","insertTextFormat":2,"kind":8,"label":"•XtHalVoidFunc","score":1.2690916061401367,"sortText":"405d8e68XtHalVoidFunc","textEdit":{"newText":"XtHalVoidFunc","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_all_extra_size","insertText":"Xthal_all_extra_size","insertTextFormat":2,"kind":6,"label":"•Xthal_all_extra_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_all_extra_size","textEdit":{"newText":"Xthal_all_extra_size","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_build_unique_id","insertText":"Xthal_build_unique_id","insertTextFormat":2,"kind":6,"label":"•Xthal_build_unique_id","score":1.2690916061401367,"sortText":"405d8e68Xthal_build_unique_id","textEdit":{"newText":"Xthal_build_unique_id","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nindex of highest allowed coprocessor number, per cfg, plus one  \nextern const unsigned char Xthal_cp_maxcfg;  \nbitmask of which coprocessors are present"},"filterText":"Xthal_cp_mask","insertText":"Xthal_cp_mask","insertTextFormat":2,"kind":6,"label":"•Xthal_cp_mask","score":1.2690916061401367,"sortText":"405d8e68Xthal_cp_mask","textEdit":{"newText":"Xthal_cp_mask","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int [8]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_cpregs_align","insertText":"Xthal_cpregs_align","insertTextFormat":2,"kind":6,"label":"•Xthal_cpregs_align","score":1.2690916061401367,"sortText":"405d8e68Xthal_cpregs_align","textEdit":{"newText":"Xthal_cpregs_align","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void *[8]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nsimilarly for non-windowed ABI (may be same or different)"},"filterText":"Xthal_cpregs_save_nw_fn","insertText":"Xthal_cpregs_save_nw_fn","insertTextFormat":2,"kind":6,"label":"•Xthal_cpregs_save_nw_fn","score":1.2690916061401367,"sortText":"405d8e68Xthal_cpregs_save_nw_fn","textEdit":{"newText":"Xthal_cpregs_save_nw_fn","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int [8]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_cpregs_size","insertText":"Xthal_cpregs_size","insertTextFormat":2,"kind":6,"label":"•Xthal_cpregs_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_cpregs_size","textEdit":{"newText":"Xthal_cpregs_size","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dataram_size","insertText":"Xthal_dataram_size","insertTextFormat":2,"kind":6,"label":"•Xthal_dataram_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_dataram_size","textEdit":{"newText":"Xthal_dataram_size","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_datarom_paddr","insertText":"Xthal_datarom_paddr","insertTextFormat":2,"kind":6,"label":"•Xthal_datarom_paddr","score":1.2690916061401367,"sortText":"405d8e68Xthal_datarom_paddr","textEdit":{"newText":"Xthal_datarom_paddr","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dcache_size","insertText":"Xthal_dcache_size","insertTextFormat":2,"kind":6,"label":"•Xthal_dcache_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_dcache_size","textEdit":{"newText":"Xthal_dcache_size","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dtlb_way_bits","insertText":"Xthal_dtlb_way_bits","insertTextFormat":2,"kind":6,"label":"•Xthal_dtlb_way_bits","score":1.2690916061401367,"sortText":"405d8e68Xthal_dtlb_way_bits","textEdit":{"newText":"Xthal_dtlb_way_bits","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_booleans","insertText":"Xthal_have_booleans","insertTextFormat":2,"kind":6,"label":"•Xthal_have_booleans","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_booleans","textEdit":{"newText":"Xthal_have_booleans","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nset if CCOUNT register present"},"filterText":"Xthal_have_ccount","insertText":"Xthal_have_ccount","insertTextFormat":2,"kind":6,"label":"•Xthal_have_ccount","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_ccount","textEdit":{"newText":"Xthal_have_ccount","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_exceptions","insertText":"Xthal_have_exceptions","insertTextFormat":2,"kind":6,"label":"•Xthal_have_exceptions","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_exceptions","textEdit":{"newText":"Xthal_have_exceptions","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_mimic_cacheattr","insertText":"Xthal_have_mimic_cacheattr","insertTextFormat":2,"kind":6,"label":"•Xthal_have_mimic_cacheattr","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_mimic_cacheattr","textEdit":{"newText":"Xthal_have_mimic_cacheattr","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_mul16","insertText":"Xthal_have_mul16","insertTextFormat":2,"kind":6,"label":"•Xthal_have_mul16","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_mul16","textEdit":{"newText":"Xthal_have_mul16","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_nmi","insertText":"Xthal_have_nmi","insertTextFormat":2,"kind":6,"label":"•Xthal_have_nmi","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_nmi","textEdit":{"newText":"Xthal_have_nmi","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_nsa","insertText":"Xthal_have_nsa","insertTextFormat":2,"kind":6,"label":"•Xthal_have_nsa","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_nsa","textEdit":{"newText":"Xthal_have_nsa","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- Memory Management Unit  \n\\----------------------------------------------------------------------"},"filterText":"Xthal_have_spanning_way","insertText":"Xthal_have_spanning_way","insertTextFormat":2,"kind":6,"label":"•Xthal_have_spanning_way","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_spanning_way","textEdit":{"newText":"Xthal_have_spanning_way","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_windowed","insertText":"Xthal_have_windowed","insertTextFormat":2,"kind":6,"label":"•Xthal_have_windowed","score":1.2690916061401367,"sortText":"405d8e68Xthal_have_windowed","textEdit":{"newText":"Xthal_have_windowed","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nsize of the cache lines in log2(bytes)"},"filterText":"Xthal_icache_linewidth","insertText":"Xthal_icache_linewidth","insertTextFormat":2,"kind":6,"label":"•Xthal_icache_linewidth","score":1.2690916061401367,"sortText":"405d8e68Xthal_icache_linewidth","textEdit":{"newText":"Xthal_icache_linewidth","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_instram_size","insertText":"Xthal_instram_size","insertTextFormat":2,"kind":6,"label":"•Xthal_instram_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_instram_size","textEdit":{"newText":"Xthal_instram_size","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_instram_vaddr","insertText":"Xthal_instram_vaddr","insertTextFormat":2,"kind":6,"label":"•Xthal_instram_vaddr","score":1.2690916061401367,"sortText":"405d8e68Xthal_instram_vaddr","textEdit":{"newText":"Xthal_instram_vaddr","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_instrom_size","insertText":"Xthal_instrom_size","insertTextFormat":2,"kind":6,"label":"•Xthal_instrom_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_instrom_size","textEdit":{"newText":"Xthal_instrom_size","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char [32]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \ntype per interrupt"},"filterText":"Xthal_inttype","insertText":"Xthal_inttype","insertTextFormat":2,"kind":6,"label":"•Xthal_inttype","score":1.2690916061401367,"sortText":"405d8e68Xthal_inttype","textEdit":{"newText":"Xthal_inttype","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n0 .. 8"},"filterText":"Xthal_mmu_asid_bits","insertText":"Xthal_mmu_asid_bits","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_asid_bits","score":1.2690916061401367,"sortText":"405d8e68Xthal_mmu_asid_bits","textEdit":{"newText":"Xthal_mmu_asid_bits","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_mmu_max_pte_page_size","insertText":"Xthal_mmu_max_pte_page_size","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_max_pte_page_size","score":1.2690916061401367,"sortText":"405d8e68Xthal_mmu_max_pte_page_size","textEdit":{"newText":"Xthal_mmu_max_pte_page_size","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nthe number of interrupt levels"},"filterText":"Xthal_num_intlevels","insertText":"Xthal_num_intlevels","insertTextFormat":2,"kind":6,"label":"•Xthal_num_intlevels","score":1.2690916061401367,"sortText":"405d8e68Xthal_num_intlevels","textEdit":{"newText":"Xthal_num_intlevels","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const char *const","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_release_name","insertText":"Xthal_release_name","insertTextFormat":2,"kind":6,"label":"•Xthal_release_name","score":1.2690916061401367,"sortText":"405d8e68Xthal_release_name","textEdit":{"newText":"Xthal_release_name","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nBitmask of interrupts configured for sync trampolining:"},"filterText":"Xthal_tram_sync","insertText":"Xthal_tram_sync","insertTextFormat":2,"kind":6,"label":"•Xthal_tram_sync","score":1.2690916061401367,"sortText":"405d8e68Xthal_tram_sync","textEdit":{"newText":"Xthal_tram_sync","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_xlmi_paddr","insertText":"Xthal_xlmi_paddr","insertTextFormat":2,"kind":6,"label":"•Xthal_xlmi_paddr","score":1.2690916061401367,"sortText":"405d8e68Xthal_xlmi_paddr","textEdit":{"newText":"Xthal_xlmi_paddr","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/portmacro.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/portmacro.h\"`  \nWhen coprocessors are defined, we to maintain a pointer to coprocessors area.  \nWe currently use a hack: redefine field xMPU_SETTINGS in TCB block as a structure that can hold:  \nMPU wrappers, coprocessor area pointer, trace code structure, and more if needed.  \nThe field is normally used for memory protection. FreeRTOS should create another general purpose field."},"filterText":"xMPU_SETTINGS","insertText":"xMPU_SETTINGS","insertTextFormat":2,"kind":8,"label":"•xMPU_SETTINGS","score":1.2690916061401367,"sortText":"405d8e68xMPU_SETTINGS","textEdit":{"newText":"xMPU_SETTINGS","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/portmacro.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"freertos/portmacro.h\"`  \nMulti-core: get current core ID"},"filterText":"xPortGetCoreID","insertText":"xPortGetCoreID()","insertTextFormat":2,"kind":3,"label":"•xPortGetCoreID()","score":1.2690916061401367,"sortText":"405d8e68xPortGetCoreID","textEdit":{"newText":"xPortGetCoreID()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Adds a queue or semaphore to a queue set that was previously created by a call to xQueueCreateSet().  \nSee FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this function.  \nNote 1: A receive (in the case of a queue) or take (in the case of a semaphore) operation must not be performed on a member of a queue set unless a call to xQueueSelectFromSet() has first returned a handle to that set member.  \n@param xQueueOrSemaphore The handle of the queue or semaphore being added to the queue set (cast to an QueueSetMemberHandle_t type).  \n@param xQueueSet The handle of the queue set to which the queue or semaphore is being added.  \n@return If the queue or semaphore was successfully added to the queue set then pdPASS is returned. If the queue could not be successfully added to the queue set because it is already a member of a different queue set then pdFAIL is returned."},"filterText":"xQueueAddToSet","insertText":"xQueueAddToSet(${1:QueueSetMemberHandle_t xQueueOrSemaphore}, ${2:QueueSetHandle_t xQueueSet})","insertTextFormat":2,"kind":3,"label":" xQueueAddToSet(QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet)","score":1.2690916061401367,"sortText":"405d8e68xQueueAddToSet","textEdit":{"newText":"xQueueAddToSet(${1:QueueSetMemberHandle_t xQueueOrSemaphore}, ${2:QueueSetHandle_t xQueueSet})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xQueueAltGenericReceive","insertText":"xQueueAltGenericReceive(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer}, ${3:TickType_t xTicksToWait}, ${4:BaseType_t xJustPeeking})","insertTextFormat":2,"kind":3,"label":" xQueueAltGenericReceive(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait, BaseType_t xJustPeeking)","score":1.2690916061401367,"sortText":"405d8e68xQueueAltGenericReceive","textEdit":{"newText":"xQueueAltGenericReceive(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer}, ${3:TickType_t xTicksToWait}, ${4:BaseType_t xJustPeeking})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"@cond  \nxQueueAltGenericSend() is an alternative version of xQueueGenericSend().  \nLikewise xQueueAltGenericReceive() is an alternative version of xQueueGenericReceive().  \nThe source code that implements the alternative (Alt) API is much simpler because it executes everything from within a critical section.  \nThis is the approach taken by many other RTOSes, but FreeRTOS.org has the preferred fully featured API too. The fully featured API has more complex code that takes longer to execute, but makes much less use of critical sections. Therefore the alternative API sacrifices interrupt responsiveness to gain execution speed, whereas the fully featured API sacrifices execution speed to ensure better interrupt responsiveness."},"filterText":"xQueueAltGenericSend","insertText":"xQueueAltGenericSend(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:TickType_t xTicksToWait}, ${4:BaseType_t xCopyPosition})","insertTextFormat":2,"kind":3,"label":" xQueueAltGenericSend(QueueHandle_t xQueue, const void *const pvItemToQueue, TickType_t xTicksToWait, BaseType_t xCopyPosition)","score":1.2690916061401367,"sortText":"405d8e68xQueueAltGenericSend","textEdit":{"newText":"xQueueAltGenericSend(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:TickType_t xTicksToWait}, ${4:BaseType_t xCopyPosition})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xQueueCRReceive","insertText":"xQueueCRReceive(${1:QueueHandle_t xQueue}, ${2:void *pvBuffer}, ${3:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xQueueCRReceive(QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait)","score":1.2690916061401367,"sortText":"405d8e68xQueueCRReceive","textEdit":{"newText":"xQueueCRReceive(${1:QueueHandle_t xQueue}, ${2:void *pvBuffer}, ${3:TickType_t xTicksToWait})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xQueueCRReceiveFromISR","insertText":"xQueueCRReceiveFromISR(${1:QueueHandle_t xQueue}, ${2:void *pvBuffer}, ${3:BaseType_t *pxTaskWoken})","insertTextFormat":2,"kind":3,"label":" xQueueCRReceiveFromISR(QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxTaskWoken)","score":1.2690916061401367,"sortText":"405d8e68xQueueCRReceiveFromISR","textEdit":{"newText":"xQueueCRReceiveFromISR(${1:QueueHandle_t xQueue}, ${2:void *pvBuffer}, ${3:BaseType_t *pxTaskWoken})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xQueueCRSend","insertText":"xQueueCRSend(${1:QueueHandle_t xQueue}, ${2:const void *pvItemToQueue}, ${3:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xQueueCRSend(QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait)","score":1.2690916061401367,"sortText":"405d8e68xQueueCRSend","textEdit":{"newText":"xQueueCRSend(${1:QueueHandle_t xQueue}, ${2:const void *pvItemToQueue}, ${3:TickType_t xTicksToWait})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"The functions defined above are for passing data to and from tasks. The functions below are the equivalents for passing data to and from co-routines.  \nThese functions are called from the co-routine macro implementation and should not be called directly from application code. Instead use the macro wrappers defined within croutine.h."},"filterText":"xQueueCRSendFromISR","insertText":"xQueueCRSendFromISR(${1:QueueHandle_t xQueue}, ${2:const void *pvItemToQueue}, ${3:BaseType_t xCoRoutinePreviouslyWoken})","insertTextFormat":2,"kind":3,"label":" xQueueCRSendFromISR(QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken)","score":1.2690916061401367,"sortText":"405d8e68xQueueCRSendFromISR","textEdit":{"newText":"xQueueCRSendFromISR(${1:QueueHandle_t xQueue}, ${2:const void *pvItemToQueue}, ${3:BaseType_t xCoRoutinePreviouslyWoken})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueHandle_t","filterText":"xQueueCreateCountingSemaphore","insertText":"xQueueCreateCountingSemaphore(${1:const UBaseType_t uxMaxCount}, ${2:const UBaseType_t uxInitialCount})","insertTextFormat":2,"kind":3,"label":" xQueueCreateCountingSemaphore(const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount)","score":1.2690916061401367,"sortText":"405d8e68xQueueCreateCountingSemaphore","textEdit":{"newText":"xQueueCreateCountingSemaphore(${1:const UBaseType_t uxMaxCount}, ${2:const UBaseType_t uxInitialCount})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueHandle_t","filterText":"xQueueCreateCountingSemaphoreStatic","insertText":"xQueueCreateCountingSemaphoreStatic(${1:const UBaseType_t uxMaxCount}, ${2:const UBaseType_t uxInitialCount}, ${3:StaticQueue_t *pxStaticQueue})","insertTextFormat":2,"kind":3,"label":" xQueueCreateCountingSemaphoreStatic(const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue)","score":1.2690916061401367,"sortText":"405d8e68xQueueCreateCountingSemaphoreStatic","textEdit":{"newText":"xQueueCreateCountingSemaphoreStatic(${1:const UBaseType_t uxMaxCount}, ${2:const UBaseType_t uxInitialCount}, ${3:StaticQueue_t *pxStaticQueue})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueHandle_t","documentation":{"kind":"markdown","value":"For internal use only. Use xSemaphoreCreateMutex(),  \nxSemaphoreCreateCounting() or xSemaphoreGetMutexHolder() instead of calling these functions directly."},"filterText":"xQueueCreateMutex","insertText":"xQueueCreateMutex(${1:const uint8_t ucQueueType})","insertTextFormat":2,"kind":3,"label":" xQueueCreateMutex(const uint8_t ucQueueType)","score":1.2690916061401367,"sortText":"405d8e68xQueueCreateMutex","textEdit":{"newText":"xQueueCreateMutex(${1:const uint8_t ucQueueType})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueHandle_t","filterText":"xQueueCreateMutexStatic","insertText":"xQueueCreateMutexStatic(${1:const uint8_t ucQueueType}, ${2:StaticQueue_t *pxStaticQueue})","insertTextFormat":2,"kind":3,"label":" xQueueCreateMutexStatic(const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue)","score":1.2690916061401367,"sortText":"405d8e68xQueueCreateMutexStatic","textEdit":{"newText":"xQueueCreateMutexStatic(${1:const uint8_t ucQueueType}, ${2:StaticQueue_t *pxStaticQueue})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueSetHandle_t","documentation":{"kind":"markdown","value":"Queue sets provide a mechanism to allow a task to block (pend) on a read operation from multiple queues or semaphores simultaneously.  \nSee FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this function.  \nA queue set must be explicitly created using a call to xQueueCreateSet() before it can be used. Once created, standard FreeRTOS queues and semaphores can be added to the set using calls to xQueueAddToSet().  \nxQueueSelectFromSet() is then used to determine which, if any, of the queues or semaphores contained in the set is in a state where a queue read or semaphore take operation would be successful.  \nNote 1: See the documentation on http://wwwFreeRTOS.org/RTOS-queue-sets.html for reasons why queue sets are very rarely needed in practice as there are simpler methods of blocking on multiple objects.  \nNote 2: Blocking on a queue set that contains a mutex will not cause the mutex holder to inherit the priority of the blocked task.  \nNote 3: An additional 4 bytes of RAM is required for each space in a every queue added to a queue set. Therefore counting semaphores that have a high maximum count value should not be added to a queue set.  \nNote 4: A receive (in the case of a queue) or take (in the case of a semaphore) operation must not be performed on a member of a queue set unless a call to xQueueSelectFromSet() has first returned a handle to that set member.  \n@param uxEventQueueLength Queue sets store events that occur on the queues and semaphores contained in the set. uxEventQueueLength specifies the maximum number of events that can be queued at once. To be absolutely certain that events are not lost uxEventQueueLength should be set to the total sum of the length of the queues added to the set, where binary semaphores and mutexes have a length of 1, and counting semaphores have a length set by their maximum count value. Examples:  \n\\+ If a queue set is to hold a queue of length 5, another queue of length 12,  \nand a binary semaphore, then uxEventQueueLength should be set to (5 + 12 + 1), or 18.  \n\\+ If a queue set is to hold three binary semaphores then uxEventQueueLength should be set to (1 + 1 + 1 ), or 3.  \n\\+ If a queue set is to hold a counting semaphore that has a maximum count of 5, and a counting semaphore that has a maximum count of 3, then uxEventQueueLength should be set to (5 + 3), or 8.  \n@return If the queue set is created successfully then a handle to the created queue set is returned. Otherwise NULL is returned."},"filterText":"xQueueCreateSet","insertText":"xQueueCreateSet(${1:const UBaseType_t uxEventQueueLength})","insertTextFormat":2,"kind":3,"label":" xQueueCreateSet(const UBaseType_t uxEventQueueLength)","score":1.2690916061401367,"sortText":"405d8e68xQueueCreateSet","textEdit":{"newText":"xQueueCreateSet(${1:const UBaseType_t uxEventQueueLength})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueHandle_t","filterText":"xQueueGenericCreate","insertText":"xQueueGenericCreate(${1:const UBaseType_t uxQueueLength}, ${2:const UBaseType_t uxItemSize}, ${3:const uint8_t ucQueueType})","insertTextFormat":2,"kind":3,"label":" xQueueGenericCreate(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType)","score":1.2690916061401367,"sortText":"405d8e68xQueueGenericCreate","textEdit":{"newText":"xQueueGenericCreate(${1:const UBaseType_t uxQueueLength}, ${2:const UBaseType_t uxItemSize}, ${3:const uint8_t ucQueueType})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueHandle_t","filterText":"xQueueGenericCreateStatic","insertText":"xQueueGenericCreateStatic(${1:const UBaseType_t uxQueueLength}, ${2:const UBaseType_t uxItemSize}, ${3:uint8_t *pucQueueStorage}, ${4:StaticQueue_t *pxStaticQueue}, ${5:const uint8_t ucQueueType})","insertTextFormat":2,"kind":3,"label":" xQueueGenericCreateStatic(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType)","score":1.2690916061401367,"sortText":"405d8e68xQueueGenericCreateStatic","textEdit":{"newText":"xQueueGenericCreateStatic(${1:const UBaseType_t uxQueueLength}, ${2:const UBaseType_t uxItemSize}, ${3:uint8_t *pucQueueStorage}, ${4:StaticQueue_t *pxStaticQueue}, ${5:const uint8_t ucQueueType})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xQueueGenericReset","insertText":"xQueueGenericReset(${1:QueueHandle_t xQueue}, ${2:BaseType_t xNewQueue})","insertTextFormat":2,"kind":3,"label":" xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue)","score":1.2690916061401367,"sortText":"405d8e68xQueueGenericReset","textEdit":{"newText":"xQueueGenericReset(${1:QueueHandle_t xQueue}, ${2:BaseType_t xNewQueue})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"@{  \nIt is preferred that the macros xQueueSendFromISR(),  \nxQueueSendToFrontFromISR() and xQueueSendToBackFromISR() be used in place of calling this function directly. xQueueGiveFromISR() is an equivalent for use by semaphores that don't actually copy any data.  \nPost an item on a queue. It is safe to use this function from within an interrupt service routine.  \nItems are queued by copy not reference so it is preferable to only queue small items, especially when called from an ISR. In most cases it would be preferable to store a pointer to the item being queued.  \n@param xQueue The handle to the queue on which the item is to be posted.  \n@param pvItemToQueue A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.  \n@param[out] pxHigherPriorityTaskWoken xQueueGenericSendFromISR() will set  \n\\*pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If xQueueGenericSendFromISR() sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.  \n@param xCopyPosition Can take the value queueSEND_TO_BACK to place the item at the back of the queue, or queueSEND_TO_FRONT to place the item at the front of the queue (for high priority messages).  \n@return pdTRUE if the data was successfully sent to the queue, otherwise errQUEUE_FULL.  \nExample usage for buffered IO (where the ISR can obtain more than one value per call):  \n@code{c} void vBufferISR( void ) { char cIn;  \nBaseType_t xHigherPriorityTaskWokenByPost;  \n// We have not woken a task at the start of the ISR.  \nxHigherPriorityTaskWokenByPost = pdFALSE;  \n// Loop until the buffer is empty.  \ndo { // Obtain a byte from the buffer.  \ncIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );  \n// Post each byte.  \nxQueueGenericSendFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWokenByPost, queueSEND_TO_BACK );  \n} while( portINPUT_BYTE( BUFFER_COUNT ) );  \n// Now the buffer is empty we can switch context if necessary. Note that the // name of the yield function required is port specific.  \nif( xHigherPriorityTaskWokenByPost ) { taskYIELD_YIELD_FROM_ISR();  \n} }  \n@endcode  \n\\\\ingroup QueueManagement"},"filterText":"xQueueGenericSendFromISR","insertText":"xQueueGenericSendFromISR(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:BaseType_t *const pxHigherPriorityTaskWoken}, ${4:const BaseType_t xCopyPosition})","insertTextFormat":2,"kind":3,"label":" xQueueGenericSendFromISR(QueueHandle_t xQueue, const void *const pvItemToQueue, BaseType_t *const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition)","score":1.2690916061401367,"sortText":"405d8e68xQueueGenericSendFromISR","textEdit":{"newText":"xQueueGenericSendFromISR(${1:QueueHandle_t xQueue}, ${2:const void *const pvItemToQueue}, ${3:BaseType_t *const pxHigherPriorityTaskWoken}, ${4:const BaseType_t xCopyPosition})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"void *","filterText":"xQueueGetMutexHolder","insertText":"xQueueGetMutexHolder(${1:QueueHandle_t xSemaphore})","insertTextFormat":2,"kind":3,"label":" xQueueGetMutexHolder(QueueHandle_t xSemaphore)","score":1.2690916061401367,"sortText":"405d8e68xQueueGetMutexHolder","textEdit":{"newText":"xQueueGetMutexHolder(${1:QueueHandle_t xSemaphore})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xQueueGiveFromISR","insertText":"xQueueGiveFromISR(${1:QueueHandle_t xQueue}, ${2:BaseType_t *const pxHigherPriorityTaskWoken})","insertTextFormat":2,"kind":3,"label":" xQueueGiveFromISR(QueueHandle_t xQueue, BaseType_t *const pxHigherPriorityTaskWoken)","score":1.2690916061401367,"sortText":"405d8e68xQueueGiveFromISR","textEdit":{"newText":"xQueueGiveFromISR(${1:QueueHandle_t xQueue}, ${2:BaseType_t *const pxHigherPriorityTaskWoken})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xQueueGiveMutexRecursive","insertText":"xQueueGiveMutexRecursive(${1:QueueHandle_t pxMutex})","insertTextFormat":2,"kind":3,"label":" xQueueGiveMutexRecursive(QueueHandle_t pxMutex)","score":1.2690916061401367,"sortText":"405d8e68xQueueGiveMutexRecursive","textEdit":{"newText":"xQueueGiveMutexRecursive(${1:QueueHandle_t pxMutex})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"@{  \nUtilities to query queues that are safe to use from an ISR. These utilities should be used only from witin an ISR, or within a critical section."},"filterText":"xQueueIsQueueEmptyFromISR","insertText":"xQueueIsQueueEmptyFromISR(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" xQueueIsQueueEmptyFromISR(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68xQueueIsQueueEmptyFromISR","textEdit":{"newText":"xQueueIsQueueEmptyFromISR(${1:const QueueHandle_t xQueue})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xQueueIsQueueFullFromISR","insertText":"xQueueIsQueueFullFromISR(${1:const QueueHandle_t xQueue})","insertTextFormat":2,"kind":3,"label":" xQueueIsQueueFullFromISR(const QueueHandle_t xQueue)","score":1.2690916061401367,"sortText":"405d8e68xQueueIsQueueFullFromISR","textEdit":{"newText":"xQueueIsQueueFullFromISR(${1:const QueueHandle_t xQueue})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"A version of xQueuePeek() that can be called from an interrupt service routine (ISR).  \nReceive an item from a queue without removing the item from the queue.  \nThe item is received by copy so a buffer of adequate size must be provided. The number of bytes copied into the buffer was defined when the queue was created.  \nSuccessfully received items remain on the queue so will be returned again by the next call, or a call to xQueueReceive().  \n@param xQueue The handle to the queue from which the item is to be received.  \n@param pvBuffer Pointer to the buffer into which the received item will be copied.  \n@return pdTRUE if an item was successfully received from the queue,  \notherwise pdFALSE.  \n\\\\ingroup QueueManagement"},"filterText":"xQueuePeekFromISR","insertText":"xQueuePeekFromISR(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer})","insertTextFormat":2,"kind":3,"label":" xQueuePeekFromISR(QueueHandle_t xQueue, void *const pvBuffer)","score":1.2690916061401367,"sortText":"405d8e68xQueuePeekFromISR","textEdit":{"newText":"xQueuePeekFromISR(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Receive an item from a queue. It is safe to use this function from within an interrupt service routine.  \n@param xQueue The handle to the queue from which the item is to be received.  \n@param pvBuffer Pointer to the buffer into which the received item will be copied.  \n@param[out] pxHigherPriorityTaskWoken A task may be blocked waiting for space to become available on the queue. If xQueueReceiveFromISR causes such a task to unblock \\*pxTaskWoken will get set to pdTRUE, otherwise \\*pxTaskWoken will remain unchanged.  \n@return pdTRUE if an item was successfully received from the queue,  \notherwise pdFALSE.  \nExample usage:  \n@code{c} QueueHandle_t xQueue;  \n// Function to create a queue and post some values.  \nvoid vAFunction( void \\*pvParameters ) { char cValueToPost;  \nconst TickType_t xTicksToWait = ( TickType_t )0xff;  \n// Create a queue capable of containing 10 characters.  \nxQueue = xQueueCreate( 10, sizeof( char ) );  \nif( xQueue == 0 ) { // Failed to create the queue.  \n}  \n// ...  \n// Post some characters that will be used within an ISR. If the queue // is full then this task will block for xTicksToWait ticks.  \ncValueToPost = 'a';  \nxQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );  \ncValueToPost = 'b';  \nxQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );  \n// ... keep posting characters ... this task may block when the queue // becomes full.  \ncValueToPost = 'c';  \nxQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );  \n}  \n// ISR that outputs all the characters received on the queue.  \nvoid vISR_Routine( void ) { BaseType_t xTaskWokenByReceive = pdFALSE;  \nchar cRxedChar;  \nwhile( xQueueReceiveFromISR( xQueue, ( void * ) &cRxedChar, &xTaskWokenByReceive) ) { // A character was received. Output the character now.  \nvOutputCharacter( cRxedChar );  \n// If removing the character from the queue woke the task that was // posting onto the queue cTaskWokenByReceive will have been set to // pdTRUE. No matter how many times this loop iterates only one // task will be woken.  \n}  \nif( cTaskWokenByPost != ( char ) pdFALSE;  \n{ taskYIELD ();  \n} }  \n@endcode  \n\\\\ingroup QueueManagement"},"filterText":"xQueueReceiveFromISR","insertText":"xQueueReceiveFromISR(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer}, ${3:BaseType_t *const pxHigherPriorityTaskWoken})","insertTextFormat":2,"kind":3,"label":" xQueueReceiveFromISR(QueueHandle_t xQueue, void *const pvBuffer, BaseType_t *const pxHigherPriorityTaskWoken)","score":1.2690916061401367,"sortText":"405d8e68xQueueReceiveFromISR","textEdit":{"newText":"xQueueReceiveFromISR(${1:QueueHandle_t xQueue}, ${2:void *const pvBuffer}, ${3:BaseType_t *const pxHigherPriorityTaskWoken})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Removes a queue or semaphore from a queue set. A queue or semaphore can only be removed from a set if the queue or semaphore is empty.  \nSee FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this function.  \n@param xQueueOrSemaphore The handle of the queue or semaphore being removed from the queue set (cast to an QueueSetMemberHandle_t type).  \n@param xQueueSet The handle of the queue set in which the queue or semaphore is included.  \n@return If the queue or semaphore was successfully removed from the queue set then pdPASS is returned. If the queue was not in the queue set, or the queue (or semaphore) was not empty, then pdFAIL is returned."},"filterText":"xQueueRemoveFromSet","insertText":"xQueueRemoveFromSet(${1:QueueSetMemberHandle_t xQueueOrSemaphore}, ${2:QueueSetHandle_t xQueueSet})","insertTextFormat":2,"kind":3,"label":" xQueueRemoveFromSet(QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet)","score":1.2690916061401367,"sortText":"405d8e68xQueueRemoveFromSet","textEdit":{"newText":"xQueueRemoveFromSet(${1:QueueSetMemberHandle_t xQueueOrSemaphore}, ${2:QueueSetHandle_t xQueueSet})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueSetMemberHandle_t","documentation":{"kind":"markdown","value":"xQueueSelectFromSet() selects from the members of a queue set a queue or semaphore that either contains data (in the case of a queue) or is available to take (in the case of a semaphore). xQueueSelectFromSet() effectively allows a task to block (pend) on a read operation on all the queues and semaphores in a queue set simultaneously.  \nSee FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this function.  \nNote 1: See the documentation on http://wwwFreeRTOS.org/RTOS-queue-sets.html for reasons why queue sets are very rarely needed in practice as there are simpler methods of blocking on multiple objects.  \nNote 2: Blocking on a queue set that contains a mutex will not cause the mutex holder to inherit the priority of the blocked task.  \nNote 3: A receive (in the case of a queue) or take (in the case of a semaphore) operation must not be performed on a member of a queue set unless a call to xQueueSelectFromSet() has first returned a handle to that set member.  \n@param xQueueSet The queue set on which the task will (potentially) block.  \n@param xTicksToWait The maximum time, in ticks, that the calling task will remain in the Blocked state (with other tasks executing) to wait for a member of the queue set to be ready for a successful queue read or semaphore take operation.  \n@return xQueueSelectFromSet() will return the handle of a queue (cast to a QueueSetMemberHandle_t type) contained in the queue set that contains data,  \nor the handle of a semaphore (cast to a QueueSetMemberHandle_t type) contained in the queue set that is available, or NULL if no such queue or semaphore exists before before the specified block time expires."},"filterText":"xQueueSelectFromSet","insertText":"xQueueSelectFromSet(${1:QueueSetHandle_t xQueueSet}, ${2:const TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xQueueSelectFromSet(QueueSetHandle_t xQueueSet, const TickType_t xTicksToWait)","score":1.2690916061401367,"sortText":"405d8e68xQueueSelectFromSet","textEdit":{"newText":"xQueueSelectFromSet(${1:QueueSetHandle_t xQueueSet}, ${2:const TickType_t xTicksToWait})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"QueueSetMemberHandle_t","documentation":{"kind":"markdown","value":"A version of xQueueSelectFromSet() that can be used from an ISR."},"filterText":"xQueueSelectFromSetFromISR","insertText":"xQueueSelectFromSetFromISR(${1:QueueSetHandle_t xQueueSet})","insertTextFormat":2,"kind":3,"label":" xQueueSelectFromSetFromISR(QueueSetHandle_t xQueueSet)","score":1.2690916061401367,"sortText":"405d8e68xQueueSelectFromSetFromISR","textEdit":{"newText":"xQueueSelectFromSetFromISR(${1:QueueSetHandle_t xQueueSet})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"For internal use only. Use xSemaphoreTakeMutexRecursive() or xSemaphoreGiveMutexRecursive() instead of calling these functions directly."},"filterText":"xQueueTakeMutexRecursive","insertText":"xQueueTakeMutexRecursive(${1:QueueHandle_t xMutex}, ${2:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xQueueTakeMutexRecursive(QueueHandle_t xMutex, TickType_t xTicksToWait)","score":1.2690916061401367,"sortText":"405d8e68xQueueTakeMutexRecursive","textEdit":{"newText":"xQueueTakeMutexRecursive(${1:QueueHandle_t xMutex}, ${2:TickType_t xTicksToWait})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_cache_coherence_optout","insertText":"xthal_cache_coherence_optout()","insertTextFormat":2,"kind":3,"label":"•xthal_cache_coherence_optout()","score":1.2690916061401367,"sortText":"405d8e68xthal_cache_coherence_optout","textEdit":{"newText":"xthal_cache_coherence_optout()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- MP Synchronization  \n\\----------------------------------------------------------------------"},"filterText":"xthal_compare_and_set","insertText":"xthal_compare_and_set(${1:int *addr}, ${2:int test_val}, ${3:int compare_val})","insertTextFormat":2,"kind":3,"label":"•xthal_compare_and_set(int *addr, int test_val, int compare_val)","score":1.2690916061401367,"sortText":"405d8e68xthal_compare_and_set","textEdit":{"newText":"xthal_compare_and_set(${1:int *addr}, ${2:int test_val}, ${3:int compare_val})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nwrite dirty data back"},"filterText":"xthal_dcache_all_writeback","insertText":"xthal_dcache_all_writeback()","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_all_writeback()","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_all_writeback","textEdit":{"newText":"xthal_dcache_all_writeback()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nget number of dcache ways enabled"},"filterText":"xthal_dcache_get_ways","insertText":"xthal_dcache_get_ways()","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_get_ways()","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_get_ways","textEdit":{"newText":"xthal_dcache_get_ways()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_dcache_line_unlock","insertText":"xthal_dcache_line_unlock(${1:void *addr})","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_line_unlock(void *addr)","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_line_unlock","textEdit":{"newText":"xthal_dcache_line_unlock(${1:void *addr})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_dcache_region_lock","insertText":"xthal_dcache_region_lock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_region_lock(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_region_lock","textEdit":{"newText":"xthal_dcache_region_lock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_dcache_region_unlock","insertText":"xthal_dcache_region_unlock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_region_unlock(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_dcache_region_unlock","textEdit":{"newText":"xthal_dcache_region_unlock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nroutine to get a string for the disassembled instruction"},"filterText":"xthal_disassemble","insertText":"xthal_disassemble(${1:unsigned char *instr_buf}, ${2:void *tgt_addr}, ${3:char *buffer}, ${4:unsigned int buflen}, ${5:unsigned int options})","insertTextFormat":2,"kind":3,"label":"•xthal_disassemble(unsigned char *instr_buf, void *tgt_addr, char *buffer, unsigned int buflen, unsigned int options)","score":1.2690916061401367,"sortText":"405d8e68xthal_disassemble","textEdit":{"newText":"xthal_disassemble(${1:unsigned char *instr_buf}, ${2:void *tgt_addr}, ${3:char *buffer}, ${4:unsigned int buflen}, ${5:unsigned int options})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nroutine to get the size of the next instruction. Returns 0 for illegal instruction"},"filterText":"xthal_disassemble_size","insertText":"xthal_disassemble_size(${1:unsigned char *instr_buf})","insertTextFormat":2,"kind":3,"label":"•xthal_disassemble_size(unsigned char *instr_buf)","score":1.2690916061401367,"sortText":"405d8e68xthal_disassemble_size","textEdit":{"newText":"xthal_disassemble_size(${1:unsigned char *instr_buf})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \ncache attribute register control (used by other HAL routines)"},"filterText":"xthal_get_cacheattr","insertText":"xthal_get_cacheattr()","insertTextFormat":2,"kind":3,"label":"•xthal_get_cacheattr()","score":1.2690916061401367,"sortText":"405d8e68xthal_get_cacheattr","textEdit":{"newText":"xthal_get_cacheattr()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nget CCOUNT register (if not present return 0)"},"filterText":"xthal_get_ccount","insertText":"xthal_get_ccount()","insertTextFormat":2,"kind":3,"label":"•xthal_get_ccount()","score":1.2690916061401367,"sortText":"405d8e68xthal_get_ccount","textEdit":{"newText":"xthal_get_ccount()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_get_icacheattr","insertText":"xthal_get_icacheattr()","insertTextFormat":2,"kind":3,"label":"•xthal_get_icacheattr()","score":1.2690916061401367,"sortText":"405d8e68xthal_get_icacheattr","textEdit":{"newText":"xthal_get_icacheattr()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nenable caches"},"filterText":"xthal_icache_enable","insertText":"xthal_icache_enable()","insertTextFormat":2,"kind":3,"label":"•xthal_icache_enable()","score":1.2690916061401367,"sortText":"405d8e68xthal_icache_enable","textEdit":{"newText":"xthal_icache_enable()","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \ninvalidate the caches"},"filterText":"xthal_icache_region_invalidate","insertText":"xthal_icache_region_invalidate(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_icache_region_invalidate(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_icache_region_invalidate","textEdit":{"newText":"xthal_icache_region_invalidate(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nprefetch and lock specified memory range into cache"},"filterText":"xthal_icache_region_lock","insertText":"xthal_icache_region_lock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_icache_region_lock(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_icache_region_lock","textEdit":{"newText":"xthal_icache_region_lock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_icache_region_unlock","insertText":"xthal_icache_region_unlock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_icache_region_unlock(void *addr, unsigned int size)","score":1.2690916061401367,"sortText":"405d8e68xthal_icache_region_unlock","textEdit":{"newText":"xthal_icache_region_unlock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nEnables/disables given set (mask) of interrupts; returns previous enabled-mask of all ints:"},"filterText":"xthal_int_enable","insertText":"xthal_int_enable(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_int_enable(unsigned int)","score":1.2690916061401367,"sortText":"405d8e68xthal_int_enable","textEdit":{"newText":"xthal_int_enable(${1:unsigned int})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_intlevel_to_vpri","insertText":"xthal_intlevel_to_vpri(${1:unsigned int intlevel})","insertTextFormat":2,"kind":3,"label":"•xthal_intlevel_to_vpri(unsigned int intlevel)","score":1.2690916061401367,"sortText":"405d8e68xthal_intlevel_to_vpri","textEdit":{"newText":"xthal_intlevel_to_vpri(${1:unsigned int intlevel})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_invalidate_region","insertText":"xthal_invalidate_region(${1:void *addr})","insertTextFormat":2,"kind":3,"label":"•xthal_invalidate_region(void *addr)","score":1.2690916061401367,"sortText":"405d8e68xthal_invalidate_region","textEdit":{"newText":"xthal_invalidate_region(${1:void *addr})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cp2","insertText":"xthal_restore_cp2(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cp2(void *base)","score":1.2690916061401367,"sortText":"405d8e68xthal_restore_cp2","textEdit":{"newText":"xthal_restore_cp2(${1:void *base})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cp5","insertText":"xthal_restore_cp5(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cp5(void *base)","score":1.2690916061401367,"sortText":"405d8e68xthal_restore_cp5","textEdit":{"newText":"xthal_restore_cp5(${1:void *base})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cpregs","insertText":"xthal_restore_cpregs(${1:void *base}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cpregs(void *base, int)","score":1.2690916061401367,"sortText":"405d8e68xthal_restore_cpregs","textEdit":{"newText":"xthal_restore_cpregs(${1:void *base}, ${2:int})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_extra","insertText":"xthal_restore_extra(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_extra(void *base)","score":1.2690916061401367,"sortText":"405d8e68xthal_restore_extra","textEdit":{"newText":"xthal_restore_extra(${1:void *base})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_save_cp1","insertText":"xthal_save_cp1(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_save_cp1(void *base)","score":1.2690916061401367,"sortText":"405d8e68xthal_save_cp1","textEdit":{"newText":"xthal_save_cp1(${1:void *base})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_save_cpregs","insertText":"xthal_save_cpregs(${1:void *base}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•xthal_save_cpregs(void *base, int)","score":1.2690916061401367,"sortText":"405d8e68xthal_save_cpregs","textEdit":{"newText":"xthal_save_cpregs(${1:void *base}, ${2:int})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_cache_prefetch","insertText":"xthal_set_cache_prefetch(${1:int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_cache_prefetch(int)","score":1.2690916061401367,"sortText":"405d8e68xthal_set_cache_prefetch","textEdit":{"newText":"xthal_set_cache_prefetch(${1:int})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_icacheattr","insertText":"xthal_set_icacheattr(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_icacheattr(unsigned int)","score":1.2690916061401367,"sortText":"405d8e68xthal_set_icacheattr","textEdit":{"newText":"xthal_set_icacheattr(${1:unsigned int})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nSet/get virtual priority of an interrupt:"},"filterText":"xthal_set_int_vpri","insertText":"xthal_set_int_vpri(${1:int intnum}, ${2:int vpri})","insertTextFormat":2,"kind":3,"label":"•xthal_set_int_vpri(int intnum, int vpri)","score":1.2690916061401367,"sortText":"405d8e68xthal_set_int_vpri","textEdit":{"newText":"xthal_set_int_vpri(${1:int intnum}, ${2:int vpri})","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}}}}]}}Content-Length: 1210

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'x'","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":80}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":81},"contentChanges":[{"range":{"start":{"line":164,"character":1},"end":{"line":164,"character":1}},"text":"T"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":164,"character":2},"context":{"triggerKind":3}},"id":185,"jsonrpc":"2.0"}
<<<
Content-Length: 85740

{"id":185,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"documentation":{"kind":"markdown","value":"Parameters required to create an MPU protected task."},"filterText":"xTASK_PARAMETERS","insertText":"xTASK_PARAMETERS","insertTextFormat":2,"kind":22,"label":" xTASK_PARAMETERS","score":1.5037370920181274,"sortText":"403f858bxTASK_PARAMETERS","textEdit":{"newText":"xTASK_PARAMETERS","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"documentation":{"kind":"markdown","value":"Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.  \nWe need this struct because TCB_t is defined (hidden) in tasks.c."},"filterText":"xTASK_SNAPSHOT","insertText":"xTASK_SNAPSHOT","insertTextFormat":2,"kind":22,"label":" xTASK_SNAPSHOT","score":1.5037370920181274,"sortText":"403f858bxTASK_SNAPSHOT","textEdit":{"newText":"xTASK_SNAPSHOT","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"documentation":{"kind":"markdown","value":"Used with the uxTaskGetSystemState() function to return the state of each task in the system."},"filterText":"xTASK_STATUS","insertText":"xTASK_STATUS","insertTextFormat":2,"kind":22,"label":" xTASK_STATUS","score":1.5037370920181274,"sortText":"403f858bxTASK_STATUS","textEdit":{"newText":"xTASK_STATUS","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"documentation":{"kind":"markdown","value":"@cond  \nUsed internally only."},"filterText":"xTIME_OUT","insertText":"xTIME_OUT","insertTextFormat":2,"kind":22,"label":" xTIME_OUT","score":1.5037370920181274,"sortText":"403f858bxTIME_OUT","textEdit":{"newText":"xTIME_OUT","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Calls the hook function associated with xTask. Passing xTask as NULL has the effect of calling the Running tasks (the calling task) hook function.  \n@param xTask Handle of the task to call the hook for.  \n@param pvParameter Parameter passed to the hook function for the task to interpret as it wants. The return value is the value returned by the task hook function registered by the user."},"filterText":"xTaskCallApplicationTaskHook","insertText":"xTaskCallApplicationTaskHook(${1:TaskHandle_t xTask}, ${2:void *pvParameter})","insertTextFormat":2,"kind":3,"label":" xTaskCallApplicationTaskHook(TaskHandle_t xTask, void *pvParameter)","score":1.5037370920181274,"sortText":"403f858bxTaskCallApplicationTaskHook","textEdit":{"newText":"xTaskCallApplicationTaskHook(${1:TaskHandle_t xTask}, ${2:void *pvParameter})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Compare the time status now with that previously captured to see if the timeout has expired."},"filterText":"xTaskCheckForTimeOut","insertText":"xTaskCheckForTimeOut(${1:TimeOut_t *const pxTimeOut}, ${2:TickType_t *const pxTicksToWait})","insertTextFormat":2,"kind":3,"label":" xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut, TickType_t *const pxTicksToWait)","score":1.5037370920181274,"sortText":"403f858bxTaskCheckForTimeOut","textEdit":{"newText":"xTaskCheckForTimeOut(${1:TimeOut_t *const pxTimeOut}, ${2:TickType_t *const pxTicksToWait})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskCreate","insertText":"xTaskCreate(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask})","insertTextFormat":2,"kind":3,"label":" xTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)","score":1.5037370920181274,"sortText":"403f858bxTaskCreate","textEdit":{"newText":"xTaskCreate(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskCreatePinnedToCore","insertText":"xTaskCreatePinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask}, ${7:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":" xTaskCreatePinnedToCore(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask, const BaseType_t xCoreID)","score":1.5037370920181274,"sortText":"403f858bxTaskCreatePinnedToCore","textEdit":{"newText":"xTaskCreatePinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask}, ${7:const BaseType_t xCoreID})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskCreateRestricted","insertText":"xTaskCreateRestricted(${1:const TaskParameters_t *const pxTaskDefinition}, ${2:TaskHandle_t *pxCreatedTask})","insertTextFormat":2,"kind":3,"label":" xTaskCreateRestricted(const TaskParameters_t *const pxTaskDefinition, TaskHandle_t *pxCreatedTask)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateRestricted","textEdit":{"newText":"xTaskCreateRestricted(${1:const TaskParameters_t *const pxTaskDefinition}, ${2:TaskHandle_t *pxCreatedTask})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","filterText":"xTaskCreateStatic","insertText":"xTaskCreateStatic(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer})","insertTextFormat":2,"kind":3,"label":" xTaskCreateStatic(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t ulStackDepth, void *const pvParameters, UBaseType_t uxPriority, StackType_t *const pxStackBuffer, StaticTask_t *const pxTaskBuffer)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateStatic","textEdit":{"newText":"xTaskCreateStatic(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","filterText":"xTaskCreateStaticPinnedToCore","insertText":"xTaskCreateStaticPinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer}, ${8:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":" xTaskCreateStaticPinnedToCore(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t ulStackDepth, void *const pvParameters, UBaseType_t uxPriority, StackType_t *const pxStackBuffer, StaticTask_t *const pxTaskBuffer, const BaseType_t xCoreID)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateStaticPinnedToCore","textEdit":{"newText":"xTaskCreateStaticPinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer}, ${8:const BaseType_t xCoreID})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"BaseType_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal.h\"`  \nif xCoreID < 0 or CPU is unicore, it will use xTaskCreate, else xTaskCreatePinnedToCore allows to easily handle all possible situations without repetitive code"},"filterText":"xTaskCreateUniversal","insertText":"xTaskCreateUniversal(${1:TaskFunction_t pxTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pxCreatedTask}, ${7:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":"•xTaskCreateUniversal(TaskFunction_t pxTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask, const BaseType_t xCoreID)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateUniversal","textEdit":{"newText":"xTaskCreateUniversal(${1:TaskFunction_t pxTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pxCreatedTask}, ${7:const BaseType_t xCoreID})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Get the current core affinity of a task"},"filterText":"xTaskGetAffinity","insertText":"xTaskGetAffinity(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" xTaskGetAffinity(TaskHandle_t xTask)","score":1.5037370920181274,"sortText":"403f858bxTaskGetAffinity","textEdit":{"newText":"xTaskGetAffinity(${1:TaskHandle_t xTask})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Return the handle of the calling task."},"filterText":"xTaskGetCurrentTaskHandle","insertText":"xTaskGetCurrentTaskHandle()","insertTextFormat":2,"kind":3,"label":" xTaskGetCurrentTaskHandle()","score":1.5037370920181274,"sortText":"403f858bxTaskGetCurrentTaskHandle","textEdit":{"newText":"xTaskGetCurrentTaskHandle()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Return the handle of the task running on a certain CPU. Because of the nature of SMP processing, there is no guarantee that this value will still be valid on return and should only be used for debugging purposes."},"filterText":"xTaskGetCurrentTaskHandleForCPU","insertText":"xTaskGetCurrentTaskHandleForCPU(${1:BaseType_t cpuid})","insertTextFormat":2,"kind":3,"label":" xTaskGetCurrentTaskHandleForCPU(BaseType_t cpuid)","score":1.5037370920181274,"sortText":"403f858bxTaskGetCurrentTaskHandleForCPU","textEdit":{"newText":"xTaskGetCurrentTaskHandleForCPU(${1:BaseType_t cpuid})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Get the handle of idle task for the current CPU.  \nxTaskGetIdleTaskHandle() is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.  \n@return The handle of the idle task. It is not valid to call xTaskGetIdleTaskHandle() before the scheduler has been started."},"filterText":"xTaskGetIdleTaskHandle","insertText":"xTaskGetIdleTaskHandle()","insertTextFormat":2,"kind":3,"label":" xTaskGetIdleTaskHandle()","score":1.5037370920181274,"sortText":"403f858bxTaskGetIdleTaskHandle","textEdit":{"newText":"xTaskGetIdleTaskHandle()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Get the handle of idle task for the given CPU.  \nxTaskGetIdleTaskHandleForCPU() is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.  \n@param cpuid The CPU to get the handle for  \n@return Idle task handle of a given cpu. It is not valid to call xTaskGetIdleTaskHandleForCPU() before the scheduler has been started."},"filterText":"xTaskGetIdleTaskHandleForCPU","insertText":"xTaskGetIdleTaskHandleForCPU(${1:UBaseType_t cpuid})","insertTextFormat":2,"kind":3,"label":" xTaskGetIdleTaskHandleForCPU(UBaseType_t cpuid)","score":1.5037370920181274,"sortText":"403f858bxTaskGetIdleTaskHandleForCPU","textEdit":{"newText":"xTaskGetIdleTaskHandleForCPU(${1:UBaseType_t cpuid})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Returns the scheduler state as taskSCHEDULER_RUNNING,  \ntaskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED."},"filterText":"xTaskGetSchedulerState","insertText":"xTaskGetSchedulerState()","insertTextFormat":2,"kind":3,"label":" xTaskGetSchedulerState()","score":1.5037370920181274,"sortText":"403f858bxTaskGetSchedulerState","textEdit":{"newText":"xTaskGetSchedulerState()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Get tick count  \n@return The count of ticks since vTaskStartScheduler was called.  \n\\\\ingroup TaskUtils"},"filterText":"xTaskGetTickCount","insertText":"xTaskGetTickCount()","insertTextFormat":2,"kind":3,"label":" xTaskGetTickCount()","score":1.5037370920181274,"sortText":"403f858bxTaskGetTickCount","textEdit":{"newText":"xTaskGetTickCount()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Get tick count from ISR  \n@return The count of ticks since vTaskStartScheduler was called.  \nThis is a version of xTaskGetTickCount() that is safe to be called from an ISR - provided that TickType_t is the natural word size of the microcontroller being used or interrupt nesting is either not supported or not being used.  \n\\\\ingroup TaskUtils"},"filterText":"xTaskGetTickCountFromISR","insertText":"xTaskGetTickCountFromISR()","insertTextFormat":2,"kind":3,"label":" xTaskGetTickCountFromISR()","score":1.5037370920181274,"sortText":"403f858bxTaskGetTickCountFromISR","textEdit":{"newText":"xTaskGetTickCountFromISR()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"\\----------------------------------------------------------- SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES  \n\\----------------------------------------------------------  \n@cond  \nTHIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE. IT IS ONLY INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.  \nCalled from the real time kernel tick (either preemptive or cooperative),  \nthis increments the tick count and checks if any tasks that are blocked for a finite period required removing from a blocked list and placing on a ready list. If a non-zero value is returned then a context switch is required because either:  \n\\+ A task was removed from a blocked list because its timeout had expired,  \nor + Time slicing is in use and there is a task of equal priority to the currently running task."},"filterText":"xTaskIncrementTick","insertText":"xTaskIncrementTick()","insertTextFormat":2,"kind":3,"label":" xTaskIncrementTick()","score":1.5037370920181274,"sortText":"403f858bxTaskIncrementTick","textEdit":{"newText":"xTaskIncrementTick()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Send task notification.  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param xTaskToNotify The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().  \n@param ulValue Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.  \n@param eAction Specifies how the notification updates the task's notification value, if at all. Valid values for eAction are as follows:  \n\\- eSetBits:  \nThe task's notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.  \n\\- eIncrement:  \nThe task's notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithOverwrite:  \nThe task's notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithoutOverwrite:  \nIf the task being notified did not already have a notification pending then the task's notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.  \n\\- eNoAction:  \nThe task receives a notification without its notification value being   updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n@return Dependent on the value of eAction. See the description of the eAction parameter.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotify","insertText":"xTaskNotify(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction})","insertTextFormat":2,"kind":3,"label":" xTaskNotify(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction)","score":1.5037370920181274,"sortText":"403f858bxTaskNotify","textEdit":{"newText":"xTaskNotify(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Send task notification from an ISR.  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nA version of xTaskNotify() that can be used from an interrupt service routine (ISR).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param xTaskToNotify The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().  \n@param ulValue Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.  \n@param eAction Specifies how the notification updates the task's notification value, if at all. Valid values for eAction are as follows:  \n\\- eSetBits:  \nThe task's notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.  \n\\- eIncrement:  \nThe task's notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithOverwrite:  \nThe task's notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithoutOverwrite:  \nIf the task being notified did not already have a notification pending then the task's notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.  \n\\- eNoAction:  \nThe task receives a notification without its notification value being updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n@param pxHigherPriorityTaskWoken xTaskNotifyFromISR() will set  \n\\*pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the task to which the notification was sent to leave the Blocked state, and the unblocked task has a priority higher than the currently running task. If xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should be requested before the interrupt is exited. How a context switch is requested from an ISR is dependent on the port - see the documentation page for the port in use.  \n@return Dependent on the value of eAction. See the description of the eAction parameter.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotifyFromISR","insertText":"xTaskNotifyFromISR(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","insertTextFormat":2,"kind":3,"label":" xTaskNotifyFromISR(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken)","score":1.5037370920181274,"sortText":"403f858bxTaskNotifyFromISR","textEdit":{"newText":"xTaskNotifyFromISR(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Wait for task notification  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value will be cleared in the calling task's notification value before the task checks to see if any notifications are pending, and optionally blocks if no notifications are pending. Setting ulBitsToClearOnEntry to ULONG_MAX (if limits.h is included) or 0xffffffffUL (if limits.h is not included) will have the effect of resetting the task's notification value to 0. Setting ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.  \n@param ulBitsToClearOnExit If a notification is pending or received before the calling task exits the xTaskNotifyWait() function then the task's notification value (see the xTaskNotify() API function) is passed out using the pulNotificationValue parameter. Then any bits that are set in ulBitsToClearOnExit will be cleared in the task's notification value (note  \n\\*pulNotificationValue is set before any bits are cleared). Setting ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL (if limits.h is not included) will have the effect of resetting the task's notification value to 0 before the function exits. Setting ulBitsToClearOnExit to 0 will leave the task's notification value unchanged when the function exits (in which case the value passed out in pulNotificationValue will match the task's notification value).  \n@param pulNotificationValue Used to pass the task's notification value out of the function. Note the value passed out will not be effected by the clearing of any bits caused by ulBitsToClearOnExit being non-zero.  \n@param xTicksToWait The maximum amount of time that the task should wait in the Blocked state for a notification to be received, should a notification not already be pending when xTaskNotifyWait() was called. The task will not consume any processing time while it is in the Blocked state. This is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time specified in milliseconds to a time specified in ticks.  \n@return If a notification was received (including notifications that were already pending when xTaskNotifyWait was called) then pdPASS is returned. Otherwise pdFAIL is returned.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotifyWait","insertText":"xTaskNotifyWait(${1:uint32_t ulBitsToClearOnEntry}, ${2:uint32_t ulBitsToClearOnExit}, ${3:uint32_t *pulNotificationValue}, ${4:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xTaskNotifyWait(uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait)","score":1.5037370920181274,"sortText":"403f858bxTaskNotifyWait","textEdit":{"newText":"xTaskNotifyWait(${1:uint32_t ulBitsToClearOnEntry}, ${2:uint32_t ulBitsToClearOnExit}, ${3:uint32_t *pulNotificationValue}, ${4:TickType_t xTicksToWait})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Set the priority of a task back to its proper priority in the case that it inherited a higher priority while it was holding a semaphore."},"filterText":"xTaskPriorityDisinherit","insertText":"xTaskPriorityDisinherit(${1:const TaskHandle_t pxMutexHolder})","insertTextFormat":2,"kind":3,"label":" xTaskPriorityDisinherit(const TaskHandle_t pxMutexHolder)","score":1.5037370920181274,"sortText":"403f858bxTaskPriorityDisinherit","textEdit":{"newText":"xTaskPriorityDisinherit(${1:const TaskHandle_t pxMutexHolder})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE. IT IS AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.  \nTHIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.  \nRemoves a task from both the specified event list and the list of blocked tasks, and places it on a ready queue.  \nxTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called if either an event occurs to unblock a task, or the block timeout period expires.  \nxTaskRemoveFromEventList() is used when the event list is in task priority order. It removes the list item from the head of the event list as that will have the highest priority owning task of all the tasks on the event list.  \nxTaskRemoveFromUnorderedEventList() is used when the event list is not ordered and the event list items hold something other than the owning tasks priority. In this case the event list item value is updated to the value passed in the xItemValue parameter.  \n@return pdTRUE if the task being removed has a higher priority than the task making the call, otherwise pdFALSE."},"filterText":"xTaskRemoveFromEventList","insertText":"xTaskRemoveFromEventList(${1:const List_t *const pxEventList})","insertTextFormat":2,"kind":3,"label":" xTaskRemoveFromEventList(const List_t *const pxEventList)","score":1.5037370920181274,"sortText":"403f858bxTaskRemoveFromEventList","textEdit":{"newText":"xTaskRemoveFromEventList(${1:const List_t *const pxEventList})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskRemoveFromUnorderedEventList","insertText":"xTaskRemoveFromUnorderedEventList(${1:ListItem_t *pxEventListItem}, ${2:const TickType_t xItemValue})","insertTextFormat":2,"kind":3,"label":" xTaskRemoveFromUnorderedEventList(ListItem_t *pxEventListItem, const TickType_t xItemValue)","score":1.5037370920181274,"sortText":"403f858bxTaskRemoveFromUnorderedEventList","textEdit":{"newText":"xTaskRemoveFromUnorderedEventList(${1:ListItem_t *pxEventListItem}, ${2:const TickType_t xItemValue})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Resumes scheduler activity after it was suspended by a call to vTaskSuspendAll().  \nxTaskResumeAll() only resumes the scheduler. It does not unsuspend tasks that were previously suspended by a call to vTaskSuspend().  \n@return If resuming the scheduler caused a context switch then pdTRUE is returned, otherwise pdFALSE is returned.  \nExample usage:  \n@code{c} void vTask1( void * pvParameters ) { for( ;; ) { // Task code goes here.  \n// ...  \n// At some point the task wants to perform a long operation during // which it does not want to get swapped out. It cannot use // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the // operation may cause interrupts to be missed - including the // ticks.  \n// Prevent the real time kernel swapping out the task.  \nvTaskSuspendAll ();  \n// Perform the operation here. There is no need to use critical // sections as we have all the microcontroller processing time.  \n// During this time interrupts will still operate and the real // time kernel tick count will be maintained.  \n// ...  \n// The operation is complete. Restart the kernel. We want to force // a context switch - but there is no point if resuming the scheduler // caused a context switch already.  \nif( !xTaskResumeAll () ) { taskYIELD ();  \n} } }  \n@endcode  \n\\\\ingroup SchedulerControl"},"filterText":"xTaskResumeAll","insertText":"xTaskResumeAll()","insertTextFormat":2,"kind":3,"label":" xTaskResumeAll()","score":1.5037370920181274,"sortText":"403f858bxTaskResumeAll","textEdit":{"newText":"xTaskResumeAll()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"An implementation of vTaskResume() that can be called from within an ISR.  \nINCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be available. See the configuration section for more information.  \nA task that has been suspended by one or more calls to vTaskSuspend () will be made available for running again by a single call to xTaskResumeFromISR ().  \nxTaskResumeFromISR() should not be used to synchronise a task with an interrupt if there is a chance that the interrupt could arrive prior to the task being suspended - as this can lead to interrupts being missed. Use of a semaphore as a synchronisation mechanism would avoid this eventuality.  \n@param xTaskToResume Handle to the task being readied.  \n@return pdTRUE if resuming the task should result in a context switch,  \notherwise pdFALSE. This is used by the ISR to determine if a context switch may be required following the ISR.  \n\\\\ingroup TaskCtrl"},"filterText":"xTaskResumeFromISR","insertText":"xTaskResumeFromISR(${1:TaskHandle_t xTaskToResume})","insertTextFormat":2,"kind":3,"label":" xTaskResumeFromISR(TaskHandle_t xTaskToResume)","score":1.5037370920181274,"sortText":"403f858bxTaskResumeFromISR","textEdit":{"newText":"xTaskResumeFromISR(${1:TaskHandle_t xTaskToResume})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TimerHandle_t","filterText":"xTimerCreate","insertText":"xTimerCreate(${1:const char *const pcTimerName}, ${2:const TickType_t xTimerPeriodInTicks}, ${3:const UBaseType_t uxAutoReload}, ${4:void *const pvTimerID}, ${5:TimerCallbackFunction_t pxCallbackFunction})","insertTextFormat":2,"kind":3,"label":" xTimerCreate(const char *const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void *const pvTimerID, TimerCallbackFunction_t pxCallbackFunction)","score":1.1826096773147583,"sortText":"4068a03fxTimerCreate","textEdit":{"newText":"xTimerCreate(${1:const char *const pcTimerName}, ${2:const TickType_t xTimerPeriodInTicks}, ${3:const UBaseType_t uxAutoReload}, ${4:void *const pvTimerID}, ${5:TimerCallbackFunction_t pxCallbackFunction})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TimerHandle_t","filterText":"xTimerCreateStatic","insertText":"xTimerCreateStatic(${1:const char *const pcTimerName}, ${2:const TickType_t xTimerPeriodInTicks}, ${3:const UBaseType_t uxAutoReload}, ${4:void *const pvTimerID}, ${5:TimerCallbackFunction_t pxCallbackFunction}, ${6:StaticTimer_t *pxTimerBuffer})","insertTextFormat":2,"kind":3,"label":" xTimerCreateStatic(const char *const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void *const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, StaticTimer_t *pxTimerBuffer)","score":1.1826096773147583,"sortText":"4068a03fxTimerCreateStatic","textEdit":{"newText":"xTimerCreateStatic(${1:const char *const pcTimerName}, ${2:const TickType_t xTimerPeriodInTicks}, ${3:const UBaseType_t uxAutoReload}, ${4:void *const pvTimerID}, ${5:TimerCallbackFunction_t pxCallbackFunction}, ${6:StaticTimer_t *pxTimerBuffer})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"@cond  \nFunctions beyond this part are not part of the public API and are intended for use by the kernel only."},"filterText":"xTimerCreateTimerTask","insertText":"xTimerCreateTimerTask()","insertTextFormat":2,"kind":3,"label":" xTimerCreateTimerTask()","score":1.1826096773147583,"sortText":"4068a03fxTimerCreateTimerTask","textEdit":{"newText":"xTimerCreateTimerTask()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTimerGenericCommand","insertText":"xTimerGenericCommand(${1:TimerHandle_t xTimer}, ${2:const BaseType_t xCommandID}, ${3:const TickType_t xOptionalValue}, ${4:BaseType_t *const pxHigherPriorityTaskWoken}, ${5:const TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t *const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait)","score":1.1826096773147583,"sortText":"4068a03fxTimerGenericCommand","textEdit":{"newText":"xTimerGenericCommand(${1:TimerHandle_t xTimer}, ${2:const BaseType_t xCommandID}, ${3:const TickType_t xOptionalValue}, ${4:BaseType_t *const pxHigherPriorityTaskWoken}, ${5:const TickType_t xTicksToWait})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Returns the time in ticks at which the timer will expire. If this is less than the current tick count then the expiry time has overflowed from the current time.  \n@param xTimer The handle of the timer being queried.  \n@return If the timer is running then the time in ticks at which the timer will next expire is returned. If the timer is not running then the return value is undefined."},"filterText":"xTimerGetExpiryTime","insertText":"xTimerGetExpiryTime(${1:TimerHandle_t xTimer})","insertTextFormat":2,"kind":3,"label":" xTimerGetExpiryTime(TimerHandle_t xTimer)","score":1.1826096773147583,"sortText":"4068a03fxTimerGetExpiryTime","textEdit":{"newText":"xTimerGetExpiryTime(${1:TimerHandle_t xTimer})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Returns the period of a timer.  \n@param xTimer The handle of the timer being queried.  \n@return The period of the timer in ticks."},"filterText":"xTimerGetPeriod","insertText":"xTimerGetPeriod(${1:TimerHandle_t xTimer})","insertTextFormat":2,"kind":3,"label":" xTimerGetPeriod(TimerHandle_t xTimer)","score":1.1826096773147583,"sortText":"4068a03fxTimerGetPeriod","textEdit":{"newText":"xTimerGetPeriod(${1:TimerHandle_t xTimer})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"xTimerGetTimerDaemonTaskHandle() is only available if INCLUDE_xTimerGetTimerDaemonTaskHandle is set to 1 in FreeRTOSConfig.h.  \nSimply returns the handle of the timer service/daemon task. It it not valid to call xTimerGetTimerDaemonTaskHandle() before the scheduler has been started."},"filterText":"xTimerGetTimerDaemonTaskHandle","insertText":"xTimerGetTimerDaemonTaskHandle()","insertTextFormat":2,"kind":3,"label":" xTimerGetTimerDaemonTaskHandle()","score":1.1826096773147583,"sortText":"4068a03fxTimerGetTimerDaemonTaskHandle","textEdit":{"newText":"xTimerGetTimerDaemonTaskHandle()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Queries a timer to see if it is active or dormant.  \nA timer will be dormant if:  \n1\\) It has been created but not started, or  \n2\\) It is an expired one-shot timer that has not been restarted.  \nTimers are created in the dormant state. The xTimerStart(), xTimerReset(),  \nxTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the active state.  \n@param xTimer The timer being queried.  \n@return pdFALSE will be returned if the timer is dormant. A value other than pdFALSE will be returned if the timer is active.  \nExample usage:  \n@code{c} // This function assumes xTimer has already been created.  \nvoid vAFunction( TimerHandle_t xTimer ) { if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently \"if( xTimerIsTimerActive( xTimer ) )\" { // xTimer is active, do something.  \n} else { // xTimer is not active, do something else.  \n} }  \n@endcode"},"filterText":"xTimerIsTimerActive","insertText":"xTimerIsTimerActive(${1:TimerHandle_t xTimer})","insertTextFormat":2,"kind":3,"label":" xTimerIsTimerActive(TimerHandle_t xTimer)","score":1.1826096773147583,"sortText":"4068a03fxTimerIsTimerActive","textEdit":{"newText":"xTimerIsTimerActive(${1:TimerHandle_t xTimer})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Used to defer the execution of a function to the RTOS daemon task (the timer service task, hence this function is implemented in timers.c and is prefixed with 'Timer').  \n@param xFunctionToPend The function to execute from the timer service/ daemon task. The function must conform to the PendedFunction_t prototype.  \n@param pvParameter1 The value of the callback function's first parameter.  \nThe parameter has a void * type to allow it to be used to pass any type.  \nFor example, unsigned longs can be cast to a void \\*, or the void * can be used to point to a structure.  \n@param ulParameter2 The value of the callback function's second parameter.  \n@param xTicksToWait Calling this function will result in a message being sent to the timer daemon task on a queue. xTicksToWait is the amount of time the calling task should remain in the Blocked state (so not using any processing time) for space to become available on the timer queue if the queue is found to be full.  \n@return pdPASS is returned if the message was successfully sent to the timer daemon task, otherwise pdFALSE is returned."},"filterText":"xTimerPendFunctionCall","insertText":"xTimerPendFunctionCall(${1:PendedFunction_t xFunctionToPend}, ${2:void *pvParameter1}, ${3:uint32_t ulParameter2}, ${4:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xTimerPendFunctionCall(PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait)","score":1.1826096773147583,"sortText":"4068a03fxTimerPendFunctionCall","textEdit":{"newText":"xTimerPendFunctionCall(${1:PendedFunction_t xFunctionToPend}, ${2:void *pvParameter1}, ${3:uint32_t ulParameter2}, ${4:TickType_t xTicksToWait})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Used from application interrupt service routines to defer the execution of a function to the RTOS daemon task (the timer service task, hence this function is implemented in timers.c and is prefixed with 'Timer').  \nIdeally an interrupt service routine (ISR) is kept as short as possible, but sometimes an ISR either has a lot of processing to do, or needs to perform processing that is not deterministic. In these cases xTimerPendFunctionCallFromISR() can be used to defer processing of a function to the RTOS daemon task.  \nA mechanism is provided that allows the interrupt to return directly to the task that will subsequently execute the pended callback function. This allows the callback function to execute contiguously in time with the interrupt - just as if the callback had executed in the interrupt itself.  \n@param xFunctionToPend The function to execute from the timer service/ daemon task. The function must conform to the PendedFunction_t prototype.  \n@param pvParameter1 The value of the callback function's first parameter.  \nThe parameter has a void * type to allow it to be used to pass any type.  \nFor example, unsigned longs can be cast to a void \\*, or the void * can be used to point to a structure.  \n@param ulParameter2 The value of the callback function's second parameter.  \n@param pxHigherPriorityTaskWoken As mentioned above, calling this function will result in a message being sent to the timer daemon task. If the priority of the timer daemon task (which is set using configTIMER_TASK_PRIORITY in FreeRTOSConfig.h) is higher than the priority of the currently running task (the task the interrupt interrupted) then  \n\\*pxHigherPriorityTaskWoken will be set to pdTRUE within xTimerPendFunctionCallFromISR(), indicating that a context switch should be requested before the interrupt exits. For that reason  \n\\*pxHigherPriorityTaskWoken must be initialised to pdFALSE. See the example code below.  \n@return pdPASS is returned if the message was successfully sent to the timer daemon task, otherwise pdFALSE is returned.  \nExample usage:  \n@code{c}  \n// The callback function that will execute in the context of the daemon task.  \n// Note callback functions must all use this same prototype.  \nvoid vProcessInterface( void \\*pvParameter1, uint32_t ulParameter2 ) { BaseType_t xInterfaceToService;  \n// The interface that requires servicing is passed in the second // parameter. The first parameter is not used in this case.  \nxInterfaceToService = ( BaseType_t ) ulParameter2;  \n// ...Perform the processing here...  \n}  \n// An ISR that receives data packets from multiple interfaces void vAnISR( void ) { BaseType_t xInterfaceToService, xHigherPriorityTaskWoken;  \n// Query the hardware to determine which interface needs processing.  \nxInterfaceToService = prvCheckInterfaces();  \n// The actual processing is to be deferred to a task. Request the // vProcessInterface() callback function is executed, passing in the // number of the interface that needs processing. The interface to // service is passed in the second parameter. The first parameter is // not used in this case.  \nxHigherPriorityTaskWoken = pdFALSE;  \nxTimerPendFunctionCallFromISR( vProcessInterface, NULL, ( uint32_t ) xInterfaceToService, &xHigherPriorityTaskWoken );  \n// If xHigherPriorityTaskWoken is now set to pdTRUE then a context // switch should be requested. The macro used is port specific and will // be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to // the documentation page for the port being used.  \nportYIELD_FROM_ISR( xHigherPriorityTaskWoken );  \n}  \n@endcode"},"filterText":"xTimerPendFunctionCallFromISR","insertText":"xTimerPendFunctionCallFromISR(${1:PendedFunction_t xFunctionToPend}, ${2:void *pvParameter1}, ${3:uint32_t ulParameter2}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","insertTextFormat":2,"kind":3,"label":" xTimerPendFunctionCallFromISR(PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken)","score":1.1826096773147583,"sortText":"4068a03fxTimerPendFunctionCallFromISR","textEdit":{"newText":"xTimerPendFunctionCallFromISR(${1:PendedFunction_t xFunctionToPend}, ${2:void *pvParameter1}, ${3:uint32_t ulParameter2}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_rtos.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_rtos.h\"`"},"filterText":"XT_INTEXC_HOOK","insertText":"XT_INTEXC_HOOK","insertTextFormat":2,"kind":8,"label":"•XT_INTEXC_HOOK","score":1.1826096773147583,"sortText":"407b8c37XT_INTEXC_HOOK","textEdit":{"newText":"XT_INTEXC_HOOK","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_all_extra_size","insertText":"Xthal_all_extra_size","insertTextFormat":2,"kind":6,"label":"•Xthal_all_extra_size","score":1.2690917253494263,"sortText":"408c559bXthal_all_extra_size","textEdit":{"newText":"Xthal_all_extra_size","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_build_unique_id","insertText":"Xthal_build_unique_id","insertTextFormat":2,"kind":6,"label":"•Xthal_build_unique_id","score":1.2690917253494263,"sortText":"408c559bXthal_build_unique_id","textEdit":{"newText":"Xthal_build_unique_id","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nindex of highest allowed coprocessor number, per cfg, plus one  \nextern const unsigned char Xthal_cp_maxcfg;  \nbitmask of which coprocessors are present"},"filterText":"Xthal_cp_mask","insertText":"Xthal_cp_mask","insertTextFormat":2,"kind":6,"label":"•Xthal_cp_mask","score":1.2690917253494263,"sortText":"408c559bXthal_cp_mask","textEdit":{"newText":"Xthal_cp_mask","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nindex of highest numbered coprocessor, plus one"},"filterText":"Xthal_cp_max","insertText":"Xthal_cp_max","insertTextFormat":2,"kind":6,"label":"•Xthal_cp_max","score":1.2690917253494263,"sortText":"408c559bXthal_cp_max","textEdit":{"newText":"Xthal_cp_max","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int [8]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_cpregs_align","insertText":"Xthal_cpregs_align","insertTextFormat":2,"kind":6,"label":"•Xthal_cpregs_align","score":1.2690917253494263,"sortText":"408c559bXthal_cpregs_align","textEdit":{"newText":"Xthal_cpregs_align","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dataram_size","insertText":"Xthal_dataram_size","insertTextFormat":2,"kind":6,"label":"•Xthal_dataram_size","score":1.2690917253494263,"sortText":"408c559bXthal_dataram_size","textEdit":{"newText":"Xthal_dataram_size","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dcache_linewidth","insertText":"Xthal_dcache_linewidth","insertTextFormat":2,"kind":6,"label":"•Xthal_dcache_linewidth","score":1.2690917253494263,"sortText":"408c559bXthal_dcache_linewidth","textEdit":{"newText":"Xthal_dcache_linewidth","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_dcache_size","insertText":"Xthal_dcache_size","insertTextFormat":2,"kind":6,"label":"•Xthal_dcache_size","score":1.2690917253494263,"sortText":"408c559bXthal_dcache_size","textEdit":{"newText":"Xthal_dcache_size","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_extra_align","insertText":"Xthal_extra_align","insertTextFormat":2,"kind":6,"label":"•Xthal_extra_align","score":1.2690917253494263,"sortText":"408c559bXthal_extra_align","textEdit":{"newText":"Xthal_extra_align","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_booleans","insertText":"Xthal_have_booleans","insertTextFormat":2,"kind":6,"label":"•Xthal_have_booleans","score":1.2690917253494263,"sortText":"408c559bXthal_have_booleans","textEdit":{"newText":"Xthal_have_booleans","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nset if CCOUNT register present"},"filterText":"Xthal_have_ccount","insertText":"Xthal_have_ccount","insertTextFormat":2,"kind":6,"label":"•Xthal_have_ccount","score":1.2690917253494263,"sortText":"408c559bXthal_have_ccount","textEdit":{"newText":"Xthal_have_ccount","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_mimic_cacheattr","insertText":"Xthal_have_mimic_cacheattr","insertTextFormat":2,"kind":6,"label":"•Xthal_have_mimic_cacheattr","score":1.2690917253494263,"sortText":"408c559bXthal_have_mimic_cacheattr","textEdit":{"newText":"Xthal_have_mimic_cacheattr","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_mul16","insertText":"Xthal_have_mul16","insertTextFormat":2,"kind":6,"label":"•Xthal_have_mul16","score":1.2690917253494263,"sortText":"408c559bXthal_have_mul16","textEdit":{"newText":"Xthal_have_mul16","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_nmi","insertText":"Xthal_have_nmi","insertTextFormat":2,"kind":6,"label":"•Xthal_have_nmi","score":1.2690917253494263,"sortText":"408c559bXthal_have_nmi","textEdit":{"newText":"Xthal_have_nmi","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_nsa","insertText":"Xthal_have_nsa","insertTextFormat":2,"kind":6,"label":"•Xthal_have_nsa","score":1.2690917253494263,"sortText":"408c559bXthal_have_nsa","textEdit":{"newText":"Xthal_have_nsa","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- Memory Management Unit  \n\\----------------------------------------------------------------------"},"filterText":"Xthal_have_spanning_way","insertText":"Xthal_have_spanning_way","insertTextFormat":2,"kind":6,"label":"•Xthal_have_spanning_way","score":1.2690917253494263,"sortText":"408c559bXthal_have_spanning_way","textEdit":{"newText":"Xthal_have_spanning_way","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_have_windowed","insertText":"Xthal_have_windowed","insertTextFormat":2,"kind":6,"label":"•Xthal_have_windowed","score":1.2690917253494263,"sortText":"408c559bXthal_have_windowed","textEdit":{"newText":"Xthal_have_windowed","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nsize of the cache lines in log2(bytes)"},"filterText":"Xthal_icache_linewidth","insertText":"Xthal_icache_linewidth","insertTextFormat":2,"kind":6,"label":"•Xthal_icache_linewidth","score":1.2690917253494263,"sortText":"408c559bXthal_icache_linewidth","textEdit":{"newText":"Xthal_icache_linewidth","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_instrom_size","insertText":"Xthal_instrom_size","insertTextFormat":2,"kind":6,"label":"•Xthal_instrom_size","score":1.2690917253494263,"sortText":"408c559bXthal_instrom_size","textEdit":{"newText":"Xthal_instrom_size","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int [16]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nmask for level of interrupts"},"filterText":"Xthal_intlevel_mask","insertText":"Xthal_intlevel_mask","insertTextFormat":2,"kind":6,"label":"•Xthal_intlevel_mask","score":1.2690917253494263,"sortText":"408c559bXthal_intlevel_mask","textEdit":{"newText":"Xthal_intlevel_mask","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char [32]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \ntype per interrupt"},"filterText":"Xthal_inttype","insertText":"Xthal_inttype","insertTextFormat":2,"kind":6,"label":"•Xthal_inttype","score":1.2690917253494263,"sortText":"408c559bXthal_inttype","textEdit":{"newText":"Xthal_inttype","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n0 .. 8"},"filterText":"Xthal_mmu_asid_bits","insertText":"Xthal_mmu_asid_bits","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_asid_bits","score":1.2690917253494263,"sortText":"408c559bXthal_mmu_asid_bits","textEdit":{"newText":"Xthal_mmu_asid_bits","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_mmu_max_pte_page_size","insertText":"Xthal_mmu_max_pte_page_size","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_max_pte_page_size","score":1.2690917253494263,"sortText":"408c559bXthal_mmu_max_pte_page_size","textEdit":{"newText":"Xthal_mmu_max_pte_page_size","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_mmu_min_pte_page_size","insertText":"Xthal_mmu_min_pte_page_size","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_min_pte_page_size","score":1.2690917253494263,"sortText":"408c559bXthal_mmu_min_pte_page_size","textEdit":{"newText":"Xthal_mmu_min_pte_page_size","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_mmu_sr_bits","insertText":"Xthal_mmu_sr_bits","insertTextFormat":2,"kind":6,"label":"•Xthal_mmu_sr_bits","score":1.2690917253494263,"sortText":"408c559bXthal_mmu_sr_bits","textEdit":{"newText":"Xthal_mmu_sr_bits","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nnumber of CCOMPAREn registers"},"filterText":"Xthal_num_ccompare","insertText":"Xthal_num_ccompare","insertTextFormat":2,"kind":6,"label":"•Xthal_num_ccompare","score":1.2690917253494263,"sortText":"408c559bXthal_num_ccompare","textEdit":{"newText":"Xthal_num_ccompare","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nthe number of TIE coprocessors contiguous from zero (for Tor2)"},"filterText":"Xthal_num_coprocessors","insertText":"Xthal_num_coprocessors","insertTextFormat":2,"kind":6,"label":"•Xthal_num_coprocessors","score":1.2690917253494263,"sortText":"408c559bXthal_num_coprocessors","textEdit":{"newText":"Xthal_num_coprocessors","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- Internal Memories  \n\\----------------------------------------------------------------------"},"filterText":"Xthal_num_instrom","insertText":"Xthal_num_instrom","insertTextFormat":2,"kind":6,"label":"•Xthal_num_instrom","score":1.2690917253494263,"sortText":"408c559bXthal_num_instrom","textEdit":{"newText":"Xthal_num_instrom","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned char","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nthe number of interrupt levels"},"filterText":"Xthal_num_intlevels","insertText":"Xthal_num_intlevels","insertTextFormat":2,"kind":6,"label":"•Xthal_num_intlevels","score":1.2690917253494263,"sortText":"408c559bXthal_num_intlevels","textEdit":{"newText":"Xthal_num_intlevels","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const int [4]","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \ninterrupt numbers assigned to each timer interrupt"},"filterText":"Xthal_timer_interrupt","insertText":"Xthal_timer_interrupt","insertTextFormat":2,"kind":6,"label":"•Xthal_timer_interrupt","score":1.2690917253494263,"sortText":"408c559bXthal_timer_interrupt","textEdit":{"newText":"Xthal_timer_interrupt","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nBitmask of interrupts configured for sync trampolining:"},"filterText":"Xthal_tram_sync","insertText":"Xthal_tram_sync","insertTextFormat":2,"kind":6,"label":"•Xthal_tram_sync","score":1.2690917253494263,"sortText":"408c559bXthal_tram_sync","textEdit":{"newText":"Xthal_tram_sync","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int []","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_xlmi_vaddr","insertText":"Xthal_xlmi_vaddr","insertTextFormat":2,"kind":6,"label":"•Xthal_xlmi_vaddr","score":1.2690917253494263,"sortText":"408c559bXthal_xlmi_vaddr","textEdit":{"newText":"Xthal_xlmi_vaddr","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \n\\---------------------------------------------------------------------- MP Synchronization  \n\\----------------------------------------------------------------------"},"filterText":"xthal_compare_and_set","insertText":"xthal_compare_and_set(${1:int *addr}, ${2:int test_val}, ${3:int compare_val})","insertTextFormat":2,"kind":3,"label":"•xthal_compare_and_set(int *addr, int test_val, int compare_val)","score":1.2690917253494263,"sortText":"408c559bxthal_compare_and_set","textEdit":{"newText":"xthal_compare_and_set(${1:int *addr}, ${2:int test_val}, ${3:int compare_val})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_dcache_region_lock","insertText":"xthal_dcache_region_lock(${1:void *addr}, ${2:unsigned int size})","insertTextFormat":2,"kind":3,"label":"•xthal_dcache_region_lock(void *addr, unsigned int size)","score":1.2690917253494263,"sortText":"408c559bxthal_dcache_region_lock","textEdit":{"newText":"xthal_dcache_region_lock(${1:void *addr}, ${2:unsigned int size})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nroutine to get the size of the next instruction. Returns 0 for illegal instruction"},"filterText":"xthal_disassemble_size","insertText":"xthal_disassemble_size(${1:unsigned char *instr_buf})","insertTextFormat":2,"kind":3,"label":"•xthal_disassemble_size(unsigned char *instr_buf)","score":1.2690917253494263,"sortText":"408c559bxthal_disassemble_size","textEdit":{"newText":"xthal_disassemble_size(${1:unsigned char *instr_buf})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nget CCOUNT register (if not present return 0)"},"filterText":"xthal_get_ccount","insertText":"xthal_get_ccount()","insertTextFormat":2,"kind":3,"label":"•xthal_get_ccount()","score":1.2690917253494263,"sortText":"408c559bxthal_get_ccount","textEdit":{"newText":"xthal_get_ccount()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_get_int_vpri","insertText":"xthal_get_int_vpri(${1:int intnum})","insertTextFormat":2,"kind":3,"label":"•xthal_get_int_vpri(int intnum)","score":1.2690917253494263,"sortText":"408c559bxthal_get_int_vpri","textEdit":{"newText":"xthal_get_int_vpri(${1:int intnum})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nunlock from cache"},"filterText":"xthal_icache_all_unlock","insertText":"xthal_icache_all_unlock()","insertTextFormat":2,"kind":3,"label":"•xthal_icache_all_unlock()","score":1.2690917253494263,"sortText":"408c559bxthal_icache_all_unlock","textEdit":{"newText":"xthal_icache_all_unlock()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nenable caches"},"filterText":"xthal_icache_enable","insertText":"xthal_icache_enable()","insertTextFormat":2,"kind":3,"label":"•xthal_icache_enable()","score":1.2690917253494263,"sortText":"408c559bxthal_icache_enable","textEdit":{"newText":"xthal_icache_enable()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_icache_line_lock","insertText":"xthal_icache_line_lock(${1:void *addr})","insertTextFormat":2,"kind":3,"label":"•xthal_icache_line_lock(void *addr)","score":1.2690917253494263,"sortText":"408c559bxthal_icache_line_lock","textEdit":{"newText":"xthal_icache_line_lock(${1:void *addr})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nEnables/disables given set (mask) of interrupts; returns previous enabled-mask of all ints:"},"filterText":"xthal_int_enable","insertText":"xthal_int_enable(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_int_enable(unsigned int)","score":1.2690917253494263,"sortText":"408c559bxthal_int_enable","textEdit":{"newText":"xthal_int_enable(${1:unsigned int})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_intlevel_to_vpri","insertText":"xthal_intlevel_to_vpri(${1:unsigned int intlevel})","insertTextFormat":2,"kind":3,"label":"•xthal_intlevel_to_vpri(unsigned int intlevel)","score":1.2690917253494263,"sortText":"408c559bxthal_intlevel_to_vpri","textEdit":{"newText":"xthal_intlevel_to_vpri(${1:unsigned int intlevel})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_invalidate_region","insertText":"xthal_invalidate_region(${1:void *addr})","insertTextFormat":2,"kind":3,"label":"•xthal_invalidate_region(void *addr)","score":1.2690917253494263,"sortText":"408c559bxthal_invalidate_region","textEdit":{"newText":"xthal_invalidate_region(${1:void *addr})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cp2","insertText":"xthal_restore_cp2(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cp2(void *base)","score":1.2690917253494263,"sortText":"408c559bxthal_restore_cp2","textEdit":{"newText":"xthal_restore_cp2(${1:void *base})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cp5","insertText":"xthal_restore_cp5(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cp5(void *base)","score":1.2690917253494263,"sortText":"408c559bxthal_restore_cp5","textEdit":{"newText":"xthal_restore_cp5(${1:void *base})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_cpregs","insertText":"xthal_restore_cpregs(${1:void *base}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_cpregs(void *base, int)","score":1.2690917253494263,"sortText":"408c559bxthal_restore_cpregs","textEdit":{"newText":"xthal_restore_cpregs(${1:void *base}, ${2:int})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_restore_extra","insertText":"xthal_restore_extra(${1:void *base})","insertTextFormat":2,"kind":3,"label":"•xthal_restore_extra(void *base)","score":1.2690917253494263,"sortText":"408c559bxthal_restore_extra","textEdit":{"newText":"xthal_restore_extra(${1:void *base})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_save_cpregs","insertText":"xthal_save_cpregs(${1:void *base}, ${2:int})","insertTextFormat":2,"kind":3,"label":"•xthal_save_cpregs(void *base, int)","score":1.2690917253494263,"sortText":"408c559bxthal_save_cpregs","textEdit":{"newText":"xthal_save_cpregs(${1:void *base}, ${2:int})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_cache_prefetch","insertText":"xthal_set_cache_prefetch(${1:int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_cache_prefetch(int)","score":1.2690917253494263,"sortText":"408c559bxthal_set_cache_prefetch","textEdit":{"newText":"xthal_set_cache_prefetch(${1:int})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_icacheattr","insertText":"xthal_set_icacheattr(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_icacheattr(unsigned int)","score":1.2690917253494263,"sortText":"408c559bxthal_set_icacheattr","textEdit":{"newText":"xthal_set_icacheattr(${1:unsigned int})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_intclear","insertText":"xthal_set_intclear(${1:unsigned int})","insertTextFormat":2,"kind":3,"label":"•xthal_set_intclear(unsigned int)","score":1.2690917253494263,"sortText":"408c559bxthal_set_intclear","textEdit":{"newText":"xthal_set_intclear(${1:unsigned int})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"XtHalVoidFunc *","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_tram_trigger_func","insertText":"xthal_set_tram_trigger_func(${1:XtHalVoidFunc *trigger_fn})","insertTextFormat":2,"kind":3,"label":"•xthal_set_tram_trigger_func(XtHalVoidFunc *trigger_fn)","score":1.2690917253494263,"sortText":"408c559bxthal_set_tram_trigger_func","textEdit":{"newText":"xthal_set_tram_trigger_func(${1:XtHalVoidFunc *trigger_fn})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_set_vpri_intlevel","insertText":"xthal_set_vpri_intlevel(${1:unsigned int intlevel})","insertTextFormat":2,"kind":3,"label":"•xthal_set_vpri_intlevel(unsigned int intlevel)","score":1.2690917253494263,"sortText":"408c559bxthal_set_vpri_intlevel","textEdit":{"newText":"xthal_set_vpri_intlevel(${1:unsigned int intlevel})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`  \nTrampoline support functions:"},"filterText":"xthal_tram_pending_to_service","insertText":"xthal_tram_pending_to_service()","insertTextFormat":2,"kind":3,"label":"•xthal_tram_pending_to_service()","score":1.2690917253494263,"sortText":"408c559bxthal_tram_pending_to_service","textEdit":{"newText":"xthal_tram_pending_to_service()","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"xthal_tram_set_sync","insertText":"xthal_tram_set_sync(${1:int intnum}, ${2:int sync})","insertTextFormat":2,"kind":3,"label":"•xthal_tram_set_sync(int intnum, int sync)","score":1.2690917253494263,"sortText":"408c559bxthal_tram_set_sync","textEdit":{"newText":"xthal_tram_set_sync(${1:int intnum}, ${2:int sync})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_context.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_context.h\"`"},"filterText":"XtSolFrame","insertText":"XtSolFrame","insertTextFormat":2,"kind":8,"label":"•XtSolFrame","score":1.1826096773147583,"sortText":"409cf05eXtSolFrame","textEdit":{"newText":"XtSolFrame","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_api.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_api.h\"`  \nTypedef for C-callable interrupt handler function"},"filterText":"xt_handler","insertText":"xt_handler","insertTextFormat":2,"kind":8,"label":"•xt_handler","score":1.1826096773147583,"sortText":"409cf05ext_handler","textEdit":{"newText":"xt_handler","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_api.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_api.h\"`  \n\\------------------------------------------------------------------------------- Call this function to clear the specified (s/w or edge-triggered) interrupt.  \n\\-------------------------------------------------------------------------------"},"filterText":"xt_set_intclear","insertText":"xt_set_intclear(${1:unsigned int arg})","insertTextFormat":2,"kind":3,"label":"•xt_set_intclear(unsigned int arg)","score":1.1826096773147583,"sortText":"409cf05ext_set_intclear","textEdit":{"newText":"xt_set_intclear(${1:unsigned int arg})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/xtensa_api.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"xt_handler","documentation":{"kind":"markdown","value":"From `\"freertos/xtensa_api.h\"`  \n\\------------------------------------------------------------------------------- Call this function to set a handler for the specified interrupt. The handler will be installed on the core that calls this function.  \nn - Interrupt number.  \nf - Handler function address, NULL to uninstall handler.  \narg - Argument to be passed to handler.  \n\\-------------------------------------------------------------------------------"},"filterText":"xt_set_interrupt_handler","insertText":"xt_set_interrupt_handler(${1:int n}, ${2:xt_handler f}, ${3:void *arg})","insertTextFormat":2,"kind":3,"label":"•xt_set_interrupt_handler(int n, xt_handler f, void *arg)","score":1.1826096773147583,"sortText":"409cf05ext_set_interrupt_handler","textEdit":{"newText":"xt_set_interrupt_handler(${1:int n}, ${2:xt_handler f}, ${3:void *arg})","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"xTaskHandle","insertText":"xTaskHandle","insertTextFormat":2,"kind":1,"label":"•xTaskHandle","score":0.68351686000823975,"sortText":"40d1050axTaskHandle","textEdit":{"newText":"xTaskHandle","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}}}}]}}Content-Length: 1211

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xT'","range":{"end":{"character":2,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":81}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":82},"contentChanges":[{"range":{"start":{"line":164,"character":2},"end":{"line":164,"character":2}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 233

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":164,"character":3},"context":{"triggerKind":3}},"id":186,"jsonrpc":"2.0"}
<<<
Content-Length: 49070

{"id":186,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Calls the hook function associated with xTask. Passing xTask as NULL has the effect of calling the Running tasks (the calling task) hook function.  \n@param xTask Handle of the task to call the hook for.  \n@param pvParameter Parameter passed to the hook function for the task to interpret as it wants. The return value is the value returned by the task hook function registered by the user."},"filterText":"xTaskCallApplicationTaskHook","insertText":"xTaskCallApplicationTaskHook(${1:TaskHandle_t xTask}, ${2:void *pvParameter})","insertTextFormat":2,"kind":3,"label":" xTaskCallApplicationTaskHook(TaskHandle_t xTask, void *pvParameter)","score":1.5037370920181274,"sortText":"403f858bxTaskCallApplicationTaskHook","textEdit":{"newText":"xTaskCallApplicationTaskHook(${1:TaskHandle_t xTask}, ${2:void *pvParameter})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Compare the time status now with that previously captured to see if the timeout has expired."},"filterText":"xTaskCheckForTimeOut","insertText":"xTaskCheckForTimeOut(${1:TimeOut_t *const pxTimeOut}, ${2:TickType_t *const pxTicksToWait})","insertTextFormat":2,"kind":3,"label":" xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut, TickType_t *const pxTicksToWait)","score":1.5037370920181274,"sortText":"403f858bxTaskCheckForTimeOut","textEdit":{"newText":"xTaskCheckForTimeOut(${1:TimeOut_t *const pxTimeOut}, ${2:TickType_t *const pxTicksToWait})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskCreate","insertText":"xTaskCreate(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask})","insertTextFormat":2,"kind":3,"label":" xTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)","score":1.5037370920181274,"sortText":"403f858bxTaskCreate","textEdit":{"newText":"xTaskCreate(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskCreatePinnedToCore","insertText":"xTaskCreatePinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask}, ${7:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":" xTaskCreatePinnedToCore(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask, const BaseType_t xCoreID)","score":1.5037370920181274,"sortText":"403f858bxTaskCreatePinnedToCore","textEdit":{"newText":"xTaskCreatePinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pvCreatedTask}, ${7:const BaseType_t xCoreID})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskCreateRestricted","insertText":"xTaskCreateRestricted(${1:const TaskParameters_t *const pxTaskDefinition}, ${2:TaskHandle_t *pxCreatedTask})","insertTextFormat":2,"kind":3,"label":" xTaskCreateRestricted(const TaskParameters_t *const pxTaskDefinition, TaskHandle_t *pxCreatedTask)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateRestricted","textEdit":{"newText":"xTaskCreateRestricted(${1:const TaskParameters_t *const pxTaskDefinition}, ${2:TaskHandle_t *pxCreatedTask})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","filterText":"xTaskCreateStatic","insertText":"xTaskCreateStatic(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer})","insertTextFormat":2,"kind":3,"label":" xTaskCreateStatic(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t ulStackDepth, void *const pvParameters, UBaseType_t uxPriority, StackType_t *const pxStackBuffer, StaticTask_t *const pxTaskBuffer)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateStatic","textEdit":{"newText":"xTaskCreateStatic(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","filterText":"xTaskCreateStaticPinnedToCore","insertText":"xTaskCreateStaticPinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer}, ${8:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":" xTaskCreateStaticPinnedToCore(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t ulStackDepth, void *const pvParameters, UBaseType_t uxPriority, StackType_t *const pxStackBuffer, StaticTask_t *const pxTaskBuffer, const BaseType_t xCoreID)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateStaticPinnedToCore","textEdit":{"newText":"xTaskCreateStaticPinnedToCore(${1:TaskFunction_t pvTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t ulStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:StackType_t *const pxStackBuffer}, ${7:StaticTask_t *const pxTaskBuffer}, ${8:const BaseType_t xCoreID})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"BaseType_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal.h\"`  \nif xCoreID < 0 or CPU is unicore, it will use xTaskCreate, else xTaskCreatePinnedToCore allows to easily handle all possible situations without repetitive code"},"filterText":"xTaskCreateUniversal","insertText":"xTaskCreateUniversal(${1:TaskFunction_t pxTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pxCreatedTask}, ${7:const BaseType_t xCoreID})","insertTextFormat":2,"kind":3,"label":"•xTaskCreateUniversal(TaskFunction_t pxTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask, const BaseType_t xCoreID)","score":1.5037370920181274,"sortText":"403f858bxTaskCreateUniversal","textEdit":{"newText":"xTaskCreateUniversal(${1:TaskFunction_t pxTaskCode}, ${2:const char *const pcName}, ${3:const uint32_t usStackDepth}, ${4:void *const pvParameters}, ${5:UBaseType_t uxPriority}, ${6:TaskHandle_t *const pxCreatedTask}, ${7:const BaseType_t xCoreID})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Get the current core affinity of a task"},"filterText":"xTaskGetAffinity","insertText":"xTaskGetAffinity(${1:TaskHandle_t xTask})","insertTextFormat":2,"kind":3,"label":" xTaskGetAffinity(TaskHandle_t xTask)","score":1.5037370920181274,"sortText":"403f858bxTaskGetAffinity","textEdit":{"newText":"xTaskGetAffinity(${1:TaskHandle_t xTask})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Return the handle of the calling task."},"filterText":"xTaskGetCurrentTaskHandle","insertText":"xTaskGetCurrentTaskHandle()","insertTextFormat":2,"kind":3,"label":" xTaskGetCurrentTaskHandle()","score":1.5037370920181274,"sortText":"403f858bxTaskGetCurrentTaskHandle","textEdit":{"newText":"xTaskGetCurrentTaskHandle()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Return the handle of the task running on a certain CPU. Because of the nature of SMP processing, there is no guarantee that this value will still be valid on return and should only be used for debugging purposes."},"filterText":"xTaskGetCurrentTaskHandleForCPU","insertText":"xTaskGetCurrentTaskHandleForCPU(${1:BaseType_t cpuid})","insertTextFormat":2,"kind":3,"label":" xTaskGetCurrentTaskHandleForCPU(BaseType_t cpuid)","score":1.5037370920181274,"sortText":"403f858bxTaskGetCurrentTaskHandleForCPU","textEdit":{"newText":"xTaskGetCurrentTaskHandleForCPU(${1:BaseType_t cpuid})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Get the handle of idle task for the current CPU.  \nxTaskGetIdleTaskHandle() is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.  \n@return The handle of the idle task. It is not valid to call xTaskGetIdleTaskHandle() before the scheduler has been started."},"filterText":"xTaskGetIdleTaskHandle","insertText":"xTaskGetIdleTaskHandle()","insertTextFormat":2,"kind":3,"label":" xTaskGetIdleTaskHandle()","score":1.5037370920181274,"sortText":"403f858bxTaskGetIdleTaskHandle","textEdit":{"newText":"xTaskGetIdleTaskHandle()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TaskHandle_t","documentation":{"kind":"markdown","value":"Get the handle of idle task for the given CPU.  \nxTaskGetIdleTaskHandleForCPU() is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.  \n@param cpuid The CPU to get the handle for  \n@return Idle task handle of a given cpu. It is not valid to call xTaskGetIdleTaskHandleForCPU() before the scheduler has been started."},"filterText":"xTaskGetIdleTaskHandleForCPU","insertText":"xTaskGetIdleTaskHandleForCPU(${1:UBaseType_t cpuid})","insertTextFormat":2,"kind":3,"label":" xTaskGetIdleTaskHandleForCPU(UBaseType_t cpuid)","score":1.5037370920181274,"sortText":"403f858bxTaskGetIdleTaskHandleForCPU","textEdit":{"newText":"xTaskGetIdleTaskHandleForCPU(${1:UBaseType_t cpuid})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Returns the scheduler state as taskSCHEDULER_RUNNING,  \ntaskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED."},"filterText":"xTaskGetSchedulerState","insertText":"xTaskGetSchedulerState()","insertTextFormat":2,"kind":3,"label":" xTaskGetSchedulerState()","score":1.5037370920181274,"sortText":"403f858bxTaskGetSchedulerState","textEdit":{"newText":"xTaskGetSchedulerState()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Get tick count  \n@return The count of ticks since vTaskStartScheduler was called.  \n\\\\ingroup TaskUtils"},"filterText":"xTaskGetTickCount","insertText":"xTaskGetTickCount()","insertTextFormat":2,"kind":3,"label":" xTaskGetTickCount()","score":1.5037370920181274,"sortText":"403f858bxTaskGetTickCount","textEdit":{"newText":"xTaskGetTickCount()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"TickType_t","documentation":{"kind":"markdown","value":"Get tick count from ISR  \n@return The count of ticks since vTaskStartScheduler was called.  \nThis is a version of xTaskGetTickCount() that is safe to be called from an ISR - provided that TickType_t is the natural word size of the microcontroller being used or interrupt nesting is either not supported or not being used.  \n\\\\ingroup TaskUtils"},"filterText":"xTaskGetTickCountFromISR","insertText":"xTaskGetTickCountFromISR()","insertTextFormat":2,"kind":3,"label":" xTaskGetTickCountFromISR()","score":1.5037370920181274,"sortText":"403f858bxTaskGetTickCountFromISR","textEdit":{"newText":"xTaskGetTickCountFromISR()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"\\----------------------------------------------------------- SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES  \n\\----------------------------------------------------------  \n@cond  \nTHIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE. IT IS ONLY INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.  \nCalled from the real time kernel tick (either preemptive or cooperative),  \nthis increments the tick count and checks if any tasks that are blocked for a finite period required removing from a blocked list and placing on a ready list. If a non-zero value is returned then a context switch is required because either:  \n\\+ A task was removed from a blocked list because its timeout had expired,  \nor + Time slicing is in use and there is a task of equal priority to the currently running task."},"filterText":"xTaskIncrementTick","insertText":"xTaskIncrementTick()","insertTextFormat":2,"kind":3,"label":" xTaskIncrementTick()","score":1.5037370920181274,"sortText":"403f858bxTaskIncrementTick","textEdit":{"newText":"xTaskIncrementTick()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Send task notification.  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param xTaskToNotify The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().  \n@param ulValue Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.  \n@param eAction Specifies how the notification updates the task's notification value, if at all. Valid values for eAction are as follows:  \n\\- eSetBits:  \nThe task's notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.  \n\\- eIncrement:  \nThe task's notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithOverwrite:  \nThe task's notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithoutOverwrite:  \nIf the task being notified did not already have a notification pending then the task's notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.  \n\\- eNoAction:  \nThe task receives a notification without its notification value being   updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n@return Dependent on the value of eAction. See the description of the eAction parameter.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotify","insertText":"xTaskNotify(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction})","insertTextFormat":2,"kind":3,"label":" xTaskNotify(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction)","score":1.5037370920181274,"sortText":"403f858bxTaskNotify","textEdit":{"newText":"xTaskNotify(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Send task notification from an ISR.  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nA version of xTaskNotify() that can be used from an interrupt service routine (ISR).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param xTaskToNotify The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling xTaskGetCurrentTaskHandle().  \n@param ulValue Data that can be sent with the notification. How the data is used depends on the value of the eAction parameter.  \n@param eAction Specifies how the notification updates the task's notification value, if at all. Valid values for eAction are as follows:  \n\\- eSetBits:  \nThe task's notification value is bitwise ORed with ulValue. xTaskNofify() always returns pdPASS in this case.  \n\\- eIncrement:  \nThe task's notification value is incremented. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithOverwrite:  \nThe task's notification value is set to the value of ulValue, even if the task being notified had not yet processed the previous notification (the task already had a notification pending). xTaskNotify() always returns pdPASS in this case.  \n\\- eSetValueWithoutOverwrite:  \nIf the task being notified did not already have a notification pending then the task's notification value is set to ulValue and xTaskNotify() will return pdPASS. If the task being notified already had a notification pending then no action is performed and pdFAIL is returned.  \n\\- eNoAction:  \nThe task receives a notification without its notification value being updated. ulValue is not used and xTaskNotify() always returns pdPASS in this case.  \n@param pxHigherPriorityTaskWoken xTaskNotifyFromISR() will set  \n\\*pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the task to which the notification was sent to leave the Blocked state, and the unblocked task has a priority higher than the currently running task. If xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should be requested before the interrupt is exited. How a context switch is requested from an ISR is dependent on the port - see the documentation page for the port in use.  \n@return Dependent on the value of eAction. See the description of the eAction parameter.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotifyFromISR","insertText":"xTaskNotifyFromISR(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","insertTextFormat":2,"kind":3,"label":" xTaskNotifyFromISR(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken)","score":1.5037370920181274,"sortText":"403f858bxTaskNotifyFromISR","textEdit":{"newText":"xTaskNotifyFromISR(${1:TaskHandle_t xTaskToNotify}, ${2:uint32_t ulValue}, ${3:eNotifyAction eAction}, ${4:BaseType_t *pxHigherPriorityTaskWoken})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Wait for task notification  \nconfigUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.  \nWhen configUSE_TASK_NOTIFICATIONS is set to one each task has its own private \"notification value\", which is a 32-bit unsigned integer (uint32_t).  \nEvents can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.  \nA notification sent to a task can optionally perform an action, such as update, overwrite or increment the task's notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.  \nA notification sent to a task will remain pending until it is cleared by the task calling xTaskNotifyWait() or ulTaskNotifyTake(). If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.  \nA task can use xTaskNotifyWait() to [optionally] block to wait for a notification to be pending, or ulTaskNotifyTake() to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.  \nSee http://www.FreeRTOS.org/RTOS-task-notifications.html for details.  \n@param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value will be cleared in the calling task's notification value before the task checks to see if any notifications are pending, and optionally blocks if no notifications are pending. Setting ulBitsToClearOnEntry to ULONG_MAX (if limits.h is included) or 0xffffffffUL (if limits.h is not included) will have the effect of resetting the task's notification value to 0. Setting ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.  \n@param ulBitsToClearOnExit If a notification is pending or received before the calling task exits the xTaskNotifyWait() function then the task's notification value (see the xTaskNotify() API function) is passed out using the pulNotificationValue parameter. Then any bits that are set in ulBitsToClearOnExit will be cleared in the task's notification value (note  \n\\*pulNotificationValue is set before any bits are cleared). Setting ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL (if limits.h is not included) will have the effect of resetting the task's notification value to 0 before the function exits. Setting ulBitsToClearOnExit to 0 will leave the task's notification value unchanged when the function exits (in which case the value passed out in pulNotificationValue will match the task's notification value).  \n@param pulNotificationValue Used to pass the task's notification value out of the function. Note the value passed out will not be effected by the clearing of any bits caused by ulBitsToClearOnExit being non-zero.  \n@param xTicksToWait The maximum amount of time that the task should wait in the Blocked state for a notification to be received, should a notification not already be pending when xTaskNotifyWait() was called. The task will not consume any processing time while it is in the Blocked state. This is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time specified in milliseconds to a time specified in ticks.  \n@return If a notification was received (including notifications that were already pending when xTaskNotifyWait was called) then pdPASS is returned. Otherwise pdFAIL is returned.  \n\\\\ingroup TaskNotifications"},"filterText":"xTaskNotifyWait","insertText":"xTaskNotifyWait(${1:uint32_t ulBitsToClearOnEntry}, ${2:uint32_t ulBitsToClearOnExit}, ${3:uint32_t *pulNotificationValue}, ${4:TickType_t xTicksToWait})","insertTextFormat":2,"kind":3,"label":" xTaskNotifyWait(uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait)","score":1.5037370920181274,"sortText":"403f858bxTaskNotifyWait","textEdit":{"newText":"xTaskNotifyWait(${1:uint32_t ulBitsToClearOnEntry}, ${2:uint32_t ulBitsToClearOnExit}, ${3:uint32_t *pulNotificationValue}, ${4:TickType_t xTicksToWait})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Set the priority of a task back to its proper priority in the case that it inherited a higher priority while it was holding a semaphore."},"filterText":"xTaskPriorityDisinherit","insertText":"xTaskPriorityDisinherit(${1:const TaskHandle_t pxMutexHolder})","insertTextFormat":2,"kind":3,"label":" xTaskPriorityDisinherit(const TaskHandle_t pxMutexHolder)","score":1.5037370920181274,"sortText":"403f858bxTaskPriorityDisinherit","textEdit":{"newText":"xTaskPriorityDisinherit(${1:const TaskHandle_t pxMutexHolder})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE. IT IS AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.  \nTHIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.  \nRemoves a task from both the specified event list and the list of blocked tasks, and places it on a ready queue.  \nxTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called if either an event occurs to unblock a task, or the block timeout period expires.  \nxTaskRemoveFromEventList() is used when the event list is in task priority order. It removes the list item from the head of the event list as that will have the highest priority owning task of all the tasks on the event list.  \nxTaskRemoveFromUnorderedEventList() is used when the event list is not ordered and the event list items hold something other than the owning tasks priority. In this case the event list item value is updated to the value passed in the xItemValue parameter.  \n@return pdTRUE if the task being removed has a higher priority than the task making the call, otherwise pdFALSE."},"filterText":"xTaskRemoveFromEventList","insertText":"xTaskRemoveFromEventList(${1:const List_t *const pxEventList})","insertTextFormat":2,"kind":3,"label":" xTaskRemoveFromEventList(const List_t *const pxEventList)","score":1.5037370920181274,"sortText":"403f858bxTaskRemoveFromEventList","textEdit":{"newText":"xTaskRemoveFromEventList(${1:const List_t *const pxEventList})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","filterText":"xTaskRemoveFromUnorderedEventList","insertText":"xTaskRemoveFromUnorderedEventList(${1:ListItem_t *pxEventListItem}, ${2:const TickType_t xItemValue})","insertTextFormat":2,"kind":3,"label":" xTaskRemoveFromUnorderedEventList(ListItem_t *pxEventListItem, const TickType_t xItemValue)","score":1.5037370920181274,"sortText":"403f858bxTaskRemoveFromUnorderedEventList","textEdit":{"newText":"xTaskRemoveFromUnorderedEventList(${1:ListItem_t *pxEventListItem}, ${2:const TickType_t xItemValue})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"Resumes scheduler activity after it was suspended by a call to vTaskSuspendAll().  \nxTaskResumeAll() only resumes the scheduler. It does not unsuspend tasks that were previously suspended by a call to vTaskSuspend().  \n@return If resuming the scheduler caused a context switch then pdTRUE is returned, otherwise pdFALSE is returned.  \nExample usage:  \n@code{c} void vTask1( void * pvParameters ) { for( ;; ) { // Task code goes here.  \n// ...  \n// At some point the task wants to perform a long operation during // which it does not want to get swapped out. It cannot use // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the // operation may cause interrupts to be missed - including the // ticks.  \n// Prevent the real time kernel swapping out the task.  \nvTaskSuspendAll ();  \n// Perform the operation here. There is no need to use critical // sections as we have all the microcontroller processing time.  \n// During this time interrupts will still operate and the real // time kernel tick count will be maintained.  \n// ...  \n// The operation is complete. Restart the kernel. We want to force // a context switch - but there is no point if resuming the scheduler // caused a context switch already.  \nif( !xTaskResumeAll () ) { taskYIELD ();  \n} } }  \n@endcode  \n\\\\ingroup SchedulerControl"},"filterText":"xTaskResumeAll","insertText":"xTaskResumeAll()","insertTextFormat":2,"kind":3,"label":" xTaskResumeAll()","score":1.5037370920181274,"sortText":"403f858bxTaskResumeAll","textEdit":{"newText":"xTaskResumeAll()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"detail":"BaseType_t","documentation":{"kind":"markdown","value":"An implementation of vTaskResume() that can be called from within an ISR.  \nINCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be available. See the configuration section for more information.  \nA task that has been suspended by one or more calls to vTaskSuspend () will be made available for running again by a single call to xTaskResumeFromISR ().  \nxTaskResumeFromISR() should not be used to synchronise a task with an interrupt if there is a chance that the interrupt could arrive prior to the task being suspended - as this can lead to interrupts being missed. Use of a semaphore as a synchronisation mechanism would avoid this eventuality.  \n@param xTaskToResume Handle to the task being readied.  \n@return pdTRUE if resuming the task should result in a context switch,  \notherwise pdFALSE. This is used by the ISR to determine if a context switch may be required following the ISR.  \n\\\\ingroup TaskCtrl"},"filterText":"xTaskResumeFromISR","insertText":"xTaskResumeFromISR(${1:TaskHandle_t xTaskToResume})","insertTextFormat":2,"kind":3,"label":" xTaskResumeFromISR(TaskHandle_t xTaskToResume)","score":1.5037370920181274,"sortText":"403f858bxTaskResumeFromISR","textEdit":{"newText":"xTaskResumeFromISR(${1:TaskHandle_t xTaskToResume})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"documentation":{"kind":"markdown","value":"Parameters required to create an MPU protected task."},"filterText":"xTASK_PARAMETERS","insertText":"xTASK_PARAMETERS","insertTextFormat":2,"kind":22,"label":" xTASK_PARAMETERS","score":1.5037370920181274,"sortText":"404f8fbfxTASK_PARAMETERS","textEdit":{"newText":"xTASK_PARAMETERS","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"documentation":{"kind":"markdown","value":"Used with the uxTaskGetSnapshotAll() function to save memory snapshot of each task in the system.  \nWe need this struct because TCB_t is defined (hidden) in tasks.c."},"filterText":"xTASK_SNAPSHOT","insertText":"xTASK_SNAPSHOT","insertTextFormat":2,"kind":22,"label":" xTASK_SNAPSHOT","score":1.5037370920181274,"sortText":"404f8fbfxTASK_SNAPSHOT","textEdit":{"newText":"xTASK_SNAPSHOT","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"documentation":{"kind":"markdown","value":"Used with the uxTaskGetSystemState() function to return the state of each task in the system."},"filterText":"xTASK_STATUS","insertText":"xTASK_STATUS","insertTextFormat":2,"kind":22,"label":" xTASK_STATUS","score":1.5037370920181274,"sortText":"404f8fbfxTASK_STATUS","textEdit":{"newText":"xTASK_STATUS","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_all_extra_align","insertText":"Xthal_all_extra_align","insertTextFormat":2,"kind":6,"label":"•Xthal_all_extra_align","score":1.2690917253494263,"sortText":"40a76889Xthal_all_extra_align","textEdit":{"newText":"Xthal_all_extra_align","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_all_extra_size","insertText":"Xthal_all_extra_size","insertTextFormat":2,"kind":6,"label":"•Xthal_all_extra_size","score":1.2690917253494263,"sortText":"40a76889Xthal_all_extra_size","textEdit":{"newText":"Xthal_all_extra_size","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"xtensa/hal.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const unsigned int","documentation":{"kind":"markdown","value":"From `\"xtensa/hal.h\"`"},"filterText":"Xthal_extra_align","insertText":"Xthal_extra_align","insertTextFormat":2,"kind":6,"label":"•Xthal_extra_align","score":1.2690916061401367,"sortText":"40c27b78Xthal_extra_align","textEdit":{"newText":"Xthal_extra_align","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"xTaskHandle","insertText":"xTaskHandle","insertTextFormat":2,"kind":1,"label":"•xTaskHandle","score":0.68351686000823975,"sortText":"40d1050axTaskHandle","textEdit":{"newText":"xTaskHandle","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"filterText":"xTaskNotifyGive","insertText":"xTaskNotifyGive(${1:xTaskToNotify})","insertTextFormat":2,"kind":1,"label":" xTaskNotifyGive(xTaskToNotify)","score":0.68351686000823975,"sortText":"40d1050axTaskNotifyGive","textEdit":{"newText":"xTaskNotifyGive(${1:xTaskToNotify})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"xTaskParameters","insertText":"xTaskParameters","insertTextFormat":2,"kind":1,"label":"•xTaskParameters","score":0.68351686000823975,"sortText":"40d1050axTaskParameters","textEdit":{"newText":"xTaskParameters","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"freertos/FreeRTOS.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"freertos/FreeRTOS.h\"`"},"filterText":"xTaskStatusType","insertText":"xTaskStatusType","insertTextFormat":2,"kind":1,"label":"•xTaskStatusType","score":0.68351686000823975,"sortText":"40d1050axTaskStatusType","textEdit":{"newText":"xTaskStatusType","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-cpu.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-cpu.h\"`"},"filterText":"getXtalFrequencyMhz","insertText":"getXtalFrequencyMhz()","insertTextFormat":2,"kind":3,"label":"•getXtalFrequencyMhz()","score":1.3747211694717407,"sortText":"40ed5cf2getXtalFrequencyMhz","textEdit":{"newText":"getXtalFrequencyMhz()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_xtal_freq_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \n24 MHz XTAL"},"filterText":"RTC_XTAL_FREQ_24M","insertText":"RTC_XTAL_FREQ_24M","insertTextFormat":2,"kind":20,"label":"•RTC_XTAL_FREQ_24M","score":1.1826096773147583,"sortText":"4103b5bdRTC_XTAL_FREQ_24M","textEdit":{"newText":"RTC_XTAL_FREQ_24M","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_xtal_freq_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \n26 MHz XTAL"},"filterText":"RTC_XTAL_FREQ_26M","insertText":"RTC_XTAL_FREQ_26M","insertTextFormat":2,"kind":20,"label":"•RTC_XTAL_FREQ_26M","score":1.1826096773147583,"sortText":"4103b5bdRTC_XTAL_FREQ_26M","textEdit":{"newText":"RTC_XTAL_FREQ_26M","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_xtal_freq_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \n40 MHz XTAL"},"filterText":"RTC_XTAL_FREQ_40M","insertText":"RTC_XTAL_FREQ_40M","insertTextFormat":2,"kind":20,"label":"•RTC_XTAL_FREQ_40M","score":1.1826096773147583,"sortText":"4103b5bdRTC_XTAL_FREQ_40M","textEdit":{"newText":"RTC_XTAL_FREQ_40M","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_xtal_freq_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \nAutomatic XTAL frequency detection"},"filterText":"RTC_XTAL_FREQ_AUTO","insertText":"RTC_XTAL_FREQ_AUTO","insertTextFormat":2,"kind":20,"label":"•RTC_XTAL_FREQ_AUTO","score":1.1826096773147583,"sortText":"4103b5bdRTC_XTAL_FREQ_AUTO","textEdit":{"newText":"RTC_XTAL_FREQ_AUTO","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \n@brief Possible main XTAL frequency values.  \nEnum values should be equal to frequency in MHz."},"filterText":"rtc_xtal_freq_t","insertText":"rtc_xtal_freq_t","insertTextFormat":2,"kind":8,"label":"•rtc_xtal_freq_t","score":1.1826096773147583,"sortText":"4103b5bdrtc_xtal_freq_t","textEdit":{"newText":"rtc_xtal_freq_t","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"rom/ets_sys.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"rom/ets_sys.h\"`  \n@brief Get xtal_freq/analog_8M\\*256 value calibrated in rtc module.  \n@param None  \n@return uint32_t : xtal_freq/analog_8M\\*256."},"filterText":"ets_get_xtal_scale","insertText":"ets_get_xtal_scale()","insertTextFormat":2,"kind":3,"label":"•ets_get_xtal_scale()","score":1.2690917253494263,"sortText":"41276889ets_get_xtal_scale","textEdit":{"newText":"ets_get_xtal_scale()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_xtal_freq_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \n@brief Get main XTAL frequency  \nThis is the value stored in RTC register RTC_XTAL_FREQ_REG by the bootloader. As passed to rtc_clk_init function, or if the value was RTC_XTAL_FREQ_AUTO, the detected XTAL frequency.  \n@return XTAL frequency, one of rtc_xtal_freq_t"},"filterText":"rtc_clk_xtal_freq_get","insertText":"rtc_clk_xtal_freq_get()","insertTextFormat":2,"kind":3,"label":"•rtc_clk_xtal_freq_get()","score":1.1826096773147583,"sortText":"41362afertc_clk_xtal_freq_get","textEdit":{"newText":"rtc_clk_xtal_freq_get()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \n@brief Update XTAL frequency  \nUpdates the XTAL value stored in RTC_XTAL_FREQ_REG. Usually this value is ignored after startup.  \n@param xtal_freq New frequency value"},"filterText":"rtc_clk_xtal_freq_update","insertText":"rtc_clk_xtal_freq_update(${1:rtc_xtal_freq_t xtal_freq})","insertTextFormat":2,"kind":3,"label":"•rtc_clk_xtal_freq_update(rtc_xtal_freq_t xtal_freq)","score":1.1826096773147583,"sortText":"41362afertc_clk_xtal_freq_update","textEdit":{"newText":"rtc_clk_xtal_freq_update(${1:rtc_xtal_freq_t xtal_freq})","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"esp_sleep.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_sleep_pd_domain_t","documentation":{"kind":"markdown","value":"From `\"esp_sleep.h\"`  \nXTAL oscillator"},"filterText":"ESP_PD_DOMAIN_XTAL","insertText":"ESP_PD_DOMAIN_XTAL","insertTextFormat":2,"kind":20,"label":"•ESP_PD_DOMAIN_XTAL","score":1.3747211694717407,"sortText":"41500923ESP_PD_DOMAIN_XTAL","textEdit":{"newText":"ESP_PD_DOMAIN_XTAL","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"rom/ets_sys.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"uint32_t","documentation":{"kind":"markdown","value":"From `\"rom/ets_sys.h\"`  \n@brief Get xtal_freq value, If value not stored in RTC_STORE5, than store.  \n@param None  \n@return uint32_t : if rtc store the value (RTC_STORE5 high 16 bits and low 16 bits with same value), read from rtc register.  \nclock = (REG_READ(RTC_STORE5) & 0xffff) << 12;  \nelse if analog_8M in efuse clock = ets_get_xtal_scale() * 15625 * ets_efuse_get_8M_clock() / 40;  \nelse clock = 26M."},"filterText":"ets_get_detected_xtal_freq","insertText":"ets_get_detected_xtal_freq()","insertTextFormat":2,"kind":3,"label":"•ets_get_detected_xtal_freq()","score":1.2690916061401367,"sortText":"415d8e68ets_get_detected_xtal_freq","textEdit":{"newText":"ets_get_detected_xtal_freq()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_cpu_freq_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \nMain XTAL frequency"},"filterText":"RTC_CPU_FREQ_XTAL","insertText":"RTC_CPU_FREQ_XTAL","insertTextFormat":2,"kind":20,"label":"•RTC_CPU_FREQ_XTAL","score":1.1826096773147583,"sortText":"4168a03fRTC_CPU_FREQ_XTAL","textEdit":{"newText":"RTC_CPU_FREQ_XTAL","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_fast_freq_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \nMain XTAL, divided by 4"},"filterText":"RTC_FAST_FREQ_XTALD4","insertText":"RTC_FAST_FREQ_XTALD4","insertTextFormat":2,"kind":20,"label":"•RTC_FAST_FREQ_XTALD4","score":1.1826096773147583,"sortText":"4168a03fRTC_FAST_FREQ_XTALD4","textEdit":{"newText":"RTC_FAST_FREQ_XTALD4","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_cal_sel_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \nExternal 32 kHz XTAL"},"filterText":"RTC_CAL_32K_XTAL","insertText":"RTC_CAL_32K_XTAL","insertTextFormat":2,"kind":20,"label":"•RTC_CAL_32K_XTAL","score":1.1826096773147583,"sortText":"41b62afeRTC_CAL_32K_XTAL","textEdit":{"newText":"RTC_CAL_32K_XTAL","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_cpu_freq_src_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \nXTAL"},"filterText":"RTC_CPU_FREQ_SRC_XTAL","insertText":"RTC_CPU_FREQ_SRC_XTAL","insertTextFormat":2,"kind":20,"label":"•RTC_CPU_FREQ_SRC_XTAL","score":1.1826096773147583,"sortText":"41b62afeRTC_CPU_FREQ_SRC_XTAL","textEdit":{"newText":"RTC_CPU_FREQ_SRC_XTAL","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"rtc_slow_freq_t","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \nExternal 32 kHz XTAL"},"filterText":"RTC_SLOW_FREQ_32K_XTAL","insertText":"RTC_SLOW_FREQ_32K_XTAL","insertTextFormat":2,"kind":20,"label":"•RTC_SLOW_FREQ_32K_XTAL","score":1.1826096773147583,"sortText":"42362afeRTC_SLOW_FREQ_32K_XTAL","textEdit":{"newText":"RTC_SLOW_FREQ_32K_XTAL","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}},{"additionalTextEdits":[{"newText":"#include \"soc/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void","documentation":{"kind":"markdown","value":"From `\"soc/rtc.h\"`  \n@brief Switch CPU clock source to XTAL  \nShort form for filling in rtc_cpu_freq_config_t structure and calling rtc_clk_cpu_freq_set_config when a switch to XTAL is needed.  \nAssumes that XTAL frequency has been determined — don't call in startup code."},"filterText":"rtc_clk_cpu_freq_set_xtal","insertText":"rtc_clk_cpu_freq_set_xtal()","insertTextFormat":2,"kind":3,"label":"•rtc_clk_cpu_freq_set_xtal()","score":1.1826096773147583,"sortText":"42362afertc_clk_cpu_freq_set_xtal","textEdit":{"newText":"rtc_clk_cpu_freq_set_xtal()","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}}}}]}}Content-Length: 1212

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTa'","range":{"end":{"character":3,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":82}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":83},"contentChanges":[{"range":{"start":{"line":164,"character":3},"end":{"line":164,"character":3}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":84},"contentChanges":[{"range":{"start":{"line":164,"character":4},"end":{"line":164,"character":4}},"text":"k"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1213

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTas'","range":{"end":{"character":4,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":83}}Content-Length: 1214

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTask'","range":{"end":{"character":5,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":84}}
>>>
Content-Length: 447

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":5},"end":{"line":164,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":164,"character":0},"end":{"line":164,"character":5}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'xTask'"}]}},"id":187,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":187,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":85},"contentChanges":[{"range":{"start":{"line":164,"character":5},"end":{"line":164,"character":5}},"text":"C"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1215

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTaskC'","range":{"end":{"character":6,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":85}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":86},"contentChanges":[{"range":{"start":{"line":164,"character":6},"end":{"line":164,"character":6}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":87},"contentChanges":[{"range":{"start":{"line":164,"character":7},"end":{"line":164,"character":7}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1216

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTaskCr'","range":{"end":{"character":7,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":86}}Content-Length: 1217

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTaskCre'","range":{"end":{"character":8,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":87}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":88},"contentChanges":[{"range":{"start":{"line":164,"character":8},"end":{"line":164,"character":8}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1218

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTaskCrea'","range":{"end":{"character":9,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":88}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":89},"contentChanges":[{"range":{"start":{"line":164,"character":9},"end":{"line":164,"character":9}},"text":"t"}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":90},"contentChanges":[{"range":{"start":{"line":164,"character":10},"end":{"line":164,"character":10}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1220

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTaskCreat'","range":{"end":{"character":10,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":89}}Content-Length: 1221

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'xTaskCreate'","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":90}}
>>>
Content-Length: 456

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":11},"end":{"line":164,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":164,"character":0},"end":{"line":164,"character":11}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'xTaskCreate'"}]}},"id":188,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":188,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 475

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":91},"contentChanges":[{"range":{"start":{"line":164,"character":0},"end":{"line":164,"character":11}},"rangeLength":11,"text":"xTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1473

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":165},"start":{"character":0,"line":165}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":91}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":12},"end":{"line":164,"character":37}},"context":{"diagnostics":[]}},"id":189,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":189,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 302

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":92},"contentChanges":[{"range":{"start":{"line":164,"character":12},"end":{"line":164,"character":37}},"rangeLength":25,"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2973

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":3,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":9,"line":165},"start":{"character":4,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":35,"line":165},"start":{"character":30,"line":165}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":65,"line":165},"start":{"character":64,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":70,"line":165},"start":{"character":65,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":96,"line":165},"start":{"character":85,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":121,"line":165},"start":{"character":109,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":128,"line":165},"start":{"character":123,"line":165}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":92}}
>>>
Content-Length: 444

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":165,"character":2},"end":{"line":165,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":165,"character":2},"end":{"line":165,"character":3}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":190,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":190,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":93},"contentChanges":[{"range":{"start":{"line":165,"character":2},"end":{"line":165,"character":2}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1643

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 't'","range":{"end":{"character":3,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":93}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":94},"contentChanges":[{"range":{"start":{"line":165,"character":3},"end":{"line":165,"character":3}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1644

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ta'","range":{"end":{"character":4,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":94}}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":95},"contentChanges":[{"range":{"start":{"line":165,"character":4},"end":{"line":165,"character":4}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3162

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'tas'; did you mean 'tan'? (fix available)\n\n/home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/newlib/math.h:111:15:\nnote: 'tan' declared here","range":{"end":{"character":5,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":12,"line":165},"start":{"character":7,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":38,"line":165},"start":{"character":33,"line":165}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":68,"line":165},"start":{"character":67,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":73,"line":165},"start":{"character":68,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":99,"line":165},"start":{"character":88,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":124,"line":165},"start":{"character":112,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":131,"line":165},"start":{"character":126,"line":165}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":95}}
>>>
Content-Length: 295

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":96},"contentChanges":[{"range":{"start":{"line":165,"character":4},"end":{"line":165,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1644

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ta'","range":{"end":{"character":4,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":96}}
>>>
Content-Length: 295

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":97},"contentChanges":[{"range":{"start":{"line":165,"character":3},"end":{"line":165,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1643

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 't'","range":{"end":{"character":3,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":97}}
>>>
Content-Length: 295

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":98},"contentChanges":[{"range":{"start":{"line":165,"character":2},"end":{"line":165,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2973

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":3,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":9,"line":165},"start":{"character":4,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":35,"line":165},"start":{"character":30,"line":165}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":65,"line":165},"start":{"character":64,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":70,"line":165},"start":{"character":65,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":96,"line":165},"start":{"character":85,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":121,"line":165},"start":{"character":109,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":128,"line":165},"start":{"character":123,"line":165}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":98}}
>>>
Content-Length: 444

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":165,"character":2},"end":{"line":165,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":165,"character":2},"end":{"line":165,"character":3}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":191,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":191,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":192,"jsonrpc":"2.0"}
<<<
Content-Length: 6700

{"id":192,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":9,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":63},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":15,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":65}},"selectionRange":{"end":{"character":15,"line":65},"start":{"character":5,"line":65}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":103},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":15,"line":77},"start":{"character":5,"line":77}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":113},"start":{"character":0,"line":105}},"selectionRange":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":130},"start":{"character":0,"line":116}},"selectionRange":{"end":{"character":13,"line":116},"start":{"character":5,"line":116}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":147},"start":{"character":0,"line":132}},"selectionRange":{"end":{"character":16,"line":132},"start":{"character":5,"line":132}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":162},"start":{"character":0,"line":149}},"selectionRange":{"end":{"character":15,"line":149},"start":{"character":5,"line":149}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"selectionRange":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":180},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":9,"line":166},"start":{"character":5,"line":166}}}]}
>>>
Content-Length: 280

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":99},"contentChanges":[{"range":{"start":{"line":165,"character":2},"end":{"line":165,"character":2}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1643

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'a'","range":{"end":{"character":3,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":99}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":100},"contentChanges":[{"range":{"start":{"line":165,"character":3},"end":{"line":165,"character":3}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1645

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'al'","range":{"end":{"character":4,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":100}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":101},"contentChanges":[{"range":{"start":{"line":165,"character":4},"end":{"line":165,"character":4}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1646

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ala'","range":{"end":{"character":5,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":101}}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":102},"contentChanges":[{"range":{"start":{"line":165,"character":5},"end":{"line":165,"character":5}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":103},"contentChanges":[{"range":{"start":{"line":165,"character":6},"end":{"line":165,"character":6}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3078

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alar'; did you mean 'alarm'? (fix available)\n\n:21:18:\nnote: 'alarm' declared here","range":{"end":{"character":6,"line":165},"start":{"character":2,"line":165}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":13,"line":165},"start":{"character":8,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":39,"line":165},"start":{"character":34,"line":165}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":69,"line":165},"start":{"character":68,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":74,"line":165},"start":{"character":69,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":100,"line":165},"start":{"character":89,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":125,"line":165},"start":{"character":113,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":132,"line":165},"start":{"character":127,"line":165}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":102}}Content-Length: 2805

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":164},"start":{"character":0,"line":164}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":14,"line":165},"start":{"character":9,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":40,"line":165},"start":{"character":35,"line":165}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":70,"line":165},"start":{"character":69,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":75,"line":165},"start":{"character":70,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":101,"line":165},"start":{"character":90,"line":165}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":126,"line":165},"start":{"character":114,"line":165}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":133,"line":165},"start":{"character":128,"line":165}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":103}}
>>>
Content-Length: 5523

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":104},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 89 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 116 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 133 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid alarmTasks(void * parameters);\n#line 150 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  // Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    // success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo; // TODO MOVE IT AS GLOBAL\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n}\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\nvoid alarmTasks(void * parameters){\n  for(;;){\n    Serial.print(\"Roll: \");\n    Serial.print(masterMessage.roll);\n    Serial.print(\"    Pitch: \");\n    Serial.print(masterMessage.pitch);\n    Serial.print(\"    Light: \");\n    Serial.print(masterMessage.lightSensor);\n    Serial.println(\"\");\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n  \n}\n\nxTaskCreate(\n  alarm, const char *const pcName, const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\nvoid loop()\n{\n\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":105},"contentChanges":[{"range":{"start":{"line":167,"character":7},"end":{"line":167,"character":7}},"text":"T"}]},"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":106},"contentChanges":[{"range":{"start":{"line":167,"character":8},"end":{"line":167,"character":8}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":107},"contentChanges":[{"range":{"start":{"line":167,"character":9},"end":{"line":167,"character":9}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":108},"contentChanges":[{"range":{"start":{"line":167,"character":10},"end":{"line":167,"character":10}},"text":"k"}]},"jsonrpc":"2.0"}Content-Length: 447

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":11},"end":{"line":167,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":9},"end":{"line":167,"character":14}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":193,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":2,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":2,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 38

{"id":193,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":160,"character":9}},"id":194,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":195,"jsonrpc":"2.0"}
<<<
Content-Length: 3348

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":18,"line":167},"start":{"character":13,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":44,"line":167},"start":{"character":39,"line":167}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":74,"line":167},"start":{"character":73,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":79,"line":167},"start":{"character":74,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":105,"line":167},"start":{"character":94,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":130,"line":167},"start":{"character":118,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":137,"line":167},"start":{"character":132,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":108}}Content-Length: 247

{"id":194,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `checkAlarms`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid checkAlarms()\n```"},"range":{"end":{"character":15,"line":160},"start":{"character":4,"line":160}}}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":196,"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":194},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":154,"character":15}},"id":197,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":195,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}Content-Length: 6895

{"id":196,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}Content-Length: 323

{"id":197,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `double`\n- `int = 2`\n\n---\n```cpp\n// In Print\npublic: size_t print(double, int = 2)\n```"},"range":{"end":{"character":16,"line":154},"start":{"character":11,"line":154}}}}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":195},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":161,"character":15}},"id":198,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":198,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 447

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":12},"end":{"line":167,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":9},"end":{"line":167,"character":14}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":199,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":199,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":193},"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":200,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":13}},"id":200,"jsonrpc":"2.0"}Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":161,"character":15}},"id":201,"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"id":201,"jsonrpc":"2.0","result":[{"range":{"end":{"character":15,"line":810},"start":{"character":5,"line":810}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/task.h"}]}
>>>
Content-Length: 447

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":13},"end":{"line":167,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":9},"end":{"line":167,"character":14}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":202,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":202,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":197},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":198},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":196},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":161,"character":15}},"id":203,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":203,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 447

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":13},"end":{"line":167,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":9},"end":{"line":167,"character":14}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":204,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":204,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":200},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":201},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":161,"character":15}},"id":205,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":205,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 620

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":13},"end":{"line":167,"character":37}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":9},"end":{"line":167,"character":14}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":167,"character":35},"end":{"line":167,"character":40}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":206,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":206,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":202},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":203},"jsonrpc":"2.0"}Content-Length: 378

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":110},"contentChanges":[{"range":{"start":{"line":167,"character":37},"end":{"line":167,"character":37}},"text":"\""},{"range":{"start":{"line":167,"character":13},"end":{"line":167,"character":13}},"text":"\""}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":204},"jsonrpc":"2.0"}Content-Length: 378

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":112},"contentChanges":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":38}},"text":"\""},{"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":14}},"text":"\""}]},"jsonrpc":"2.0"}Content-Length: 448

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":15},"end":{"line":167,"character":39}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":35},"end":{"line":167,"character":40}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":207,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":207,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 406

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":114},"contentChanges":[{"range":{"start":{"line":167,"character":39},"end":{"line":167,"character":40}},"rangeLength":1,"text":""},{"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":15}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":205},"jsonrpc":"2.0"}Content-Length: 448

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":38}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":13},"end":{"line":167,"character":18}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":208,"jsonrpc":"2.0"}
<<<
Content-Length: 2660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"-Wreserved-user-defined-literal","message":"Invalid suffix on literal; C++11 requires a space between literal and identifier (fix available)","range":{"end":{"character":20,"line":167},"start":{"character":15,"line":167}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected ')'\n\nEsp_Slave.ino.cpp:167:12: note: to match this '('","range":{"end":{"character":20,"line":167},"start":{"character":15,"line":167}},"severity":1,"source":"clang"},{"message":"To match this '('\n\nEsp_Slave.ino.cpp:168:16: error: expected ')'","range":{"end":{"character":12,"line":166},"start":{"character":11,"line":166}},"severity":3},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":112}}Content-Length: 38

{"id":208,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":209,"jsonrpc":"2.0"}
<<<
Content-Length: 3175

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":46,"line":167},"start":{"character":41,"line":167}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":76,"line":167},"start":{"character":75,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":81,"line":167},"start":{"character":76,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":107,"line":167},"start":{"character":96,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":132,"line":167},"start":{"character":120,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":139,"line":167},"start":{"character":134,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":114}}Content-Length: 6895

{"id":209,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":38}},"context":{"diagnostics":[]}},"id":210,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":210,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":211,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":211,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":38}},"context":{"diagnostics":[]}},"id":212,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":212,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":115},"contentChanges":[{"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":38}},"rangeLength":24,"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3173

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":23,"line":167},"start":{"character":18,"line":167}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":53,"line":167},"start":{"character":52,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":58,"line":167},"start":{"character":53,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":84,"line":167},"start":{"character":73,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":109,"line":167},"start":{"character":97,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":116,"line":167},"start":{"character":111,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":115}}
>>>
Content-Length: 5508

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":116},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 89 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 116 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 133 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid alarmTasks(void * parameters);\n#line 150 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  // Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    // success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo; // TODO MOVE IT AS GLOBAL\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n}\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\nvoid alarmTasks(void * parameters){\n  for(;;){\n    Serial.print(\"Roll: \");\n    Serial.print(masterMessage.roll);\n    Serial.print(\"    Pitch: \");\n    Serial.print(masterMessage.pitch);\n    Serial.print(\"    Light: \");\n    Serial.print(masterMessage.lightSensor);\n    Serial.println(\"\");\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n  \n}\n\nxTaskCreate(\n  alarmTask, \"t\", const uint32_t usStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\nvoid loop()\n{\n\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":15},"end":{"line":167,"character":15}},"context":{"diagnostics":[]}},"id":213,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":3,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":3,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 38

{"id":213,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":117},"contentChanges":[{"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":15}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":209},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":118},"contentChanges":[{"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":14}},"text":"T"}]},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":15},"end":{"line":167,"character":15}},"context":{"diagnostics":[]}},"id":214,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":215,"jsonrpc":"2.0"}
<<<
Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 38

{"id":214,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":119},"contentChanges":[{"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":15}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":210},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":120},"contentChanges":[{"range":{"start":{"line":167,"character":14},"end":{"line":167,"character":14}},"text":"A"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 3173

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":23,"line":167},"start":{"character":18,"line":167}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":53,"line":167},"start":{"character":52,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":58,"line":167},"start":{"character":53,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":84,"line":167},"start":{"character":73,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":109,"line":167},"start":{"character":97,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":116,"line":167},"start":{"character":111,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":118}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":215,"jsonrpc":"2.0"}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":121},"contentChanges":[{"range":{"start":{"line":167,"character":15},"end":{"line":167,"character":15}},"text":"l"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":122},"contentChanges":[{"range":{"start":{"line":167,"character":16},"end":{"line":167,"character":16}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":123},"contentChanges":[{"range":{"start":{"line":167,"character":17},"end":{"line":167,"character":17}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":124},"contentChanges":[{"range":{"start":{"line":167,"character":18},"end":{"line":167,"character":18}},"text":"m"}]},"jsonrpc":"2.0"}Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":125},"contentChanges":[{"range":{"start":{"line":167,"character":18},"end":{"line":167,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":126},"contentChanges":[{"range":{"start":{"line":167,"character":17},"end":{"line":167,"character":18}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":127},"contentChanges":[{"range":{"start":{"line":167,"character":16},"end":{"line":167,"character":17}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":128},"contentChanges":[{"range":{"start":{"line":167,"character":16},"end":{"line":167,"character":16}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":129},"contentChanges":[{"range":{"start":{"line":167,"character":17},"end":{"line":167,"character":17}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":130},"contentChanges":[{"range":{"start":{"line":167,"character":18},"end":{"line":167,"character":18}},"text":"m"}]},"jsonrpc":"2.0"}Content-Length: 448

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":19},"end":{"line":167,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":18},"end":{"line":167,"character":23}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":216,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":216,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":131},"contentChanges":[{"range":{"start":{"line":167,"character":19},"end":{"line":167,"character":19}},"text":"T"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":211},"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":217,"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":132},"contentChanges":[{"range":{"start":{"line":167,"character":20},"end":{"line":167,"character":20}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":133},"contentChanges":[{"range":{"start":{"line":167,"character":21},"end":{"line":167,"character":21}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":134},"contentChanges":[{"range":{"start":{"line":167,"character":22},"end":{"line":167,"character":22}},"text":"k"}]},"jsonrpc":"2.0"}Content-Length: 448

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":23},"end":{"line":167,"character":23}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":18},"end":{"line":167,"character":23}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":218,"jsonrpc":"2.0"}
<<<
Content-Length: 3174

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":27,"line":167},"start":{"character":22,"line":167}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":57,"line":167},"start":{"character":56,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":62,"line":167},"start":{"character":57,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":88,"line":167},"start":{"character":77,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":113,"line":167},"start":{"character":101,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":120,"line":167},"start":{"character":115,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":130}}Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":217,"jsonrpc":"2.0"}Content-Length: 38

{"id":218,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":25},"end":{"line":167,"character":25}},"context":{"diagnostics":[]}},"id":219,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":220,"jsonrpc":"2.0"}
<<<
Content-Length: 3174

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":31,"line":167},"start":{"character":26,"line":167}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":61,"line":167},"start":{"character":60,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":66,"line":167},"start":{"character":61,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":92,"line":167},"start":{"character":81,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":117,"line":167},"start":{"character":105,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":124,"line":167},"start":{"character":119,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":134}}Content-Length: 38

{"id":219,"jsonrpc":"2.0","result":[]}Content-Length: 6895

{"id":220,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":212},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":25},"end":{"line":167,"character":31}},"context":{"diagnostics":[]}},"id":221,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":222,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":221,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":213},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":25},"end":{"line":167,"character":25}},"context":{"diagnostics":[]}},"id":223,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":222,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}Content-Length: 38

{"id":223,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":214},"jsonrpc":"2.0"}Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":26}},"id":224,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":224,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":26},"end":{"line":167,"character":26}},"context":{"diagnostics":[]}},"id":225,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":225,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":215},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":216},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":26},"end":{"line":167,"character":40}},"context":{"diagnostics":[]}},"id":226,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":226,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":217},"jsonrpc":"2.0"}Content-Length: 666

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":26},"end":{"line":167,"character":53}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":52},"end":{"line":167,"character":53}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":167,"character":53},"end":{"line":167,"character":58}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":227,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":227,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":218},"jsonrpc":"2.0"}Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":135},"contentChanges":[{"range":{"start":{"line":167,"character":26},"end":{"line":167,"character":53}},"rangeLength":27,"text":"1"}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":219},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":136},"contentChanges":[{"range":{"start":{"line":167,"character":27},"end":{"line":167,"character":27}},"text":"0"}]},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":28},"end":{"line":167,"character":28}},"context":{"diagnostics":[]}},"id":228,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":228,"jsonrpc":"2.0","result":[]}Content-Length: 2997

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":36,"line":167},"start":{"character":35,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":41,"line":167},"start":{"character":36,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":67,"line":167},"start":{"character":56,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":92,"line":167},"start":{"character":80,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":99,"line":167},"start":{"character":94,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":136}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":28},"end":{"line":167,"character":28}},"context":{"diagnostics":[]}},"id":229,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":229,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":230,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":230,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":28},"end":{"line":167,"character":28}},"context":{"diagnostics":[]}},"id":231,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":231,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":137},"contentChanges":[{"range":{"start":{"line":167,"character":28},"end":{"line":167,"character":28}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2998

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":37,"line":167},"start":{"character":36,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":42,"line":167},"start":{"character":37,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":68,"line":167},"start":{"character":57,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":93,"line":167},"start":{"character":81,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":100,"line":167},"start":{"character":95,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":137}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":138},"contentChanges":[{"range":{"start":{"line":167,"character":29},"end":{"line":167,"character":29}},"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2998

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":38,"line":167},"start":{"character":37,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":43,"line":167},"start":{"character":38,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":69,"line":167},"start":{"character":58,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":94,"line":167},"start":{"character":82,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":101,"line":167},"start":{"character":96,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":138}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":30},"end":{"line":167,"character":30}},"context":{"diagnostics":[]}},"id":232,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":232,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":233,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":233,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":31},"end":{"line":167,"character":31}},"context":{"diagnostics":[]}},"id":234,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":234,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":32}},"id":235,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":235,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":32},"end":{"line":167,"character":32}},"context":{"diagnostics":[]}},"id":236,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":236,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":33},"end":{"line":167,"character":33}},"context":{"diagnostics":[]}},"id":237,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":237,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":32},"end":{"line":167,"character":32}},"context":{"diagnostics":[]}},"id":238,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":238,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 666

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":32},"end":{"line":167,"character":56}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":37},"end":{"line":167,"character":38}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":43}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":239,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":239,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":139},"contentChanges":[{"range":{"start":{"line":167,"character":32},"end":{"line":167,"character":56}},"rangeLength":24,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2779

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":45,"line":167},"start":{"character":34,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":70,"line":167},"start":{"character":58,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":77,"line":167},"start":{"character":72,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":139}}
>>>
Content-Length: 448

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":32},"end":{"line":167,"character":32}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":32},"end":{"line":167,"character":33}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":240,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":240,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":241,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":241,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":140},"contentChanges":[{"range":{"start":{"line":167,"character":32},"end":{"line":167,"character":32}},"text":"N"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":33},"context":{"triggerKind":1}},"id":242,"jsonrpc":"2.0"}
<<<
Content-Length: 76141

{"id":242,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"filterText":"new","insertText":"new ${1:type}(${0:expressions})","insertTextFormat":2,"kind":15,"label":" new type(expressions)","score":8,"sortText":"3f000000new","textEdit":{"newText":"new ${1:type}(${0:expressions})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"filterText":"new","insertText":"new ${1:type}[${2:size}](${0:expressions})","insertTextFormat":2,"kind":15,"label":" new type[size](expressions)","score":8,"sortText":"3f000000new","textEdit":{"newText":"new ${1:type}[${2:size}](${0:expressions})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"detail":"bool","filterText":"noexcept","insertText":"noexcept(${0:expression})","insertTextFormat":2,"kind":15,"label":" noexcept(expression)","score":8,"sortText":"3f000000noexcept","textEdit":{"newText":"noexcept(${0:expression})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"detail":"std::nullptr_t","filterText":"nullptr","insertText":"nullptr","insertTextFormat":2,"kind":15,"label":" nullptr","score":8,"sortText":"3f000000nullptr","textEdit":{"newText":"nullptr","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"stdlib.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long","documentation":{"kind":"markdown","value":"From `\"stdlib.h\"`"},"filterText":"nrand48","insertText":"nrand48(${1:unsigned short *})","insertTextFormat":2,"kind":3,"label":"•nrand48(unsigned short *)","score":7.5186858177185059,"sortText":"3f0f66ednrand48","textEdit":{"newText":"nrand48(${1:unsigned short *})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartParityMode","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"NONE_BITS","insertText":"NONE_BITS","insertTextFormat":2,"kind":20,"label":"•NONE_BITS","score":6.3454585075378418,"sortText":"3f34f201NONE_BITS","textEdit":{"newText":"NONE_BITS","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"rom/uart.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"UartFlowCtrl","documentation":{"kind":"markdown","value":"From `\"rom/uart.h\"`"},"filterText":"NONE_CTRL","insertText":"NONE_CTRL","insertTextFormat":2,"kind":20,"label":"•NONE_CTRL","score":6.3454585075378418,"sortText":"3f34f201NONE_CTRL","textEdit":{"newText":"NONE_CTRL","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"RTC_INT_REASON","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"NO_INT","insertText":"NO_INT","insertTextFormat":2,"kind":20,"label":"•NO_INT","score":6.3454585075378418,"sortText":"3f34f201NO_INT","textEdit":{"newText":"NO_INT","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"RESET_REASON","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"NO_MEAN","insertText":"NO_MEAN","insertTextFormat":2,"kind":20,"label":"•NO_MEAN","score":6.3454585075378418,"sortText":"3f34f201NO_MEAN","textEdit":{"newText":"NO_MEAN","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"rom/rtc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"WAKEUP_REASON","documentation":{"kind":"markdown","value":"From `\"rom/rtc.h\"`"},"filterText":"NO_SLEEP","insertText":"NO_SLEEP","insertTextFormat":2,"kind":20,"label":"•NO_SLEEP","score":6.3454585075378418,"sortText":"3f34f201NO_SLEEP","textEdit":{"newText":"NO_SLEEP","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[4 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nextafter","insertText":"std::nextafter($0)","insertTextFormat":2,"kind":3,"label":"•std::nextafter(…)","score":6.2655720710754395,"sortText":"3f37806fnextafter","textEdit":{"newText":"std::nextafter($0)","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"sys/unistd.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int","documentation":{"kind":"markdown","value":"From `\"sys/unistd.h\"`"},"filterText":"nice","insertText":"nice(${1:int __nice_value})","insertTextFormat":2,"kind":3,"label":"•nice(int __nice_value)","score":5.5590214729309082,"sortText":"3f4e1c7fnice","textEdit":{"newText":"nice(${1:int __nice_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_open_mode","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \nRead only"},"filterText":"NVS_READONLY","insertText":"NVS_READONLY","insertTextFormat":2,"kind":20,"label":"•NVS_READONLY","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_READONLY","textEdit":{"newText":"NVS_READONLY","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_open_mode","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \nRead and write"},"filterText":"NVS_READWRITE","insertText":"NVS_READWRITE","insertTextFormat":2,"kind":20,"label":"•NVS_READWRITE","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_READWRITE","textEdit":{"newText":"NVS_READWRITE","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \nMust be last"},"filterText":"NVS_TYPE_ANY","insertText":"NVS_TYPE_ANY","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_ANY","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_ANY","textEdit":{"newText":"NVS_TYPE_ANY","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_BLOB","insertText":"NVS_TYPE_BLOB","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_BLOB","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_BLOB","textEdit":{"newText":"NVS_TYPE_BLOB","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_I16","insertText":"NVS_TYPE_I16","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_I16","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_I16","textEdit":{"newText":"NVS_TYPE_I16","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_I32","insertText":"NVS_TYPE_I32","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_I32","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_I32","textEdit":{"newText":"NVS_TYPE_I32","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_I64","insertText":"NVS_TYPE_I64","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_I64","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_I64","textEdit":{"newText":"NVS_TYPE_I64","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_I8","insertText":"NVS_TYPE_I8","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_I8","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_I8","textEdit":{"newText":"NVS_TYPE_I8","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_STR","insertText":"NVS_TYPE_STR","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_STR","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_STR","textEdit":{"newText":"NVS_TYPE_STR","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_U16","insertText":"NVS_TYPE_U16","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_U16","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_U16","textEdit":{"newText":"NVS_TYPE_U16","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_U32","insertText":"NVS_TYPE_U32","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_U32","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_U32","textEdit":{"newText":"NVS_TYPE_U32","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_U64","insertText":"NVS_TYPE_U64","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_U64","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_U64","textEdit":{"newText":"NVS_TYPE_U64","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"nvs_type_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"NVS_TYPE_U8","insertText":"NVS_TYPE_U8","insertTextFormat":2,"kind":20,"label":"•NVS_TYPE_U8","score":4.0787649154663086,"sortText":"3f7d7ac2NVS_TYPE_U8","textEdit":{"newText":"NVS_TYPE_U8","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief Write any pending changes to non-volatile storage  \nAfter setting any values, nvs_commit() must be called to ensure changes are written to non-volatile storage. Individual implementations may write to storage at other times,  \nbut this is not guaranteed.  \n@param[in] handle Storage handle obtained with nvs_open.  \nHandles that were opened read only cannot be used.  \n@return  \n\\- ESP_OK if the changes have been written successfully  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL  \n\\- other error codes from the underlying storage driver"},"filterText":"nvs_commit","insertText":"nvs_commit(${1:nvs_handle handle})","insertTextFormat":2,"kind":3,"label":"•nvs_commit(nvs_handle handle)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_commit","textEdit":{"newText":"nvs_commit(${1:nvs_handle handle})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief Erase all key-value pairs in a namespace  \nNote that actual storage may not be updated until nvs_commit function is called.  \n@param[in] handle Storage handle obtained with nvs_open.  \nHandles that were opened read only cannot be used.  \n@return  \n\\- ESP_OK if erase operation was successful  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL  \n\\- ESP_ERR_NVS_READ_ONLY if handle was opened as read only  \n\\- other error codes from the underlying storage driver"},"filterText":"nvs_erase_all","insertText":"nvs_erase_all(${1:nvs_handle handle})","insertTextFormat":2,"kind":3,"label":"•nvs_erase_all(nvs_handle handle)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_erase_all","textEdit":{"newText":"nvs_erase_all(${1:nvs_handle handle})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief Erase key-value pair with given key name.  \nNote that actual storage may not be updated until nvs_commit function is called.  \n@param[in] handle Storage handle obtained with nvs_open.  \nHandles that were opened read only cannot be used.  \n@param[in] key Key name. Maximal length is determined by the underlying implementation, but is guaranteed to be at least 15 characters. Shouldn't be empty.  \n@return  \n\\- ESP_OK if erase operation was successful  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL  \n\\- ESP_ERR_NVS_READ_ONLY if handle was opened as read only  \n\\- ESP_ERR_NVS_NOT_FOUND if the requested key doesn't exist  \n\\- other error codes from the underlying storage driver"},"filterText":"nvs_erase_key","insertText":"nvs_erase_key(${1:nvs_handle handle}, ${2:const char *key})","insertTextFormat":2,"kind":3,"label":"•nvs_erase_key(nvs_handle handle, const char *key)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_erase_key","textEdit":{"newText":"nvs_erase_key(${1:nvs_handle handle}, ${2:const char *key})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Deinitialize NVS storage for the default NVS partition  \nDefault NVS partition is the partition with \"nvs\" label in the partition table.  \n@return  \n\\- ESP_OK on success (storage was deinitialized)  \n\\- ESP_ERR_NVS_NOT_INITIALIZED if the storage was not initialized prior to this call"},"filterText":"nvs_flash_deinit","insertText":"nvs_flash_deinit()","insertTextFormat":2,"kind":3,"label":"•nvs_flash_deinit()","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_deinit","textEdit":{"newText":"nvs_flash_deinit()","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Deinitialize NVS storage for the given NVS partition  \n@param[in] partition_label Label of the partition  \n@return  \n\\- ESP_OK on success  \n\\- ESP_ERR_NVS_NOT_INITIALIZED if the storage for given partition was not initialized prior to this call"},"filterText":"nvs_flash_deinit_partition","insertText":"nvs_flash_deinit_partition(${1:const char *partition_label})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_deinit_partition(const char *partition_label)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_deinit_partition","textEdit":{"newText":"nvs_flash_deinit_partition(${1:const char *partition_label})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Erase the default NVS partition  \nErases all contents of the default NVS partition (one with label \"nvs\").  \n@note If the partition is initialized, this function first de-initializes it. Afterwards, the partition has to be initialized again to be used.  \n@return  \n\\- ESP_OK on success  \n\\- ESP_ERR_NOT_FOUND if there is no NVS partition labeled \"nvs\" in the partition table  \n\\- different error in case de-initialization fails (shouldn't happen)"},"filterText":"nvs_flash_erase","insertText":"nvs_flash_erase()","insertTextFormat":2,"kind":3,"label":"•nvs_flash_erase()","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_erase","textEdit":{"newText":"nvs_flash_erase()","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Erase specified NVS partition  \nErase all content of a specified NVS partition  \n@note If the partition is initialized, this function first de-initializes it. Afterwards, the partition has to be initialized again to be used.  \n@param[in] part_name Name (label) of the partition which should be erased  \n@return  \n\\- ESP_OK on success  \n\\- ESP_ERR_NOT_FOUND if there is no NVS partition with the specified name in the partition table  \n\\- different error in case de-initialization fails (shouldn't happen)"},"filterText":"nvs_flash_erase_partition","insertText":"nvs_flash_erase_partition(${1:const char *part_name})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_erase_partition(const char *part_name)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_erase_partition","textEdit":{"newText":"nvs_flash_erase_partition(${1:const char *part_name})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Generate and store NVS keys in the provided esp partition  \n@param[in] partition Pointer to partition structure obtained using esp_partition_find_first or esp_partition_get.  \nMust be non-NULL.  \n@param[out] cfg Pointer to nvs security configuration structure.  \nPointer must be non-NULL.  \nGenerated keys will be populated in this structure.  \n@return  \n-ESP_OK, if cfg was read successfully;  \n-or error codes from esp_partition_write/erase APIs."},"filterText":"nvs_flash_generate_keys","insertText":"nvs_flash_generate_keys(${1:const esp_partition_t *partition}, ${2:nvs_sec_cfg_t *cfg})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_generate_keys(const esp_partition_t *partition, nvs_sec_cfg_t *cfg)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_generate_keys","textEdit":{"newText":"nvs_flash_generate_keys(${1:const esp_partition_t *partition}, ${2:nvs_sec_cfg_t *cfg})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Initialize the default NVS partition.  \nThis API initialises the default NVS partition. The default NVS partition is the one that is labeled \"nvs\" in the partition table.  \n@return  \n\\- ESP_OK if storage was successfully initialized.  \n\\- ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated)  \n\\- ESP_ERR_NOT_FOUND if no partition with label \"nvs\" is found in the partition table  \n\\- one of the error codes from the underlying flash storage driver"},"filterText":"nvs_flash_init","insertText":"nvs_flash_init()","insertTextFormat":2,"kind":3,"label":"•nvs_flash_init()","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_init","textEdit":{"newText":"nvs_flash_init()","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Initialize NVS flash storage for the specified partition.  \n@param[in] partition_label Label of the partition. Note that internally a reference to passed value is kept and it should be accessible for future operations  \n@return  \n\\- ESP_OK if storage was successfully initialized.  \n\\- ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated)  \n\\- ESP_ERR_NOT_FOUND if specified partition is not found in the partition table  \n\\- one of the error codes from the underlying flash storage driver"},"filterText":"nvs_flash_init_partition","insertText":"nvs_flash_init_partition(${1:const char *partition_label})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_init_partition(const char *partition_label)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_init_partition","textEdit":{"newText":"nvs_flash_init_partition(${1:const char *partition_label})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Read NVS security configuration from a partition.  \n@param[in] partition Pointer to partition structure obtained using esp_partition_find_first or esp_partition_get.  \nMust be non-NULL.  \n@param[out] cfg Pointer to nvs security configuration structure.  \nPointer must be non-NULL.  \n@note Provided parition is assumed to be marked 'encrypted'.  \n@return  \n-ESP_OK, if cfg was read successfully;  \n-ESP_ERR_NVS_KEYS_NOT_INITIALIZED, if the partition is not yet written with keys.  \n-ESP_ERR_NVS_CORRUPT_KEY_PART, if the partition containing keys is found to be corrupt  \n-or error codes from esp_partition_read API."},"filterText":"nvs_flash_read_security_cfg","insertText":"nvs_flash_read_security_cfg(${1:const esp_partition_t *partition}, ${2:nvs_sec_cfg_t *cfg})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_read_security_cfg(const esp_partition_t *partition, nvs_sec_cfg_t *cfg)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_read_security_cfg","textEdit":{"newText":"nvs_flash_read_security_cfg(${1:const esp_partition_t *partition}, ${2:nvs_sec_cfg_t *cfg})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Initialize the default NVS partition.  \nThis API initialises the default NVS partition. The default NVS partition is the one that is labeled \"nvs\" in the partition table.  \n@param[in] cfg Security configuration (keys) to be used for NVS encryption/decryption.  \nIf cfg is NULL, no encryption is used.  \n@return  \n\\- ESP_OK if storage was successfully initialized.  \n\\- ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated)  \n\\- ESP_ERR_NOT_FOUND if no partition with label \"nvs\" is found in the partition table  \n\\- one of the error codes from the underlying flash storage driver"},"filterText":"nvs_flash_secure_init","insertText":"nvs_flash_secure_init(${1:nvs_sec_cfg_t *cfg})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_secure_init(nvs_sec_cfg_t *cfg)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_secure_init","textEdit":{"newText":"nvs_flash_secure_init(${1:nvs_sec_cfg_t *cfg})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs_flash.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs_flash.h\"`  \n@brief Initialize NVS flash storage for the specified partition.  \n@param[in] partition_label Label of the partition. Note that internally a reference to passed value is kept and it should be accessible for future operations  \n@param[in] cfg Security configuration (keys) to be used for NVS encryption/decryption.  \nIf cfg is null, no encryption/decryption is used.  \n@return  \n\\- ESP_OK if storage was successfully initialized.  \n\\- ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages (which may happen if NVS partition was truncated)  \n\\- ESP_ERR_NOT_FOUND if specified partition is not found in the partition table  \n\\- one of the error codes from the underlying flash storage driver"},"filterText":"nvs_flash_secure_init_partition","insertText":"nvs_flash_secure_init_partition(${1:const char *partition_label}, ${2:nvs_sec_cfg_t *cfg})","insertTextFormat":2,"kind":3,"label":"•nvs_flash_secure_init_partition(const char *partition_label, nvs_sec_cfg_t *cfg)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_flash_secure_init_partition","textEdit":{"newText":"nvs_flash_secure_init_partition(${1:const char *partition_label}, ${2:nvs_sec_cfg_t *cfg})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_get_blob","insertText":"nvs_get_blob(${1:nvs_handle handle}, ${2:const char *key}, ${3:void *out_value}, ${4:size_t *length})","insertTextFormat":2,"kind":3,"label":"•nvs_get_blob(nvs_handle handle, const char *key, void *out_value, size_t *length)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_blob","textEdit":{"newText":"nvs_get_blob(${1:nvs_handle handle}, ${2:const char *key}, ${3:void *out_value}, ${4:size_t *length})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_get_i16","insertText":"nvs_get_i16(${1:nvs_handle handle}, ${2:const char *key}, ${3:int16_t *out_value})","insertTextFormat":2,"kind":3,"label":"•nvs_get_i16(nvs_handle handle, const char *key, int16_t *out_value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_i16","textEdit":{"newText":"nvs_get_i16(${1:nvs_handle handle}, ${2:const char *key}, ${3:int16_t *out_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_get_i32","insertText":"nvs_get_i32(${1:nvs_handle handle}, ${2:const char *key}, ${3:int32_t *out_value})","insertTextFormat":2,"kind":3,"label":"•nvs_get_i32(nvs_handle handle, const char *key, int32_t *out_value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_i32","textEdit":{"newText":"nvs_get_i32(${1:nvs_handle handle}, ${2:const char *key}, ${3:int32_t *out_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_get_i64","insertText":"nvs_get_i64(${1:nvs_handle handle}, ${2:const char *key}, ${3:int64_t *out_value})","insertTextFormat":2,"kind":3,"label":"•nvs_get_i64(nvs_handle handle, const char *key, int64_t *out_value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_i64","textEdit":{"newText":"nvs_get_i64(${1:nvs_handle handle}, ${2:const char *key}, ${3:int64_t *out_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@{  \n@brief get value for given key  \nThese functions retrieve value for the key, given its name. If key does not exist, or the requested variable type doesn't match the type which was used when setting a value, an error is returned.  \nIn case of any error, out_value is not modified.  \nAll functions expect out_value to be a pointer to an already allocated variable of the given type.  \n\\\\code{c} // Example of using nvs_get_i32:  \nint32_t max_buffer_size = 4096; // default value esp_err_t err = nvs_get_i32(my_handle, \"max_buffer_size\", &max_buffer_size);  \nassert(err == ESP_OK || err == ESP_ERR_NVS_NOT_FOUND);  \n// if ESP_ERR_NVS_NOT_FOUND was returned, max_buffer_size will still // have its default value.  \n\\\\endcode  \n@param[in] handle Handle obtained from nvs_open function.  \n@param[in] key Key name. Maximal length is determined by the underlying implementation, but is guaranteed to be at least 15 characters. Shouldn't be empty.  \n@param out_value Pointer to the output value.  \nMay be NULL for nvs_get_str and nvs_get_blob, in this case required length will be returned in length argument.  \n@return  \n\\- ESP_OK if the value was retrieved successfully  \n\\- ESP_ERR_NVS_NOT_FOUND if the requested key doesn't exist  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL  \n\\- ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints  \n\\- ESP_ERR_NVS_INVALID_LENGTH if length is not sufficient to store data"},"filterText":"nvs_get_i8","insertText":"nvs_get_i8(${1:nvs_handle handle}, ${2:const char *key}, ${3:int8_t *out_value})","insertTextFormat":2,"kind":3,"label":"•nvs_get_i8(nvs_handle handle, const char *key, int8_t *out_value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_i8","textEdit":{"newText":"nvs_get_i8(${1:nvs_handle handle}, ${2:const char *key}, ${3:int8_t *out_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief Fill structure nvs_stats_t. It provides info about used memory the partition.  \nThis function calculates to runtime the number of used entries, free entries, total entries,  \nand amount namespace in partition.  \n\\\\code{c} // Example of nvs_get_stats() to get the number of used entries and free entries:  \nnvs_stats_t nvs_stats;  \nnvs_get_stats(NULL, &nvs_stats);  \nprintf(\"Count: UsedEntries = (%d), FreeEntries = (%d), AllEntries = (%d)\\\\n\",  \nnvs_stats.used_entries, nvs_stats.free_entries, nvs_stats.total_entries);  \n\\\\endcode  \n@param[in] part_name Partition name NVS in the partition table.  \nIf pass a NULL than will use NVS_DEFAULT_PART_NAME (\"nvs\").  \n@param[out] nvs_stats Returns filled structure nvs_states_t.  \nIt provides info about used memory the partition.  \n@return  \n\\- ESP_OK if the changes have been written successfully.  \nReturn param nvs_stats will be filled.  \n\\- ESP_ERR_NVS_PART_NOT_FOUND if the partition with label \"name\" is not found.  \nReturn param nvs_stats will be filled 0.  \n\\- ESP_ERR_NVS_NOT_INITIALIZED if the storage driver is not initialized.  \nReturn param nvs_stats will be filled 0.  \n\\- ESP_ERR_INVALID_ARG if nvs_stats equal to NULL.  \n\\- ESP_ERR_INVALID_STATE if there is page with the status of INVALID.  \nReturn param nvs_stats will be filled not with correct values because not all pages will be counted. Counting will be interrupted at the first INVALID page."},"filterText":"nvs_get_stats","insertText":"nvs_get_stats(${1:const char *part_name}, ${2:nvs_stats_t *nvs_stats})","insertTextFormat":2,"kind":3,"label":"•nvs_get_stats(const char *part_name, nvs_stats_t *nvs_stats)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_stats","textEdit":{"newText":"nvs_get_stats(${1:const char *part_name}, ${2:nvs_stats_t *nvs_stats})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief get value for given key  \nThese functions retrieve value for the key, given its name. If key does not exist, or the requested variable type doesn't match the type which was used when setting a value, an error is returned.  \nIn case of any error, out_value is not modified.  \nAll functions expect out_value to be a pointer to an already allocated variable of the given type.  \nnvs_get_str and nvs_get_blob functions support WinAPI-style length queries.  \nTo get the size necessary to store the value, call nvs_get_str or nvs_get_blob with zero out_value and non-zero pointer to length. Variable pointed to by length argument will be set to the required length. For nvs_get_str,  \nthis length includes the zero terminator. When calling nvs_get_str and nvs_get_blob with non-zero out_value, length has to be non-zero and has to point to the length available in out_value.  \nIt is suggested that nvs_get/set_str is used for zero-terminated C strings, and nvs_get/set_blob used for arbitrary data structures.  \n\\\\code{c} // Example (without error checking) of using nvs_get_str to get a string into dynamic array:  \nsize_t required_size;  \nnvs_get_str(my_handle, \"server_name\", NULL, &required_size);  \nchar\\* server_name = malloc(required_size);  \nnvs_get_str(my_handle, \"server_name\", server_name, &required_size);  \n// Example (without error checking) of using nvs_get_blob to get a binary data into a static array:  \nuint8_t mac_addr[6];  \nsize_t size = sizeof(mac_addr);  \nnvs_get_blob(my_handle, \"dst_mac_addr\", mac_addr, &size);  \n\\\\endcode  \n@param[in] handle Handle obtained from nvs_open function.  \n@param[in] key Key name. Maximal length is determined by the underlying implementation, but is guaranteed to be at least 15 characters. Shouldn't be empty.  \n@param out_value Pointer to the output value.  \nMay be NULL for nvs_get_str and nvs_get_blob, in this case required length will be returned in length argument.  \n@param[inout] length A non-zero pointer to the variable holding the length of out_value.  \nIn case out_value a zero, will be set to the length required to hold the value. In case out_value is not zero, will be set to the actual length of the value written. For nvs_get_str this includes zero terminator.  \n@return  \n\\- ESP_OK if the value was retrieved successfully  \n\\- ESP_ERR_NVS_NOT_FOUND if the requested key doesn't exist  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL  \n\\- ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints  \n\\- ESP_ERR_NVS_INVALID_LENGTH if length is not sufficient to store data  \n@{"},"filterText":"nvs_get_str","insertText":"nvs_get_str(${1:nvs_handle handle}, ${2:const char *key}, ${3:char *out_value}, ${4:size_t *length})","insertTextFormat":2,"kind":3,"label":"•nvs_get_str(nvs_handle handle, const char *key, char *out_value, size_t *length)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_str","textEdit":{"newText":"nvs_get_str(${1:nvs_handle handle}, ${2:const char *key}, ${3:char *out_value}, ${4:size_t *length})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_get_u16","insertText":"nvs_get_u16(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint16_t *out_value})","insertTextFormat":2,"kind":3,"label":"•nvs_get_u16(nvs_handle handle, const char *key, uint16_t *out_value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_u16","textEdit":{"newText":"nvs_get_u16(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint16_t *out_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_get_u32","insertText":"nvs_get_u32(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint32_t *out_value})","insertTextFormat":2,"kind":3,"label":"•nvs_get_u32(nvs_handle handle, const char *key, uint32_t *out_value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_u32","textEdit":{"newText":"nvs_get_u32(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint32_t *out_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_get_u64","insertText":"nvs_get_u64(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint64_t *out_value})","insertTextFormat":2,"kind":3,"label":"•nvs_get_u64(nvs_handle handle, const char *key, uint64_t *out_value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_u64","textEdit":{"newText":"nvs_get_u64(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint64_t *out_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_get_u8","insertText":"nvs_get_u8(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint8_t *out_value})","insertTextFormat":2,"kind":3,"label":"•nvs_get_u8(nvs_handle handle, const char *key, uint8_t *out_value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_u8","textEdit":{"newText":"nvs_get_u8(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint8_t *out_value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief Calculate all entries in a namespace.  \nNote that to find out the total number of records occupied by the namespace,  \nadd one to the returned value used_entries (if err is equal to ESP_OK).  \nBecause the name space entry takes one entry.  \n\\\\code{c} // Example of nvs_get_used_entry_count() to get amount of all key-value pairs in one namespace:  \nnvs_handle handle;  \nnvs_open(\"namespace1\", NVS_READWRITE, &handle);  \n...  \nsize_t used_entries;  \nsize_t total_entries_namespace;  \nif(nvs_get_used_entry_count(handle, &used_entries) == ESP_OK){ // the total number of records occupied by the namespace total_entries_namespace = used_entries + 1;  \n}  \n\\\\endcode  \n@param[in] handle Handle obtained from nvs_open function.  \n@param[out] used_entries Returns amount of used entries from a namespace.  \n@return  \n\\- ESP_OK if the changes have been written successfully.  \nReturn param used_entries will be filled valid value.  \n\\- ESP_ERR_NVS_NOT_INITIALIZED if the storage driver is not initialized.  \nReturn param used_entries will be filled 0.  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL.  \nReturn param used_entries will be filled 0.  \n\\- ESP_ERR_INVALID_ARG if nvs_stats equal to NULL.  \n\\- Other error codes from the underlying storage driver.  \nReturn param used_entries will be filled 0."},"filterText":"nvs_get_used_entry_count","insertText":"nvs_get_used_entry_count(${1:nvs_handle handle}, ${2:size_t *used_entries})","insertTextFormat":2,"kind":3,"label":"•nvs_get_used_entry_count(nvs_handle handle, size_t *used_entries)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_get_used_entry_count","textEdit":{"newText":"nvs_get_used_entry_count(${1:nvs_handle handle}, ${2:size_t *used_entries})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief Open non-volatile storage with a given namespace from the default NVS partition  \nMultiple internal ESP-IDF and third party application modules can store their key-value pairs in the NVS module. In order to reduce possible conflicts on key names, each module can use its own namespace.  \nThe default NVS partition is the one that is labelled \"nvs\" in the partition table.  \n@param[in] name Namespace name. Maximal length is determined by the underlying implementation, but is guaranteed to be at least 15 characters. Shouldn't be empty.  \n@param[in] open_mode NVS_READWRITE or NVS_READONLY. If NVS_READONLY, will open a handle for reading only. All write requests will be rejected for this handle.  \n@param[out] out_handle If successful (return code is zero), handle will be returned in this argument.  \n@return  \n\\- ESP_OK if storage handle was opened successfully  \n\\- ESP_ERR_NVS_NOT_INITIALIZED if the storage driver is not initialized  \n\\- ESP_ERR_NVS_PART_NOT_FOUND if the partition with label \"nvs\" is not found  \n\\- ESP_ERR_NVS_NOT_FOUND id namespace doesn't exist yet and mode is NVS_READONLY  \n\\- ESP_ERR_NVS_INVALID_NAME if namespace name doesn't satisfy constraints  \n\\- other error codes from the underlying storage driver"},"filterText":"nvs_open","insertText":"nvs_open(${1:const char *name}, ${2:nvs_open_mode open_mode}, ${3:nvs_handle *out_handle})","insertTextFormat":2,"kind":3,"label":"•nvs_open(const char *name, nvs_open_mode open_mode, nvs_handle *out_handle)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_open","textEdit":{"newText":"nvs_open(${1:const char *name}, ${2:nvs_open_mode open_mode}, ${3:nvs_handle *out_handle})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief Open non-volatile storage with a given namespace from specified partition  \nThe behaviour is same as nvs_open() API. However this API can operate on a specified NVS partition instead of default NVS partition. Note that the specified partition must be registered with NVS using nvs_flash_init_partition() API.  \n@param[in] part_name Label (name) of the partition of interest for object read/write/erase  \n@param[in] name Namespace name. Maximal length is determined by the underlying implementation, but is guaranteed to be at least 15 characters. Shouldn't be empty.  \n@param[in] open_mode NVS_READWRITE or NVS_READONLY. If NVS_READONLY, will open a handle for reading only. All write requests will be rejected for this handle.  \n@param[out] out_handle If successful (return code is zero), handle will be returned in this argument.  \n@return  \n\\- ESP_OK if storage handle was opened successfully  \n\\- ESP_ERR_NVS_NOT_INITIALIZED if the storage driver is not initialized  \n\\- ESP_ERR_NVS_PART_NOT_FOUND if the partition with specified name is not found  \n\\- ESP_ERR_NVS_NOT_FOUND id namespace doesn't exist yet and mode is NVS_READONLY  \n\\- ESP_ERR_NVS_INVALID_NAME if namespace name doesn't satisfy constraints  \n\\- other error codes from the underlying storage driver"},"filterText":"nvs_open_from_partition","insertText":"nvs_open_from_partition(${1:const char *part_name}, ${2:const char *name}, ${3:nvs_open_mode open_mode}, ${4:nvs_handle *out_handle})","insertTextFormat":2,"kind":3,"label":"•nvs_open_from_partition(const char *part_name, const char *name, nvs_open_mode open_mode, nvs_handle *out_handle)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_open_from_partition","textEdit":{"newText":"nvs_open_from_partition(${1:const char *part_name}, ${2:const char *name}, ${3:nvs_open_mode open_mode}, ${4:nvs_handle *out_handle})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@brief set variable length binary value for given key  \nThis family of functions set value for the key, given its name. Note that actual storage will not be updated until nvs_commit function is called.  \n@param[in] handle Handle obtained from nvs_open function.  \nHandles that were opened read only cannot be used.  \n@param[in] key Key name. Maximal length is 15 characters. Shouldn't be empty.  \n@param[in] value The value to set.  \n@param[in] length length of binary value to set, in bytes; Maximum length is 508000 bytes or (97.6% of the partition size - 4000) bytes whichever is lower.  \n@return  \n\\- ESP_OK if value was set successfully  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL  \n\\- ESP_ERR_NVS_READ_ONLY if storage handle was opened as read only  \n\\- ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints  \n\\- ESP_ERR_NVS_NOT_ENOUGH_SPACE if there is not enough space in the underlying storage to save the value  \n\\- ESP_ERR_NVS_REMOVE_FAILED if the value wasn't updated because flash write operation has failed. The value was written however, and update will be finished after re-initialization of nvs, provided that flash operation doesn't fail again.  \n\\- ESP_ERR_NVS_VALUE_TOO_LONG if the value is too long"},"filterText":"nvs_set_blob","insertText":"nvs_set_blob(${1:nvs_handle handle}, ${2:const char *key}, ${3:const void *value}, ${4:size_t length})","insertTextFormat":2,"kind":3,"label":"•nvs_set_blob(nvs_handle handle, const char *key, const void *value, size_t length)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_blob","textEdit":{"newText":"nvs_set_blob(${1:nvs_handle handle}, ${2:const char *key}, ${3:const void *value}, ${4:size_t length})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_i16","insertText":"nvs_set_i16(${1:nvs_handle handle}, ${2:const char *key}, ${3:int16_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_i16(nvs_handle handle, const char *key, int16_t value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_i16","textEdit":{"newText":"nvs_set_i16(${1:nvs_handle handle}, ${2:const char *key}, ${3:int16_t value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_i32","insertText":"nvs_set_i32(${1:nvs_handle handle}, ${2:const char *key}, ${3:int32_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_i32(nvs_handle handle, const char *key, int32_t value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_i32","textEdit":{"newText":"nvs_set_i32(${1:nvs_handle handle}, ${2:const char *key}, ${3:int32_t value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_i64","insertText":"nvs_set_i64(${1:nvs_handle handle}, ${2:const char *key}, ${3:int64_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_i64(nvs_handle handle, const char *key, int64_t value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_i64","textEdit":{"newText":"nvs_set_i64(${1:nvs_handle handle}, ${2:const char *key}, ${3:int64_t value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`  \n@{  \n@brief set value for given key  \nThis family of functions set value for the key, given its name. Note that actual storage will not be updated until nvs_commit function is called.  \n@param[in] handle Handle obtained from nvs_open function.  \nHandles that were opened read only cannot be used.  \n@param[in] key Key name. Maximal length is determined by the underlying implementation, but is guaranteed to be at least 15 characters. Shouldn't be empty.  \n@param[in] value The value to set.  \nFor strings, the maximum length (including null character) is 4000 bytes.  \n@return  \n\\- ESP_OK if value was set successfully  \n\\- ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL  \n\\- ESP_ERR_NVS_READ_ONLY if storage handle was opened as read only  \n\\- ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints  \n\\- ESP_ERR_NVS_NOT_ENOUGH_SPACE if there is not enough space in the underlying storage to save the value  \n\\- ESP_ERR_NVS_REMOVE_FAILED if the value wasn't updated because flash write operation has failed. The value was written however, and update will be finished after re-initialization of nvs, provided that flash operation doesn't fail again.  \n\\- ESP_ERR_NVS_VALUE_TOO_LONG if the string value is too long"},"filterText":"nvs_set_i8","insertText":"nvs_set_i8(${1:nvs_handle handle}, ${2:const char *key}, ${3:int8_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_i8(nvs_handle handle, const char *key, int8_t value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_i8","textEdit":{"newText":"nvs_set_i8(${1:nvs_handle handle}, ${2:const char *key}, ${3:int8_t value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_str","insertText":"nvs_set_str(${1:nvs_handle handle}, ${2:const char *key}, ${3:const char *value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_str(nvs_handle handle, const char *key, const char *value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_str","textEdit":{"newText":"nvs_set_str(${1:nvs_handle handle}, ${2:const char *key}, ${3:const char *value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_u16","insertText":"nvs_set_u16(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint16_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_u16(nvs_handle handle, const char *key, uint16_t value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_u16","textEdit":{"newText":"nvs_set_u16(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint16_t value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_u32","insertText":"nvs_set_u32(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint32_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_u32(nvs_handle handle, const char *key, uint32_t value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_u32","textEdit":{"newText":"nvs_set_u32(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint32_t value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_u64","insertText":"nvs_set_u64(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint64_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_u64(nvs_handle handle, const char *key, uint64_t value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_u64","textEdit":{"newText":"nvs_set_u64(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint64_t value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"nvs.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"esp_err_t","documentation":{"kind":"markdown","value":"From `\"nvs.h\"`"},"filterText":"nvs_set_u8","insertText":"nvs_set_u8(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint8_t value})","insertTextFormat":2,"kind":3,"label":"•nvs_set_u8(nvs_handle handle, const char *key, uint8_t value)","score":4.0787649154663086,"sortText":"3f7d7ac2nvs_set_u8","textEdit":{"newText":"nvs_set_u8(${1:nvs_handle handle}, ${2:const char *key}, ${3:uint8_t value})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"nullptr_t","insertText":"nullptr_t","insertTextFormat":2,"kind":8,"label":"•nullptr_t","score":1.5037370920181274,"sortText":"403f858bnullptr_t","textEdit":{"newText":"nullptr_t","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_A","insertText":"NOTE_A","insertTextFormat":2,"kind":20,"label":"•NOTE_A","score":1.3747211694717407,"sortText":"40500923NOTE_A","textEdit":{"newText":"NOTE_A","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_B","insertText":"NOTE_B","insertTextFormat":2,"kind":20,"label":"•NOTE_B","score":1.3747211694717407,"sortText":"40500923NOTE_B","textEdit":{"newText":"NOTE_B","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_Bb","insertText":"NOTE_Bb","insertTextFormat":2,"kind":20,"label":"•NOTE_Bb","score":1.3747211694717407,"sortText":"40500923NOTE_Bb","textEdit":{"newText":"NOTE_Bb","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_C","insertText":"NOTE_C","insertTextFormat":2,"kind":20,"label":"•NOTE_C","score":1.3747211694717407,"sortText":"40500923NOTE_C","textEdit":{"newText":"NOTE_C","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_Cs","insertText":"NOTE_Cs","insertTextFormat":2,"kind":20,"label":"•NOTE_Cs","score":1.3747211694717407,"sortText":"40500923NOTE_Cs","textEdit":{"newText":"NOTE_Cs","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_D","insertText":"NOTE_D","insertTextFormat":2,"kind":20,"label":"•NOTE_D","score":1.3747211694717407,"sortText":"40500923NOTE_D","textEdit":{"newText":"NOTE_D","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_E","insertText":"NOTE_E","insertTextFormat":2,"kind":20,"label":"•NOTE_E","score":1.3747211694717407,"sortText":"40500923NOTE_E","textEdit":{"newText":"NOTE_E","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_Eb","insertText":"NOTE_Eb","insertTextFormat":2,"kind":20,"label":"•NOTE_Eb","score":1.3747211694717407,"sortText":"40500923NOTE_Eb","textEdit":{"newText":"NOTE_Eb","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_F","insertText":"NOTE_F","insertTextFormat":2,"kind":20,"label":"•NOTE_F","score":1.3747211694717407,"sortText":"40500923NOTE_F","textEdit":{"newText":"NOTE_F","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_Fs","insertText":"NOTE_Fs","insertTextFormat":2,"kind":20,"label":"•NOTE_Fs","score":1.3747211694717407,"sortText":"40500923NOTE_Fs","textEdit":{"newText":"NOTE_Fs","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_G","insertText":"NOTE_G","insertTextFormat":2,"kind":20,"label":"•NOTE_G","score":1.3747211694717407,"sortText":"40500923NOTE_G","textEdit":{"newText":"NOTE_G","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_Gs","insertText":"NOTE_Gs","insertTextFormat":2,"kind":20,"label":"•NOTE_Gs","score":1.3747211694717407,"sortText":"40500923NOTE_Gs","textEdit":{"newText":"NOTE_Gs","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"note_t","documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"NOTE_MAX","insertText":"NOTE_MAX","insertTextFormat":2,"kind":20,"label":"•NOTE_MAX","score":1.3747211694717407,"sortText":"40500923NOTE_MAX","textEdit":{"newText":"NOTE_MAX","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"esp32-hal-ledc.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"esp32-hal-ledc.h\"`"},"filterText":"note_t","insertText":"note_t","insertTextFormat":2,"kind":8,"label":"•note_t","score":1.3747211694717407,"sortText":"40500923note_t","textEdit":{"newText":"note_t","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nan","insertText":"nan(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•nan(const char *)","score":1.2690916061401367,"sortText":"405d8e68nan","textEdit":{"newText":"nan(${1:const char *})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nanf","insertText":"nanf(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•nanf(const char *)","score":1.2690916061401367,"sortText":"405d8e68nanf","textEdit":{"newText":"nanf(${1:const char *})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nanl","insertText":"nanl(${1:const char *})","insertTextFormat":2,"kind":3,"label":"•nanl(const char *)","score":1.2690916061401367,"sortText":"405d8e68nanl","textEdit":{"newText":"nanl(${1:const char *})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nearbyint","insertText":"nearbyint(${1:double})","insertTextFormat":2,"kind":3,"label":"•nearbyint(double)","score":1.2690916061401367,"sortText":"405d8e68nearbyint","textEdit":{"newText":"nearbyint(${1:double})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nearbyintf","insertText":"nearbyintf(${1:float})","insertTextFormat":2,"kind":3,"label":"•nearbyintf(float)","score":1.2690916061401367,"sortText":"405d8e68nearbyintf","textEdit":{"newText":"nearbyintf(${1:float})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nearbyintl","insertText":"nearbyintl(${1:long double})","insertTextFormat":2,"kind":3,"label":"•nearbyintl(long double)","score":1.2690916061401367,"sortText":"405d8e68nearbyintl","textEdit":{"newText":"nearbyintl(${1:long double})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nextafter","insertText":"nextafter(${1:double}, ${2:double})","insertTextFormat":2,"kind":3,"label":"•nextafter(double, double)","score":1.2690916061401367,"sortText":"405d8e68nextafter","textEdit":{"newText":"nextafter(${1:double}, ${2:double})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nextafterf","insertText":"nextafterf(${1:float}, ${2:float})","insertTextFormat":2,"kind":3,"label":"•nextafterf(float, float)","score":1.2690916061401367,"sortText":"405d8e68nextafterf","textEdit":{"newText":"nextafterf(${1:float}, ${2:float})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nextafterl","insertText":"nextafterl(${1:long double}, ${2:long double})","insertTextFormat":2,"kind":3,"label":"•nextafterl(long double, long double)","score":1.2690916061401367,"sortText":"405d8e68nextafterl","textEdit":{"newText":"nextafterl(${1:long double}, ${2:long double})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nexttoward","insertText":"nexttoward(${1:double}, ${2:long double})","insertTextFormat":2,"kind":3,"label":"•nexttoward(double, long double)","score":1.2690916061401367,"sortText":"405d8e68nexttoward","textEdit":{"newText":"nexttoward(${1:double}, ${2:long double})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"float","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nexttowardf","insertText":"nexttowardf(${1:float}, ${2:long double})","insertTextFormat":2,"kind":3,"label":"•nexttowardf(float, long double)","score":1.2690916061401367,"sortText":"405d8e68nexttowardf","textEdit":{"newText":"nexttowardf(${1:float}, ${2:long double})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"math.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"long double","documentation":{"kind":"markdown","value":"From `\"math.h\"`"},"filterText":"nexttowardl","insertText":"nexttowardl(${1:long double}, ${2:long double})","insertTextFormat":2,"kind":3,"label":"•nexttowardl(long double, long double)","score":1.2690916061401367,"sortText":"405d8e68nexttowardl","textEdit":{"newText":"nexttowardl(${1:long double}, ${2:long double})","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <sys/types.h>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<sys/types.h>`"},"filterText":"nlink_t","insertText":"nlink_t","insertTextFormat":2,"kind":8,"label":"•nlink_t","score":1.2690916061401367,"sortText":"405d8e68nlink_t","textEdit":{"newText":"nlink_t","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nearbyint","insertText":"std::nearbyint($0)","insertTextFormat":2,"kind":3,"label":"•std::nearbyint(…)","score":1.2531143426895142,"sortText":"405f99f3nearbyint","textEdit":{"newText":"std::nearbyint($0)","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"detail":"[3 overloads]","documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nexttoward","insertText":"std::nexttoward($0)","insertTextFormat":2,"kind":3,"label":"•std::nexttoward(…)","score":1.2531143426895142,"sortText":"405f99f3nexttoward","textEdit":{"newText":"std::nexttoward($0)","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nan","insertText":"std::nan","insertTextFormat":2,"kind":18,"label":"•std::nan","score":1.1391948461532593,"sortText":"406e2eddnan","textEdit":{"newText":"std::nan","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nanf","insertText":"std::nanf","insertTextFormat":2,"kind":18,"label":"•std::nanf","score":1.1391948461532593,"sortText":"406e2eddnanf","textEdit":{"newText":"std::nanf","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nanl","insertText":"std::nanl","insertTextFormat":2,"kind":18,"label":"•std::nanl","score":1.1391948461532593,"sortText":"406e2eddnanl","textEdit":{"newText":"std::nanl","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nearbyint","insertText":"std::nearbyint","insertTextFormat":2,"kind":18,"label":"•std::nearbyint","score":1.1391948461532593,"sortText":"406e2eddnearbyint","textEdit":{"newText":"std::nearbyint","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nearbyintf","insertText":"std::nearbyintf","insertTextFormat":2,"kind":18,"label":"•std::nearbyintf","score":1.1391948461532593,"sortText":"406e2eddnearbyintf","textEdit":{"newText":"std::nearbyintf","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nearbyintl","insertText":"std::nearbyintl","insertTextFormat":2,"kind":18,"label":"•std::nearbyintl","score":1.1391948461532593,"sortText":"406e2eddnearbyintl","textEdit":{"newText":"std::nearbyintl","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nextafter","insertText":"std::nextafter","insertTextFormat":2,"kind":18,"label":"•std::nextafter","score":1.1391948461532593,"sortText":"406e2eddnextafter","textEdit":{"newText":"std::nextafter","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cmath>`"},"filterText":"nextafterf","insertText":"std::nextafterf","insertTextFormat":2,"kind":18,"label":"•std::nextafterf","score":1.1391948461532593,"sortText":"406e2eddnextafterf","textEdit":{"newText":"std::nextafterf","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}}}}]}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":141},"contentChanges":[{"range":{"start":{"line":167,"character":33},"end":{"line":167,"character":33}},"text":"U"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2791

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":46,"line":167},"start":{"character":35,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":71,"line":167},"start":{"character":59,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":78,"line":167},"start":{"character":73,"line":167}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'N'","range":{"end":{"character":33,"line":167},"start":{"character":32,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":140}}
>>>
Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":34},"context":{"triggerKind":3}},"id":243,"jsonrpc":"2.0"}
<<<
Content-Length: 6592

{"id":243,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"std::nullptr_t","filterText":"nullptr","insertText":"nullptr","insertTextFormat":2,"kind":15,"label":" nullptr","score":8,"sortText":"3f200000nullptr","textEdit":{"newText":"nullptr","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"filterText":"_Null_unspecified","insertText":"_Null_unspecified","insertTextFormat":2,"kind":14,"label":" _Null_unspecified","score":8,"sortText":"40000000_Null_unspecified","textEdit":{"newText":"_Null_unspecified","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"filterText":"_Nullable","insertText":"_Nullable","insertTextFormat":2,"kind":14,"label":" _Nullable","score":8,"sortText":"40000000_Nullable","textEdit":{"newText":"_Nullable","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"nullptr_t","insertText":"nullptr_t","insertTextFormat":2,"kind":8,"label":"•nullptr_t","score":1.503737211227417,"sortText":"405794d9nullptr_t","textEdit":{"newText":"nullptr_t","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"nullptr_t","insertText":"std::nullptr_t","insertTextFormat":2,"kind":8,"label":"•std::nullptr_t","score":1.0575764179229736,"sortText":"40931a57nullptr_t","textEdit":{"newText":"std::nullptr_t","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <limits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<limits>`  \n@brief Properties of fundamental types.  \nThis class allows a program to obtain information about the representation of a fundamental type on a given platform. For non-fundamental types, the functions will return 0 and the data members will all be @c false.  \n\\_GLIBCXX_RESOLVE_LIB_DEFECTS: DRs 201 and 184 (hi Gaby!) are noted, but not incorporated in this documented (yet)."},"filterText":"numeric_limits","insertText":"std::numeric_limits<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::numeric_limits<typename _Tp>","score":0.98550808429718018,"sortText":"40a33f06numeric_limits","textEdit":{"newText":"std::numeric_limits<${1:typename _Tp}>","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <locale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<locale>`  \n22.2.2 and 22.2.3 numeric"},"filterText":"num_get","insertText":"std::num_get<${1:typename _CharT}>","insertTextFormat":2,"kind":7,"label":"•std::num_get<typename _CharT, typename _InIter>","score":0.92650353908538818,"sortText":"40b07695num_get","textEdit":{"newText":"std::num_get<${1:typename _CharT}>","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <locale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<locale>`"},"filterText":"num_put","insertText":"std::num_put<${1:typename _CharT}>","insertTextFormat":2,"kind":7,"label":"•std::num_put<typename _CharT, typename _OutIter>","score":0.92650353908538818,"sortText":"40b07695num_put","textEdit":{"newText":"std::num_put<${1:typename _CharT}>","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <locale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<locale>`"},"filterText":"numpunct","insertText":"std::numpunct<${1:typename _CharT}>","insertTextFormat":2,"kind":7,"label":"•std::numpunct<typename _CharT>","score":0.92650353908538818,"sortText":"40b07695numpunct","textEdit":{"newText":"std::numpunct<${1:typename _CharT}>","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <locale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<locale>`"},"filterText":"numpunct_byname","insertText":"std::numpunct_byname<${1:typename _CharT}>","insertTextFormat":2,"kind":7,"label":"•std::numpunct_byname<typename _CharT>","score":0.92650353908538818,"sortText":"40b07695numpunct_byname","textEdit":{"newText":"std::numpunct_byname<${1:typename _CharT}>","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"NULL","insertText":"NULL","insertTextFormat":2,"kind":1,"label":"•NULL","score":0.68351686000823975,"sortText":"40d1050aNULL","textEdit":{"newText":"NULL","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"NUM_ANALOG_INPUTS","insertText":"NUM_ANALOG_INPUTS","insertTextFormat":2,"kind":1,"label":"•NUM_ANALOG_INPUTS","score":0.68351686000823975,"sortText":"40d1050aNUM_ANALOG_INPUTS","textEdit":{"newText":"NUM_ANALOG_INPUTS","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"NUM_DIGITAL_PINS","insertText":"NUM_DIGITAL_PINS","insertTextFormat":2,"kind":1,"label":"•NUM_DIGITAL_PINS","score":0.68351686000823975,"sortText":"40d1050aNUM_DIGITAL_PINS","textEdit":{"newText":"NUM_DIGITAL_PINS","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}}}}]}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":244,"jsonrpc":"2.0"}
<<<
Content-Length: 2792

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":47,"line":167},"start":{"character":36,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":72,"line":167},"start":{"character":60,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":79,"line":167},"start":{"character":74,"line":167}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'NU'","range":{"end":{"character":34,"line":167},"start":{"character":32,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":141}}Content-Length: 6895

{"id":244,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":142},"contentChanges":[{"range":{"start":{"line":167,"character":34},"end":{"line":167,"character":34}},"text":"L"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":143},"contentChanges":[{"range":{"start":{"line":167,"character":35},"end":{"line":167,"character":35}},"text":"L"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2793

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":48,"line":167},"start":{"character":37,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":73,"line":167},"start":{"character":61,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":80,"line":167},"start":{"character":75,"line":167}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'NUL'","range":{"end":{"character":35,"line":167},"start":{"character":32,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":142}}Content-Length: 2606

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'UBaseType_t': expected expression","range":{"end":{"character":49,"line":167},"start":{"character":38,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":74,"line":167},"start":{"character":62,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":81,"line":167},"start":{"character":76,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":143}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":36},"end":{"line":167,"character":36}},"context":{"diagnostics":[]}},"id":245,"jsonrpc":"2.0"}
<<<
Content-Length: 362

{"id":245,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":36,"line":167},"start":{"character":36,"line":167}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":246,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":246,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":38}},"id":247,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":247,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 483

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":38}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":49}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'UBaseType_t': expected expression"}]}},"id":248,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":248,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 483

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":49}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":49}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'UBaseType_t': expected expression"}]}},"id":249,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":249,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 483

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":60}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":49}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'UBaseType_t': expected expression"}]}},"id":250,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":250,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 299

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":144},"contentChanges":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":60}},"rangeLength":22,"text":""}]},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":145},"contentChanges":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":38}},"text":"\\"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2571

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":39,"line":167},"start":{"character":38,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":53,"line":167},"start":{"character":41,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":60,"line":167},"start":{"character":55,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":145}}
>>>
Content-Length: 448

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":39},"end":{"line":167,"character":39}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":39}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":251,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":251,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":252,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":252,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":146},"contentChanges":[{"range":{"start":{"line":167,"character":39},"end":{"line":167,"character":39}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2571

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":39,"line":167},"start":{"character":38,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":54,"line":167},"start":{"character":42,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":61,"line":167},"start":{"character":56,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":146}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":41}},"context":{"diagnostics":[]}},"id":253,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":253,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":254,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":254,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":40}},"id":255,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":255,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":147},"contentChanges":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":39}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":148},"contentChanges":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":38}},"text":"]"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2571

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":39,"line":167},"start":{"character":38,"line":167}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":54,"line":167},"start":{"character":42,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":61,"line":167},"start":{"character":56,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":148}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":40}},"id":256,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":256,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":257,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":257,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":40},"end":{"line":167,"character":40}},"context":{"diagnostics":[]}},"id":258,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":258,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":149},"contentChanges":[{"range":{"start":{"line":167,"character":38},"end":{"line":167,"character":39}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2398

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"unexpected_typedef","message":"Unexpected type name 'TaskHandle_t': expected expression","range":{"end":{"character":53,"line":167},"start":{"character":41,"line":167}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":60,"line":167},"start":{"character":55,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":149}}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":39}},"id":259,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":259,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":260,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":260,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":39},"end":{"line":167,"character":39}},"context":{"diagnostics":[]}},"id":261,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":261,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":40},"end":{"line":167,"character":40}},"context":{"diagnostics":[]}},"id":262,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":262,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":41}},"id":263,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":263,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 484

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":41}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":53}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'TaskHandle_t': expected expression"}]}},"id":264,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":264,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 484

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":53}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":53}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'TaskHandle_t': expected expression"}]}},"id":265,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":265,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 657

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":60}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":53}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'TaskHandle_t': expected expression"},{"range":{"start":{"line":167,"character":55},"end":{"line":167,"character":60}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":266,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":266,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 657

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":74}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":53}},"severity":1,"code":"unexpected_typedef","source":"clang","message":"Unexpected type name 'TaskHandle_t': expected expression"},{"range":{"start":{"line":167,"character":55},"end":{"line":167,"character":60}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":267,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":267,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 300

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":150},"contentChanges":[{"range":{"start":{"line":167,"character":41},"end":{"line":167,"character":74}},"rangeLength":33,"text":"N"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":151},"contentChanges":[{"range":{"start":{"line":167,"character":42},"end":{"line":167,"character":42}},"text":"U"}]},"jsonrpc":"2.0"}Content-Length: 234

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":43},"context":{"triggerKind":1}},"id":268,"jsonrpc":"2.0"}
<<<
Content-Length: 6594

{"id":268,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"std::nullptr_t","filterText":"nullptr","insertText":"nullptr","insertTextFormat":2,"kind":15,"label":" nullptr","score":12,"sortText":"3ed80000nullptr","textEdit":{"newText":"nullptr","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"filterText":"_Null_unspecified","insertText":"_Null_unspecified","insertTextFormat":2,"kind":14,"label":" _Null_unspecified","score":12,"sortText":"3fc00000_Null_unspecified","textEdit":{"newText":"_Null_unspecified","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"filterText":"_Nullable","insertText":"_Nullable","insertTextFormat":2,"kind":14,"label":" _Nullable","score":12,"sortText":"3fc00000_Nullable","textEdit":{"newText":"_Nullable","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"nullptr_t","insertText":"nullptr_t","insertTextFormat":2,"kind":8,"label":"•nullptr_t","score":2.255605936050415,"sortText":"40035f45nullptr_t","textEdit":{"newText":"nullptr_t","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"nullptr_t","insertText":"std::nullptr_t","insertTextFormat":2,"kind":8,"label":"•std::nullptr_t","score":1.5863646268844604,"sortText":"404e53c1nullptr_t","textEdit":{"newText":"std::nullptr_t","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<cstddef>`"},"filterText":"NULL","insertText":"NULL","insertTextFormat":2,"kind":1,"label":"•NULL","score":1.0252752304077148,"sortText":"407cc3c8NULL","textEdit":{"newText":"NULL","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <limits>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<limits>`  \n@brief Properties of fundamental types.  \nThis class allows a program to obtain information about the representation of a fundamental type on a given platform. For non-fundamental types, the functions will return 0 and the data members will all be @c false.  \n\\_GLIBCXX_RESOLVE_LIB_DEFECTS: DRs 201 and 184 (hi Gaby!) are noted, but not incorporated in this documented (yet)."},"filterText":"numeric_limits","insertText":"std::numeric_limits<${1:typename _Tp}>","insertTextFormat":2,"kind":22,"label":"•std::numeric_limits<typename _Tp>","score":0.98550808429718018,"sortText":"40a33f06numeric_limits","textEdit":{"newText":"std::numeric_limits<${1:typename _Tp}>","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <locale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<locale>`  \n22.2.2 and 22.2.3 numeric"},"filterText":"num_get","insertText":"std::num_get<${1:typename _CharT}>","insertTextFormat":2,"kind":7,"label":"•std::num_get<typename _CharT, typename _InIter>","score":0.92650353908538818,"sortText":"40b07695num_get","textEdit":{"newText":"std::num_get<${1:typename _CharT}>","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <locale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<locale>`"},"filterText":"num_put","insertText":"std::num_put<${1:typename _CharT}>","insertTextFormat":2,"kind":7,"label":"•std::num_put<typename _CharT, typename _OutIter>","score":0.92650353908538818,"sortText":"40b07695num_put","textEdit":{"newText":"std::num_put<${1:typename _CharT}>","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <locale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<locale>`"},"filterText":"numpunct","insertText":"std::numpunct<${1:typename _CharT}>","insertTextFormat":2,"kind":7,"label":"•std::numpunct<typename _CharT>","score":0.92650353908538818,"sortText":"40b07695numpunct","textEdit":{"newText":"std::numpunct<${1:typename _CharT}>","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include <locale>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}],"documentation":{"kind":"markdown","value":"From `<locale>`"},"filterText":"numpunct_byname","insertText":"std::numpunct_byname<${1:typename _CharT}>","insertTextFormat":2,"kind":7,"label":"•std::numpunct_byname<typename _CharT>","score":0.92650353908538818,"sortText":"40b07695numpunct_byname","textEdit":{"newText":"std::numpunct_byname<${1:typename _CharT}>","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"NUM_ANALOG_INPUTS","insertText":"NUM_ANALOG_INPUTS","insertTextFormat":2,"kind":1,"label":"•NUM_ANALOG_INPUTS","score":0.68351686000823975,"sortText":"40d1050aNUM_ANALOG_INPUTS","textEdit":{"newText":"NUM_ANALOG_INPUTS","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}},{"additionalTextEdits":[{"newText":"#include \"pins_arduino.h\"\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"documentation":{"kind":"markdown","value":"From `\"pins_arduino.h\"`"},"filterText":"NUM_DIGITAL_PINS","insertText":"NUM_DIGITAL_PINS","insertTextFormat":2,"kind":1,"label":"•NUM_DIGITAL_PINS","score":0.68351686000823975,"sortText":"40d1050aNUM_DIGITAL_PINS","textEdit":{"newText":"NUM_DIGITAL_PINS","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}}}}]}}Content-Length: 2202

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'NU'","range":{"end":{"character":43,"line":167},"start":{"character":41,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":151}}
>>>
Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":152},"contentChanges":[{"range":{"start":{"line":167,"character":43},"end":{"line":167,"character":43}},"text":"L"}]},"jsonrpc":"2.0"}Content-Length: 283

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":153},"contentChanges":[{"range":{"start":{"line":167,"character":44},"end":{"line":167,"character":44}},"text":"L"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2203

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'NUL'","range":{"end":{"character":44,"line":167},"start":{"character":41,"line":167}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":152}}Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":168},"start":{"character":0,"line":168}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":153}}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":45},"end":{"line":167,"character":45}},"context":{"diagnostics":[]}},"id":269,"jsonrpc":"2.0"}
<<<
Content-Length: 362

{"id":269,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":45,"line":167},"start":{"character":45,"line":167}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":270,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":270,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":168}},"selectionRange":{"end":{"character":9,"line":168},"start":{"character":5,"line":168}}}]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":44}},"id":271,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":271,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":44},"end":{"line":167,"character":44}},"context":{"diagnostics":[]}},"id":272,"jsonrpc":"2.0"}
<<<
Content-Length: 362

{"id":272,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":44,"line":167},"start":{"character":44,"line":167}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":39}},"id":273,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":273,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":36}},"id":274,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":274,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":30}},"id":275,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":275,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":23}},"id":276,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":276,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":11}},"id":277,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":277,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 578

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":9},"end":{"line":167,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":2},"end":{"line":167,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here"}]}},"id":278,"jsonrpc":"2.0"}
<<<
Content-Length: 641

{"id":278,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":"alarmTasks","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'alarmTask' to 'alarmTasks'"}]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":12},"end":{"line":167,"character":12}},"context":{"diagnostics":[]}},"id":279,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":279,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":13},"end":{"line":167,"character":13}},"context":{"diagnostics":[]}},"id":280,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":280,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 286

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":154},"contentChanges":[{"range":{"start":{"line":167,"character":13},"end":{"line":167,"character":13}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":169},"start":{"character":0,"line":169}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":154}}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":168,"character":2},"end":{"line":168,"character":2}},"context":{"diagnostics":[]}},"id":281,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":281,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":282,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":282,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":172},"start":{"character":0,"line":169}},"selectionRange":{"end":{"character":9,"line":169},"start":{"character":5,"line":169}}}]}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":168,"character":3}},"id":283,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":283,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":168,"character":3},"end":{"line":168,"character":3}},"context":{"diagnostics":[]}},"id":284,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":284,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":168,"character":15}},"id":285,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":285,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 286

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":155},"contentChanges":[{"range":{"start":{"line":168,"character":15},"end":{"line":168,"character":15}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":170},"start":{"character":0,"line":170}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":155}}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":169,"character":3}},"id":286,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":286,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":287,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":287,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":9,"line":170},"start":{"character":5,"line":170}}}]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":169,"character":3},"end":{"line":169,"character":3}},"context":{"diagnostics":[]}},"id":288,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":288,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":169,"character":7},"end":{"line":169,"character":7}},"context":{"diagnostics":[]}},"id":289,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":289,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 5431

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":156},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 89 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 116 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 133 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid alarmTasks(void * parameters);\n#line 152 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  // Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    // success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo; // TODO MOVE IT AS GLOBAL\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n}\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\nvoid alarmTasks(void * parameters){\n  for(;;){\n    Serial.print(\"Roll: \");\n    Serial.print(masterMessage.roll);\n    Serial.print(\"    Pitch: \");\n    Serial.print(masterMessage.pitch);\n    Serial.print(\"    Light: \");\n    Serial.print(masterMessage.lightSensor);\n    Serial.println(\"\");\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n  \n}\n\nxTaskCreate(\n  alarmTask, \n  \"AlarmTask\", \n  1024, NULL, 1, NULL)\nvoid loop()\n{\n\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":169,"character":8}},"id":290,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":4,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":4,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 38

{"id":290,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":291,"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":169,"character":8},"end":{"line":169,"character":8}},"context":{"diagnostics":[]}},"id":292,"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":170},"start":{"character":0,"line":170}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":156}}Content-Length: 6895

{"id":291,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":170}},"selectionRange":{"end":{"character":9,"line":170},"start":{"character":5,"line":170}}}]}Content-Length: 360

{"id":292,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":8,"line":169},"start":{"character":8,"line":169}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":270},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":157},"contentChanges":[{"range":{"start":{"line":169,"character":8},"end":{"line":169,"character":8}},"text":"\n  "}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":271},"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":293,"jsonrpc":"2.0"}Content-Length: 500

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":170,"character":2},"end":{"line":170,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":170,"character":0},"end":{"line":170,"character":4}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]}},"id":294,"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":171},"start":{"character":0,"line":171}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":157}}Content-Length: 6895

{"id":293,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":174},"start":{"character":0,"line":171}},"selectionRange":{"end":{"character":9,"line":171},"start":{"character":5,"line":171}}}]}Content-Length: 854

{"id":294,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":170},"start":{"character":0,"line":170}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":";","range":{"end":{"character":22,"line":169},"start":{"character":22,"line":169}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ';'"},{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":2,"line":170},"start":{"character":2,"line":170}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":170,"character":3}},"id":295,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":295,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 500

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":170,"character":3},"end":{"line":170,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":170,"character":0},"end":{"line":170,"character":4}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]}},"id":296,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":297,"jsonrpc":"2.0"}
<<<
Content-Length: 360

{"id":296,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":3,"line":170},"start":{"character":3,"line":170}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":272},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":170,"character":6},"end":{"line":170,"character":6}},"context":{"diagnostics":[]}},"id":298,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":297,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":174},"start":{"character":0,"line":171}},"selectionRange":{"end":{"character":9,"line":171},"start":{"character":5,"line":171}}}]}Content-Length: 360

{"id":298,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":6,"line":170},"start":{"character":6,"line":170}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":274},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":273},"jsonrpc":"2.0"}Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":170,"character":8}},"id":299,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":299,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":276},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":158},"contentChanges":[{"range":{"start":{"line":170,"character":8},"end":{"line":170,"character":8}},"text":"\n  "}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":275},"jsonrpc":"2.0"}Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":171,"character":3}},"id":300,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":300,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":277},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":171,"character":4},"end":{"line":171,"character":4}},"context":{"diagnostics":[]}},"id":301,"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":172},"start":{"character":0,"line":172}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":158}}Content-Length: 38

{"id":301,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":171,"character":5}},"id":302,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":303,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":302,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":279},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":159},"contentChanges":[{"range":{"start":{"line":171,"character":5},"end":{"line":171,"character":5}},"text":"\n  "}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":278},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":172,"character":2},"end":{"line":172,"character":2}},"context":{"diagnostics":[]}},"id":304,"jsonrpc":"2.0"}
<<<
Content-Length: 114

{"error":{"code":-32801,"message":"Request cancelled because the document was modified"},"id":303,"jsonrpc":"2.0"}Content-Length: 360

{"id":304,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":2,"line":172},"start":{"character":2,"line":172}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":172,"character":3}},"id":305,"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":173},"start":{"character":0,"line":173}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":159}}Content-Length: 38

{"id":305,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":172,"character":6},"end":{"line":172,"character":6}},"context":{"diagnostics":[]}},"id":306,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":307,"jsonrpc":"2.0"}
<<<
Content-Length: 360

{"id":306,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":6,"line":172},"start":{"character":6,"line":172}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":280},"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":307,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":281},"jsonrpc":"2.0"}
<<<
,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":176},"start":{"character":0,"line":173}},"selectionRange":{"end":{"character":9,"line":173},"start":{"character":5,"line":173}}}]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":172,"character":7},"end":{"line":172,"character":7}},"context":{"diagnostics":[]}},"id":308,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":308,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":282},"jsonrpc":"2.0"}Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":172,"character":6}},"id":309,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":309,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":284},"jsonrpc":"2.0"}Content-Length: 284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":160},"contentChanges":[{"range":{"start":{"line":172,"character":6},"end":{"line":172,"character":6}},"text":"\n  "}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":283},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":173,"character":2},"end":{"line":173,"character":2}},"context":{"diagnostics":[]}},"id":310,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":310,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 296

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":161},"contentChanges":[{"range":{"start":{"line":173,"character":0},"end":{"line":173,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":285},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":173,"character":0},"end":{"line":173,"character":0}},"context":{"diagnostics":[]}},"id":311,"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":174},"start":{"character":0,"line":174}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":160}}Content-Length: 38

{"id":311,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":312,"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":174},"start":{"character":0,"line":174}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":161}}Content-Length: 6895

{"id":312,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":177},"start":{"character":0,"line":174}},"selectionRange":{"end":{"character":9,"line":174},"start":{"character":5,"line":174}}}]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":173,"character":0},"end":{"line":173,"character":0}},"context":{"diagnostics":[]}},"id":313,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":313,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":314,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":314,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":177},"start":{"character":0,"line":174}},"selectionRange":{"end":{"character":9,"line":174},"start":{"character":5,"line":174}}}]}
>>>
Content-Length: 5445

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":162},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 89 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 100 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 116 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 133 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid alarmTasks(void * parameters);\n#line 156 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  // Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    // success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo; // TODO MOVE IT AS GLOBAL\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n}\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\nvoid alarmTasks(void * parameters){\n  for(;;){\n    Serial.print(\"Roll: \");\n    Serial.print(masterMessage.roll);\n    Serial.print(\"    Pitch: \");\n    Serial.print(masterMessage.pitch);\n    Serial.print(\"    Light: \");\n    Serial.print(masterMessage.lightSensor);\n    Serial.println(\"\");\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n  \n}\n\nxTaskCreate(\n  alarmTask, \n  \"AlarmTask\", \n  1024, \n  NULL, \n  1, \n  NULL\n)\nvoid loop()\n{\n\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":170,"character":5}},"id":315,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":5,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":5,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 216

{"id":315,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":6,"line":170},"start":{"character":2,"line":170}}}}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":288},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":173,"character":1},"end":{"line":173,"character":1}},"context":{"diagnostics":[]}},"id":316,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":317,"jsonrpc":"2.0"}
<<<
Content-Length: 2016

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:168:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}},"severity":3},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":174},"start":{"character":0,"line":174}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":162}}Content-Length: 38

{"id":316,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":318,"jsonrpc":"2.0"}Content-Length: 784

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":166,"character":1},"end":{"line":173,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":2},"end":{"line":167,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here"},{"range":{"start":{"line":166,"character":0},"end":{"line":166,"character":11}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]}},"id":319,"jsonrpc":"2.0"}
<<<
Content-Length: 6895

{"id":317,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":177},"start":{"character":0,"line":174}},"selectionRange":{"end":{"character":9,"line":174},"start":{"character":5,"line":174}}}]}Content-Length: 6895

{"id":318,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":115},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":132},"start":{"character":0,"line":118}},"selectionRange":{"end":{"character":13,"line":118},"start":{"character":5,"line":118}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":149},"start":{"character":0,"line":134}},"selectionRange":{"end":{"character":16,"line":134},"start":{"character":5,"line":134}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":164},"start":{"character":0,"line":151}},"selectionRange":{"end":{"character":15,"line":151},"start":{"character":5,"line":151}}},{"kind":13,"name":"xTaskCreate","range":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}},"selectionRange":{"end":{"character":11,"line":166},"start":{"character":0,"line":166}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":177},"start":{"character":0,"line":174}},"selectionRange":{"end":{"character":9,"line":174},"start":{"character":5,"line":174}}}]}Content-Length: 641

{"id":319,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":"alarmTasks","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'alarmTask' to 'alarmTasks'"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":289},"jsonrpc":"2.0"}Content-Length: 784

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":166,"character":0},"end":{"line":173,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":167,"character":2},"end":{"line":167,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here"},{"range":{"start":{"line":166,"character":0},"end":{"line":166,"character":11}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]}},"id":320,"jsonrpc":"2.0"}
<<<
Content-Length: 641

{"id":320,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:152:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":"alarmTasks","range":{"end":{"character":11,"line":167},"start":{"character":2,"line":167}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'alarmTask' to 'alarmTasks'"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":290},"jsonrpc":"2.0"}Content-Length: 297

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":163},"contentChanges":[{"range":{"start":{"line":166,"character":0},"end":{"line":173,"character":1}},"rangeLength":75,"text":""}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":291},"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":126,"character":8}},"id":321,"jsonrpc":"2.0"}
<<<
Content-Length: 322

{"id":321,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `digitalWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t val`\n\n---\n```cpp\nvoid digitalWrite(uint8_t pin, uint8_t val)\n```"},"range":{"end":{"character":16,"line":126},"start":{"character":4,"line":126}}}}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":292},"jsonrpc":"2.0"}Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":123,"character":8}},"id":322,"jsonrpc":"2.0"}
<<<
Content-Length: 1041

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":163}}Content-Length: 397

{"id":322,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":123},"start":{"character":4,"line":123}}},{"kind":1,"range":{"end":{"character":16,"line":126},"start":{"character":4,"line":126}}},{"kind":1,"range":{"end":{"character":16,"line":144},"start":{"character":4,"line":144}}},{"kind":1,"range":{"end":{"character":16,"line":146},"start":{"character":4,"line":146}}}]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":123,"character":8},"end":{"line":123,"character":8}},"context":{"diagnostics":[]}},"id":323,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":323,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":293},"jsonrpc":"2.0"}Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":111,"character":8}},"id":324,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":324,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":111,"character":8},"end":{"line":111,"character":8}},"context":{"diagnostics":[]}},"id":325,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":325,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":294},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":295},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":121,"character":4},"end":{"line":121,"character":4}},"context":{"diagnostics":[]}},"id":326,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":326,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":296},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":108,"character":1},"end":{"line":108,"character":1}},"context":{"diagnostics":[]}},"id":327,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":327,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":297},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":106,"character":0},"end":{"line":115,"character":1}},"context":{"diagnostics":[]}},"id":328,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":328,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":107,"character":0},"end":{"line":115,"character":1}},"context":{"diagnostics":[]}},"id":329,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":329,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":115,"character":1},"end":{"line":115,"character":1}},"context":{"diagnostics":[]}},"id":330,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":330,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":114,"character":27},"end":{"line":114,"character":27}},"context":{"diagnostics":[]}},"id":331,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":331,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 286

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":164},"contentChanges":[{"range":{"start":{"line":114,"character":27},"end":{"line":114,"character":27}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1041

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":164}}
>>>
Content-Length: 364

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":165},"contentChanges":[{"range":{"start":{"line":115,"character":2},"end":{"line":115,"character":2}},"text":"xTaskCreate(\n  alarmTask, \n  \"AlarmTask\", \n  1024, \n  NULL, \n  1, \n  NULL\n)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1782

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":123},"start":{"character":0,"line":123}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:53:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":116},"start":{"character":2,"line":116}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:117:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}},"severity":3}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":165}}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":122,"character":1},"end":{"line":122,"character":1}},"context":{"diagnostics":[]}},"id":332,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":332,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":333,"jsonrpc":"2.0"}
<<<
Content-Length: 6695

{"id":333,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":10,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":13,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":16,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":15,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":123},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":10,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":140},"start":{"character":0,"line":126}},"selectionRange":{"end":{"character":13,"line":126},"start":{"character":5,"line":126}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":157},"start":{"character":0,"line":142}},"selectionRange":{"end":{"character":16,"line":142},"start":{"character":5,"line":142}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":172},"start":{"character":0,"line":159}},"selectionRange":{"end":{"character":15,"line":159},"start":{"character":5,"line":159}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":178},"start":{"character":0,"line":175}},"selectionRange":{"end":{"character":9,"line":175},"start":{"character":5,"line":175}}}]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":121,"character":5},"end":{"line":122,"character":1}},"context":{"diagnostics":[]}},"id":334,"jsonrpc":"2.0"}
<<<
Content-Length: 360

{"id":334,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":1,"line":122},"start":{"character":5,"line":121}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 1016

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":106,"character":0},"end":{"line":124,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":123,"character":0},"end":{"line":123,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":116,"character":2},"end":{"line":116,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:53:6: note: 'alarmTasks' declared here"},{"range":{"start":{"line":122,"character":5},"end":{"line":122,"character":15}},"severity":3,"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:117:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?"}]}},"id":335,"jsonrpc":"2.0"}
<<<
Content-Length: 1069

{"id":335,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":123},"start":{"character":0,"line":123}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":";","range":{"end":{"character":1,"line":122},"start":{"character":1,"line":122}}}]}},"kind":"quickfix","title":"insert ';'"},{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:53:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":116},"start":{"character":2,"line":116}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":"alarmTasks","range":{"end":{"character":11,"line":116},"start":{"character":2,"line":116}}}]}},"kind":"quickfix","title":"change 'alarmTask' to 'alarmTasks'"}]}
>>>
Content-Length: 1016

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":107,"character":0},"end":{"line":124,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":123,"character":0},"end":{"line":123,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":116,"character":2},"end":{"line":116,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:53:6: note: 'alarmTasks' declared here"},{"range":{"start":{"line":122,"character":5},"end":{"line":122,"character":15}},"severity":3,"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:117:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?"}]}},"id":336,"jsonrpc":"2.0"}
<<<
Content-Length: 1069

{"id":336,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":123},"start":{"character":0,"line":123}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":";","range":{"end":{"character":1,"line":122},"start":{"character":1,"line":122}}}]}},"kind":"quickfix","title":"insert ';'"},{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:53:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":116},"start":{"character":2,"line":116}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":"alarmTasks","range":{"end":{"character":11,"line":116},"start":{"character":2,"line":116}}}]}},"kind":"quickfix","title":"change 'alarmTask' to 'alarmTasks'"}]}
>>>
Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":166},"contentChanges":[{"range":{"start":{"line":107,"character":0},"end":{"line":124,"character":0}},"rangeLength":236,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1041

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":166}}
>>>
Content-Length: 5094

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":167},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 91 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 124 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid alarmTasks(void * parameters);\n#line 140 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  // Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    // success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo; // TODO MOVE IT AS GLOBAL\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\nvoid alarmTasks(void * parameters){\n  for(;;){\n    Serial.print(\"Roll: \");\n    Serial.print(masterMessage.roll);\n    Serial.print(\"    Pitch: \");\n    Serial.print(masterMessage.pitch);\n    Serial.print(\"    Light: \");\n    Serial.print(masterMessage.lightSensor);\n    Serial.println(\"\");\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n  \n}\n\n\nvoid loop()\n{\n\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":168},"contentChanges":[{"range":{"start":{"line":154,"character":0},"end":{"line":154,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}Content-Length: 282

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":169},"contentChanges":[{"range":{"start":{"line":155,"character":0},"end":{"line":155,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}Content-Length: 535

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":170},"contentChanges":[{"range":{"start":{"line":155,"character":0},"end":{"line":155,"character":0}},"text":"void setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n  xTaskCreate(\n  alarmTask, \n  \"AlarmTask\", \n  1024, \n  NULL, \n  1, \n  NULL\n)\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":7}},"id":337,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":6,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 670

{"id":337,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `xTaskCreate`  \n\n---\n→ `BaseType_t`  \nParameters:  \n- `TaskFunction_t pvTaskCode`\n- `const char *const pcName`\n- `const uint32_t usStackDepth`\n- `void *const pvParameters`\n- `UBaseType_t uxPriority`\n- `TaskHandle_t *const pvCreatedTask`\n\n---\n```cpp\nstatic inline BaseType_t\nxTaskCreate(TaskFunction_t pvTaskCode, const char *const pcName,\n            const uint32_t usStackDepth, void *const pvParameters,\n            UBaseType_t uxPriority, TaskHandle_t *const pvCreatedTask)\n```"},"range":{"end":{"character":7,"line":167},"start":{"character":6,"line":167}}}}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":338,"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":307},"jsonrpc":"2.0"}Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":169,"character":6}},"id":339,"jsonrpc":"2.0"}
<<<
Content-Length: 1785

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":171}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":164},"start":{"character":2,"line":164}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:165:3: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":140},"start":{"character":5,"line":140}},"severity":3}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":170}}Content-Length: 6505

{"id":338,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":13,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":16,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":15,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":9,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":63},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":15,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":65}},"selectionRange":{"end":{"character":15,"line":65},"start":{"character":5,"line":65}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":103},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":15,"line":77},"start":{"character":5,"line":77}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":121},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":13,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":138},"start":{"character":0,"line":123}},"selectionRange":{"end":{"character":16,"line":123},"start":{"character":5,"line":123}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":140}},"selectionRange":{"end":{"character":15,"line":140},"start":{"character":5,"line":140}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":10,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":178},"start":{"character":0,"line":175}},"selectionRange":{"end":{"character":9,"line":175},"start":{"character":5,"line":175}}}]}Content-Length: 38

{"id":339,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":169,"character":6},"end":{"line":169,"character":6}},"context":{"diagnostics":[]}},"id":340,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":341,"jsonrpc":"2.0"}
<<<
Content-Length: 360

{"id":340,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":6,"line":169},"start":{"character":6,"line":169}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":169,"character":4},"end":{"line":169,"character":4}},"context":{"diagnostics":[]}},"id":342,"jsonrpc":"2.0"}
<<<
Content-Length: 6505

{"id":341,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":13,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":16,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":15,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":9,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":63},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":15,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":65}},"selectionRange":{"end":{"character":15,"line":65},"start":{"character":5,"line":65}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":103},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":15,"line":77},"start":{"character":5,"line":77}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":121},"start":{"character":0,"line":107}},"selectionRange":{"end":{"character":13,"line":107},"start":{"character":5,"line":107}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":138},"start":{"character":0,"line":123}},"selectionRange":{"end":{"character":16,"line":123},"start":{"character":5,"line":123}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":140}},"selectionRange":{"end":{"character":15,"line":140},"start":{"character":5,"line":140}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":10,"line":155},"start":{"character":5,"line":155}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":178},"start":{"character":0,"line":175}},"selectionRange":{"end":{"character":9,"line":175},"start":{"character":5,"line":175}}}]}Content-Length: 360

{"id":342,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":4,"line":169},"start":{"character":4,"line":169}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":309},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":308},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":170,"character":1},"end":{"line":170,"character":1}},"context":{"diagnostics":[]}},"id":343,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":343,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":310},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":162,"character":0},"end":{"line":170,"character":1}},"context":{"diagnostics":[]}},"id":344,"jsonrpc":"2.0"}
<<<
Content-Length: 364

{"id":344,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":1,"line":170},"start":{"character":0,"line":162}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":311},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":157,"character":0},"end":{"line":170,"character":1}},"context":{"diagnostics":[]}},"id":345,"jsonrpc":"2.0"}
<<<
Content-Length: 364

{"id":345,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":1,"line":170},"start":{"character":0,"line":157}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":312},"jsonrpc":"2.0"}Content-Length: 275

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":165,"character":10},"end":{"line":170,"character":1}},"context":{"diagnostics":[]}},"id":346,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":346,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":313},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":163,"character":0},"end":{"line":170,"character":1}},"context":{"diagnostics":[]}},"id":347,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":347,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":314},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":0},"end":{"line":170,"character":1}},"context":{"diagnostics":[]}},"id":348,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":348,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":315},"jsonrpc":"2.0"}Content-Length: 578

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":0},"end":{"line":170,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":164,"character":2},"end":{"line":164,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here"}]}},"id":349,"jsonrpc":"2.0"}
<<<
Content-Length: 641

{"id":349,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here","range":{"end":{"character":11,"line":164},"start":{"character":2,"line":164}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":"alarmTasks","range":{"end":{"character":11,"line":164},"start":{"character":2,"line":164}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'alarmTask' to 'alarmTasks'"}]}
>>>
Content-Length: 942

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":177},"contentChanges":[{"range":{"start":{"line":170,"character":0},"end":{"line":170,"character":0}},"text":"  "},{"range":{"start":{"line":169,"character":0},"end":{"line":169,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":168,"character":0},"end":{"line":168,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":167,"character":0},"end":{"line":167,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":166,"character":0},"end":{"line":166,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":165,"character":0},"end":{"line":165,"character":2}},"rangeLength":2,"text":"    "},{"range":{"start":{"line":164,"character":0},"end":{"line":164,"character":2}},"rangeLength":2,"text":"    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1785

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":171},"start":{"character":0,"line":171}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here","range":{"end":{"character":13,"line":164},"start":{"character":4,"line":164}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:165:5: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":140},"start":{"character":5,"line":140}},"severity":3}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":177}}
>>>
Content-Length: 578

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":0},"end":{"line":170,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":164,"character":4},"end":{"line":164,"character":13}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here"}]}},"id":350,"jsonrpc":"2.0"}
<<<
Content-Length: 641

{"id":350,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here","range":{"end":{"character":13,"line":164},"start":{"character":4,"line":164}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":"alarmTasks","range":{"end":{"character":13,"line":164},"start":{"character":4,"line":164}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'alarmTask' to 'alarmTasks'"}]}
>>>
Content-Length: 578

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":164,"character":0},"end":{"line":170,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":164,"character":4},"end":{"line":164,"character":13}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here"}]}},"id":351,"jsonrpc":"2.0"}
<<<
Content-Length: 641

{"id":351,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here","range":{"end":{"character":13,"line":164},"start":{"character":4,"line":164}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":"alarmTasks","range":{"end":{"character":13,"line":164},"start":{"character":4,"line":164}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'alarmTask' to 'alarmTasks'"}]}
>>>
Content-Length: 5467

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":178},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 91 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 124 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid alarmTasks(void * parameters);\n#line 139 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 159 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  // Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    // success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo; // TODO MOVE IT AS GLOBAL\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\nvoid alarmTasks(void * parameters){\n  for(;;){\n    Serial.print(\"Roll: \");\n    Serial.print(masterMessage.roll);\n    Serial.print(\"    Pitch: \");\n    Serial.print(masterMessage.pitch);\n    Serial.print(\"    Light: \");\n    Serial.print(masterMessage.lightSensor);\n    Serial.println(\"\");\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n  \n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n  xTaskCreate(\n    alarmTask, \n    \"AlarmTask\", \n    1024, \n    NULL, \n    1, \n    NULL\n  )\n}\n\n\n\nvoid loop()\n{\n\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":167,"character":8},"end":{"line":167,"character":8}},"context":{"diagnostics":[]}},"id":352,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":7,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":7,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1785

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":173}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:143:6: note: 'alarmTasks' declared here","range":{"end":{"character":13,"line":166},"start":{"character":4,"line":166}},"severity":1,"source":"clang"},{"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:167:5: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?","range":{"end":{"character":15,"line":142},"start":{"character":5,"line":142}},"severity":3}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":178}}Content-Length: 38

{"id":352,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":353,"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":167,"character":7}},"id":354,"jsonrpc":"2.0"}
<<<
Content-Length: 6695

{"id":353,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":13,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":16,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":15,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":10,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":123},"start":{"character":0,"line":109}},"selectionRange":{"end":{"character":13,"line":109},"start":{"character":5,"line":109}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":140},"start":{"character":0,"line":125}},"selectionRange":{"end":{"character":16,"line":125},"start":{"character":5,"line":125}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":155},"start":{"character":0,"line":142}},"selectionRange":{"end":{"character":15,"line":142},"start":{"character":5,"line":142}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":157}},"selectionRange":{"end":{"character":10,"line":157},"start":{"character":5,"line":157}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":180},"start":{"character":0,"line":177}},"selectionRange":{"end":{"character":9,"line":177},"start":{"character":5,"line":177}}}]}Content-Length: 40

{"id":354,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":321},"jsonrpc":"2.0"}Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":166,"character":7}},"id":355,"jsonrpc":"2.0"}Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":356,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":355,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":50},"start":{"character":5,"line":50}}},{"kind":1,"range":{"end":{"character":15,"line":142},"start":{"character":5,"line":142}}},{"kind":1,"range":{"end":{"character":13,"line":166},"start":{"character":4,"line":166}}}]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":166,"character":7}},"id":357,"jsonrpc":"2.0"}
<<<
Content-Length: 6695

{"id":356,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":13,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":16,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":34,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":15,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":10,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":123},"start":{"character":0,"line":109}},"selectionRange":{"end":{"character":13,"line":109},"start":{"character":5,"line":109}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":140},"start":{"character":0,"line":125}},"selectionRange":{"end":{"character":16,"line":125},"start":{"character":5,"line":125}}},{"kind":12,"name":"alarmTasks","range":{"end":{"character":1,"line":155},"start":{"character":0,"line":142}},"selectionRange":{"end":{"character":15,"line":142},"start":{"character":5,"line":142}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":157}},"selectionRange":{"end":{"character":10,"line":157},"start":{"character":5,"line":157}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":180},"start":{"character":0,"line":177}},"selectionRange":{"end":{"character":9,"line":177},"start":{"character":5,"line":177}}}]}Content-Length: 325

{"id":357,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `alarmTasks`  \n\n---\n→ `void`  \nParameters:  \n- `void * parameters`\n\nPassed as pvTaskCode  \n\n---\n```cpp\nvoid alarmTasks(void *parameters)\n```"},"range":{"end":{"character":13,"line":166},"start":{"character":4,"line":166}}}}
>>>
Content-Length: 578

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":166,"character":7},"end":{"line":166,"character":7}},"context":{"diagnostics":[{"range":{"start":{"line":166,"character":4},"end":{"line":166,"character":13}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'? (fix available)\n\nEsp_Slave.ino.cpp:141:6: note: 'alarmTasks' declared here"}]}},"id":358,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":358,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":320},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":323},"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":159,"character":8}},"id":359,"jsonrpc":"2.0"}
<<<
Content-Length: 620

{"id":359,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `begin`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long baud`\n- `uint32_t config = 134217756`\n- `int8_t rxPin = -1`\n- `int8_t txPin = -1`\n- `bool invert = false`\n- `unsigned long timeout_ms = 20000UL`\n\n---\n```cpp\n// In HardwareSerial\npublic: void begin(unsigned long baud, uint32_t config = 134217756, int8_t rxPin = -1,\n           int8_t txPin = -1, bool invert = false,\n           unsigned long timeout_ms = 20000UL)\n```"},"range":{"end":{"character":8,"line":159},"start":{"character":2,"line":159}}}}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":325},"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":144,"character":9}},"id":360,"jsonrpc":"2.0"}
<<<
Content-Length: 270

{"id":360,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":10,"line":144},"start":{"character":4,"line":144}}}}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":326},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":322},"jsonrpc":"2.0"}Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":142,"character":13}},"id":361,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":361,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":50},"start":{"character":5,"line":50}}},{"kind":1,"range":{"end":{"character":15,"line":142},"start":{"character":5,"line":142}}},{"kind":1,"range":{"end":{"character":13,"line":166},"start":{"character":4,"line":166}}}]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":142,"character":13}},"id":362,"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"id":362,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `alarmTasks`  \n\n---\n→ `void`  \nParameters:  \n- `void * parameters`\n\n---\n```cpp\nvoid alarmTasks(void *parameters)\n```"},"range":{"end":{"character":15,"line":142},"start":{"character":5,"line":142}}}}
>>>
Content-Length: 512

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":142,"character":14},"end":{"line":142,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":142,"character":5},"end":{"line":142,"character":15}},"severity":3,"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:165:5: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?"}]}},"id":363,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":363,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":324},"jsonrpc":"2.0"}Content-Length: 511

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":142,"character":5},"end":{"line":142,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":142,"character":5},"end":{"line":142,"character":15}},"severity":3,"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:165:5: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?"}]}},"id":364,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":364,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":328},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":142,"character":13}},"id":365,"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"id":365,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `alarmTasks`  \n\n---\n→ `void`  \nParameters:  \n- `void * parameters`\n\n---\n```cpp\nvoid alarmTasks(void *parameters)\n```"},"range":{"end":{"character":15,"line":142},"start":{"character":5,"line":142}}}}
>>>
Content-Length: 512

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":142,"character":5},"end":{"line":142,"character":15}},"severity":3,"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:165:5: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?"}]}},"id":366,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":366,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":329},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":327},"jsonrpc":"2.0"}Content-Length: 298

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":179},"contentChanges":[{"range":{"start":{"line":142,"character":14},"end":{"line":142,"character":15}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":330},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":332},"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":331},"jsonrpc":"2.0"}Content-Length: 512

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":142,"character":14},"end":{"line":142,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":142,"character":5},"end":{"line":142,"character":15}},"severity":3,"message":"'alarmTasks' declared here\n\nEsp_Slave.ino.cpp:165:5: error: use of undeclared identifier 'alarmTask'; did you mean 'alarmTasks'?"}]}},"id":367,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":367,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":142,"character":13}},"id":368,"jsonrpc":"2.0"}
<<<
Content-Length: 1243

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":173}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":179}}Content-Length: 297

{"id":368,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `alarmTask`  \n\n---\n→ `void`  \nParameters:  \n- `void * parameters`\n\n---\n```cpp\nvoid alarmTask(void *parameters)\n```"},"range":{"end":{"character":14,"line":142},"start":{"character":5,"line":142}}}}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":334},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":152,"character":22}},"id":369,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"id":369,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `portTICK_PERIOD_MS`  \n\n---\n```cpp\n#define portTICK_PERIOD_MS ((TickType_t)1000 / configTICK_RATE_HZ)\n```"},"range":{"end":{"character":37,"line":152},"start":{"character":19,"line":152}}}}
>>>
Content-Length: 206

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":152,"character":23}},"id":370,"jsonrpc":"2.0"}
<<<
Content-Length: 240

{"id":370,"jsonrpc":"2.0","result":[{"range":{"end":{"character":26,"line":365},"start":{"character":8,"line":365}},"uri":"file:///home/manos/.arduino15/packages/esp32/hardware/esp32/1.0.6/tools/sdk/include/freertos/freertos/portmacro.h"}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":335},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":160,"character":13}},"id":371,"jsonrpc":"2.0"}
<<<
Content-Length: 246

{"id":371,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `initESPNOW`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid initESPNOW()\n```"},"range":{"end":{"character":14,"line":160},"start":{"character":13,"line":160}}}}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":337},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":142,"character":14},"end":{"line":142,"character":14}},"context":{"diagnostics":[]}},"id":372,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":372,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":142,"character":14},"end":{"line":142,"character":14}},"context":{"diagnostics":[]}},"id":373,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":373,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 5465

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":180},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 91 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 124 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid alarmTask(void * parameters);\n#line 139 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 159 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  // Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    // success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo; // TODO MOVE IT AS GLOBAL\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\nvoid alarmTask(void * parameters){\n  for(;;){\n    Serial.print(\"Roll: \");\n    Serial.print(masterMessage.roll);\n    Serial.print(\"    Pitch: \");\n    Serial.print(masterMessage.pitch);\n    Serial.print(\"    Light: \");\n    Serial.print(masterMessage.lightSensor);\n    Serial.println(\"\");\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n  \n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n  xTaskCreate(\n    alarmTask, \n    \"AlarmTask\", \n    1024, \n    NULL, \n    1, \n    NULL\n  )\n}\n\n\n\nvoid loop()\n{\n\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 201

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":168,"character":10}},"id":374,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":8,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":8,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1243

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":173}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":180}}Content-Length: 40

{"id":374,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 171

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"}},"id":375,"jsonrpc":"2.0"}Content-Length: 64

{"method":"$/cancelRequest","params":{"id":340},"jsonrpc":"2.0"}Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":157,"character":5}},"id":376,"jsonrpc":"2.0"}
<<<
Content-Length: 6693

{"id":375,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":13,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":16,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"alarmTask","range":{"end":{"character":33,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":14,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":10,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":123},"start":{"character":0,"line":109}},"selectionRange":{"end":{"character":13,"line":109},"start":{"character":5,"line":109}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":140},"start":{"character":0,"line":125}},"selectionRange":{"end":{"character":16,"line":125},"start":{"character":5,"line":125}}},{"kind":12,"name":"alarmTask","range":{"end":{"character":1,"line":155},"start":{"character":0,"line":142}},"selectionRange":{"end":{"character":14,"line":142},"start":{"character":5,"line":142}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":157}},"selectionRange":{"end":{"character":10,"line":157},"start":{"character":5,"line":157}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":180},"start":{"character":0,"line":177}},"selectionRange":{"end":{"character":9,"line":177},"start":{"character":5,"line":177}}}]}Content-Length: 235

{"id":376,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `setup`  \n\n---\n→ `void`  \n\n---\n```cpp\nvoid setup()\n```"},"range":{"end":{"character":10,"line":157},"start":{"character":5,"line":157}}}}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":157,"character":5}},"id":377,"jsonrpc":"2.0"}
<<<
Content-Length: 215

{"id":377,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":10,"line":52},"start":{"character":5,"line":52}}},{"kind":1,"range":{"end":{"character":10,"line":157},"start":{"character":5,"line":157}}}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":341},"jsonrpc":"2.0"}Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":157,"character":5},"end":{"line":157,"character":5}},"context":{"diagnostics":[]}},"id":378,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":378,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":157,"character":5},"end":{"line":157,"character":5}},"context":{"diagnostics":[]}},"id":379,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":379,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 213

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":161,"character":16}},"id":380,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":380,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":161,"character":16},"end":{"line":161,"character":16}},"context":{"diagnostics":[]}},"id":381,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":381,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":171,"character":8}},"id":382,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":382,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":171,"character":8},"end":{"line":171,"character":8}},"context":{"diagnostics":[]}},"id":383,"jsonrpc":"2.0"}
<<<
Content-Length: 360

{"id":383,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":8,"line":171},"start":{"character":8,"line":171}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":172,"character":3},"end":{"line":172,"character":3}},"context":{"diagnostics":[]}},"id":384,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":384,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 475

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":173,"character":1},"end":{"line":173,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":173,"character":0},"end":{"line":173,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]}},"id":385,"jsonrpc":"2.0"}
<<<
Content-Length: 504

{"id":385,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":173}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp":[{"newText":";","range":{"end":{"character":3,"line":172},"start":{"character":3,"line":172}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ';'"}]}
>>>
Content-Length: 200

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":171,"character":4}},"id":386,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":386,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `NULL`  \n\n---\n```cpp\n#define NULL __null\n```"},"range":{"end":{"character":8,"line":171},"start":{"character":4,"line":171}}}}
>>>
Content-Length: 212

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"position":{"line":171,"character":4}},"id":387,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":387,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":171,"character":4},"end":{"line":171,"character":4}},"context":{"diagnostics":[]}},"id":388,"jsonrpc":"2.0"}
<<<
Content-Length: 360

{"id":388,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","selection":{"end":{"character":4,"line":171},"start":{"character":4,"line":171}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'NULL'"},"kind":"refactor","title":"Expand macro 'NULL'"}]}
>>>
Content-Length: 281

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":181},"contentChanges":[{"range":{"start":{"line":172,"character":3},"end":{"line":172,"character":3}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1041

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp","version":181}}
>>>
Content-Length: 274

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server785540692/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":172,"character":4},"end":{"line":172,"character":4}},"context":{"diagnostics":[]}},"id":389,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":389,"jsonrpc":"2.0","result":[]}<<< Read Error: read |0: file already closed
--- Stream closed, err=%!s(<nil>)







Started logging.

>>>
Content-Length: 2097

{"method":"initialize","params":{"processId":25093,"rootPath":"/tmp/arduino-language-server562583353/sketch","rootUri":"file:///tmp/arduino-language-server562583353/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 5460

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server562583353/sketch/Esp_Slave.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\n#include \u003cSPI.h\u003e\n#include \u003cAdafruit_GFX.h\u003e\n\n// For WIFI and TwoWayCom\n#include \u003cesp_now.h\u003e\n#include \u003cWiFi.h\u003e\n\nconst int rightPin=27;\nconst int leftPin=25;\nconst int lightPin=26;\n\n//Receiver MAC Address\n// MASTER : 10:52:1C:67:C5:2C\nuint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x67, 0xC5, 0x2C};\n\n// Define the struct that contains the message content\n// for our purposes we import the accelerometer readings \ntypedef struct messageFromMaster {\n  float roll;\n  float pitch;\n  int lightSensor;\n} messageFromMaster;\n\ntypedef struct struct_message {\n  bool imuUsage;\n} struct_message;\n// Define the struct_message\nstruct_message slaveMessage; // more accurate name of this structure (the message that sends to the Master)\n// TO_DO -\u003e Change the struct because we will get different content (ie, pin to trigger the flashes)\nmessageFromMaster masterMessage;\n// Variable to store if sending data was successful\nString success;\nfloat receivedRoll,receivedPitch;\nint receivedLight;\n\n\n// Callback Function that sents message\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);\n#line 49 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len);\n#line 61 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid initESPNOW();\n#line 91 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid blinking(int pin);\n#line 107 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid checkAlarms();\n#line 124 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid alarmTask(void * parameters);\n#line 139 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid setup();\n#line 159 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid loop();\n#line 38 \"/home/manos/Documents/IOT_SmartHelmet_project/Esp_Slave/Esp_Slave.ino\"\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status){\n  // Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n  if (status == 0){\n    // success = \"Delivery Success :)\";\n  }\n  else{\n    // success = \"Delivery Fail :(\";\n  }\n}\n// Callback Function that triggered when a new packet arrives\nvoid OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len){\n  memcpy(\u0026masterMessage,incomingData, sizeof(masterMessage));\n  //Just for debug\n  // Serial.print(\"Bytes received: \");\n  // Serial.println(len);\n\n  // Write the data that have been sent\n  receivedRoll = masterMessage.roll;\n  receivedPitch = masterMessage.pitch;\n  receivedLight = masterMessage.lightSensor;\n}\n\nvoid initESPNOW(){\n  WiFi.mode(WIFI_MODE_STA);\n  Serial.println(WiFi.macAddress());\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  esp_now_peer_info_t peerInfo; // TODO MOVE IT AS GLOBAL\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(\u0026peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n  // Register for a callback function that will be called when data is received\n  esp_now_register_recv_cb(OnDataRecv);\n}\n\n\n\nvoid blinking(int pin){\n  /*\n  Blinking the alarm 5 times (about 1 second procedure)\n  */\n  for(int k=0; k\u003c=5; k++){\n    digitalWrite(pin,HIGH);\n    vTaskDelay(200/portTICK_PERIOD_MS);\n    // delay(200);\n    digitalWrite(pin,LOW);\n    // delay(300);\n    vTaskDelay(300/portTICK_PERIOD_MS);\n\n    \n  }\n}\n\nvoid checkAlarms(){\n  if (masterMessage.roll\u003c-30){\n    //Enable Ligh LEFT\n    blinking(leftPin);\n  }\n  else if (masterMessage.roll\u003e30){\n    // Enable light Right     \n    blinking(rightPin);\n  }\n  if (masterMessage.lightSensor\u003c 800){\n    digitalWrite(lightPin,HIGH);\n  }else{\n    digitalWrite(lightPin,LOW);\n  \n  }\n}\n\nvoid alarmTask(void * parameters){\n  for(;;){\n    Serial.print(\"Roll: \");\n    Serial.print(masterMessage.roll);\n    Serial.print(\"    Pitch: \");\n    Serial.print(masterMessage.pitch);\n    Serial.print(\"    Light: \");\n    Serial.print(masterMessage.lightSensor);\n    Serial.println(\"\");\n    checkAlarms();\n    vTaskDelay(500/portTICK_PERIOD_MS);\n  }\n  \n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  initESPNOW();\n  // Init alarms\n  pinMode(leftPin,OUTPUT);\n  pinMode(rightPin, OUTPUT);\n  pinMode(lightPin,OUTPUT);\n  xTaskCreate(\n    alarmTask, \n    \"AlarmTask\", \n    1024, \n    NULL, \n    1, \n    NULL\n  );\n}\n\n\n\nvoid loop()\n{\n\n}\n"}},"jsonrpc":"2.0"}Content-Length: 169

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server562583353/sketch/Esp_Slave.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 272

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///tmp/arduino-language-server562583353/sketch/Esp_Slave.ino.cpp"},"range":{"start":{"line":66,"character":19},"end":{"line":66,"character":19}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/58","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/58","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/58","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/58","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/58","percentage":1.7241379310344827}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/58","percentage":1.7241379310344827}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/58","percentage":3.4482758620689653}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/58","percentage":3.4482758620689653}}}Content-Length: 1039

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"drv_unknown_argument","message":"Unknown argument: '-fstrict-volatile-bitfields'","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"drv_unknown_argument_with_suggestion","message":"Unknown argument '-mlongcalls'; did you mean '-mlong-calls'?","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"In included file: unknown type name 'pthread_t'\n\n/home/manos/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-97-gc752ad5-5.2.0/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf/bits/gthr-default.h:47:9:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///tmp/arduino-language-server562583353/sketch/Esp_Slave.ino.cpp","version":1}}Content-Length: 6691

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"rightPin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"leftPin","range":{"end":{"character":20,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":17,"line":10},"start":{"character":10,"line":10}}},{"kind":13,"name":"lightPin","range":{"end":{"character":21,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":18,"line":11},"start":{"character":10,"line":11}}},{"kind":13,"name":"broadcastAddress","range":{"end":{"character":65,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":24,"line":15},"start":{"character":8,"line":15}}},{"children":[{"kind":8,"name":"roll","range":{"end":{"character":12,"line":20},"start":{"character":2,"line":20}},"selectionRange":{"end":{"character":12,"line":20},"start":{"character":8,"line":20}}},{"kind":8,"name":"pitch","range":{"end":{"character":13,"line":21},"start":{"character":2,"line":21}},"selectionRange":{"end":{"character":13,"line":21},"start":{"character":8,"line":21}}},{"kind":8,"name":"lightSensor","range":{"end":{"character":17,"line":22},"start":{"character":2,"line":22}},"selectionRange":{"end":{"character":17,"line":22},"start":{"character":6,"line":22}}}],"kind":23,"name":"messageFromMaster","range":{"end":{"character":1,"line":23},"start":{"character":8,"line":19}},"selectionRange":{"end":{"character":32,"line":19},"start":{"character":15,"line":19}}},{"kind":5,"name":"messageFromMaster","range":{"end":{"character":19,"line":23},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":19,"line":23},"start":{"character":2,"line":23}}},{"children":[{"kind":8,"name":"imuUsage","range":{"end":{"character":15,"line":26},"start":{"character":2,"line":26}},"selectionRange":{"end":{"character":15,"line":26},"start":{"character":7,"line":26}}}],"kind":23,"name":"struct_message","range":{"end":{"character":1,"line":27},"start":{"character":8,"line":25}},"selectionRange":{"end":{"character":29,"line":25},"start":{"character":15,"line":25}}},{"kind":5,"name":"struct_message","range":{"end":{"character":16,"line":27},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":16,"line":27},"start":{"character":2,"line":27}}},{"kind":13,"name":"slaveMessage","range":{"end":{"character":27,"line":29},"start":{"character":0,"line":29}},"selectionRange":{"end":{"character":27,"line":29},"start":{"character":15,"line":29}}},{"kind":13,"name":"masterMessage","range":{"end":{"character":31,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":31,"line":31},"start":{"character":18,"line":31}}},{"kind":13,"name":"success","range":{"end":{"character":14,"line":33},"start":{"character":0,"line":33}},"selectionRange":{"end":{"character":14,"line":33},"start":{"character":7,"line":33}}},{"kind":13,"name":"receivedRoll","range":{"end":{"character":18,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":18,"line":34},"start":{"character":6,"line":34}}},{"kind":13,"name":"receivedPitch","range":{"end":{"character":32,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":32,"line":34},"start":{"character":19,"line":34}}},{"kind":13,"name":"receivedLight","range":{"end":{"character":17,"line":35},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":4,"line":35}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":70,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":15,"line":40},"start":{"character":5,"line":40}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":74,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":15,"line":42},"start":{"character":5,"line":42}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":17,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":15,"line":44},"start":{"character":5,"line":44}}},{"kind":12,"name":"blinking","range":{"end":{"character":22,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":13,"line":46},"start":{"character":5,"line":46}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":18,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":16,"line":48},"start":{"character":5,"line":48}}},{"kind":12,"name":"alarmTask","range":{"end":{"character":33,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":14,"line":50},"start":{"character":5,"line":50}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":10,"line":52},"start":{"character":5,"line":52}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":9,"line":54},"start":{"character":5,"line":54}}},{"kind":12,"name":"OnDataSent","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":15,"line":56},"start":{"character":5,"line":56}}},{"kind":12,"name":"OnDataRecv","range":{"end":{"character":1,"line":77},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":15,"line":67},"start":{"character":5,"line":67}}},{"kind":12,"name":"initESPNOW","range":{"end":{"character":1,"line":105},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":15,"line":79},"start":{"character":5,"line":79}}},{"kind":12,"name":"blinking","range":{"end":{"character":1,"line":123},"start":{"character":0,"line":109}},"selectionRange":{"end":{"character":13,"line":109},"start":{"character":5,"line":109}}},{"kind":12,"name":"checkAlarms","range":{"end":{"character":1,"line":140},"start":{"character":0,"line":125}},"selectionRange":{"end":{"character":16,"line":125},"start":{"character":5,"line":125}}},{"kind":12,"name":"alarmTask","range":{"end":{"character":1,"line":155},"start":{"character":0,"line":142}},"selectionRange":{"end":{"character":14,"line":142},"start":{"character":5,"line":142}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":173},"start":{"character":0,"line":157}},"selectionRange":{"end":{"character":10,"line":157},"start":{"character":5,"line":157}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":180},"start":{"character":0,"line":177}},"selectionRange":{"end":{"character":9,"line":177},"start":{"character":5,"line":177}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/58","percentage":5.1724137931034484}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/58","percentage":5.1724137931034484}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/58","percentage":6.8965517241379306}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/58","percentage":6.8965517241379306}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/58","percentage":8.6206896551724146}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/58","percentage":8.6206896551724146}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/58","percentage":10.344827586206897}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/58","percentage":10.344827586206897}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/58","percentage":12.068965517241379}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/58","percentage":12.068965517241379}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/58","percentage":13.793103448275861}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/58","percentage":13.793103448275861}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/58","percentage":15.517241379310345}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/58","percentage":15.517241379310345}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/58","percentage":17.241379310344829}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/58","percentage":17.241379310344829}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/58","percentage":18.96551724137931}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/58","percentage":18.96551724137931}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/58","percentage":20.689655172413794}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/58","percentage":20.689655172413794}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/58","percentage":22.413793103448278}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/58","percentage":22.413793103448278}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/58","percentage":24.137931034482758}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/58","percentage":24.137931034482758}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/58","percentage":25.862068965517242}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/58","percentage":25.862068965517242}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/58","percentage":27.586206896551722}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/58","percentage":27.586206896551722}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/58","percentage":29.310344827586206}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/58","percentage":29.310344827586206}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/58","percentage":31.03448275862069}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/58","percentage":31.03448275862069}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/58","percentage":32.758620689655174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/58","percentage":32.758620689655174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/58","percentage":34.482758620689658}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/58","percentage":34.482758620689658}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/58","percentage":36.206896551724135}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/58","percentage":36.206896551724135}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/58","percentage":37.931034482758619}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/58","percentage":37.931034482758619}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/58","percentage":39.655172413793103}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/58","percentage":39.655172413793103}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/58","percentage":41.379310344827587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/58","percentage":41.379310344827587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/58","percentage":43.103448275862071}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/58","percentage":43.103448275862071}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/58","percentage":44.827586206896555}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/58","percentage":44.827586206896555}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/58","percentage":46.551724137931032}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/58","percentage":46.551724137931032}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/58","percentage":48.275862068965516}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/58","percentage":48.275862068965516}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"29/58","percentage":50}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"29/58","percentage":50}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"30/58","percentage":51.724137931034484}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"30/58","percentage":51.724137931034484}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"31/58","percentage":53.448275862068968}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"31/58","percentage":53.448275862068968}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"32/58","percentage":55.172413793103445}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"32/58","percentage":55.172413793103445}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"33/58","percentage":56.896551724137929}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"33/58","percentage":56.896551724137929}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"34/58","percentage":58.620689655172413}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"34/58","percentage":58.620689655172413}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"35/58","percentage":60.344827586206897}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"35/58","percentage":60.344827586206897}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"36/58","percentage":62.068965517241381}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"36/58","percentage":62.068965517241381}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"37/58","percentage":63.793103448275865}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"37/58","percentage":63.793103448275865}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"38/58","percentage":65.517241379310349}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"38/58","percentage":65.517241379310349}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"39/58","percentage":67.241379310344826}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"39/58","percentage":67.241379310344826}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"40/58","percentage":68.965517241379317}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"40/58","percentage":68.965517241379317}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"41/58","percentage":70.689655172413794}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"41/58","percentage":70.689655172413794}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"42/58","percentage":72.41379310344827}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"42/58","percentage":72.41379310344827}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"43/58","percentage":74.137931034482762}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"43/58","percentage":74.137931034482762}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"44/58","percentage":75.862068965517238}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"44/58","percentage":75.862068965517238}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"45/58","percentage":77.58620689655173}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"45/58","percentage":77.58620689655173}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"46/58","percentage":79.310344827586206}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"46/58","percentage":79.310344827586206}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"47/58","percentage":81.034482758620683}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"47/58","percentage":81.034482758620683}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"48/58","percentage":82.758620689655174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"48/58","percentage":82.758620689655174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"49/58","percentage":84.482758620689651}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"49/58","percentage":84.482758620689651}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"50/58","percentage":86.206896551724142}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"50/58","percentage":86.206896551724142}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"51/58","percentage":87.931034482758619}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"51/58","percentage":87.931034482758619}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"52/58","percentage":89.65517241379311}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"52/58","percentage":89.65517241379311}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"53/58","percentage":91.379310344827587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"53/58","percentage":91.379310344827587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"54/58","percentage":93.103448275862064}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"54/58","percentage":93.103448275862064}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"55/58","percentage":94.827586206896555}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"56/58","percentage":96.551724137931032}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"57/58","percentage":98.275862068965523}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 58

{"method":"shutdown","params":null,"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":3,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 47

{"method":"exit","params":null,"jsonrpc":"2.0"}